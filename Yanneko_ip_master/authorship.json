[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"}"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"}"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"}"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"}"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"    mainClassName \u003d \"Duke\""},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"}"},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":"}"},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":"}"},{"lineNumber":57,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":60}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":57,"author":{"gitId":"Yanneko"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"Yanneko"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"Yanneko"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"Yanneko"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"Yanneko"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":65,"author":{"gitId":"Yanneko"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":67,"author":{"gitId":"Yanneko"},"content":":init"},{"lineNumber":68,"author":{"gitId":"Yanneko"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":70,"author":{"gitId":"Yanneko"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":72,"author":{"gitId":"Yanneko"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"Yanneko"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"Yanneko"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"Yanneko"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":77,"author":{"gitId":"Yanneko"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"Yanneko"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":80,"author":{"gitId":"Yanneko"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":82,"author":{"gitId":"Yanneko"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"Yanneko"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":85,"author":{"gitId":"Yanneko"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":87,"author":{"gitId":"Yanneko"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"Yanneko"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":90,"author":{"gitId":"Yanneko"},"content":":end"},{"lineNumber":91,"author":{"gitId":"Yanneko"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"Yanneko"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":94,"author":{"gitId":"Yanneko"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"Yanneko"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"Yanneko"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"Yanneko"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"Yanneko"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":100,"author":{"gitId":"Yanneko"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"Yanneko"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":103,"author":{"gitId":"Yanneko"},"content":":omega"}],"authorContributionMap":{"Yanneko":103}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":" * Representation of a Deadline task. Inherits from Task."},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"    String deadLine;"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"    LocalDate localDate;"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"    LocalTime localTime;"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"     * Class constructor. Creates a not done Deadline object with name set to the specified taskName"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"     * and deadline set to the specified deadLine. Converts and stores the deadline as LocalDate and LocalTime."},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"     * @param taskName The specified name of the new Deadline object."},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"     * @param deadLine The specified deadline of the new Deadline object."},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    public Deadline(String taskName, String deadLine) {"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"        super(taskName);"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"        this.deadLine \u003d deadLine;"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"        String[] deadLineSplit \u003d deadLine.split(\" \");"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"        localDate \u003d LocalDate.parse(deadLineSplit[0]);"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"        if (deadLineSplit.length \u003e 1) {"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"            int time \u003d Integer.parseInt(deadLineSplit[1]);"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"            localTime \u003d LocalTime.of(time/100, time % 100);"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"            localTime \u003d LocalTime.MIDNIGHT;"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"            this.deadLine +\u003d \" 0000\";"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"     * A method to create a neatly formatted String that describes this Deadline."},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"     * @return Neatly formatted String representation of this Deadline."},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"        return \"[D]\" + super.toString() + \" (by: \" +"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"                LocalDateTime.of(localDate, localTime).format(DateTimeFormatter.ofPattern(\"MMM d yyy h:m a\")) + \")\";"},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"     * Generates a formatted String for storage read and write purposes."},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"     * @return Formatted data String to be used by Storage."},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":"    public String generateDataString() {"},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":"        return \"deadline \" + deadLine + (done ? \" done \" : \" notDone \") + taskName;"},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":55}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"Yanneko"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":" * Driver class. Creating a Duke object runs the application."},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"    private final Parser parser;"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"     * Duke constructor specifying the file path to save the task list to."},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"    public Duke() {"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"        Storage storage \u003d new Storage(\"data/tasks.txt\");"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"        storage.readFromStorage(taskList);"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"        parser \u003d new Parser(taskList, storage);"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"//    /**"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"//     * Runs Duke application."},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"//     */"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"//    public void run() {"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"//        ui.runUi(taskList, storage);"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"//    }"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"//"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"//    /**"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"//     * Driver code. Creates and runs Duke."},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"//     * @param args Commandline arguments. Not used."},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"//     */"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"//    public static void main(String[] args) {"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"//        new Duke().run();"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"//    }"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"    public String getResponse(String input) {"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"        return parser.parse(input);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Yanneko":32,"-":3}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":" * Representation of a Event task. Inherits from Task."},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"    String eventTime;"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"    LocalDate localDate;"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"    LocalTime localTime;"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"     * Class constructor. Creates a not done Event object with name set to the specified taskName"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"     * and event time set to the specified eventTime. Converts and stores the eventTime as LocalDate and LocalTime."},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"     * @param taskName The specified name of the new Event object."},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"     * @param eventTime The specified event time of the new Event object."},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    public Event(String taskName, String eventTime) {"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"        super(taskName);"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"        String[] eventTimeSplit \u003d eventTime.split(\" \");"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"        localDate \u003d LocalDate.parse(eventTimeSplit[0]);"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"        if (eventTimeSplit.length \u003e 1) {"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"            int time \u003d Integer.parseInt(eventTimeSplit[1]);"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"            localTime \u003d LocalTime.of(time/100, time % 100);"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"            localTime \u003d LocalTime.MIDNIGHT;"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"            this.eventTime +\u003d \" 0000\";"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"     * A method to create a neatly formatted String that describes this Event."},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"     * @return Neatly formatted String representation of this Event."},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"        return \"[E]\" + super.toString() + \" (at: \" +"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"                LocalDateTime.of(localDate, localTime).format(DateTimeFormatter.ofPattern(\"MMM d yyy h:m a\")) + \")\";"},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"     * Generates a formatted String for storage read and write purposes."},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"     * @return Formatted data String to be used by Storage."},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":"    public String generateDataString() {"},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":"        return \"event \" + eventTime + (done ? \" done \" : \" notDone \") + taskName;"},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":55}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"    private Stage stage;"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"//        String sage \u003d \" ____       __      ________  _______.\\n\""},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"//                    + \"/  __|     /  \\    /   _____||   ____|\\n\""},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"//                    + \"|  |__    / __ \\   |  |  ___ |  |__.  \\n\""},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"//                    + \"\\__   \\  / /__\\ \\  |  | |_  ||   __|  \\n\""},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"//                    + \" __|  | /  ____  \\ |  |___| ||  |____.\\n\""},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"//                    + \"|_____//__/    \\__\\\\________/|_______|\\n\";"},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"        String sageFormattedSpacing \u003d \"  ____          _        _______     ______.\\n\""},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"                + \"/    __|       /  \\\\     /    _____|  |     ___|\\n\""},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"                + \"|    |__      / __ \\\\    |   |  ___    |    |__.  \\n\""},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"                + \"\\\\__    \\\\    / /__\\\\ \\\\  |   |  |__  |  |     __|  \\n\""},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"                + \" __|    |  /   ___   \\\\ |   |___|   |  |    |___.\\n\""},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"                + \"|_____//__/      \\\\__\\\\\\\\______/  |_______|\\n\";"},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"                DialogBox.getDukeDialog(sageFormattedSpacing +"},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"                        \"    ________________________________________________________\\n\" +"},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"                        \"     Unique Skill: Sage\\n\" +"},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"                        \"     \u003eAcquired\\n\" +"},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"                        \"    ________________________________________________________\\n\", dukeImage));"},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"        duke \u003d d;"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":57,"author":{"gitId":"Yanneko"},"content":"    public void setStage(Stage stage) {"},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":"        this.stage \u003d stage;"},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":61,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Yanneko"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":63,"author":{"gitId":"Yanneko"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":64,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Yanneko"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitId":"Yanneko"},"content":"    private void handleUserInput() {"},{"lineNumber":67,"author":{"gitId":"Yanneko"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":68,"author":{"gitId":"Yanneko"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":69,"author":{"gitId":"Yanneko"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":70,"author":{"gitId":"Yanneko"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":71,"author":{"gitId":"Yanneko"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":72,"author":{"gitId":"Yanneko"},"content":"        );"},{"lineNumber":73,"author":{"gitId":"Yanneko"},"content":"        userInput.clear();"},{"lineNumber":74,"author":{"gitId":"Yanneko"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":75,"author":{"gitId":"Yanneko"},"content":"            stage.close();"},{"lineNumber":76,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":78}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":" * Duke\u0027s Parser. Deals with making sense of the user command."},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"public class Parser {"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"    private final TaskList taskList;"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"    private final Storage storage;"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"    public Parser(TaskList taskList, Storage storage) {"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"        this.storage \u003d storage;"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"     * Takes in the user\u0027s command and decides the appropriate action to take, then returns the output string for"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"     * the UI object to display. Uses references to taskList, storage, scanner and ui in order to edit the task list,"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"     * store the task list when done, scan for arguments to commands and end the ui when needed."},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"     * @param input The user input for the parser to parse."},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"     * @return Output String for the associated UI object to display."},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"    public String parse(String input) {"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"        StringBuilder outputString \u003d new StringBuilder();"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"        String[] cmdWithArgs \u003d input.split(\" \", 2);"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"        switch (cmdWithArgs[0]) {"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"        case \"list\":"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"            outputString.append(\"Acknowledged. Listing tasks.\\n\");"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"            for (int taskNum \u003d 0; taskNum \u003c taskList.size(); taskNum++) {"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"                outputString.append(taskNum + 1).append(\".\").append(taskList.get(taskNum)).append(\"\\n\");"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"        case \"todo\":"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"            String args \u003d cmdWithArgs[1];"},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"            if (args.strip().equals(\"\")) {"},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Warning: ToDo entry format incorrect.\\n\")"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"                        .append(\"Try \u0027todo \u003ctask name\u003e\u0027\");"},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"                break;"},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"            ToDo nextToDo \u003d new ToDo(args.strip());"},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"            taskList.add(nextToDo);"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"            outputString.append(\"Acknowledged. Adding task:\\n\").append(nextToDo).append(\"\\n\")"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"                    .append(\"Notice. You now have [\").append(taskList.size()).append(\"] task(s).\\n\");"},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"        case \"deadline\":"},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"            String[] deadLineArgs \u003d cmdWithArgs[1].split(\" /by \");"},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"            try {"},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"                Deadline nextDeadLine \u003d new Deadline(deadLineArgs[0].strip(), deadLineArgs[1]);"},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":"                taskList.add(nextDeadLine);"},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Acknowledged. Adding deadline:\\n\").append(nextDeadLine).append(\"\\n\")"},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"                        .append(\"Notice. You now have [\").append(taskList.size()).append(\"] task(s).\\n\");"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"            } catch (IndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Warning: Deadline entry format incorrect.\\n\")"},{"lineNumber":57,"author":{"gitId":"Yanneko"},"content":"                        .append(\"Try \u0027deadline \u003cdeadline title\u003e /by \u003cdeadline date and time\u003e\u0027\");"},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":61,"author":{"gitId":"Yanneko"},"content":"        case \"event\":"},{"lineNumber":62,"author":{"gitId":"Yanneko"},"content":"            String[] eventArgs \u003d cmdWithArgs[1].split(\" /at \");"},{"lineNumber":63,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":64,"author":{"gitId":"Yanneko"},"content":"            try {"},{"lineNumber":65,"author":{"gitId":"Yanneko"},"content":"                Event nextEvent \u003d new Event(eventArgs[0].strip(), eventArgs[1]);"},{"lineNumber":66,"author":{"gitId":"Yanneko"},"content":"                taskList.add(nextEvent);"},{"lineNumber":67,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Acknowledged. Adding event:\\n\").append(nextEvent).append(\"\\n\")"},{"lineNumber":68,"author":{"gitId":"Yanneko"},"content":"                        .append(\"Notice. You now have [\").append(taskList.size()).append(\"] task(s).\\n\");"},{"lineNumber":69,"author":{"gitId":"Yanneko"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":70,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Warning: Event entry format incorrect.\\n\")"},{"lineNumber":71,"author":{"gitId":"Yanneko"},"content":"                        .append(\"Try \u0027event \u003cevent title\u003e /at \u003cevent date and time\u003e\u0027\");"},{"lineNumber":72,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":74,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":75,"author":{"gitId":"Yanneko"},"content":"        case \"done\":"},{"lineNumber":76,"author":{"gitId":"Yanneko"},"content":"            try {"},{"lineNumber":77,"author":{"gitId":"Yanneko"},"content":"                int doneTarget \u003d Integer.parseInt(cmdWithArgs[1]);"},{"lineNumber":78,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Understood. The following task has been completed:\\n\");"},{"lineNumber":79,"author":{"gitId":"Yanneko"},"content":"                Task targetTask \u003d taskList.taskList.get(doneTarget - 1);"},{"lineNumber":80,"author":{"gitId":"Yanneko"},"content":"                targetTask.markAsDone();"},{"lineNumber":81,"author":{"gitId":"Yanneko"},"content":"                outputString.append(targetTask).append(\"\\n\");"},{"lineNumber":82,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":83,"author":{"gitId":"Yanneko"},"content":"            } catch (Exception e) {"},{"lineNumber":84,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Warning: done command format incorrect.\\n\")"},{"lineNumber":85,"author":{"gitId":"Yanneko"},"content":"                        .append(\"Try \u0027done \u003cindex\u003e\u0027\");"},{"lineNumber":86,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":88,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":89,"author":{"gitId":"Yanneko"},"content":"        case \"delete\":"},{"lineNumber":90,"author":{"gitId":"Yanneko"},"content":"            try {"},{"lineNumber":91,"author":{"gitId":"Yanneko"},"content":"                int removeTarget \u003d Integer.parseInt(cmdWithArgs[1]);"},{"lineNumber":92,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Notice. The following task has been removed:\\n\");"},{"lineNumber":93,"author":{"gitId":"Yanneko"},"content":"                Task targetTask \u003d taskList.get(removeTarget - 1);"},{"lineNumber":94,"author":{"gitId":"Yanneko"},"content":"                outputString.append(targetTask).append(\"\\n\");"},{"lineNumber":95,"author":{"gitId":"Yanneko"},"content":"                taskList.remove(removeTarget - 1);"},{"lineNumber":96,"author":{"gitId":"Yanneko"},"content":"            } catch (Exception e) {"},{"lineNumber":97,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"Warning: delete command format incorrect.\\n\")"},{"lineNumber":98,"author":{"gitId":"Yanneko"},"content":"                        .append(\"Try \u0027delete \u003cindex\u003e\u0027\");"},{"lineNumber":99,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":101,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":102,"author":{"gitId":"Yanneko"},"content":"        case \"find\":"},{"lineNumber":103,"author":{"gitId":"Yanneko"},"content":"            String searchString \u003d cmdWithArgs[1].strip();"},{"lineNumber":104,"author":{"gitId":"Yanneko"},"content":"            outputString.append(\"Understood. The following tasks were found: \\n\");"},{"lineNumber":105,"author":{"gitId":"Yanneko"},"content":"            int j \u003d 1;"},{"lineNumber":106,"author":{"gitId":"Yanneko"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":107,"author":{"gitId":"Yanneko"},"content":"                Task task \u003d taskList.get(i);"},{"lineNumber":108,"author":{"gitId":"Yanneko"},"content":"                if (task.taskName.contains(searchString)) {"},{"lineNumber":109,"author":{"gitId":"Yanneko"},"content":"                    outputString.append(j).append(\".\").append(task.toString()).append(\"\\n\");"},{"lineNumber":110,"author":{"gitId":"Yanneko"},"content":"                    j++;"},{"lineNumber":111,"author":{"gitId":"Yanneko"},"content":"                }"},{"lineNumber":112,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":114,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":115,"author":{"gitId":"Yanneko"},"content":"        case \"bye\":"},{"lineNumber":116,"author":{"gitId":"Yanneko"},"content":"            try {"},{"lineNumber":117,"author":{"gitId":"Yanneko"},"content":"                storage.writeToStorage(taskList);"},{"lineNumber":118,"author":{"gitId":"Yanneko"},"content":"            } catch (IOException e) {"},{"lineNumber":119,"author":{"gitId":"Yanneko"},"content":"                outputString.append(\"IOException thrown, task list not saved.\\n\");"},{"lineNumber":120,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"Yanneko"},"content":"            outputString.append(\"Goodbye.\\n\");"},{"lineNumber":122,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":123,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":124,"author":{"gitId":"Yanneko"},"content":"        case \"help\":"},{"lineNumber":125,"author":{"gitId":"Yanneko"},"content":"            outputString.append(\"list: lists tasks | \")"},{"lineNumber":126,"author":{"gitId":"Yanneko"},"content":"                    .append(\"todo: adds new todo task | \")"},{"lineNumber":127,"author":{"gitId":"Yanneko"},"content":"                    .append(\"deadline: adds new deadline | \")"},{"lineNumber":128,"author":{"gitId":"Yanneko"},"content":"                    .append(\"event: adds new event | \")"},{"lineNumber":129,"author":{"gitId":"Yanneko"},"content":"                    .append(\"done: marks task as done | \")"},{"lineNumber":130,"author":{"gitId":"Yanneko"},"content":"                    .append(\"delete: deletes task | \")"},{"lineNumber":131,"author":{"gitId":"Yanneko"},"content":"                    .append(\"find: finds tasks | \")"},{"lineNumber":132,"author":{"gitId":"Yanneko"},"content":"                    .append(\"bye: tells Sage to go away\\n\");"},{"lineNumber":133,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":134,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":135,"author":{"gitId":"Yanneko"},"content":"        default:"},{"lineNumber":136,"author":{"gitId":"Yanneko"},"content":"            outputString.append(\"Notice. Unfamiliar command detected. Enter \u0027help\u0027 to view commands.\\n\");"},{"lineNumber":137,"author":{"gitId":"Yanneko"},"content":"            break;"},{"lineNumber":138,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"Yanneko"},"content":"        return outputString.toString();"},{"lineNumber":140,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":141}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":" * Duke\u0027s Storage. Deals with loading tasks from the file and saving tasks in the file."},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"    File dukeDataFile;"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"     * Class constructor specifying the file path to save the task list to. If the file does not exist,"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"     * creates the data file. If the directory does not exist, creates the directory, then creates the file inside."},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"     * @param filePath File path to open or create that will store the data file for the task list."},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"    public Storage(String filePath) {"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"        Path path \u003d Paths.get(filePath);"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"        dukeDataFile \u003d new File(filePath);"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"        if (!Files.exists(path)) {"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"            try {"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"                dukeDataFile.createNewFile();"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"            } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"                try {"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"                    Path dirPath \u003d Paths.get(\"data/\");"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"                    Files.createDirectories(dirPath);"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"                    dukeDataFile.createNewFile();"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"                } catch (IOException ex) {"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"                    System.out.println(\"IOException caught: \" + ex.getMessage());"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"                }"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"     * Reads tasks from this storage object\u0027s data file and populates"},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"     * the specified TaskList with the read data, if any."},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"     * @param taskList The specified TaskList object to be written to."},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"    public void readFromStorage(TaskList taskList) {"},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"            Scanner fileScanner \u003d new Scanner(dukeDataFile);"},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"            while (fileScanner.hasNext()) {"},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"                String[] taskArgs \u003d fileScanner.nextLine().split(\" \", 2);"},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"                switch (taskArgs[0]) {"},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"                case \"todo\":"},{"lineNumber":51,"author":{"gitId":"Yanneko"},"content":"                    taskArgs \u003d taskArgs[1].split(\" \", 2);"},{"lineNumber":52,"author":{"gitId":"Yanneko"},"content":"                    Task newToDo \u003d new ToDo(taskArgs[1]);"},{"lineNumber":53,"author":{"gitId":"Yanneko"},"content":"                    if (taskArgs[0].equals(\"done\")) {"},{"lineNumber":54,"author":{"gitId":"Yanneko"},"content":"                        newToDo.markAsDone();"},{"lineNumber":55,"author":{"gitId":"Yanneko"},"content":"                    }"},{"lineNumber":56,"author":{"gitId":"Yanneko"},"content":"                    taskList.taskList.add(newToDo);"},{"lineNumber":57,"author":{"gitId":"Yanneko"},"content":"                    break;"},{"lineNumber":58,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":59,"author":{"gitId":"Yanneko"},"content":"                case \"deadline\":"},{"lineNumber":60,"author":{"gitId":"Yanneko"},"content":"                    taskArgs \u003d taskArgs[1].split(\" \", 4);"},{"lineNumber":61,"author":{"gitId":"Yanneko"},"content":"                    Task newDeadline \u003d new Deadline(taskArgs[3], taskArgs[0] + \" \" + taskArgs[1]);"},{"lineNumber":62,"author":{"gitId":"Yanneko"},"content":"                    if (taskArgs[2].equals(\"done\")) {"},{"lineNumber":63,"author":{"gitId":"Yanneko"},"content":"                        newDeadline.markAsDone();"},{"lineNumber":64,"author":{"gitId":"Yanneko"},"content":"                    }"},{"lineNumber":65,"author":{"gitId":"Yanneko"},"content":"                    taskList.taskList.add(newDeadline);"},{"lineNumber":66,"author":{"gitId":"Yanneko"},"content":"                    break;"},{"lineNumber":67,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":68,"author":{"gitId":"Yanneko"},"content":"                case \"event\":"},{"lineNumber":69,"author":{"gitId":"Yanneko"},"content":"                    taskArgs \u003d taskArgs[1].split(\" \", 4);"},{"lineNumber":70,"author":{"gitId":"Yanneko"},"content":"                    Task newEvent \u003d new Event(taskArgs[3], taskArgs[0] + \" \" + taskArgs[1]);"},{"lineNumber":71,"author":{"gitId":"Yanneko"},"content":"                    if (taskArgs[2].equals(\"done\")) {"},{"lineNumber":72,"author":{"gitId":"Yanneko"},"content":"                        newEvent.markAsDone();"},{"lineNumber":73,"author":{"gitId":"Yanneko"},"content":"                    }"},{"lineNumber":74,"author":{"gitId":"Yanneko"},"content":"                    taskList.taskList.add(newEvent);"},{"lineNumber":75,"author":{"gitId":"Yanneko"},"content":"                    break;"},{"lineNumber":76,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":77,"author":{"gitId":"Yanneko"},"content":"                default:"},{"lineNumber":78,"author":{"gitId":"Yanneko"},"content":"                    break;"},{"lineNumber":79,"author":{"gitId":"Yanneko"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"Yanneko"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":82,"author":{"gitId":"Yanneko"},"content":"            System.out.println(\"File not found.\");"},{"lineNumber":83,"author":{"gitId":"Yanneko"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":86,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Yanneko"},"content":"     * Writes tasks from the specified TaskList to this storage object\u0027s data file, overwriting the current data."},{"lineNumber":88,"author":{"gitId":"Yanneko"},"content":"     * @param taskList The specified TaskList object to read from."},{"lineNumber":89,"author":{"gitId":"Yanneko"},"content":"     * @throws IOException If writing to the file fails."},{"lineNumber":90,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Yanneko"},"content":"    public void writeToStorage(TaskList taskList) throws IOException {"},{"lineNumber":92,"author":{"gitId":"Yanneko"},"content":"        FileWriter fw \u003d new FileWriter(dukeDataFile);"},{"lineNumber":93,"author":{"gitId":"Yanneko"},"content":"        taskList.taskList.forEach(task -\u003e {"},{"lineNumber":94,"author":{"gitId":"Yanneko"},"content":"            try {"},{"lineNumber":95,"author":{"gitId":"Yanneko"},"content":"                fw.write(task.generateDataString() + System.lineSeparator());"},{"lineNumber":96,"author":{"gitId":"Yanneko"},"content":"            } catch (IOException e) {"},{"lineNumber":97,"author":{"gitId":"Yanneko"},"content":"                System.out.println(\"IOException thrown.\");"},{"lineNumber":98,"author":{"gitId":"Yanneko"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"Yanneko"},"content":"        });"},{"lineNumber":100,"author":{"gitId":"Yanneko"},"content":"        fw.close();"},{"lineNumber":101,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":102}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":" * Abstract class that represents a Task entry. Contains the name of the task taskName"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":" * and a boolean done to show whether it is done or not. Has methods to deal with marking tasks as done or not"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":" * and methods to generate data strings for storage."},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"    String taskName;"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"    boolean done;"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"     * Class constructor which creates a Task object with the name set to the specified taskName."},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"     * Created Task is set to not done by default."},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"     * @param taskName The specified name of the new Task object."},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    public Task(String taskName) {"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"        this.done \u003d false;"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"     * Marks this Task as done. Returns true."},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"     * @return Returns true."},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"    public void markAsDone() {"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"        this.done \u003d true;"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"     * Marks this Task as not done. Returns false."},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"     * @return Returns false."},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"    public void markAsNotDone() {"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"        this.done \u003d false;"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"     * A method to create a neatly formatted String that describes this Task."},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"     * @return Neatly formatted String representation of this Task."},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"        return \"[\" + (done? \"x\" : \" \") + \"] \" + taskName;"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"     * Abstract method that generates a formatted String for storage read and write purposes."},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"     * @return Formatted data String to be used by Storage."},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"    public abstract String generateDataString();"},{"lineNumber":50,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":50}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":" * Duke\u0027s TaskList. Contains the task list and has operations to modify the list."},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"    ArrayList\u003cTask\u003e taskList;"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"     * Class constructor. Creates the TaskList and an empty ArrayList of Tasks to store future tasks."},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"    public TaskList() {"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"     * Adds the specified next Task to the taskList."},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"     * @param nextTask The specified next Task."},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    public void add(Task nextTask) {"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"        this.taskList.add(nextTask);"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"     * Gets the Task from the taskList at the index specified."},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"     * @param index The specified index of the wanted Task."},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"     * @return The Task in the taskList at the specified index."},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"    public Task get(int index) {"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"        return this.taskList.get(index);"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"     * Removes and returns the Task from the taskList at the specified index."},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"     * @param index The specified index of the Task to be removed."},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"     * @return The Task that was removed from the taskList at the specified index."},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"    public Task remove(int index) {"},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"        return this.taskList.remove(index);"},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"     * Returns the current size of the taskList."},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"     * @return Size of the taskList as an integer."},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Yanneko"},"content":"    public int size() {"},{"lineNumber":47,"author":{"gitId":"Yanneko"},"content":"        return this.taskList.size();"},{"lineNumber":48,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":49}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":" * Representation of a ToDo task. Inherits from Task."},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"     * Class constructor. Creates a not done ToDo object with name set to the specified taskName."},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"     * @param taskName The specified name of the new ToDo object."},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"    public ToDo(String taskName) {"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"        super(taskName);"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"     * A method to create a neatly formatted String that describes this ToDo."},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"     * @return Neatly formatted String representation of this ToDo."},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"     * Generates a formatted String for storage read and write purposes."},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"     * @return Formatted data String to be used by Storage."},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"    public String generateDataString() {"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"        return \"todo \" + (done ? \"done \" : \"notDone \") + taskName;"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":30}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"//import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"//"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"///**"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"// * Duke\u0027s UI. Deals with interactions with the user by reading commands,"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"// * passing it to the Parser and printing the resultant output string."},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"// */"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"//public class Ui {"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"//    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"//"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"//    /**"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"//     * Runs the UI object with the specified TaskList to edit and Storage to store taskList when the application ends."},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"//     * @param taskList Specified TaskList to be read and written to."},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"//     * @param storage Specified Storage object that reads from and writes to"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"//     *               a data file to populate and save taskList."},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"//     */"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"//    public void runUi(TaskList taskList, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"//        String logo \u003d \" ____        _        \\n\""},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"//                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"//                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"//                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"//                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":22,"author":{"gitId":"Yanneko"},"content":"//        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":23,"author":{"gitId":"Yanneko"},"content":"//"},{"lineNumber":24,"author":{"gitId":"Yanneko"},"content":"//        System.out.println(\"    ____________________________________________________________\\n\" +"},{"lineNumber":25,"author":{"gitId":"Yanneko"},"content":"//                \"     Duke... booted...\\n\" +"},{"lineNumber":26,"author":{"gitId":"Yanneko"},"content":"//                \"     requesting tasks\\n\" +"},{"lineNumber":27,"author":{"gitId":"Yanneko"},"content":"//                \"    ____________________________________________________________\\n\");"},{"lineNumber":28,"author":{"gitId":"Yanneko"},"content":"//        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":29,"author":{"gitId":"Yanneko"},"content":"//        Parser parser \u003d new Parser();"},{"lineNumber":30,"author":{"gitId":"Yanneko"},"content":"//"},{"lineNumber":31,"author":{"gitId":"Yanneko"},"content":"//        while (!isDone) {"},{"lineNumber":32,"author":{"gitId":"Yanneko"},"content":"//            String input \u003d sc.next();"},{"lineNumber":33,"author":{"gitId":"Yanneko"},"content":"//            String nextOutput \u003d parser.parse(input);"},{"lineNumber":34,"author":{"gitId":"Yanneko"},"content":"//            System.out.println(nextOutput);"},{"lineNumber":35,"author":{"gitId":"Yanneko"},"content":"//        }"},{"lineNumber":36,"author":{"gitId":"Yanneko"},"content":"//        sc.close();"},{"lineNumber":37,"author":{"gitId":"Yanneko"},"content":"//    }"},{"lineNumber":38,"author":{"gitId":"Yanneko"},"content":"//"},{"lineNumber":39,"author":{"gitId":"Yanneko"},"content":"//    /**"},{"lineNumber":40,"author":{"gitId":"Yanneko"},"content":"//     * Toggles an inner boolean to end the loop that reads user commands."},{"lineNumber":41,"author":{"gitId":"Yanneko"},"content":"//     */"},{"lineNumber":42,"author":{"gitId":"Yanneko"},"content":"//    public void end() {"},{"lineNumber":43,"author":{"gitId":"Yanneko"},"content":"//        isDone \u003d true;"},{"lineNumber":44,"author":{"gitId":"Yanneko"},"content":"//    }"},{"lineNumber":45,"author":{"gitId":"Yanneko"},"content":"//}"}],"authorContributionMap":{"Yanneko":45}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Yanneko":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Yanneko":19}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"public class TaskTest {"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"    public void toDoCreationTest(){"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"        assertEquals(new ToDo(\"testTask\").generateDataString(), \"todo notDone testTask\");"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":""},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Yanneko"},"content":"    public void deadlineCreationTest(){"},{"lineNumber":13,"author":{"gitId":"Yanneko"},"content":"        assertEquals(new Deadline(\"testDeadline\", \"2020-02-20 2020\").generateDataString(),"},{"lineNumber":14,"author":{"gitId":"Yanneko"},"content":"                \"deadline 2020-02-20 2020 notDone testDeadline\");"},{"lineNumber":15,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Yanneko"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Yanneko"},"content":"    public void eventCreationTest(){"},{"lineNumber":18,"author":{"gitId":"Yanneko"},"content":"        assertEquals(new Event(\"testEvent\", \"2020-02-20 2020\").generateDataString(),"},{"lineNumber":19,"author":{"gitId":"Yanneko"},"content":"                \"event 2020-02-20 2020 notDone testEvent\");"},{"lineNumber":20,"author":{"gitId":"Yanneko"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Yanneko"},"content":"}"}],"authorContributionMap":{"Yanneko":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Yanneko"},"content":"list"},{"lineNumber":2,"author":{"gitId":"Yanneko"},"content":"blah"},{"lineNumber":3,"author":{"gitId":"Yanneko"},"content":"todo test 1"},{"lineNumber":4,"author":{"gitId":"Yanneko"},"content":"todo test 2"},{"lineNumber":5,"author":{"gitId":"Yanneko"},"content":"list"},{"lineNumber":6,"author":{"gitId":"Yanneko"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"Yanneko"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Yanneko"},"content":"deadline iPWeek2 /by 21/1 2359"},{"lineNumber":9,"author":{"gitId":"Yanneko"},"content":"event someLecture /at tmr morning"},{"lineNumber":10,"author":{"gitId":"Yanneko"},"content":"list"},{"lineNumber":11,"author":{"gitId":"Yanneko"},"content":"bye"}],"authorContributionMap":{"Yanneko":11}}]
