[{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"[T][ ]  fight"}],"authorContributionMap":{"QY-H00":1}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":" * The set of different commands that Momo can identify."},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, FIND"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":8}},{"path":"src/main/java/duke/Momo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"public class Momo {"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     * Create a Momo with an original task list if file path exists."},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"     * Create a Momo with empty task list else."},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"     * @param filePath the path of the *.txt file including information of existing tasks."},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    public Momo(String filePath) {"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"        } catch (ParseException | IOException e) {"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"            Ui.showLoadingError();"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"    public void run() {"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"        Ui.showInitUi();"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"        String input;"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        do {"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"            input \u003d sc.next();"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"                Command command \u003d Parser.parseCommand(input);"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"                switch (command) {"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"                case BYE:"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"                    Ui.showExitUi();"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"                    return;"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"                case LIST:"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"                    Ui.showList(this.tasks);"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"                    break;"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"                case DONE:"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"                    int i \u003d sc.nextInt();"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"                    try {"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"                        Ui.showSuccessfulMark(tasks.mark(i));"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"                    } catch (IndexOutOfBoundsException e) {"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"                        Ui.showIndexOutOfBoundsError(tasks);"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"                    }"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"                    break;"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"                case DELETE:"},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"                    int j \u003d sc.nextInt();"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"                    try {"},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"                        Task taskToBeDeleted \u003d tasks.delete(j);"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"                        Ui.showSuccessfulDelete(tasks, taskToBeDeleted);"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"                    } catch (IndexOutOfBoundsException e) {"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"                        Ui.showIndexOutOfBoundsError(tasks);"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"                    }"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"                    storage.save(tasks);"},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"                    break;"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":"                case FIND:"},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"                    String keyword \u003d sc.next();"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"                    Ui.showMatchingResult(tasks.find(keyword));"},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"                default:"},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"                    String nextInput \u003d sc.nextLine();"},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"                    try {"},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"                        Task taskToBeAdded \u003d Parser.parseDescription(command, nextInput);"},{"lineNumber":72,"author":{"gitId":"QY-H00"},"content":"                        tasks.add(taskToBeAdded);"},{"lineNumber":73,"author":{"gitId":"QY-H00"},"content":"                        Ui.showSuccessfulAdd(tasks, taskToBeAdded);"},{"lineNumber":74,"author":{"gitId":"QY-H00"},"content":"                        storage.save(tasks);"},{"lineNumber":75,"author":{"gitId":"QY-H00"},"content":"                    } catch (ParseException e) {"},{"lineNumber":76,"author":{"gitId":"QY-H00"},"content":"                        Ui.formatInChatBox(e.getMsgDes());"},{"lineNumber":77,"author":{"gitId":"QY-H00"},"content":"                    } catch (DateTimeParseException e) {"},{"lineNumber":78,"author":{"gitId":"QY-H00"},"content":"                        Ui.showDateParseError();"},{"lineNumber":79,"author":{"gitId":"QY-H00"},"content":"                    }"},{"lineNumber":80,"author":{"gitId":"QY-H00"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"QY-H00"},"content":"            } catch (IllegalArgumentException e) {"},{"lineNumber":82,"author":{"gitId":"QY-H00"},"content":"                Ui.showGeneralError();"},{"lineNumber":83,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"QY-H00"},"content":"        } while (true);"},{"lineNumber":85,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":87,"author":{"gitId":"QY-H00"},"content":"    public static void main(String[] args) {"},{"lineNumber":88,"author":{"gitId":"QY-H00"},"content":"        new Momo(\"data/tasks.txt\").run();"},{"lineNumber":89,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":90}},{"path":"src/main/java/duke/ParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":" * Extends RuntimeException and is used when parsing fails."},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"public class ParseException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"    private final String msgDes;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"    public ParseException(String message) {"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"        msgDes \u003d message;"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    public String getMsgDes() {"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"        return msgDes;"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":18}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import duke.task.ToDo;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"import java.util.Locale;"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     * Returns a Command with enum type by parsing the string of command that the user inputs."},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"     * @param input the string represents command that the user inputs."},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"     * @return a Command of the enum type."},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"    public static Command parseCommand(String input) {"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"        return Command.valueOf(input.toUpperCase(Locale.ROOT));"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"     * Returns a task by parsing description under instruction of command."},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"     * @param command the Command enum type."},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"     * @param input input of user."},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"     * @return the task corresponding to the input."},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"     * @throws ParseException if parsing fails."},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"    public static Task parseDescription(Command command, String input) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"        switch (command) {"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"            case TODO:"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"                return parseToDo(input);"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"            case DEADLINE:"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"                return parseDeadline(input);"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"            case EVENT:"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"                return parseEvent(input);"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"            default:"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"                throw new ParseException(\"the first argument command is not valid.\");"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"     * Returns a ToDo by parsing the input behind the command."},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"     * Used when the command is todo."},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"     * Works when the input is not empty."},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"     * @param input input of users."},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"     * @return a task of ToDo corresponding to the input."},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"     * @throws ParseException if the description is empty."},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"    private static ToDo parseToDo(String input) throws ParseException {"},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"        if (input.isEmpty() || input.equals(\" \"))"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! The description of a todo cannot be empty.\\n\");"},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"        if (input.charAt(0) \u003d\u003d \u0027 \u0027) input \u003d input.substring(1);"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"        return new ToDo(input);"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"     * Returns a Deadline by parsing the input behind the command."},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"     * Used when the command is deadline."},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":"     * Works when the input is \"{description} /by YYYY-MM-DD\"."},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"     * @param input input of users."},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"     * @return a task of Deadline corresponding to the input."},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"     * @throws ParseException if the description is empty."},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"     * @throws DateTimeParseException if the format of data time is not correct."},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"QY-H00"},"content":"    private static Deadline parseDeadline(String input) throws ParseException, DateTimeParseException {"},{"lineNumber":73,"author":{"gitId":"QY-H00"},"content":"        if (input.isEmpty() || input.equals(\" \"))"},{"lineNumber":74,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! The description of a deadline cannot be empty.\\n\");"},{"lineNumber":75,"author":{"gitId":"QY-H00"},"content":"        if (input.contains(\"/by \")) {"},{"lineNumber":76,"author":{"gitId":"QY-H00"},"content":"            if (input.charAt(0) \u003d\u003d \u0027 \u0027) input \u003d input.substring(1);"},{"lineNumber":77,"author":{"gitId":"QY-H00"},"content":"            int endOfDescription \u003d input.indexOf(\"/by \");"},{"lineNumber":78,"author":{"gitId":"QY-H00"},"content":"            String description \u003d input.substring(0, endOfDescription);"},{"lineNumber":79,"author":{"gitId":"QY-H00"},"content":"            String deadline \u003d input.substring(endOfDescription + 4);"},{"lineNumber":80,"author":{"gitId":"QY-H00"},"content":"            LocalDate date \u003d LocalDate.parse(deadline);"},{"lineNumber":81,"author":{"gitId":"QY-H00"},"content":"            return new Deadline(description, date);"},{"lineNumber":82,"author":{"gitId":"QY-H00"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/by YYYY-MM-DD\u0027 after description.\\n\");"},{"lineNumber":84,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":87,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"QY-H00"},"content":"     * Returns an Event by parsing the input behind the command."},{"lineNumber":89,"author":{"gitId":"QY-H00"},"content":"     * Used when the command is event."},{"lineNumber":90,"author":{"gitId":"QY-H00"},"content":"     * Works when the input is \"{description} /at YYYY-MM-DD\"."},{"lineNumber":91,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"QY-H00"},"content":"     * @param input input of users."},{"lineNumber":93,"author":{"gitId":"QY-H00"},"content":"     * @return a task of Event corresponding to the input."},{"lineNumber":94,"author":{"gitId":"QY-H00"},"content":"     * @throws ParseException if the description is empty."},{"lineNumber":95,"author":{"gitId":"QY-H00"},"content":"     * @throws DateTimeParseException if the format of data time is not correct."},{"lineNumber":96,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"QY-H00"},"content":"    private static Event parseEvent(String input) throws ParseException, DateTimeParseException {"},{"lineNumber":98,"author":{"gitId":"QY-H00"},"content":"        if (input.isEmpty() || input.equals(\" \"))"},{"lineNumber":99,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! The description of an event cannot be empty.\\n\");"},{"lineNumber":100,"author":{"gitId":"QY-H00"},"content":"        if (input.contains(\"/at \")) {"},{"lineNumber":101,"author":{"gitId":"QY-H00"},"content":"            if (input.charAt(0) \u003d\u003d \u0027 \u0027) input \u003d input.substring(1);"},{"lineNumber":102,"author":{"gitId":"QY-H00"},"content":"            int endOfDescription \u003d input.indexOf(\"/at \");"},{"lineNumber":103,"author":{"gitId":"QY-H00"},"content":"            String description \u003d input.substring(0, endOfDescription);"},{"lineNumber":104,"author":{"gitId":"QY-H00"},"content":"            String time \u003d input.substring(endOfDescription + 4);"},{"lineNumber":105,"author":{"gitId":"QY-H00"},"content":"            LocalDate date \u003d LocalDate.parse(time);"},{"lineNumber":106,"author":{"gitId":"QY-H00"},"content":"            return new Event(description, date);"},{"lineNumber":107,"author":{"gitId":"QY-H00"},"content":"        } else {"},{"lineNumber":108,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/at YYYY-MM-DD\u0027 after description\\n\");"},{"lineNumber":109,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":112,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"QY-H00"},"content":"     * Returns a task corresponding to the line of file stored in the disk."},{"lineNumber":114,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"QY-H00"},"content":"     * @param line line of the file stored in the disk."},{"lineNumber":116,"author":{"gitId":"QY-H00"},"content":"     * @return a task corresponding to the line."},{"lineNumber":117,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"QY-H00"},"content":"    public static Task parseInFile(String line) {"},{"lineNumber":119,"author":{"gitId":"QY-H00"},"content":"        Task task;"},{"lineNumber":120,"author":{"gitId":"QY-H00"},"content":"        if (line.charAt(1) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":121,"author":{"gitId":"QY-H00"},"content":"            task \u003d new ToDo(line.substring(8));"},{"lineNumber":122,"author":{"gitId":"QY-H00"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027D\u0027 \u0026\u0026 line.contains(\"by: \")) {"},{"lineNumber":123,"author":{"gitId":"QY-H00"},"content":"            int endOfDescription \u003d line.indexOf(\"by: \");"},{"lineNumber":124,"author":{"gitId":"QY-H00"},"content":"            String description \u003d line.substring(8, endOfDescription);"},{"lineNumber":125,"author":{"gitId":"QY-H00"},"content":"            String deadline \u003d line.substring(endOfDescription + 4, line.length() - 1);"},{"lineNumber":126,"author":{"gitId":"QY-H00"},"content":"            LocalDate date \u003d LocalDate.parse(deadline);"},{"lineNumber":127,"author":{"gitId":"QY-H00"},"content":"            task \u003d new Deadline(description, date);"},{"lineNumber":128,"author":{"gitId":"QY-H00"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027E\u0027 \u0026\u0026 line.contains(\"at: \")) {"},{"lineNumber":129,"author":{"gitId":"QY-H00"},"content":"            int endOfDescription \u003d line.indexOf(\"at: \");"},{"lineNumber":130,"author":{"gitId":"QY-H00"},"content":"            String description \u003d line.substring(8, endOfDescription);"},{"lineNumber":131,"author":{"gitId":"QY-H00"},"content":"            String time \u003d line.substring(endOfDescription + 4, line.length() - 1);"},{"lineNumber":132,"author":{"gitId":"QY-H00"},"content":"            LocalDate date \u003d LocalDate.parse(time);"},{"lineNumber":133,"author":{"gitId":"QY-H00"},"content":"            task \u003d new Event(description, date);"},{"lineNumber":134,"author":{"gitId":"QY-H00"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! It seems there is file corruption.\\n\");"},{"lineNumber":136,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"QY-H00"},"content":"        if (line.charAt(4) \u003d\u003d \u0027X\u0027) {"},{"lineNumber":138,"author":{"gitId":"QY-H00"},"content":"            task.markedAsDone();"},{"lineNumber":139,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"QY-H00"},"content":"        return task;"},{"lineNumber":141,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":142}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.io.BufferedWriter;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":" * Used to store to or load from the task lists into the disk"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    Path filePath;"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"     * Creates a storage corresponding to the path."},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"     * @param path the location of file in the disk."},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    public Storage(String path) {"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"        this.filePath \u003d Paths.get(path);"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"     * Loads the task list file from filePath."},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"     * @return a list of task corresponding to the file."},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"     * @throws IOException if such filePath does not exist."},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"    public List\u003cTask\u003e load() throws IOException {"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"        List\u003cString\u003e strings \u003d Files.readAllLines(filePath);"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"        for (String line : strings) {"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"            Task task \u003d Parser.parseInFile(line);"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"            tasks.add(task);"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"        return tasks;"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"     * Saves the task list into the file in the disk corresponding to the filePath."},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the task list that users input."},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"    public void save(TaskList taskList) {"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"            Path directoryPath \u003d filePath.getParent();"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"            if (!Files.exists(directoryPath)) {"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"                Files.createDirectory(directoryPath);"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"            if (!Files.exists(filePath)) {"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"                Files.createFile(filePath);"},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"            BufferedWriter bufferedWriter \u003d Files.newBufferedWriter(filePath);"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"            for (Task task : taskList.getTasks()) {"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"                bufferedWriter.write(task.toString() + \"\\n\");"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"            bufferedWriter.flush();"},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"            bufferedWriter.close();"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":"        } catch (IOException e) {"},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"            e.printStackTrace();"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":69}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":" * Abstracts the list of task."},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     * Creates a taskList with a list of tasks."},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"     * @param tasks list of tasks."},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    public TaskList() {"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"        return this.tasks;"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"     * Adds a new task into the taskList."},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"     * @param task task that need to be added."},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"    public void add(Task task) {"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"        tasks.add(task);"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"     * Deletes a task in the taskList located by index."},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"     * The index starts from 1."},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"     * @param index the index of task that need to be deleted in the taskList."},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"     * @return"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"    public Task delete(int index) {"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"        return tasks.remove(index - 1);"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"     * Marks a task done located by index."},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"     * The index starts from 1."},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"     * @param index the index of task that is done."},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"     * @return"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"    public Task mark(int index) {"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"        Task taskToBeMarked \u003d tasks.get(index - 1);"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"        taskToBeMarked.markedAsDone();"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"        return taskToBeMarked;"},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"    public TaskList find(String keyword) {"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"        List\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"        for (Task task : tasks) {"},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"            if (task.getDescription().contains(keyword)) res.add(task);"},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"        return new TaskList(res);"},{"lineNumber":72,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":73}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":" * Used by Momo to read or write to the user."},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"    private static final StringBuffer boundOfChatBox \u003d new StringBuffer();"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"     * Defines the appearance of chat box."},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    public static void setBoundOfChatBox() {"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"        boundOfChatBox.append(\u0027\\n\u0027);"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        int lenOfChatBox \u003d 50;"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"        boundOfChatBox.append(\"-\".repeat(lenOfChatBox));"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        boundOfChatBox.append(\u0027\\n\u0027);"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"     * Formats string to stimulate a chat box of Momo."},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"     * @param s contents in the chat box"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    public static void formatInChatBox(String s) {"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"        System.out.println(boundOfChatBox + s + boundOfChatBox);"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"     * Displays when the Momo inits and starts to run."},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"    public static void showInitUi() {"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"        setBoundOfChatBox();"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"        String logo \u003d \"    __      __      ____ \\n\" +"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"                \"   /  \\\\    /  \\\\    / __ \\\\\\n\" +"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"                \"  / /\\\\ \\\\  / /\\\\ \\\\  | |  | |\\n\" +"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"                \" / /  \\\\ \\\\/ /  \\\\ \\\\ | |__| |\\n\" +"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"                \"/_/    \\\\__/    \\\\_\\\\ \\\\____/\";"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"        String greeting \u003d \"Hello! I\u0027m Momo\\nWhat can I do for you?\";"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(logo);"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(greeting + \u0027\\n\u0027);"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"     * Displays when Momo receives \"bye\" command and exits."},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"    public static void showExitUi() {"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"        String goodbye \u003d \"Bye. Hope to see you again soon!\\n\";"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(goodbye);"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"     * Lists all the tasks when Momo receives \"list\" command."},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of tasks."},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"    public static void showList(TaskList taskList) {"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"        int n \u003d tasks.size();"},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"        if (n \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":"            formatInChatBox(\"There is no task\\n\");"},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"            return ;"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"        StringBuffer buf \u003d new StringBuffer();"},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"        for (int i \u003d 0; i \u003c n; i++)"},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"            buf.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"        String res \u003d new String(buf);"},{"lineNumber":72,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(\"Here are the tasks in your list:\\n\" + res);"},{"lineNumber":73,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":75,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"QY-H00"},"content":"     * Informs the user the addition is successful."},{"lineNumber":77,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of tasks."},{"lineNumber":79,"author":{"gitId":"QY-H00"},"content":"     * @param task the task that is added."},{"lineNumber":80,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"QY-H00"},"content":"    public static void showMatchingResult(TaskList taskList) {"},{"lineNumber":82,"author":{"gitId":"QY-H00"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":83,"author":{"gitId":"QY-H00"},"content":"        int n \u003d tasks.size();"},{"lineNumber":84,"author":{"gitId":"QY-H00"},"content":"        if (n \u003d\u003d 0) {"},{"lineNumber":85,"author":{"gitId":"QY-H00"},"content":"            formatInChatBox(\"There is no matching task\\n\");"},{"lineNumber":86,"author":{"gitId":"QY-H00"},"content":"            return ;"},{"lineNumber":87,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"QY-H00"},"content":"        StringBuffer buf \u003d new StringBuffer();"},{"lineNumber":89,"author":{"gitId":"QY-H00"},"content":"        for (int i \u003d 0; i \u003c n; i++)"},{"lineNumber":90,"author":{"gitId":"QY-H00"},"content":"            buf.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":91,"author":{"gitId":"QY-H00"},"content":"        String res \u003d new String(buf);"},{"lineNumber":92,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(\"Here are the matching tasks in your list:\\n\" + res);"},{"lineNumber":93,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":95,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"QY-H00"},"content":"     * Informs the user the addition is successful."},{"lineNumber":97,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of the tasks."},{"lineNumber":99,"author":{"gitId":"QY-H00"},"content":"     * @param task the task to be added."},{"lineNumber":100,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"QY-H00"},"content":"    public static void showSuccessfulAdd(TaskList taskList, Task task) {"},{"lineNumber":102,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(\"Got it. I\u0027ve added this task:\" + \u0027\\n\u0027"},{"lineNumber":103,"author":{"gitId":"QY-H00"},"content":"                + task + \"\\n\""},{"lineNumber":104,"author":{"gitId":"QY-H00"},"content":"                + \"Now you have \" + taskList.getTasks().size() + \" tasks in the list.\\n\");"},{"lineNumber":105,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":107,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"QY-H00"},"content":"     * Informs the user the mark to make task done is successful."},{"lineNumber":109,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"QY-H00"},"content":"     * @param task the task that is done."},{"lineNumber":111,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"QY-H00"},"content":"    public static void showSuccessfulMark(Task task) {"},{"lineNumber":113,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(\"Nice! I\u0027ve marked this duke.task as done:\\n\" + task + \"\\n\");"},{"lineNumber":114,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":116,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"QY-H00"},"content":"     * Informs the user the deletion is successful."},{"lineNumber":118,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of tasks."},{"lineNumber":120,"author":{"gitId":"QY-H00"},"content":"     * @param task the task that is deleted."},{"lineNumber":121,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"QY-H00"},"content":"    public static void showSuccessfulDelete(TaskList taskList, Task task) {"},{"lineNumber":123,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(\"Got it. I\u0027ve removed this duke.task:\" + \u0027\\n\u0027"},{"lineNumber":124,"author":{"gitId":"QY-H00"},"content":"                + task + \"\\n\""},{"lineNumber":125,"author":{"gitId":"QY-H00"},"content":"                + \"Now you have \" + taskList.getTasks().size() + \" tasks in the list.\\n\");"},{"lineNumber":126,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":128,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"QY-H00"},"content":"     * Informs the user there is error when parsing the date of tasks."},{"lineNumber":130,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"QY-H00"},"content":"    public static void showDateParseError() {"},{"lineNumber":132,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(\"OOPS!!! Please use \u0027/by YYYY-MM-DD\u0027 after description.\\n\");"},{"lineNumber":133,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":135,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"QY-H00"},"content":"     * Informs the user there is error that Momo cannot understand."},{"lineNumber":137,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"QY-H00"},"content":"    public static void showGeneralError() {"},{"lineNumber":139,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");"},{"lineNumber":141,"author":{"gitId":"QY-H00"},"content":"        } catch (ParseException e) {"},{"lineNumber":142,"author":{"gitId":"QY-H00"},"content":"            formatInChatBox(e.getMsgDes());"},{"lineNumber":143,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":146,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"QY-H00"},"content":"     * Informs the user that the loading is unsuccessful."},{"lineNumber":148,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"QY-H00"},"content":"    public static void showLoadingError() {"},{"lineNumber":150,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(\"OOPS!!! Something wrong happens when loading.\\n\");"},{"lineNumber":151,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":153,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"QY-H00"},"content":"     * Informs the user delete or mark done properly and tells the number of tasks in the taskList."},{"lineNumber":155,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of task."},{"lineNumber":157,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"QY-H00"},"content":"    public static void showIndexOutOfBoundsError(TaskList taskList) {"},{"lineNumber":159,"author":{"gitId":"QY-H00"},"content":"        formatInChatBox(\"OOPS! Now you have only \" + taskList.getTasks().size() + \"tasks, please mark/delete the added tasks.\");"},{"lineNumber":160,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":161}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":" * One kind of Task that need to be done before the date."},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"    private final LocalDate deadline;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"    /** Creates a deadline with description and date of deadline."},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"     * @param description description of the deadline."},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"     * @param deadline date of the deadline."},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    public Deadline(String description, LocalDate deadline) {"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + this.deadline + \")\";"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":26}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":" * One kind of Task that need to be done in the date."},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"    private final LocalDate date;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"     * Creates an event with description and date of event."},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"     * @param description description of the event."},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     * @param date date of event."},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    public Event(String description, LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + this.date + \")\";"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":27}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"     * Creates a task with description."},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"     * @param description description of the task."},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    public Task(String description) {"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    public String getStatusIcon() {"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or X symbols"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    public String getDescription() {"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"        return this.description;"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"     * Marks itself done."},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"    public void markedAsDone() {"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"        this.isDone \u003d true;"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getDescription();"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":38}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":" * One kind of Task that is not with date."},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"     * Creates a todo task with description"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"     * @param description description of todo"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":21}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"class ParserTest {"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForByeTest() {"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"bye\");"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.BYE);"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForDoneTest() {"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"done\");"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.DONE);"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForToDoTest() {"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"todo\");"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.TODO);"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForDeadlineTest() {"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"deadline\");"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.DEADLINE);"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForEVENTTest() {"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"event\");"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.EVENT);"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForListTest() {"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"list\");"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.LIST);"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"    public void parseDeadlineTest() {"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"        Deadline deadline \u003d (Deadline) Parser.parseDescription(Command.DEADLINE, \"nothing /by 2021-01-20\");"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"        assertEquals(deadline.toString(), new Deadline(\"nothing \", LocalDate.parse(\"2021-01-20\")).toString());"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"    public void parseEventTest() {"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"        Event event \u003d (Event) Parser.parseDescription(Command.EVENT, \"nothing /at 2021-01-20\");"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"        assertEquals(event.toString(), new Event(\"nothing \", LocalDate.parse(\"2021-01-20\")).toString());"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":53}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"    public void deadlineConstructorTest() {"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"        LocalDate date \u003d LocalDate.parse(\"2020-01-20\");"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"        Deadline deadline \u003d new Deadline(\"return the book\", date);"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"        assertEquals(deadline.toString(), \"[D][ ] return the book(by: 2020-01-20)\");"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    public void deadlineMarkedTest() {"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"        LocalDate date \u003d LocalDate.parse(\"2020-01-20\");"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        Deadline deadline \u003d new Deadline(\"return the book\", date);"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"        deadline.isDone \u003d true;"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        assertEquals(deadline.toString(), \"[D][X] return the book(by: 2020-01-20)\");"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":23}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"[T][ ] ad book"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":"[D][X] turn book (((by: 2021-06-20)"},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"[E][ ] oject meeting (((at: 2020-04-20)"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"[D][ ] eturn book ((by: 2021-06-20)"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"[E][ ] roject meeting ((at: 2020-04-20)"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"[T][ ] oin sports club"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"[T][ ] orrow book"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"[T][ ] read book"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"[D][ ] return book (by: 2021-06-20)"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"[E][ ] project meeting (at: 2020-04-20)"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"[T][ ] join sports club"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"[T][ ] borrow book"}],"authorContributionMap":{"QY-H00":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":"deadline return book /by 2021-06-20"},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"done 2"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"event project meeting /at 2020-04-20"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"list"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"find book"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"deadline return book /by Sunday"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"delete 4"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"list"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"todo"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"todo "},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"deadline"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"deadline "},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"event"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"event "},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"blah"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"bye"}],"authorContributionMap":{"QY-H00":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"java -classpath ..\\bin duke.Momo \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"QY-H00":2,"-":19}}]
