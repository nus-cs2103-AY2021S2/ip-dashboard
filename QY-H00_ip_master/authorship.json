[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"repositories {"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"    mavenCentral()"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"}"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"dependencies {"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"}"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"QY-H00":22,"-":46}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":" * The set of different commands that Momo can identify."},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, FIND"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":8}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.ui.MainWindow;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    private Momo momo \u003d new Momo(\"data/tasks.txt\");"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setMomo(momo);"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":33}},{"path":"src/main/java/duke/Momo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import duke.ui.TextUi;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"public class Momo {"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     * Creates a Momo with an original task list if file path exists."},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"     * Creates a Momo with empty task list else."},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"     * @param filePath the path of the *.txt file including information of existing tasks."},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    public Momo(String filePath) {"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"            tasks \u003d new TaskList(storage.loadTasks());"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"        } catch (ParseException | IOException e) {"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"     * Gets response if input is \"bye\"."},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"     * @return text UI for BYE."},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForBye() {"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"        return TextUi.showExitUi();"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"     * Gets response if input is \"list\"."},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"     * @return text UI for LIST."},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForList() {"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"        return TextUi.showList(this.tasks);"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"     * Gets response if input is \"done x\", where x is an integer."},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"     * @param restInput x in the String format."},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"     * @return text UI for DONE."},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForDone(String restInput) {"},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"        int i \u003d Integer.parseInt(restInput);"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"            return TextUi.showSuccessfulMark(tasks.mark(i));"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"            return TextUi.showIndexOutOfBoundsError(tasks);"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":"     * Gets response if input is \"delete x\", where x in an integer."},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"     * @param restInput x in the String format."},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"     * @return text UI for DONE."},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForDelete(String restInput) {"},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"        int j \u003d Integer.parseInt(restInput);"},{"lineNumber":72,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"QY-H00"},"content":"            Task taskToBeDeleted \u003d tasks.delete(j);"},{"lineNumber":74,"author":{"gitId":"QY-H00"},"content":"            storage.save(tasks);"},{"lineNumber":75,"author":{"gitId":"QY-H00"},"content":"            return TextUi.showSuccessfulDelete(tasks, taskToBeDeleted);"},{"lineNumber":76,"author":{"gitId":"QY-H00"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":77,"author":{"gitId":"QY-H00"},"content":"            return TextUi.showIndexOutOfBoundsError(tasks);"},{"lineNumber":78,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":81,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"QY-H00"},"content":"     * Gets response if input is \"find {keyword}\", where {keyword} is a string."},{"lineNumber":83,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"QY-H00"},"content":"     * @param restInput the {keyword}."},{"lineNumber":85,"author":{"gitId":"QY-H00"},"content":"     * @return textUI for FIND."},{"lineNumber":86,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForFind(String restInput) {"},{"lineNumber":88,"author":{"gitId":"QY-H00"},"content":"        return TextUi.showMatchingResult(tasks.find(restInput));"},{"lineNumber":89,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":91,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"QY-H00"},"content":"     * Gets response if input is \"todo/deadline/event {description}\", where {description} is a string."},{"lineNumber":93,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"QY-H00"},"content":"     * @param command todo or deadline or event"},{"lineNumber":95,"author":{"gitId":"QY-H00"},"content":"     * @param restInput the {description}."},{"lineNumber":96,"author":{"gitId":"QY-H00"},"content":"     * @return textUI for TODO / DEADLINE / EVENT."},{"lineNumber":97,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForAdd(Command command, String restInput) {"},{"lineNumber":99,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"QY-H00"},"content":"            Task taskToBeAdded \u003d Parser.parseDescription(command, restInput);"},{"lineNumber":101,"author":{"gitId":"QY-H00"},"content":"            tasks.add(taskToBeAdded);"},{"lineNumber":102,"author":{"gitId":"QY-H00"},"content":"            storage.save(tasks);"},{"lineNumber":103,"author":{"gitId":"QY-H00"},"content":"            return TextUi.showSuccessfulAdd(tasks, taskToBeAdded);"},{"lineNumber":104,"author":{"gitId":"QY-H00"},"content":"        } catch (ParseException e) {"},{"lineNumber":105,"author":{"gitId":"QY-H00"},"content":"            return TextUi.formatInChatBox(e.getMsgDes());"},{"lineNumber":106,"author":{"gitId":"QY-H00"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":107,"author":{"gitId":"QY-H00"},"content":"            return TextUi.showDateParseError();"},{"lineNumber":108,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":111,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"QY-H00"},"content":"     * Gets response if input is not valid."},{"lineNumber":113,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"QY-H00"},"content":"     * @return textUI for invalid input."},{"lineNumber":115,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForInvalidResponse() {"},{"lineNumber":117,"author":{"gitId":"QY-H00"},"content":"        return TextUi.showGeneralError();"},{"lineNumber":118,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":120,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"QY-H00"},"content":"     * Throws StringIndexOutOfBoundsException if input is a single word."},{"lineNumber":122,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"QY-H00"},"content":"     * @param input user input."},{"lineNumber":124,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"QY-H00"},"content":"    private void testIsInputMultipleWords(String input) {"},{"lineNumber":126,"author":{"gitId":"QY-H00"},"content":"        int endOfFirstWord \u003d input.indexOf(\u0027 \u0027);"},{"lineNumber":127,"author":{"gitId":"QY-H00"},"content":"        if (endOfFirstWord \u003c 0 || endOfFirstWord \u003e\u003d input.length()) {"},{"lineNumber":128,"author":{"gitId":"QY-H00"},"content":"            throw new StringIndexOutOfBoundsException();"},{"lineNumber":129,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":132,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"QY-H00"},"content":"     * Gets command from user input of multiple words."},{"lineNumber":134,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"QY-H00"},"content":"     * @param input total user input."},{"lineNumber":136,"author":{"gitId":"QY-H00"},"content":"     * @return valid command."},{"lineNumber":137,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"QY-H00"},"content":"    private Command getCommandForMultipleWords(String input) {"},{"lineNumber":139,"author":{"gitId":"QY-H00"},"content":"        return Parser.parseCommandForMultipleWords(input);"},{"lineNumber":140,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":142,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"QY-H00"},"content":"     * Gets command from user input of single word."},{"lineNumber":144,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"QY-H00"},"content":"     * @param input total user input."},{"lineNumber":146,"author":{"gitId":"QY-H00"},"content":"     * @return valid command."},{"lineNumber":147,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"QY-H00"},"content":"    private Command getCommandForSingleWord(String input) {"},{"lineNumber":149,"author":{"gitId":"QY-H00"},"content":"        return Parser.parseCommandForSingleWord(input);"},{"lineNumber":150,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":152,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"QY-H00"},"content":"     * Gets the rest user input apart from command."},{"lineNumber":154,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"QY-H00"},"content":"     * @param input total user input."},{"lineNumber":156,"author":{"gitId":"QY-H00"},"content":"     * @return the rest user input."},{"lineNumber":157,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"QY-H00"},"content":"    private String getRestInput(String input) {"},{"lineNumber":159,"author":{"gitId":"QY-H00"},"content":"        return Parser.parseRestInput(input);"},{"lineNumber":160,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":162,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"QY-H00"},"content":"     * Gets the response for single word input."},{"lineNumber":164,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"QY-H00"},"content":"     * @param input total user input."},{"lineNumber":166,"author":{"gitId":"QY-H00"},"content":"     * @return textUI for single word input."},{"lineNumber":167,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForSingleWord(String input) {"},{"lineNumber":169,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":170,"author":{"gitId":"QY-H00"},"content":"            getCommandForSingleWord(input);"},{"lineNumber":171,"author":{"gitId":"QY-H00"},"content":"        } catch (IllegalArgumentException e1) {"},{"lineNumber":172,"author":{"gitId":"QY-H00"},"content":"            return getResponseForInvalidResponse();"},{"lineNumber":173,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"QY-H00"},"content":"        Command command \u003d getCommandForSingleWord(input);"},{"lineNumber":175,"author":{"gitId":"QY-H00"},"content":"        switch (command) {"},{"lineNumber":176,"author":{"gitId":"QY-H00"},"content":"        case BYE:"},{"lineNumber":177,"author":{"gitId":"QY-H00"},"content":"            return getResponseForBye();"},{"lineNumber":178,"author":{"gitId":"QY-H00"},"content":"        case LIST:"},{"lineNumber":179,"author":{"gitId":"QY-H00"},"content":"            return getResponseForList();"},{"lineNumber":180,"author":{"gitId":"QY-H00"},"content":"        default:"},{"lineNumber":181,"author":{"gitId":"QY-H00"},"content":"            assert false;"},{"lineNumber":182,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"QY-H00"},"content":"        return getResponseForInvalidResponse();"},{"lineNumber":184,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":186,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"QY-H00"},"content":"     * Gets responses for multiple words input."},{"lineNumber":188,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"QY-H00"},"content":"     * @param input total user input."},{"lineNumber":190,"author":{"gitId":"QY-H00"},"content":"     * @return textUI for multiple words input."},{"lineNumber":191,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"QY-H00"},"content":"    private String getResponseForMultipleWords(String input) {"},{"lineNumber":193,"author":{"gitId":"QY-H00"},"content":"        Command command \u003d getCommandForMultipleWords(input);"},{"lineNumber":194,"author":{"gitId":"QY-H00"},"content":"        String restInput \u003d getRestInput(input);"},{"lineNumber":195,"author":{"gitId":"QY-H00"},"content":"        switch (command) {"},{"lineNumber":196,"author":{"gitId":"QY-H00"},"content":"        case DONE:"},{"lineNumber":197,"author":{"gitId":"QY-H00"},"content":"            return getResponseForDone(restInput);"},{"lineNumber":198,"author":{"gitId":"QY-H00"},"content":"        case DELETE:"},{"lineNumber":199,"author":{"gitId":"QY-H00"},"content":"            return getResponseForDelete(restInput);"},{"lineNumber":200,"author":{"gitId":"QY-H00"},"content":"        case FIND:"},{"lineNumber":201,"author":{"gitId":"QY-H00"},"content":"            return getResponseForFind(restInput);"},{"lineNumber":202,"author":{"gitId":"QY-H00"},"content":"        default:"},{"lineNumber":203,"author":{"gitId":"QY-H00"},"content":"            return getResponseForAdd(command, restInput);"},{"lineNumber":204,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":207,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"QY-H00"},"content":"     * Gets responses from Momo using the input of users."},{"lineNumber":209,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"QY-H00"},"content":"     * @param input input of user."},{"lineNumber":211,"author":{"gitId":"QY-H00"},"content":"     * @return answer of Momo."},{"lineNumber":212,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"QY-H00"},"content":"    public String getResponse(String input) {"},{"lineNumber":214,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":215,"author":{"gitId":"QY-H00"},"content":"            testIsInputMultipleWords(input);"},{"lineNumber":216,"author":{"gitId":"QY-H00"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":217,"author":{"gitId":"QY-H00"},"content":"            return getResponseForSingleWord(input);"},{"lineNumber":218,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":220,"author":{"gitId":"QY-H00"},"content":"            return getResponseForMultipleWords(input);"},{"lineNumber":221,"author":{"gitId":"QY-H00"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":222,"author":{"gitId":"QY-H00"},"content":"            return getResponseForInvalidResponse();"},{"lineNumber":223,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":225}},{"path":"src/main/java/duke/ParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":" * Extends RuntimeException and is used when parsing fails."},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"public class ParseException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"    private final String msgDes;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"     * Builds the exception with given message."},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"     * @param message the information of the error message."},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    public ParseException(String message) {"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"        super(message);"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"        msgDes \u003d message;"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    public String getMsgDes() {"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        return msgDes;"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":23}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"import duke.task.ToDo;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"     * Returns a Command with enum type by parsing user input of single word."},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     * @param input the string that the user inputs."},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"     * @return a Command of the enum type."},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    public static Command parseCommandForSingleWord(String input) {"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        return Command.valueOf(input.toUpperCase(Locale.ROOT));"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"     * Returns a Command with enum type by parsing user input of multiple words."},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"     * @param input the string that the user inputs."},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"     * @return a Command of the enum type."},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"    public static Command parseCommandForMultipleWords(String input) {"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"        int endOfFirstWord \u003d input.indexOf(\u0027 \u0027);"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"        String commandInput \u003d input.substring(0, endOfFirstWord);"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"        return Command.valueOf(commandInput.toUpperCase(Locale.ROOT));"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"     * Returns the rest input apart from the command by parsing user input."},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"     * @param input the string that the user inputs."},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"     * @return the rest input."},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"    public static String parseRestInput(String input) {"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"        int endOfFirstWord \u003d input.indexOf(\u0027 \u0027);"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"        return input.substring(endOfFirstWord + 1);"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"     * Returns a task by parsing description under instruction of command."},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"     * @param command the Command enum type."},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"     * @param input input of user."},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"     * @return the task corresponding to the input."},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"     * @throws ParseException if parsing fails."},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"    public static Task parseDescription(Command command, String input) throws ParseException {"},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"        switch (command) {"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"        case TODO:"},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"            return parseToDo(input);"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"        case DEADLINE:"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"            return parseDeadline(input);"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"        case EVENT:"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"            return parseEvent(input);"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"        default:"},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"the first argument command is not valid.\");"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"     * Returns a ToDo by parsing the input behind the command."},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"     * Used when the command is todo."},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"     * Works when the input is not empty."},{"lineNumber":72,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"QY-H00"},"content":"     * @param input input of users."},{"lineNumber":74,"author":{"gitId":"QY-H00"},"content":"     * @return a task of ToDo corresponding to the input."},{"lineNumber":75,"author":{"gitId":"QY-H00"},"content":"     * @throws ParseException if the description is empty."},{"lineNumber":76,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"QY-H00"},"content":"    private static ToDo parseToDo(String input) throws ParseException {"},{"lineNumber":78,"author":{"gitId":"QY-H00"},"content":"        if (input.isEmpty() || input.equals(\" \")) {"},{"lineNumber":79,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! The description of a todo cannot be empty.\\n\");"},{"lineNumber":80,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"QY-H00"},"content":"        if (input.charAt(0) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":82,"author":{"gitId":"QY-H00"},"content":"            input \u003d input.substring(1);"},{"lineNumber":83,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"QY-H00"},"content":"        assert input.isEmpty() : false;"},{"lineNumber":85,"author":{"gitId":"QY-H00"},"content":"        return new ToDo(input);"},{"lineNumber":86,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":88,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"QY-H00"},"content":"     * Returns a Deadline by parsing the input behind the command."},{"lineNumber":90,"author":{"gitId":"QY-H00"},"content":"     * Used when the command is deadline."},{"lineNumber":91,"author":{"gitId":"QY-H00"},"content":"     * Works when the input is \"{description} /by YYYY-MM-DD\"."},{"lineNumber":92,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"QY-H00"},"content":"     * @param input input of users."},{"lineNumber":94,"author":{"gitId":"QY-H00"},"content":"     * @return a task of Deadline corresponding to the input."},{"lineNumber":95,"author":{"gitId":"QY-H00"},"content":"     * @throws ParseException if the description is empty."},{"lineNumber":96,"author":{"gitId":"QY-H00"},"content":"     * @throws DateTimeParseException if the format of data time is not correct."},{"lineNumber":97,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"QY-H00"},"content":"    private static Deadline parseDeadline(String input) throws ParseException, DateTimeParseException {"},{"lineNumber":99,"author":{"gitId":"QY-H00"},"content":"        if (input.isEmpty() || input.equals(\" \")) {"},{"lineNumber":100,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! The description of a deadline cannot be empty.\\n\");"},{"lineNumber":101,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"QY-H00"},"content":"        if (input.contains(\"/by \")) {"},{"lineNumber":103,"author":{"gitId":"QY-H00"},"content":"            if (input.charAt(0) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":104,"author":{"gitId":"QY-H00"},"content":"                input \u003d input.substring(1);"},{"lineNumber":105,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"QY-H00"},"content":"            int endOfDescription \u003d input.indexOf(\"/by \");"},{"lineNumber":107,"author":{"gitId":"QY-H00"},"content":"            String description \u003d input.substring(0, endOfDescription);"},{"lineNumber":108,"author":{"gitId":"QY-H00"},"content":"            String deadline \u003d input.substring(endOfDescription + 4);"},{"lineNumber":109,"author":{"gitId":"QY-H00"},"content":"            LocalDate date \u003d LocalDate.parse(deadline);"},{"lineNumber":110,"author":{"gitId":"QY-H00"},"content":"            return new Deadline(description, date);"},{"lineNumber":111,"author":{"gitId":"QY-H00"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/by YYYY-MM-DD\u0027 after description.\\n\");"},{"lineNumber":113,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":116,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"QY-H00"},"content":"     * Returns an Event by parsing the input behind the command."},{"lineNumber":118,"author":{"gitId":"QY-H00"},"content":"     * Used when the command is event."},{"lineNumber":119,"author":{"gitId":"QY-H00"},"content":"     * Works when the input is \"{description} /at YYYY-MM-DD\"."},{"lineNumber":120,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"QY-H00"},"content":"     * @param input input of users."},{"lineNumber":122,"author":{"gitId":"QY-H00"},"content":"     * @return a task of Event corresponding to the input."},{"lineNumber":123,"author":{"gitId":"QY-H00"},"content":"     * @throws ParseException if the description is empty."},{"lineNumber":124,"author":{"gitId":"QY-H00"},"content":"     * @throws DateTimeParseException if the format of data time is not correct."},{"lineNumber":125,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"QY-H00"},"content":"    private static Event parseEvent(String input) throws ParseException, DateTimeParseException {"},{"lineNumber":127,"author":{"gitId":"QY-H00"},"content":"        if (input.isEmpty() || input.equals(\" \")) {"},{"lineNumber":128,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! The description of an event cannot be empty.\\n\");"},{"lineNumber":129,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"QY-H00"},"content":"        if (input.contains(\"/at \")) {"},{"lineNumber":131,"author":{"gitId":"QY-H00"},"content":"            if (input.charAt(0) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":132,"author":{"gitId":"QY-H00"},"content":"                input \u003d input.substring(1);"},{"lineNumber":133,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"QY-H00"},"content":"            assert !input.contains(\"/at \") : false;"},{"lineNumber":135,"author":{"gitId":"QY-H00"},"content":"            int endOfDescription \u003d input.indexOf(\"/at \");"},{"lineNumber":136,"author":{"gitId":"QY-H00"},"content":"            String description \u003d input.substring(0, endOfDescription);"},{"lineNumber":137,"author":{"gitId":"QY-H00"},"content":"            String time \u003d input.substring(endOfDescription + 4);"},{"lineNumber":138,"author":{"gitId":"QY-H00"},"content":"            LocalDate date \u003d LocalDate.parse(time);"},{"lineNumber":139,"author":{"gitId":"QY-H00"},"content":"            return new Event(description, date);"},{"lineNumber":140,"author":{"gitId":"QY-H00"},"content":"        } else {"},{"lineNumber":141,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/at YYYY-MM-DD\u0027 after description\\n\");"},{"lineNumber":142,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":145,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"QY-H00"},"content":"     * Parses ToDo stored in the file."},{"lineNumber":147,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":148,"author":{"gitId":"QY-H00"},"content":"     * @param line one line represents a todo task in the flie."},{"lineNumber":149,"author":{"gitId":"QY-H00"},"content":"     * @return a ToDo task."},{"lineNumber":150,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"QY-H00"},"content":"    public static ToDo parseForToDoInFile(String line) {"},{"lineNumber":152,"author":{"gitId":"QY-H00"},"content":"        return new ToDo(line.substring(8));"},{"lineNumber":153,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":155,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"QY-H00"},"content":"     * Parses Deadline stored in the file."},{"lineNumber":157,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"QY-H00"},"content":"     * @param line one line represents a deadline task in the flie."},{"lineNumber":159,"author":{"gitId":"QY-H00"},"content":"     * @return a Deadline task."},{"lineNumber":160,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"QY-H00"},"content":"    public static Task parseForDeadlineInFile(String line) {"},{"lineNumber":162,"author":{"gitId":"QY-H00"},"content":"        int endOfDescription \u003d line.indexOf(\"by: \");"},{"lineNumber":163,"author":{"gitId":"QY-H00"},"content":"        String description \u003d line.substring(8, endOfDescription);"},{"lineNumber":164,"author":{"gitId":"QY-H00"},"content":"        String deadline \u003d line.substring(endOfDescription + 4, line.length() - 1);"},{"lineNumber":165,"author":{"gitId":"QY-H00"},"content":"        LocalDate date \u003d LocalDate.parse(deadline);"},{"lineNumber":166,"author":{"gitId":"QY-H00"},"content":"        return new Deadline(description, date);"},{"lineNumber":167,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":169,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"QY-H00"},"content":"     * Parses Event stored in the file."},{"lineNumber":171,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":172,"author":{"gitId":"QY-H00"},"content":"     * @param line one line represents an event task in the flie."},{"lineNumber":173,"author":{"gitId":"QY-H00"},"content":"     * @return an Event task."},{"lineNumber":174,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"QY-H00"},"content":"    public static Task parseForEventInFile(String line) {"},{"lineNumber":176,"author":{"gitId":"QY-H00"},"content":"        int endOfDescription \u003d line.indexOf(\"at: \");"},{"lineNumber":177,"author":{"gitId":"QY-H00"},"content":"        String description \u003d line.substring(8, endOfDescription);"},{"lineNumber":178,"author":{"gitId":"QY-H00"},"content":"        String time \u003d line.substring(endOfDescription + 4, line.length() - 1);"},{"lineNumber":179,"author":{"gitId":"QY-H00"},"content":"        LocalDate date \u003d LocalDate.parse(time);"},{"lineNumber":180,"author":{"gitId":"QY-H00"},"content":"        return new Event(description, date);"},{"lineNumber":181,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":183,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"QY-H00"},"content":"     * Returns a task corresponding to the line of file stored in the disk."},{"lineNumber":185,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"QY-H00"},"content":"     * @param line line of the file stored in the disk."},{"lineNumber":187,"author":{"gitId":"QY-H00"},"content":"     * @return a task corresponding to the line."},{"lineNumber":188,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"QY-H00"},"content":"    public static Task parseInFile(String line) {"},{"lineNumber":190,"author":{"gitId":"QY-H00"},"content":"        Task task;"},{"lineNumber":191,"author":{"gitId":"QY-H00"},"content":"        if (line.charAt(1) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":192,"author":{"gitId":"QY-H00"},"content":"            task \u003d parseForToDoInFile(line);"},{"lineNumber":193,"author":{"gitId":"QY-H00"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027D\u0027 \u0026\u0026 line.contains(\"by: \")) {"},{"lineNumber":194,"author":{"gitId":"QY-H00"},"content":"            task \u003d parseForDeadlineInFile(line);"},{"lineNumber":195,"author":{"gitId":"QY-H00"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027E\u0027 \u0026\u0026 line.contains(\"at: \")) {"},{"lineNumber":196,"author":{"gitId":"QY-H00"},"content":"            task \u003d parseForEventInFile(line);"},{"lineNumber":197,"author":{"gitId":"QY-H00"},"content":"        } else {"},{"lineNumber":198,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! It seems there is file corruption.\\n\");"},{"lineNumber":199,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"QY-H00"},"content":"        if (line.charAt(4) \u003d\u003d \u0027X\u0027) {"},{"lineNumber":201,"author":{"gitId":"QY-H00"},"content":"            task.markedAsDone();"},{"lineNumber":202,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"QY-H00"},"content":"        return task;"},{"lineNumber":204,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":205}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":" * Used to store to or load from the task lists into the disk"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    private Path filePath;"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"     * Creates a storage corresponding to the path."},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"     * @param path the location of file in the disk."},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    public Storage(String path) {"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"        this.filePath \u003d Paths.get(path);"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"     * Loads the task list file from filePath."},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"     * @return a list of task corresponding to the file."},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"     * @throws IOException if such filePath does not exist."},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"    public List\u003cTask\u003e loadTasks() throws IOException {"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"        List\u003cString\u003e strings \u003d Files.readAllLines(filePath);"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"        for (String line : strings) {"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"            Task task \u003d Parser.parseInFile(line);"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"            tasks.add(task);"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"        return tasks;"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"     * Saves the task list into the file in the disk corresponding to the filePath."},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the task list that users input."},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"    public void save(TaskList taskList) {"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"            Path directoryPath \u003d filePath.getParent();"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"            if (!Files.exists(directoryPath)) {"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"                Files.createDirectory(directoryPath);"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"            assert !Files.exists(directoryPath) : false;"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"            if (!Files.exists(filePath)) {"},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"                Files.createFile(filePath);"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"            assert !Files.exists(filePath) : false;"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"            BufferedWriter bufferedWriter \u003d Files.newBufferedWriter(filePath);"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"            for (Task task : taskList.getTasks()) {"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"                bufferedWriter.write(task.toString() + \"\\n\");"},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":"            bufferedWriter.flush();"},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"            bufferedWriter.close();"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"            e.printStackTrace();"},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":71}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":" * Abstracts the list of task."},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     * Creates a taskList with a list of tasks."},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"     * @param tasks list of tasks."},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    public TaskList() {"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"        return this.tasks;"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"     * Adds a new task into the taskList."},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"     * @param task task that need to be added."},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"    public void add(Task task) {"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"        tasks.add(task);"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"     * Deletes a task in the taskList located by index."},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"     * The index starts from 1."},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"     * @param index the index of task that need to be deleted in the taskList."},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"     * @return"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"    public Task delete(int index) {"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"        return tasks.remove(index - 1);"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"     * Marks a task done located by index."},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"     * The index starts from 1."},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"     * @param index the index of task that is done."},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"     * @return"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"    public Task mark(int index) {"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"        Task taskToBeMarked \u003d tasks.get(index - 1);"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"        taskToBeMarked.markedAsDone();"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"        return taskToBeMarked;"},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"     * Finds list of tasks matches the keyword."},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"     * @param keyword the keyword user inputs."},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"     * @return list of tasks containing the keyword."},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"QY-H00"},"content":"    public TaskList find(String keyword) {"},{"lineNumber":73,"author":{"gitId":"QY-H00"},"content":"        List\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"QY-H00"},"content":"        for (Task task : tasks) {"},{"lineNumber":75,"author":{"gitId":"QY-H00"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":76,"author":{"gitId":"QY-H00"},"content":"                res.add(task);"},{"lineNumber":77,"author":{"gitId":"QY-H00"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"QY-H00"},"content":"        return new TaskList(res);"},{"lineNumber":80,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":81}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":" * One kind of Task that need to be done before the date."},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"    private final LocalDate deadline;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"    /** Creates a deadline with description and date of deadline."},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"     * @param description description of the deadline."},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"     * @param deadline date of the deadline."},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    public Deadline(String description, LocalDate deadline) {"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + this.deadline + \")\";"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":26}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":" * One kind of Task that need to be done in the date."},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"    private final LocalDate date;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"     * Creates an event with description and date of event."},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"     * @param description description of the event."},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"     * @param date date of event."},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    public Event(String description, LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + this.date + \")\";"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":27}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"     * Creates a task with description."},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"     * @param description description of the task."},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    public Task(String description) {"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"     * get X if the task is done else get space."},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"     * @return \"X\" if the task is done else return \" \"."},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    public String getStatusIcon() {"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or X symbols"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"    public String getDescription() {"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"        return this.description;"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"     * Marks itself done."},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"    public void markedAsDone() {"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        this.isDone \u003d true;"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getDescription();"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":43}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":" * One kind of Task that is not with date."},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"     * Creates a todo task with description"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"     * @param description description of todo"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":21}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":61}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import duke.Momo;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"    private Momo momo;"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"                DialogBox.getDukeDialog(TextUi.showInitUi(), dukeImage)"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        );"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"    public void setMomo(Momo m) {"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"        momo \u003d m;"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"        String response \u003d momo.getResponse(input);"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":"        userInput.clear();"},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":57}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import duke.ParseException;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":" * Used by Momo to read or write to the user."},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":" */"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"public class TextUi {"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"    private static final StringBuffer boundOfChatBox \u003d new StringBuffer();"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"     * Defines the appearance of chat box."},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"    public static void setBoundOfChatBox() {"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"        int lenOfChatBox \u003d 50;"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        boundOfChatBox.append(\"-\".repeat(lenOfChatBox));"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"     * Formats string to stimulate a chat box of Momo."},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"     * @param s contents in the chat box"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    public static String formatInChatBox(String s) {"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"        return boundOfChatBox + \"\\n\" + s + \"\\n\" + boundOfChatBox;"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"     * Displays when the Momo inits and starts to run."},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"     * @return"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"    public static String showInitUi() {"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"        setBoundOfChatBox();"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"        String logo \u003d \"    __       __        ___ \\n\""},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"                + \"   /  \\\\     /  \\\\      / __ \\\\\\n\""},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"                + \"  / /\\\\ \\\\  / /\\\\ \\\\    | |   | |\\n\""},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"                + \" / /  \\\\ \\\\/ /  \\\\ \\\\   | |__| |\\n\""},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"                + \"/_/    \\\\_/     \\\\_\\\\ \\\\____/\";"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"        String greeting \u003d \"Hello! I\u0027m Momo\\nWhat can I do for you?\";"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\u0027\\n\u0027 + greeting + \u0027\\n\u0027);"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"     * Displays when Momo receives \"bye\" command and exits."},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"    public static String showExitUi() {"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"        String goodbye \u003d \"Bye. Hope to see you again soon!\\n\";"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(goodbye);"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":56,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"QY-H00"},"content":"     * Lists all the tasks when Momo receives \"list\" command."},{"lineNumber":58,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of tasks."},{"lineNumber":60,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"QY-H00"},"content":"    public static String showList(TaskList taskList) {"},{"lineNumber":62,"author":{"gitId":"QY-H00"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":63,"author":{"gitId":"QY-H00"},"content":"        int n \u003d tasks.size();"},{"lineNumber":64,"author":{"gitId":"QY-H00"},"content":"        if (n \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitId":"QY-H00"},"content":"            return formatInChatBox(\"There is no task\\n\");"},{"lineNumber":66,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"QY-H00"},"content":"        StringBuffer buf \u003d new StringBuffer();"},{"lineNumber":68,"author":{"gitId":"QY-H00"},"content":"        for (int i \u003d 0; i \u003c n; i++) {"},{"lineNumber":69,"author":{"gitId":"QY-H00"},"content":"            buf.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":70,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"QY-H00"},"content":"        String res \u003d new String(buf);"},{"lineNumber":72,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\"Here are the tasks in your list:\\n\" + res);"},{"lineNumber":73,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":75,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"QY-H00"},"content":"     * Informs the user the searching is successful."},{"lineNumber":77,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of tasks."},{"lineNumber":79,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"QY-H00"},"content":"    public static String showMatchingResult(TaskList taskList) {"},{"lineNumber":81,"author":{"gitId":"QY-H00"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":82,"author":{"gitId":"QY-H00"},"content":"        int n \u003d tasks.size();"},{"lineNumber":83,"author":{"gitId":"QY-H00"},"content":"        if (n \u003d\u003d 0) {"},{"lineNumber":84,"author":{"gitId":"QY-H00"},"content":"            return formatInChatBox(\"There is no matching task\\n\");"},{"lineNumber":85,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"QY-H00"},"content":"        StringBuffer buf \u003d new StringBuffer();"},{"lineNumber":87,"author":{"gitId":"QY-H00"},"content":"        for (int i \u003d 0; i \u003c n; i++) {"},{"lineNumber":88,"author":{"gitId":"QY-H00"},"content":"            buf.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");"},{"lineNumber":89,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"QY-H00"},"content":"        String res \u003d new String(buf);"},{"lineNumber":91,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\"Here are the matching tasks in your list:\\n\" + res);"},{"lineNumber":92,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":94,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"QY-H00"},"content":"     * Informs the user the addition is successful."},{"lineNumber":96,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of the tasks."},{"lineNumber":98,"author":{"gitId":"QY-H00"},"content":"     * @param task the task to be added."},{"lineNumber":99,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"QY-H00"},"content":"    public static String showSuccessfulAdd(TaskList taskList, Task task) {"},{"lineNumber":101,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\"Got it. I\u0027ve added this task:\" + \u0027\\n\u0027"},{"lineNumber":102,"author":{"gitId":"QY-H00"},"content":"                + task + \"\\n\""},{"lineNumber":103,"author":{"gitId":"QY-H00"},"content":"                + \"Now you have \" + taskList.getTasks().size() + \" tasks in the list.\\n\");"},{"lineNumber":104,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":106,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"QY-H00"},"content":"     * Informs the user the mark to make task done is successful."},{"lineNumber":108,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"QY-H00"},"content":"     * @param task the task that is done."},{"lineNumber":110,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"QY-H00"},"content":"    public static String showSuccessfulMark(Task task) {"},{"lineNumber":112,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\"Nice! I\u0027ve marked this duke.task as done:\\n\" + task + \"\\n\");"},{"lineNumber":113,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":115,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"QY-H00"},"content":"     * Informs the user the deletion is successful."},{"lineNumber":117,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of tasks."},{"lineNumber":119,"author":{"gitId":"QY-H00"},"content":"     * @param task the task that is deleted."},{"lineNumber":120,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"QY-H00"},"content":"    public static String showSuccessfulDelete(TaskList taskList, Task task) {"},{"lineNumber":122,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\"Got it. I\u0027ve removed this duke.task:\" + \u0027\\n\u0027"},{"lineNumber":123,"author":{"gitId":"QY-H00"},"content":"                + task + \"\\n\""},{"lineNumber":124,"author":{"gitId":"QY-H00"},"content":"                + \"Now you have \" + taskList.getTasks().size() + \" tasks in the list.\\n\");"},{"lineNumber":125,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":127,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"QY-H00"},"content":"     * Informs the user there is error when parsing the date of tasks."},{"lineNumber":129,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"QY-H00"},"content":"    public static String showDateParseError() {"},{"lineNumber":131,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\"OOPS!!! Please use \u0027/by YYYY-MM-DD\u0027 after description.\\n\");"},{"lineNumber":132,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":134,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"QY-H00"},"content":"     * Informs the user there is error that Momo cannot understand."},{"lineNumber":136,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"QY-H00"},"content":"    public static String showGeneralError() {"},{"lineNumber":138,"author":{"gitId":"QY-H00"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"QY-H00"},"content":"            throw new ParseException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");"},{"lineNumber":140,"author":{"gitId":"QY-H00"},"content":"        } catch (ParseException e) {"},{"lineNumber":141,"author":{"gitId":"QY-H00"},"content":"            return formatInChatBox(e.getMsgDes());"},{"lineNumber":142,"author":{"gitId":"QY-H00"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":145,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"QY-H00"},"content":"     * Informs the user that the loading is unsuccessful."},{"lineNumber":147,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"QY-H00"},"content":"    public static String showLoadingError() {"},{"lineNumber":149,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\"OOPS!!! Something wrong happens when loading.\\n\");"},{"lineNumber":150,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":152,"author":{"gitId":"QY-H00"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"QY-H00"},"content":"     * Informs the user delete or mark done properly and tells the number of tasks in the taskList."},{"lineNumber":154,"author":{"gitId":"QY-H00"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"QY-H00"},"content":"     * @param taskList the list of task."},{"lineNumber":156,"author":{"gitId":"QY-H00"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"QY-H00"},"content":"    public static String showIndexOutOfBoundsError(TaskList taskList) {"},{"lineNumber":158,"author":{"gitId":"QY-H00"},"content":"        return formatInChatBox(\"OOPS! Now you have only \""},{"lineNumber":159,"author":{"gitId":"QY-H00"},"content":"                + taskList.getTasks().size()"},{"lineNumber":160,"author":{"gitId":"QY-H00"},"content":"                + \" tasks, please mark/delete the added tasks.\");"},{"lineNumber":161,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":162}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"QY-H00":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"         \u003cfont\u003e"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"            \u003cFont name\u003d\"Arial\" size\u003d\"15.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"            \u003c/content\u003e"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"QY-H00":23}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"import duke.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"import duke.task.Event;"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"class ParserTest {"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForByeTest() {"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"bye\");"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.BYE);"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForDoneTest() {"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"done\");"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.DONE);"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForToDoTest() {"},{"lineNumber":26,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"todo\");"},{"lineNumber":27,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.TODO);"},{"lineNumber":28,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForDeadlineTest() {"},{"lineNumber":31,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"deadline\");"},{"lineNumber":32,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.DEADLINE);"},{"lineNumber":33,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForEventTest() {"},{"lineNumber":36,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"event\");"},{"lineNumber":37,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.EVENT);"},{"lineNumber":38,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"QY-H00"},"content":"    public void parseCommandForListTest() {"},{"lineNumber":41,"author":{"gitId":"QY-H00"},"content":"        Command c \u003d Parser.parseCommand(\"list\");"},{"lineNumber":42,"author":{"gitId":"QY-H00"},"content":"        assertEquals(c, Command.LIST);"},{"lineNumber":43,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"QY-H00"},"content":"    public void parseDeadlineTest() {"},{"lineNumber":46,"author":{"gitId":"QY-H00"},"content":"        Deadline deadline \u003d (Deadline) Parser.parseDescription(Command.DEADLINE, \"nothing /by 2021-01-20\");"},{"lineNumber":47,"author":{"gitId":"QY-H00"},"content":"        assertEquals(deadline.toString(), new Deadline(\"nothing \", LocalDate.parse(\"2021-01-20\")).toString());"},{"lineNumber":48,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"QY-H00"},"content":"    public void parseEventTest() {"},{"lineNumber":51,"author":{"gitId":"QY-H00"},"content":"        Event event \u003d (Event) Parser.parseDescription(Command.EVENT, \"nothing /at 2021-01-20\");"},{"lineNumber":52,"author":{"gitId":"QY-H00"},"content":"        assertEquals(event.toString(), new Event(\"nothing \", LocalDate.parse(\"2021-01-20\")).toString());"},{"lineNumber":53,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":54}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":""},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"    public void deadlineConstructorTest() {"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"        LocalDate date \u003d LocalDate.parse(\"2020-01-20\");"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"        Deadline deadline \u003d new Deadline(\"return the book\", date);"},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"        assertEquals(deadline.toString(), \"[D][ ] return the book(by: 2020-01-20)\");"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"    public void deadlineMarkedTest() {"},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"        LocalDate date \u003d LocalDate.parse(\"2020-01-20\");"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"        Deadline deadline \u003d new Deadline(\"return the book\", date);"},{"lineNumber":22,"author":{"gitId":"QY-H00"},"content":"        deadline.isDone \u003d true;"},{"lineNumber":23,"author":{"gitId":"QY-H00"},"content":"        assertEquals(deadline.toString(), \"[D][X] return the book(by: 2020-01-20)\");"},{"lineNumber":24,"author":{"gitId":"QY-H00"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"QY-H00"},"content":"}"}],"authorContributionMap":{"QY-H00":25}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"[T][ ] ad book"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":"[D][X] turn book (((by: 2021-06-20)"},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"[E][ ] oject meeting (((at: 2020-04-20)"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"[D][ ] eturn book ((by: 2021-06-20)"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"[E][ ] roject meeting ((at: 2020-04-20)"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"[T][ ] oin sports club"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"[T][ ] orrow book"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"[T][ ] read book"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"[D][ ] return book (by: 2021-06-20)"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"[E][ ] project meeting (at: 2020-04-20)"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"[T][ ] join sports club"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"[T][ ] borrow book"}],"authorContributionMap":{"QY-H00":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"QY-H00"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"QY-H00"},"content":"deadline return book /by 2021-06-20"},{"lineNumber":3,"author":{"gitId":"QY-H00"},"content":"done 2"},{"lineNumber":4,"author":{"gitId":"QY-H00"},"content":"event project meeting /at 2020-04-20"},{"lineNumber":5,"author":{"gitId":"QY-H00"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"QY-H00"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"QY-H00"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"QY-H00"},"content":"list"},{"lineNumber":9,"author":{"gitId":"QY-H00"},"content":"find book"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"deadline return book /by Sunday"},{"lineNumber":11,"author":{"gitId":"QY-H00"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":12,"author":{"gitId":"QY-H00"},"content":"delete 4"},{"lineNumber":13,"author":{"gitId":"QY-H00"},"content":"list"},{"lineNumber":14,"author":{"gitId":"QY-H00"},"content":"todo"},{"lineNumber":15,"author":{"gitId":"QY-H00"},"content":"todo "},{"lineNumber":16,"author":{"gitId":"QY-H00"},"content":"deadline"},{"lineNumber":17,"author":{"gitId":"QY-H00"},"content":"deadline "},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"event"},{"lineNumber":19,"author":{"gitId":"QY-H00"},"content":"event "},{"lineNumber":20,"author":{"gitId":"QY-H00"},"content":"blah"},{"lineNumber":21,"author":{"gitId":"QY-H00"},"content":"bye"}],"authorContributionMap":{"QY-H00":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"QY-H00"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"QY-H00"},"content":"java -classpath ..\\bin duke.Momo \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"QY-H00":2,"-":19}}]
