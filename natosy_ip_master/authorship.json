[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import static duke.Ui.*;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":""},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"    private static final String PATHNAME \u003d \"./data.txt\";"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"            displayWelcome();"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"            Storage.initialisePath(PATHNAME);"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"            Storage.initialiseList();"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"            Parser.parseAndProcessInput();"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"            displayFarewell();"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"            displayError(e.getMessage());"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"}"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":""}],"authorContributionMap":{"natosy":22}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":" * Custom Exception class for Duke"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"     * Throws a new DukeException."},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"     * @param message error message"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    public DukeException(String message) {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":15}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":""},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import static duke.Ui.displayError;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" * Parses and processes user input."},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     * Returns a CommandType object which identifies the type of command was passed by the user."},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     * @param command a string which when valid, should correspond to one of the CommandType objects"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     * @return CommandType object"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if the command string does not correspond to any of the valid CommandType objects"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    private static CommandType getCommandType(String command) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"            return CommandType.valueOf(command.toUpperCase());"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"            return CommandType.INVALID;"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":""},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"     * Parses user input line-by-line and processes user input accordingly."},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    public static void parseAndProcessInput() {"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"            String input \u003d sc.nextLine().trim();"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"            if (input.equals(\"bye\")) {"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"            String[] args \u003d input.split(\" \", 2);"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"            Command command;"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"                CommandType type \u003d getCommandType(args[0]);"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"                switch (type) {"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"                case LIST:"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"                    command \u003d new ListCommand();"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"                    break;"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"                case DONE:"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                    command \u003d new DoneCommand(args);"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"                    break;"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"                case TODO:"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"                    command \u003d new TodoCommand(args);"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"                    break;"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"                case EVENT:"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"                    command \u003d new EventCommand(args);"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"                    break;"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"                case DEADLINE:"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"                    command \u003d new DeadlineCommand(args);"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"                    break;"},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"                case DELETE:"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"                    command \u003d new DeleteCommand(args);"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"                    break;"},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"                case FIND:"},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"                    command \u003d new FindCommand(args);"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":"                    break;"},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"                case INVALID:"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"                default:"},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"                    command \u003d new InvalidCommand();"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"                command.process();"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"            } catch (DukeException e) {"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"                displayError(e.getMessage());"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":75}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":""},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":" * Responsible for methods printing to CLI."},{"lineNumber":9,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"     * Prints str into a pre-defined text box display."},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"     * @param str String which is to be printed onto CLI"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    private static void display(String str) {"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        int longest \u003d 0;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"        String[] strings \u003d str.split(\"\\n\");"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        for (String s : strings) {"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"            if (s.length() \u003e longest) {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"                longest \u003d s.length();"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        String topBorder \u003d \"    ╭\" + \"-\".repeat(longest + 4) + \"╮\\n\""},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"                + \"    |\" + \" \".repeat(longest + 4) + \"|\\n\";"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        String botBorder \u003d \"    |\" + \" \".repeat(longest + 4) + \"|\\n\""},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"                + \"    ╰\" + \"-\".repeat(longest + 4) + \"╯\\n\";"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        StringBuilder mainText \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        for (String s : strings) {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"            String toAppend \u003d \"    |  \" + s + \" \".repeat(longest - s.length() + 2) + \"|\\n\";"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            mainText.append(toAppend);"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        System.out.println(topBorder + mainText + botBorder);"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":""},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"     * Prints welcome message."},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"    protected static void displayWelcome() {"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        display("},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"                \"█▄ ▄█ ▄▀▀ █▀▄ ▄▀▄ █▄ █ ▄▀▄ █   █▀▄ ▄▀▀\\n\""},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"                        + \"█ ▀ █ ▀▄▄ █▄▀ ▀▄▀ █ ▀█ █▀█ █▄▄ █▄▀ ▄██\\n\\n\""},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"                        + \"Welcome!\\n\""},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"                        + \"I\u0027m Ronald, the best McSpicy ever.\\n\""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"                        + \"What can I do for you today?\");"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":""},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"     * Prints farewell message."},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"    protected static void displayFarewell() {"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"        display(\"█▄ ▄█ ▄▀▀ █▀▄ ▄▀▄ █▄ █ ▄▀▄ █   █▀▄ ▄▀▀\\n\""},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"                + \"█ ▀ █ ▀▄▄ █▄▀ ▀▄▀ █ ▀█ █▀█ █▄▄ █▄▀ ▄██\\n\\n\""},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"                + \"Thanks for coming!\\nWe hope to see you again!\");"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":""},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"     * Prints all tasks."},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"     * @param tasks tasks to be printed"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"    public static void displayAllTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"            sb.append(\"You don\u0027t have anything on your menu at the moment!\\n\\n\" +"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"                    \"If you would like to add a TODO, type\\n\" +"},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"                    \"    todo \u003corderName\u003e\\n\\n\" +"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"                    \"If you would like to add a DEADLINE, type\\n\" +"},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"                    \"    deadline \u003corderName\u003e /by \u003cdd/MM/yyyy HHmm\u003e\\n\\n\" +"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"                    \"If you would like to add an EVENT, type\\n\" +"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"                    \"    event \u003corderName\u003e /at \u003cdd/MM/yyyy HHmm\u003e\\n\\n\");"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":"        } else {"},{"lineNumber":73,"author":{"gitId":"natosy"},"content":"            sb.append(\"Here\u0027s what you\u0027ve ordered so far:\\n\\n\");"},{"lineNumber":74,"author":{"gitId":"natosy"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"                String formattedTask \u003d i + \". \" + tasks.get(i - 1).toString();"},{"lineNumber":76,"author":{"gitId":"natosy"},"content":"                sb.append(formattedTask);"},{"lineNumber":77,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"natosy"},"content":"            sb.append(\"\\nIf you would like to remove an item from your menu, type\\n\" +"},{"lineNumber":79,"author":{"gitId":"natosy"},"content":"                    \"    delete \u003corderNumber\u003e\\n\\n\" +"},{"lineNumber":80,"author":{"gitId":"natosy"},"content":"                    \"If you would like to mark an order as complete, type\\n\" +"},{"lineNumber":81,"author":{"gitId":"natosy"},"content":"                    \"    done \u003corderNumber\u003e\");"},{"lineNumber":82,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"natosy"},"content":"        display(sb.toString());"},{"lineNumber":84,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"natosy"},"content":""},{"lineNumber":86,"author":{"gitId":"natosy"},"content":"    public static void displayMatchingTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":87,"author":{"gitId":"natosy"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":88,"author":{"gitId":"natosy"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":89,"author":{"gitId":"natosy"},"content":"            sb.append(\"I can\u0027t seem to find an order matching your keyword!\");"},{"lineNumber":90,"author":{"gitId":"natosy"},"content":"        } else {"},{"lineNumber":91,"author":{"gitId":"natosy"},"content":"            sb.append(\"Here are the orders that match!\\n\\n\");"},{"lineNumber":92,"author":{"gitId":"natosy"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":93,"author":{"gitId":"natosy"},"content":"                String formattedTask \u003d i + \". \" + tasks.get(i - 1).toString();"},{"lineNumber":94,"author":{"gitId":"natosy"},"content":"                sb.append(formattedTask);"},{"lineNumber":95,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"natosy"},"content":"        display(sb.toString());"},{"lineNumber":98,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"natosy"},"content":""},{"lineNumber":100,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"natosy"},"content":"     * Prints added task."},{"lineNumber":102,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"natosy"},"content":"     * @param task  task that was added to the list of tasks"},{"lineNumber":104,"author":{"gitId":"natosy"},"content":"     * @param tasks all existing tasks"},{"lineNumber":105,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"natosy"},"content":"    public static void displayAddedTask(Task task, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":107,"author":{"gitId":"natosy"},"content":"        display(\"Cool! I\u0027ve added the following item to your order list.\\n\\n    \""},{"lineNumber":108,"author":{"gitId":"natosy"},"content":"                + task"},{"lineNumber":109,"author":{"gitId":"natosy"},"content":"                + \"\\nYou now have \""},{"lineNumber":110,"author":{"gitId":"natosy"},"content":"                + tasks.size()"},{"lineNumber":111,"author":{"gitId":"natosy"},"content":"                + \" order(s)!\");"},{"lineNumber":112,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"natosy"},"content":""},{"lineNumber":114,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"natosy"},"content":"     * Prints deleted task."},{"lineNumber":116,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"natosy"},"content":"     * @param task  task that was deleted"},{"lineNumber":118,"author":{"gitId":"natosy"},"content":"     * @param tasks all existing tasks"},{"lineNumber":119,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"natosy"},"content":"    public static void displayDeletedTask(Task task, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":121,"author":{"gitId":"natosy"},"content":"        display(\"Aw man... I told Donald that was a bad item to put on the menu.\\n\""},{"lineNumber":122,"author":{"gitId":"natosy"},"content":"                + \"Here you go, I\u0027ve removed this item from your order list!\\n\\n    \" + task +"},{"lineNumber":123,"author":{"gitId":"natosy"},"content":"                \"\\nYou have \" + tasks.size() + \" order(s) left!\");"},{"lineNumber":124,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"natosy"},"content":""},{"lineNumber":126,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"natosy"},"content":"     * Prints task that was marked as done."},{"lineNumber":128,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"natosy"},"content":"     * @param task task that was marked as done"},{"lineNumber":130,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"natosy"},"content":"    public static void displayDone(Task task) {"},{"lineNumber":132,"author":{"gitId":"natosy"},"content":"        display(\"Your order has been served!\\n\\n  \" + task);"},{"lineNumber":133,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"natosy"},"content":""},{"lineNumber":135,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"natosy"},"content":"     * Prints errors."},{"lineNumber":137,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"natosy"},"content":"     * @param msg error message"},{"lineNumber":139,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"natosy"},"content":"    public static void displayError(String msg) {"},{"lineNumber":141,"author":{"gitId":"natosy"},"content":"        display(\"Oops!\\n\" + msg);"},{"lineNumber":142,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":143}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":" * Abstract class which is inherited by all Command classes."},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    protected String[] command;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":""},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    abstract public void process() throws DukeException;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":12}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":" * Enumerates all possible command types accepted by the program. If user input does not correspond to any of the"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":" * commands provided, it will be defined as an INVALID command type."},{"lineNumber":6,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"public enum CommandType {"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"    TODO,"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    EVENT,"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    DEADLINE,"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    DONE,"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    LIST,"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    DELETE,"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    FIND,"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    INVALID"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":16}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Deadline command"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public DeadlineCommand(String[] command) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * Creates Deadline object from commands provided during initialisation of the DeadlineCommand object, adds it to"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * the data file and prints the added Deadline object."},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if arguments provided to the DeadlineCommand object are invalid"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"        Task task \u003d Deadline.createDeadline(command);"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(task, Storage.getTasks());"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        Ui.displayAddedTask(task, Storage.getTasks());"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        Storage.updateDataFile();"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":32}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Delete command"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    public DeleteCommand(String[] command) {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":""},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     * Obtains task to be deleted from the arguments from command initialisation and deletes it from the data file."},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if argument passed does not correspond to a valid task number"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"            int id \u003d Integer.parseInt(command[1]) - 1;"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            Task task \u003d TaskList.deleteTask(id, Storage.getTasks());"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"            Ui.displayDeletedTask(task, Storage.getTasks());"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"            Storage.updateDataFile();"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"That doesn\u0027t seem like a valid order number...\");"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":34}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Done command"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    public DoneCommand(String[] command) {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":""},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     * Obtains task to be marked as done from the arguments from initialisation and marks it as done."},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if argument passed does not correspond to a valid task number"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"            Task task \u003d Storage.getTasks().get(Integer.parseInt(command[1]) - 1);"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            task.markDone();"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"            Ui.displayDone(task);"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"            Storage.updateDataFile();"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"That doesn\u0027t seem like a valid order number...\");"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":34}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Event command"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"public class EventCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public EventCommand(String[] command) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * Creates Event object from commands provided during initialisation of the EventCommand object, adds it to the"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * data file and prints the added Event object."},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if arguments provided to the EventCommand object are invalid"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"        Task task \u003d Event.createEvent(command);"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(task, Storage.getTasks());"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        Ui.displayAddedTask(task, Storage.getTasks());"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        Storage.updateDataFile();"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":32}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Find command"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public FindCommand(String[] command) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * Finds all tasks matching the keyword obtained from the arguments from initialisation."},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if insufficient arguments are passed or arguments are invalid"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        if (command.length !\u003d 2) {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"Please give me ONE keyword to look out for!\");"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"            String keyword \u003d command[1];"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"            for (Task task : Storage.getTasks()) {"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"                if (task.description.contains(keyword)) {"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"                    matchingTasks.add(task);"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"            Ui.displayMatchingTasks(matchingTasks);"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"It seems my search button is malfunctioning...\");"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":42}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to an Invalid command"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"     * Throws DukeException."},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"     * @throws DukeException when an invalid command is read"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        throw new DukeException(\"That doesn\u0027t seem to be an item on our menu...\");"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":18}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a List command"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"     * Displays all current tasks."},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    public void process() {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"        Ui.displayAllTasks(Storage.getTasks());"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":17}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.task.Todo;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Todo command"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"public class TodoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public TodoCommand(String[] command) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * Creates Todo object from commands provided during initialisation of the TodoCommand object, adds it to the"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * data file and prints the added Todo object."},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if arguments provided to the TodoCommand object are invalid"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"        Task task \u003d Todo.createTodo(command);"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(task, Storage.getTasks());"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        Ui.displayAddedTask(task, Storage.getTasks());"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        Storage.updateDataFile();"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":32}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.*;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.command.CommandType;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":""},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":" * Class which contains methods to initialise and update a data text file in a pre-determined path."},{"lineNumber":18,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    public static final String splitter \u003d \" /\u0026/ \";"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    private static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    private static String pathName;"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":""},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    public static ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        return tasks;"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":""},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"     * Initialises the path name of the data file"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"     * @param newPathName path where the data file should be created or should be accessed from"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    public static void initialisePath(String newPathName) {"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        pathName \u003d newPathName;"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":""},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"     * Processes the tasks stored in the data file and loads them to the program."},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if the Strings saved in the data file are unable to be processed"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"    public static void initialiseList() throws DukeException {"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"        File f \u003d new File(pathName);"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"            boolean isEmptyFile \u003d f.createNewFile();"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"            if (!isEmptyFile) {"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                Scanner sc \u003d new Scanner(f);"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"                while (sc.hasNextLine()) {"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"                    Task task \u003d convertStringToTask(sc.nextLine());"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"                    tasks.add(task);"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":""},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"     * Returns Task object after converting a String object in the data file."},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"     * @param taskString formatted String containing all necessary information of a Task"},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"     * @return Task object that was represented by the taskString"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if the formatting of Strings in the data file is incorrect"},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"    private static Task convertStringToTask(String taskString) throws DukeException {"},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"        String[] taskArgs \u003d taskString.split(splitter, 4);"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"            CommandType type \u003d CommandType.valueOf(taskArgs[0]);"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"            boolean isDone \u003d Integer.parseInt(taskArgs[1]) \u003d\u003d 1;"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"            String desc \u003d taskArgs[2];"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":""},{"lineNumber":73,"author":{"gitId":"natosy"},"content":"            Task task \u003d null;"},{"lineNumber":74,"author":{"gitId":"natosy"},"content":""},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"            switch (type) {"},{"lineNumber":76,"author":{"gitId":"natosy"},"content":"            case TODO:"},{"lineNumber":77,"author":{"gitId":"natosy"},"content":"                task \u003d new Todo(desc);"},{"lineNumber":78,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":79,"author":{"gitId":"natosy"},"content":"            case DEADLINE:"},{"lineNumber":80,"author":{"gitId":"natosy"},"content":"                task \u003d new Deadline(desc, LocalDateTime.parse(taskArgs[3]));"},{"lineNumber":81,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":82,"author":{"gitId":"natosy"},"content":"            case EVENT:"},{"lineNumber":83,"author":{"gitId":"natosy"},"content":"                task \u003d new Event(desc, LocalDateTime.parse(taskArgs[3]));"},{"lineNumber":84,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":85,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"natosy"},"content":"            if (isDone) {"},{"lineNumber":87,"author":{"gitId":"natosy"},"content":"                assert task !\u003d null;"},{"lineNumber":88,"author":{"gitId":"natosy"},"content":"                task.markDone();"},{"lineNumber":89,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"natosy"},"content":"            return task;"},{"lineNumber":91,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":92,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There seems to be something wrong with the menu and we can\u0027t start up...\");"},{"lineNumber":93,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"natosy"},"content":""},{"lineNumber":96,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"natosy"},"content":"     * Updates the data file with the tasks saved into the program. If data file has been shifted from its original"},{"lineNumber":98,"author":{"gitId":"natosy"},"content":"     * position, a new data file will be created with the existing task items."},{"lineNumber":99,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if the data file cannot be written into"},{"lineNumber":101,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"natosy"},"content":"    public static void updateDataFile() throws DukeException {"},{"lineNumber":103,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"natosy"},"content":"            new File(pathName).createNewFile();"},{"lineNumber":105,"author":{"gitId":"natosy"},"content":"            FileWriter fw \u003d new FileWriter(pathName);"},{"lineNumber":106,"author":{"gitId":"natosy"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":107,"author":{"gitId":"natosy"},"content":"            for (Task task : tasks) {"},{"lineNumber":108,"author":{"gitId":"natosy"},"content":"                sb.append(task.getFormattedString());"},{"lineNumber":109,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"natosy"},"content":"            fw.write(sb.toString());"},{"lineNumber":111,"author":{"gitId":"natosy"},"content":"            fw.close();"},{"lineNumber":112,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":113,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"Oh no! I can\u0027t seem to update your menu...\");"},{"lineNumber":114,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":116}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Deadline task."},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    public LocalDateTime date;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":""},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    public Deadline(String description, LocalDateTime date) {"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"        this.date \u003d date;"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":""},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     * Returns Deadline task created from arguments representing the user input."},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"     * @param command user input"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"     * @return Deadline task"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if insufficient or invalid arguments are passed"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    public static Task createDeadline(String[] command) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There\u0027s not enough information about your Deadline order!\");"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        String[] args \u003d command[1].split(\" /by \", 2);"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        if (args.length \u003d\u003d 1 || args[0].isEmpty() || args[1].isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"Looks like your Deadline order isn\u0027t complete...\");"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"        return new Deadline(args[0], TaskList.convertStringToDate(args[1]));"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":""},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    public String getDate() {"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        return \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\")) + \")\";"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"    public String getFormattedString() {"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"        return \"DEADLINE\""},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"                + Storage.splitter"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                + (isDone ? \"1\" : \"0\")"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"                + Storage.splitter"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"                + description"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"                + Storage.splitter"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"                + date + \"\\n\";"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":""},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"        return \"[D]\" + super.toString() + getDate() + \"\\n\";"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":59}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Event task."},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"public class Event extends Task {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    public LocalDateTime date;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public Event(String description, LocalDateTime date) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        this.date \u003d date;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"        isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":""},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     * Returns Event task created from arguments representing the user input."},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     * @param command user input"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"     * @return Event task"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if insufficient or invalid arguments are passed"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    public static Task createEvent(String[] command) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There\u0027s not enough information about your Event order!\");"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"        String[] args \u003d command[1].split(\" /at \", 2);"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        if (args.length \u003d\u003d 1 || args[0].isEmpty() || args[1].isEmpty()) {"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"Looks like your Event order isn\u0027t complete...\");"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        return new Event(args[0], TaskList.convertStringToDate(args[1]));"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":""},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"    public String getDate() {"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"        return \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\")) + \")\";"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":""},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"    public String getFormattedString() {"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"        return \"EVENT\""},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"                + Storage.splitter"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"                + (isDone ? \"1\" : \"0\")"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                + Storage.splitter"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"                + description"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"                + Storage.splitter"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"                + date + \"\\n\";"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":""},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"        return \"[E]\" + super.toString() + getDate() + \"\\n\";"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":58}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":" * Abstract class which is inherited by all Task classes."},{"lineNumber":5,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"    public String description;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    public boolean isDone;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":""},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    public Task(String description) {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"        this.description \u003d description;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"        isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":""},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     * Returns status icon of task."},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     * @return tick if Task is done, otherwise empty"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    public String getStatusIcon() {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        return isDone ? \"[\\u2713] \" : \"[ ] \";"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":""},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    String getDate() {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        return \"\";"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":""},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    public void markDone() {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        isDone \u003d true;"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":""},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"     * Returns String of Tasks formatted to be saved in the data file."},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"     * @return formatted String which is saved in the data file"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"    public abstract String getFormattedString();"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":""},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        return getStatusIcon() + description;"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":44}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" * Class containing methods to edit the program\u0027s existing task list."},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     * Adds a task to an ArrayList of tasks."},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     * @param task  task to be added"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     * @param tasks ArrayList to be added to"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if ArrayList is not initialised"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    public static void addTask(Task task, ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"            tasks.add(task);"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":""},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"     * Deletes a task from an ArrayList of tasks."},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"     * @param taskId index of the task to be deleted"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"     * @param tasks  ArrayList to delete the task from"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"     * @return Task that was deleted"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if ArrayList is not initialised or taskId is invalid"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"    public static Task deleteTask(int taskId, ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"            return tasks.remove(taskId);"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"     * Converts string into LocalDateTime object."},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"     * @param date String representing date"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"     * @return LocalDateTime object"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if format of the date String is invalid"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"    public static LocalDateTime convertStringToDate(String date) throws DukeException {"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"            return LocalDateTime.parse(date, formatter);"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There was something wrong with the format of your date and/or time.\\n\" +"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"                    \"Make sure it\u0027s in the format \u003cdd/MM/yyyy HHmm\u003e!\");"},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":61}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Todo task."},{"lineNumber":8,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"public class Todo extends Task {"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    public Todo(String description) {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     * Returns Todo task created from arguments representing the user input."},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     * @param command user input"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     * @return Todo task"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if insufficient or invalid arguments are passed"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    public static Task createTodo(String[] command) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There\u0027s not enough information about your Todo order!\");"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        return new Todo(command[1]);"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":""},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    public String getFormattedString() {"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        return \"TODO\" + Storage.splitter + (isDone ? \"1\" : \"0\") + Storage.splitter + description + \"\\n\";"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":""},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        return \"[T]\" + super.toString() + getDate() + \"\\n\";"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":36}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":""},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"class StorageTest {"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":""},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    void initialiseList_initialListLength_success() throws DukeException {"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"        String pathName \u003d \"./src/test/java/duke/storage/test_data.txt\";"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        Storage.initialisePath(pathName);"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        String dummyTasksString \u003d \"DEADLINE /\u0026/ 0 /\u0026/ deadline title /\u0026/ 2001-01-01T23:59\\n\""},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"                + \"EVENT /\u0026/ 0 /\u0026/ event title /\u0026/ 2001-01-01T23:59\\n\""},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"                + \"TODO /\u0026/ 0 /\u0026/ todo item\\n\";"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":""},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"            new File(pathName).createNewFile();"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            FileWriter fw \u003d new FileWriter(pathName);"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"            fw.write(dummyTasksString);"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"            fw.close();"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":""},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"        Storage.initialiseList();"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        assertEquals(Storage.getTasks().size(), 3);"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":""},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    void updateDataFile() throws DukeException {"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"        String filePath \u003d \"./src/test/java/duke/storage/test_data.txt\";"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"        Task todo \u003d new Todo(\"todo\");"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"        Task deadline \u003d new Deadline(\"deadline\", LocalDateTime.now());"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"        Task event \u003d new Event(\"event\", LocalDateTime.now());"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":""},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"        Storage.initialisePath(filePath);"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"        Storage.initialiseList();"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"        Long initialLength \u003d null;"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":""},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"            initialLength \u003d Files.lines(Path.of(filePath)).count();"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":""},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d Storage.getTasks();"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"        tasks.add(todo);"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"        tasks.add(deadline);"},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"        tasks.add(event);"},{"lineNumber":63,"author":{"gitId":"natosy"},"content":""},{"lineNumber":64,"author":{"gitId":"natosy"},"content":"        Storage.updateDataFile();"},{"lineNumber":65,"author":{"gitId":"natosy"},"content":""},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"        Long finalLength \u003d null;"},{"lineNumber":67,"author":{"gitId":"natosy"},"content":""},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"            finalLength \u003d Files.lines(Path.of(filePath)).count();"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"natosy"},"content":""},{"lineNumber":74,"author":{"gitId":"natosy"},"content":"        assert initialLength !\u003d null;"},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"        assert finalLength !\u003d null;"},{"lineNumber":76,"author":{"gitId":"natosy"},"content":"        assertEquals(initialLength + 3, finalLength);"},{"lineNumber":77,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":78}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    void createDeadline_tagOnly_exceptionThrown() {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"            Deadline.createDeadline(new String[]{\"deadline\"});"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":""},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    void createDeadline_titleOnly_exceptionThrown() {"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"            Deadline.createDeadline(new String[]{\"deadline\", \"deadline title\"});"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":""},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    void createDeadline_dateTimeOnly_exceptionThrown() {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            Deadline.createDeadline(new String[]{\"deadline\", \"/by 01/01/2001 2359\"});"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":""},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    void createDeadline_allFields_success() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        Task deadline \u003d Deadline.createDeadline(new String[]{\"deadline\", \"deadline title /by 01/01/2001 2359\"});"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        assertEquals(deadline.getFormattedString(), \"DEADLINE /\u0026/ 0 /\u0026/ deadline title /\u0026/ 2001-01-01T23:59\\n\");"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":36}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"class EventTest {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    void createEvent_tagOnly_exceptionThrown() {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"            Event.createEvent(new String[]{\"event\"});"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":""},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    void createEvent_titleOnly_exceptionThrown() {"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"            Event.createEvent(new String[]{\"event\", \"event title\"});"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":""},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    void createEvent_dateTimeOnly_exceptionThrown() {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            Event.createEvent(new String[]{\"event\", \"/at 01/01/2001 2359\"});"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":""},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    void createEvent_allFields_success() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        Task event \u003d Event.createEvent(new String[]{\"event\", \"event title /at 01/01/2001 2359\"});"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        assertEquals(event.getFormattedString(), \"EVENT /\u0026/ 0 /\u0026/ event title /\u0026/ 2001-01-01T23:59\\n\");"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":36}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":""},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"class TaskListTest {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":""},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    void addTask_allTypesOfTask_success() throws DukeException {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        Task todo \u003d new Todo(\"todo\");"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        Task deadline \u003d new Deadline(\"deadline\", LocalDateTime.now());"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"        Task event \u003d new Event(\"event\", LocalDateTime.now());"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(todo, tasks);"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 1);"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(deadline, tasks);"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 2);"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(event, tasks);"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 3);"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":""},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    void deleteTask_validId_success() throws DukeException {"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        Task todo \u003d new Todo(\"todo\");"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        Task deadline \u003d new Deadline(\"deadline\", LocalDateTime.now());"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"        Task event \u003d new Event(\"event\", LocalDateTime.now());"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":""},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        tasks.add(todo);"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        tasks.add(deadline);"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        tasks.add(event);"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":""},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 3);"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        assertEquals(todo, TaskList.deleteTask(0, tasks));"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        assertEquals(deadline, TaskList.deleteTask(0, tasks));"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"        assertEquals(event, TaskList.deleteTask(0, tasks));"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 0);"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":44}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"class TodoTest {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    void createTodo_tagOnly_exceptionThrown() {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"            Todo.createTodo(new String[]{\"todo\"});"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":""},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    void createTodo_allFields_success() throws DukeException {"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        Task todo \u003d Todo.createTodo(new String[]{\"todo\", \"something something\"});"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"        assertEquals(todo.getFormattedString(), \"TODO /\u0026/ 0 /\u0026/ something something\\n\");"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"todo task 1"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":"deadline task 2 /by tomorrow"},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"event task 3 /at tonight"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"list"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"bye"}],"authorContributionMap":{"natosy":5}}]
