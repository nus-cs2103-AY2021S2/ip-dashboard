[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":""},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":""},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"natosy":16,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"    private static final String PATHNAME \u003d \"./data.txt\";"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"     * Initialises Duke application with default data file path and populates task list."},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    public Duke() {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"        Storage.initialisePath(PATHNAME);"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        Storage.initialiseList();"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":""},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     * Gets response based on input."},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * @param input user input"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * @return response that is to be printed onto GUI"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    public String getResponse(String input) {"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        Parser.parseAndProcess(input);"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        return Ui.getNextResponse();"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"}"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":""}],"authorContributionMap":{"natosy":28}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":" * Custom Exception class for Duke"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"     * Throws a new DukeException."},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"     * @param message error message"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    public DukeException(String message) {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":15}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":""},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":""},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            stage.setResizable(false);"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":34}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.command.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.command.CommandType;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import duke.command.EventCommand;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"import duke.command.InvalidCommand;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"import duke.command.ListCommand;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"import duke.command.TodoCommand;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":""},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":" * Parses and processes user input."},{"lineNumber":18,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":""},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     * Returns a CommandType object which identifies the type of command was passed by the user."},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     * @param command a string which when valid, should correspond to one of the CommandType objects"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"     * @return CommandType object"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if the command string does not correspond to any of the valid CommandType objects"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    private static CommandType getCommandType(String command) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"            return CommandType.valueOf(command.toUpperCase());"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"            return CommandType.INVALID;"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":""},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"     * Parses user input and processes user input accordingly."},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"    public static void parseAndProcess(String input) {"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        input \u003d input.trim();"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"        String[] args \u003d input.split(\" \", 2);"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        Command command;"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"            CommandType type \u003d getCommandType(args[0]);"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"            switch (type) {"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"            case BYE:"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"                command \u003d new ByeCommand();"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"            case LIST:"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"                command \u003d new ListCommand();"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"            case DONE:"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"                command \u003d new DoneCommand(args);"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"            case TODO:"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"                command \u003d new TodoCommand(args);"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"            case EVENT:"},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"                command \u003d new EventCommand(args);"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"            case DEADLINE:"},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"                command \u003d new DeadlineCommand(args);"},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":"            case DELETE:"},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"                command \u003d new DeleteCommand(args);"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"            case FIND:"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"                command \u003d new FindCommand(args);"},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"            case INVALID:"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"            default:"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":"                command \u003d new InvalidCommand();"},{"lineNumber":73,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"natosy"},"content":"            command.process();"},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"        } catch (DukeException e) {"},{"lineNumber":76,"author":{"gitId":"natosy"},"content":"            Ui.displayError(e.getMessage());"},{"lineNumber":77,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":79}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Bye command."},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"public class ByeCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"     * Displays farewell message."},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    public void process() {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"        Ui.displayFarewell();"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":17}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":" * Abstract class which is inherited by all Command classes."},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    protected String[] command;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":""},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    public abstract void process() throws DukeException;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":12}},{"path":"src/main/java/duke/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":" * Enumerates all possible command types accepted by the program. If user input does not correspond to any of the"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":" * commands provided, it will be defined as an INVALID command type."},{"lineNumber":6,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"public enum CommandType {"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"    TODO,"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    EVENT,"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    DEADLINE,"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    DONE,"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    LIST,"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    DELETE,"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    FIND,"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    INVALID,"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    BYE"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":17}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":""},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":""},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Deadline command."},{"lineNumber":13,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":""},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    public DeadlineCommand(String[] command) {"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":""},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * Creates Deadline object from commands provided during initialisation of the DeadlineCommand object. Adds it to"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     * the data file and prints the added Deadline object."},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if arguments provided to the DeadlineCommand object are invalid."},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        Task task \u003d Deadline.createDeadline(command);"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(task, Storage.getTasks());"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        Storage.updateDataFile();"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        Ui.displayAddedTask(task, Storage.getTasks());"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":33}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":""},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Delete command."},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public DeleteCommand(String[] command) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * Obtains task to be deleted from the arguments from command initialisation and deletes it from the data file."},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if argument passed does not correspond to a valid task number."},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            int id \u003d Integer.parseInt(command[1]) - 1;"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"            Task task \u003d TaskList.deleteTask(id, Storage.getTasks());"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"            Ui.displayDeletedTask(task, Storage.getTasks());"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"            Storage.updateDataFile();"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"That doesn\u0027t seem like a valid order number...\");"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":35}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Done command."},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":""},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    public DoneCommand(String[] command) {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":""},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     * Obtains task to be marked as done from the arguments from initialisation and marks it as done."},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if argument passed does not correspond to a valid task number."},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"            Task task \u003d Storage.getTasks().get(Integer.parseInt(command[1]) - 1);"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"            task.markDone();"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            Ui.displayDone(task);"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"            Storage.updateDataFile();"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"That doesn\u0027t seem like a valid order number...\");"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":33}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":""},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":""},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Event command."},{"lineNumber":13,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"public class EventCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":""},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    public EventCommand(String[] command) {"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":""},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * Creates Event object from commands provided during initialisation of the EventCommand object. Adds it to the"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     * data file and prints the added Event object."},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if arguments provided to the EventCommand object are invalid."},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        Task task \u003d Event.createEvent(command);"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(task, Storage.getTasks());"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        Ui.displayAddedTask(task, Storage.getTasks());"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        Storage.updateDataFile();"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":33}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Find command."},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public FindCommand(String[] command) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * Finds all tasks matching the keyword obtained from the arguments from initialisation."},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if insufficient arguments are passed or arguments are invalid."},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        if (command.length !\u003d 2) {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"Please give me ONE keyword to look out for!\");"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"            String keyword \u003d command[1];"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"            for (Task task : Storage.getTasks()) {"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"                if (task.getDescription().contains(keyword)) {"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"                    matchingTasks.add(task);"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"            Ui.displayMatchingTasks(matchingTasks);"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"It seems my search button is malfunctioning...\");"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":42}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to an Invalid command."},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"     * Throws DukeException."},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"     * @throws DukeException when an invalid command is read."},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        throw new DukeException(\"That doesn\u0027t seem to be an item on our menu...\");"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":18}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a List command."},{"lineNumber":8,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"     * Displays all current tasks."},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    public void process() {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"        Ui.displayAllTasks(Storage.getTasks());"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":17}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Todo command."},{"lineNumber":12,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"public class TodoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public TodoCommand(String[] command) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        super.command \u003d command;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * Creates Todo object from commands provided during initialisation of the TodoCommand object. Adds it to the"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     * data file and prints the added Todo object."},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if arguments provided to the TodoCommand object are invalid."},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    public void process() throws DukeException {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"        Task task \u003d Todo.createTodo(command);"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(task, Storage.getTasks());"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        Ui.displayAddedTask(task, Storage.getTasks());"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        Storage.updateDataFile();"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":32}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import duke.command.CommandType;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"import duke.task.Todo;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":""},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":" * Class which contains methods to initialise and update a data text file in a pre-determined path."},{"lineNumber":18,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    public static final String SPLITTER \u003d \" /\u0026/ \";"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    private static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    private static String pathName;"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":""},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    public static ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        return tasks;"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":""},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"     * Initialises the path name of the data file."},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"     * @param newPathName path where the data file should be created or should be accessed from."},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    public static void initialisePath(String newPathName) {"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"        pathName \u003d newPathName;"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":""},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"     * Processes the tasks stored in the data file and loads them to the program."},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"    public static void initialiseList() {"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        File f \u003d new File(pathName);"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"            boolean isEmptyFile \u003d f.createNewFile();"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"            if (!isEmptyFile) {"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"                Scanner sc \u003d new Scanner(f);"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"                while (sc.hasNextLine()) {"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                    Task task \u003d convertStringToTask(sc.nextLine());"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"                    tasks.add(task);"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"                }"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":""},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"     * Returns Task object after converting a String object in the data file."},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"     * @param taskString formatted String containing all necessary information of a Task."},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"     * @return Task object that was represented by the taskString."},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if the formatting of Strings in the data file is incorrect."},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":"    private static Task convertStringToTask(String taskString) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"        String[] taskArgs \u003d taskString.split(SPLITTER, 4);"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"            CommandType type \u003d CommandType.valueOf(taskArgs[0]);"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"            boolean isDone \u003d Integer.parseInt(taskArgs[1]) \u003d\u003d 1;"},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"            String desc \u003d taskArgs[2];"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":""},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"            Task task \u003d null;"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":""},{"lineNumber":73,"author":{"gitId":"natosy"},"content":"            switch (type) {"},{"lineNumber":74,"author":{"gitId":"natosy"},"content":"            case TODO:"},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"                task \u003d new Todo(desc);"},{"lineNumber":76,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":77,"author":{"gitId":"natosy"},"content":"            case DEADLINE:"},{"lineNumber":78,"author":{"gitId":"natosy"},"content":"                task \u003d new Deadline(desc, LocalDateTime.parse(taskArgs[3]));"},{"lineNumber":79,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":80,"author":{"gitId":"natosy"},"content":"            case EVENT:"},{"lineNumber":81,"author":{"gitId":"natosy"},"content":"                task \u003d new Event(desc, LocalDateTime.parse(taskArgs[3]));"},{"lineNumber":82,"author":{"gitId":"natosy"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"natosy"},"content":"            default:"},{"lineNumber":84,"author":{"gitId":"natosy"},"content":"                throw new DukeException(\"Can\u0027t convert string from menu to order...\");"},{"lineNumber":85,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"natosy"},"content":"            if (isDone) {"},{"lineNumber":87,"author":{"gitId":"natosy"},"content":"                assert task !\u003d null;"},{"lineNumber":88,"author":{"gitId":"natosy"},"content":"                task.markDone();"},{"lineNumber":89,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"natosy"},"content":"            return task;"},{"lineNumber":91,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":92,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There seems to be something wrong with the menu and we can\u0027t start up...\");"},{"lineNumber":93,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"natosy"},"content":""},{"lineNumber":96,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"natosy"},"content":"     * Updates the data file with the tasks saved into the program. If data file has been shifted from its original"},{"lineNumber":98,"author":{"gitId":"natosy"},"content":"     * position, a new data file will be created with the existing task items."},{"lineNumber":99,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if the data file cannot be written into."},{"lineNumber":101,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"natosy"},"content":"    public static void updateDataFile() throws DukeException {"},{"lineNumber":103,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"natosy"},"content":"            new File(pathName).createNewFile();"},{"lineNumber":105,"author":{"gitId":"natosy"},"content":"            FileWriter fw \u003d new FileWriter(pathName);"},{"lineNumber":106,"author":{"gitId":"natosy"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":107,"author":{"gitId":"natosy"},"content":"            for (Task task : tasks) {"},{"lineNumber":108,"author":{"gitId":"natosy"},"content":"                sb.append(task.getFormattedStorageString());"},{"lineNumber":109,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"natosy"},"content":"            fw.write(sb.toString());"},{"lineNumber":111,"author":{"gitId":"natosy"},"content":"            fw.close();"},{"lineNumber":112,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":113,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"Oh no! I can\u0027t seem to update your menu...\");"},{"lineNumber":114,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":116}},{"path":"src/main/java/duke/task/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":" * Encapsulates any behaviour related to DateTime objects contained within Deadline and Event tasks."},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"public class DateTime {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":""},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    public DateTime(LocalDateTime dateTime) {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     * Converts string into LocalDateTime object."},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"     * @param date String representing date."},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"     * @return LocalDateTime object."},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if format of the date String is invalid."},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    public static LocalDateTime convertStringToDate(String date) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"            return LocalDateTime.parse(date, formatter);"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There was something wrong with the format of your date and/or time.\\n\""},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"                    + \"Make sure it\u0027s in the format \u003cdd/MM/yyyy HHmm\u003e!\");"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":""},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"     * Returns String representing DateTime of tasks to be printed to the CLI."},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"     * @return String representing DateTime of tasks."},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    public String getDateTimeForDisplay() {"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        return \" (by: \" + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\")) + \")\";"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"     * Returns String representing DateTime of tasks to be stored in data file."},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"     * @return String representing DateTime of tasks."},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"    public String getFormattedStorageString() {"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"        return dateTime.toString();"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":53}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Deadline task."},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":""},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    private final DateTime dateTime;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"     * Creates a Deadline object with a description and a DateTime object."},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     * @param description description of the deadline."},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     * @param dateTime DateTime indicating the deadline of the task."},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    public Deadline(String description, LocalDateTime dateTime) {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        this.dateTime \u003d new DateTime(dateTime);"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":""},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"     * Returns Deadline task created from arguments representing the user input."},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"     * @param command user input."},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"     * @return Deadline task."},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if insufficient or invalid arguments are passed."},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    public static Task createDeadline(String[] command) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There\u0027s not enough information about your Deadline order!\");"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        String[] args \u003d command[1].split(\" /by \", 2);"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"        if (args.length \u003d\u003d 1 || args[0].isEmpty() || args[1].isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"Looks like your Deadline order isn\u0027t complete...\");"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        return new Deadline(args[0], DateTime.convertStringToDate(args[1]));"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":""},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    public String getFormattedStorageString() {"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"        return \"DEADLINE\""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"                + Storage.SPLITTER"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"                + (isDone() ? \"1\" : \"0\")"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"                + Storage.SPLITTER"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                + getDescription()"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"                + Storage.SPLITTER"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"                + dateTime.getFormattedStorageString() + \"\\n\";"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":""},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"        return \"[D]\" + super.toString() + dateTime.getDateTimeForDisplay() + \"\\n\";"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":57}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Event task."},{"lineNumber":10,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    private final DateTime dateTime;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     * Creates an Event object with a description and DateTime object."},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     * @param description description of the event."},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     * @param dateTime DateTime indicating the occurrence of the event."},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    public Event(String description, LocalDateTime dateTime) {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        this.dateTime \u003d new DateTime(dateTime);"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":""},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"     * Returns Event task created from arguments representing the user input."},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"     * @param command user input."},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"     * @return Event task."},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if insufficient or invalid arguments are passed."},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    public static Task createEvent(String[] command) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There\u0027s not enough information about your Event order!\");"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        String[] args \u003d command[1].split(\" /at \", 2);"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"        if (args.length \u003d\u003d 1 || args[0].isEmpty() || args[1].isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"Looks like your Event order isn\u0027t complete...\");"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        return new Event(args[0], DateTime.convertStringToDate(args[1]));"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":""},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    public String getFormattedStorageString() {"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"        return \"EVENT\""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"                + Storage.SPLITTER"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"                + (isDone() ? \"1\" : \"0\")"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"                + Storage.SPLITTER"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                + getDescription()"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"                + Storage.SPLITTER"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"                + dateTime.getFormattedStorageString() + \"\\n\";"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":""},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"        return \"[E]\" + super.toString() + dateTime.getDateTimeForDisplay() + \"\\n\";"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":57}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":" * Abstract class which is inherited by all Task classes."},{"lineNumber":5,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"    private String description;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"    private boolean isDone;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":""},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"     * Creates a task object and sets isDone to false by default."},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"     * @param description description of task."},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"        isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":""},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    public String getDescription() {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        return description;"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":""},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    public boolean isDone() {"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        return isDone;"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":""},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"     * Returns status icon of task."},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"     * @return tick if Task is done, otherwise empty."},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        return isDone ? \"[\\u2713] \" : \"[ ] \";"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":""},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"    public void markDone() {"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        isDone \u003d true;"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":""},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"     * Returns String of Tasks formatted to be saved in the data file."},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"     * @return formatted String which is saved in the data file."},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"    public abstract String getFormattedStorageString();"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":""},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"        return getStatusIcon() + description;"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":53}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":""},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":" * Class containing methods to edit the program\u0027s existing task list."},{"lineNumber":9,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":""},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"     * Adds a task to an ArrayList of tasks."},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     * @param task  task to be added."},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"     * @param tasks ArrayList to be added to."},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if ArrayList is not initialised."},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    public static void addTask(Task task, ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"            tasks.add(task);"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":""},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"     * Deletes a task from an ArrayList of tasks."},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"     * @param taskId index of the task to be deleted."},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"     * @param tasks  ArrayList to delete the task from."},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"     * @return Task that was deleted."},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if ArrayList is not initialised or taskId is invalid."},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"    public static Task deleteTask(int taskId, ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"            return tasks.remove(taskId);"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":42}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":" * Class containing data and methods specific to a Todo task."},{"lineNumber":8,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"public class Todo extends Task {"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"    public Todo(String description) {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     * Returns Todo task created from arguments representing the user input."},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     * @param command user input."},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"     * @return Todo task."},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"     * @throws DukeException if insufficient or invalid arguments are passed."},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"    public static Task createTodo(String[] command) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"            throw new DukeException(\"There\u0027s not enough information about your Todo order!\");"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        return new Todo(command[1]);"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":""},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    public String getFormattedStorageString() {"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"        return \"TODO\""},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"                + Storage.SPLITTER"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"                + (isDone() ? \"1\" : \"0\")"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"                + Storage.SPLITTER"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"                + getDescription()"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"                + \"\\n\";"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":""},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        return \"[T]\" + super.toString() + \"\\n\";"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":41}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":" * A custom control using FXML."},{"lineNumber":21,"author":{"gitId":"natosy"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":" * containing text from the speaker."},{"lineNumber":23,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    private Label dialog;"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    private ImageView displayPicture;"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":""},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"            fxmlLoader.load();"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        // Allows dialog box to scale its height according to text contents"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":""},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        dialog.setText(text);"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"        displayPicture.setImage(img);"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"        // Clips image into circle"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"        Circle clip \u003d new Circle();"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"        clip.setCenterY(35);"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"        clip.setCenterX(35);"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"        clip.setRadius(35);"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":""},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"        return new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":""},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"        db.flip();"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"        return db;"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"natosy"},"content":""},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"    private void flip() {"},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"        Collections.reverse(tmp);"},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":72}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"import javafx.scene.layout.Priority;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":21,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    private VBox dialogContainer;"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    private TextField userInput;"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"    private Button sendButton;"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":""},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    private Duke duke;"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":""},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/mcspicy.png\"));"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"    private Image welcomeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/logo.png\"));"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":""},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"     * Initialises MainWindow object with welcome message and logo."},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"    public void initialize() {"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"        ImageView logo \u003d new ImageView(welcomeImage);"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"        logo.setFitWidth(100);"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"        logo.setPreserveRatio(true);"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"        logo.setTranslateX(10);"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"        dialogContainer.setAlignment(Pos.BASELINE_CENTER);"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"                logo, DialogBox.getDukeDialog(Ui.welcomeString(), dukeImage)"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":""},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"        duke \u003d d;"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":""},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":"    private void handleUserInput() {"},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"        DialogBox userDb \u003d DialogBox.getUserDialog(input, userImage);"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"        DialogBox dukeDb \u003d DialogBox.getDukeDialog(response, dukeImage);"},{"lineNumber":69,"author":{"gitId":"natosy"},"content":""},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"        HBox.setHgrow(userDb, Priority.ALWAYS);"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"        HBox.setHgrow(dukeDb, Priority.ALWAYS);"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":73,"author":{"gitId":"natosy"},"content":"                userDb, dukeDb"},{"lineNumber":74,"author":{"gitId":"natosy"},"content":"        );"},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"        userInput.clear();"},{"lineNumber":76,"author":{"gitId":"natosy"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":77,"author":{"gitId":"natosy"},"content":"            CompletableFuture\u003cVoid\u003e cf \u003d CompletableFuture.runAsync(() -\u003e {"},{"lineNumber":78,"author":{"gitId":"natosy"},"content":"                try {"},{"lineNumber":79,"author":{"gitId":"natosy"},"content":"                    Thread.sleep(1500);"},{"lineNumber":80,"author":{"gitId":"natosy"},"content":"                } catch (InterruptedException e) {"},{"lineNumber":81,"author":{"gitId":"natosy"},"content":"                    e.printStackTrace();"},{"lineNumber":82,"author":{"gitId":"natosy"},"content":"                }"},{"lineNumber":83,"author":{"gitId":"natosy"},"content":"            });"},{"lineNumber":84,"author":{"gitId":"natosy"},"content":"            cf.thenRun(Platform::exit).thenRun(() -\u003e System.exit(0));"},{"lineNumber":85,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":87}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":""},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":" * Responsible for methods setting and sending appropriate responses to GUI."},{"lineNumber":9,"author":{"gitId":"natosy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    private static String response;"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":""},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"     * Returns welcome message."},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"     * @return welcome message at the start of application."},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    public static String welcomeString() {"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        return \"Welcome!\\n\""},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"                + \"I\u0027m Ronald the McSpicy.\\n\""},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"                + \"What can I do for you today?\";"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":""},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"     * Prints farewell message."},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    public static void displayFarewell() {"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        String str \u003d \"Thanks for coming, we hope to see you again!\\n\""},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"                + \"We will be closing shortly...\";"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        assignResponse(str);"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":""},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":""},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"     * Prints all tasks."},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"     * @param tasks tasks to be printed."},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"    public static void displayAllTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"            sb.append(\"You don\u0027t have anything on your menu at the moment!\\n\\n\""},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"                    + \"If you would like to add a TODO, type\\n\""},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"                    + \"[todo \u003corderName\u003e]\\n\\n\""},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"                    + \"If you would like to add a DEADLINE, type\\n\""},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"                    + \"[deadline \u003corderName\u003e /by \u003cdd/MM/yyyy HHmm\u003e]\\n\\n\""},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"                    + \"If you would like to add an EVENT, type\\n\""},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"                    + \"[event \u003corderName\u003e /at \u003cdd/MM/yyyy HHmm\u003e]\\n\\n\");"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"            sb.append(\"Here\u0027s what you\u0027ve ordered so far:\\n\\n\");"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"                String formattedTask \u003d i + \". \" + tasks.get(i - 1).toString();"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":"                sb.append(formattedTask);"},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"            sb.append(\"\\nIf you would like to remove an item from your menu, type\\n\""},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"                    + \"[delete \u003corderNumber\u003e]\\n\\n\""},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"                    + \"If you would like to mark an order as complete, type\\n\""},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"                    + \"[done \u003corderNumber\u003e]\\n\\n\""},{"lineNumber":59,"author":{"gitId":"natosy"},"content":"                    + \"If you would like to find orders containing a particular keyword, type\\n\""},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"                    + \"[find \u003ckeyword\u003e]\\n\");"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"        assignResponse(sb.toString());"},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":""},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":"     * Displays tasks matching a particular keyword that the user entered."},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":"     * @param tasks tasks which have descriptions containing the keyword."},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"    public static void displayMatchingTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":73,"author":{"gitId":"natosy"},"content":"            sb.append(\"I can\u0027t seem to find an order matching your keyword!\");"},{"lineNumber":74,"author":{"gitId":"natosy"},"content":"        } else {"},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"            sb.append(\"Here are the orders that match!\\n\\n\");"},{"lineNumber":76,"author":{"gitId":"natosy"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":77,"author":{"gitId":"natosy"},"content":"                String formattedTask \u003d i + \". \" + tasks.get(i - 1).toString();"},{"lineNumber":78,"author":{"gitId":"natosy"},"content":"                sb.append(formattedTask);"},{"lineNumber":79,"author":{"gitId":"natosy"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"natosy"},"content":"        assignResponse(sb.toString());"},{"lineNumber":82,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"natosy"},"content":""},{"lineNumber":84,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"natosy"},"content":"     * Prints added task."},{"lineNumber":86,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"natosy"},"content":"     * @param task  task that was added to the list of tasks."},{"lineNumber":88,"author":{"gitId":"natosy"},"content":"     * @param tasks all existing tasks."},{"lineNumber":89,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"natosy"},"content":"    public static void displayAddedTask(Task task, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":91,"author":{"gitId":"natosy"},"content":"        String str \u003d \"Cool! I\u0027ve added the following item to your order list.\\n\\n    \""},{"lineNumber":92,"author":{"gitId":"natosy"},"content":"                + task"},{"lineNumber":93,"author":{"gitId":"natosy"},"content":"                + \"\\nYou now have \""},{"lineNumber":94,"author":{"gitId":"natosy"},"content":"                + tasks.size()"},{"lineNumber":95,"author":{"gitId":"natosy"},"content":"                + \" order(s)!\";"},{"lineNumber":96,"author":{"gitId":"natosy"},"content":"        assignResponse(str);"},{"lineNumber":97,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"natosy"},"content":""},{"lineNumber":99,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"natosy"},"content":"     * Prints deleted task."},{"lineNumber":101,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"natosy"},"content":"     * @param task  task that was deleted."},{"lineNumber":103,"author":{"gitId":"natosy"},"content":"     * @param tasks all existing tasks."},{"lineNumber":104,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"natosy"},"content":"    public static void displayDeletedTask(Task task, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":106,"author":{"gitId":"natosy"},"content":"        String str \u003d \"Aw man... I told Donald that was a bad item to put on the menu.\\n\""},{"lineNumber":107,"author":{"gitId":"natosy"},"content":"                + \"Here you go, I\u0027ve removed this item from your order list!\\n\\n    \""},{"lineNumber":108,"author":{"gitId":"natosy"},"content":"                + task"},{"lineNumber":109,"author":{"gitId":"natosy"},"content":"                + \"\\nYou have \" + tasks.size() + \" order(s) left!\";"},{"lineNumber":110,"author":{"gitId":"natosy"},"content":"        assignResponse(str);"},{"lineNumber":111,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"natosy"},"content":""},{"lineNumber":113,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"natosy"},"content":"     * Prints task that was marked as done."},{"lineNumber":115,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"natosy"},"content":"     * @param task task that was marked as done."},{"lineNumber":117,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"natosy"},"content":"    public static void displayDone(Task task) {"},{"lineNumber":119,"author":{"gitId":"natosy"},"content":"        assignResponse(\"Your order has been served!\\n\\n  \" + task);"},{"lineNumber":120,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"natosy"},"content":""},{"lineNumber":122,"author":{"gitId":"natosy"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"natosy"},"content":"     * Prints error."},{"lineNumber":124,"author":{"gitId":"natosy"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"natosy"},"content":"     * @param msg error message."},{"lineNumber":126,"author":{"gitId":"natosy"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"natosy"},"content":"    public static void displayError(String msg) {"},{"lineNumber":128,"author":{"gitId":"natosy"},"content":"        assignResponse(\"Oops!\\n\" + msg);"},{"lineNumber":129,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"natosy"},"content":""},{"lineNumber":131,"author":{"gitId":"natosy"},"content":"    private static void assignResponse(String s) {"},{"lineNumber":132,"author":{"gitId":"natosy"},"content":"        Ui.response \u003d s;"},{"lineNumber":133,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"natosy"},"content":""},{"lineNumber":135,"author":{"gitId":"natosy"},"content":"    public static String getNextResponse() {"},{"lineNumber":136,"author":{"gitId":"natosy"},"content":"        return Ui.response;"},{"lineNumber":137,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":138}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"         maxWidth\u003d\"1.7976931348623157E308\""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"         styleClass\u003d\"dialogBox\" stylesheets\u003d\"@stylesheet.css\"\u003e"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" styleClass\u003d\"dialog\"\u003e"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"        \u003cHBox.margin\u003e"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        \u003c/HBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    \u003c/Label\u003e"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\""},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    /\u003e"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"natosy":18}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":""},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":11,"author":{"gitId":"natosy"},"content":"            fx:controller\u003d\"duke.ui.MainWindow\" stylesheets\u003d\"@stylesheet.css\"\u003e"},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"570.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"330.0\""},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"                styleClass\u003d\"text-field\"/\u003e"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"330.0\" layoutY\u003d\"570.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"            prefHeight\u003d\"30.0\" prefWidth\u003d\"70.0\" text\u003d\"Send\" styleClass\u003d\"button\"/\u003e"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"570.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"570.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"background\"/\u003e"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"natosy":19}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":""},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"import duke.task.Task;"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"import duke.task.Todo;"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":""},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"class StorageTest {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":""},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    void initialiseList_initialListLength_success() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        String pathName \u003d \"./src/test/java/duke/storage/test_data.txt\";"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        Storage.initialisePath(pathName);"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"        String dummyTasksString \u003d \"DEADLINE /\u0026/ 0 /\u0026/ deadline title /\u0026/ 2001-01-01T23:59\\n\""},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"                + \"EVENT /\u0026/ 0 /\u0026/ event title /\u0026/ 2001-01-01T23:59\\n\""},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"                + \"TODO /\u0026/ 0 /\u0026/ todo item\\n\";"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":""},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"            new File(pathName).createNewFile();"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"            FileWriter fw \u003d new FileWriter(pathName);"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"            fw.write(dummyTasksString);"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"            fw.close();"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":""},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        Storage.initialiseList();"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        assertEquals(Storage.getTasks().size(), 3);"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":""},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"    void updateDataFile() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"        String filePath \u003d \"./src/test/java/duke/storage/test_data.txt\";"},{"lineNumber":46,"author":{"gitId":"natosy"},"content":"        Task todo \u003d new Todo(\"todo\");"},{"lineNumber":47,"author":{"gitId":"natosy"},"content":"        Task deadline \u003d new Deadline(\"deadline\", LocalDateTime.now());"},{"lineNumber":48,"author":{"gitId":"natosy"},"content":"        Task event \u003d new Event(\"event\", LocalDateTime.now());"},{"lineNumber":49,"author":{"gitId":"natosy"},"content":""},{"lineNumber":50,"author":{"gitId":"natosy"},"content":"        Storage.initialisePath(filePath);"},{"lineNumber":51,"author":{"gitId":"natosy"},"content":"        Storage.initialiseList();"},{"lineNumber":52,"author":{"gitId":"natosy"},"content":"        Long initialLength \u003d null;"},{"lineNumber":53,"author":{"gitId":"natosy"},"content":""},{"lineNumber":54,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"natosy"},"content":"            initialLength \u003d Files.lines(Path.of(filePath)).count();"},{"lineNumber":56,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":57,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":58,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"natosy"},"content":""},{"lineNumber":60,"author":{"gitId":"natosy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d Storage.getTasks();"},{"lineNumber":61,"author":{"gitId":"natosy"},"content":"        tasks.add(todo);"},{"lineNumber":62,"author":{"gitId":"natosy"},"content":"        tasks.add(deadline);"},{"lineNumber":63,"author":{"gitId":"natosy"},"content":"        tasks.add(event);"},{"lineNumber":64,"author":{"gitId":"natosy"},"content":""},{"lineNumber":65,"author":{"gitId":"natosy"},"content":"        Storage.updateDataFile();"},{"lineNumber":66,"author":{"gitId":"natosy"},"content":""},{"lineNumber":67,"author":{"gitId":"natosy"},"content":"        Long finalLength \u003d null;"},{"lineNumber":68,"author":{"gitId":"natosy"},"content":""},{"lineNumber":69,"author":{"gitId":"natosy"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"natosy"},"content":"            finalLength \u003d Files.lines(Path.of(filePath)).count();"},{"lineNumber":71,"author":{"gitId":"natosy"},"content":"        } catch (Exception e) {"},{"lineNumber":72,"author":{"gitId":"natosy"},"content":"            e.printStackTrace();"},{"lineNumber":73,"author":{"gitId":"natosy"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"natosy"},"content":""},{"lineNumber":75,"author":{"gitId":"natosy"},"content":"        assert initialLength !\u003d null;"},{"lineNumber":76,"author":{"gitId":"natosy"},"content":"        assert finalLength !\u003d null;"},{"lineNumber":77,"author":{"gitId":"natosy"},"content":"        assertEquals(initialLength + 3, finalLength);"},{"lineNumber":78,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":79}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":""},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    void createDeadline_tagOnly_exceptionThrown() {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"            Deadline.createDeadline(new String[]{\"deadline\"});"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    void createDeadline_titleOnly_exceptionThrown() {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"            Deadline.createDeadline(new String[]{\"deadline\", \"deadline title\"});"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":""},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    void createDeadline_dateTimeOnly_exceptionThrown() {"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"            Deadline.createDeadline(new String[]{\"deadline\", \"/by 01/01/2001 2359\"});"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":""},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    void createDeadline_allFields_success() throws DukeException {"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        Task deadline \u003d Deadline.createDeadline(new String[]{\"deadline\", \"deadline title /by 01/01/2001 2359\"});"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        assertEquals(deadline.getFormattedStorageString(), \"DEADLINE /\u0026/ 0 /\u0026/ deadline title /\u0026/ 2001-01-01T23:59\\n\");"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":38}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"class EventTest {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":""},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    void createEvent_tagOnly_exceptionThrown() {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"            Event.createEvent(new String[]{\"event\"});"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    void createEvent_titleOnly_exceptionThrown() {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"            Event.createEvent(new String[]{\"event\", \"event title\"});"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":""},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":"    void createEvent_dateTimeOnly_exceptionThrown() {"},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"            Event.createEvent(new String[]{\"event\", \"/at 01/01/2001 2359\"});"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":""},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":"    void createEvent_allFields_success() throws DukeException {"},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        Task event \u003d Event.createEvent(new String[]{\"event\", \"event title /at 01/01/2001 2359\"});"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        assertEquals(event.getFormattedStorageString(), \"EVENT /\u0026/ 0 /\u0026/ event title /\u0026/ 2001-01-01T23:59\\n\");"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":38}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":""},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":""},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"class TaskListTest {"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":""},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"    void addTask_allTypesOfTask_success() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"        Task todo \u003d new Todo(\"todo\");"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":"        Task deadline \u003d new Deadline(\"deadline\", LocalDateTime.now());"},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"        Task event \u003d new Event(\"event\", LocalDateTime.now());"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(todo, tasks);"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 1);"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(deadline, tasks);"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 2);"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"        TaskList.addTask(event, tasks);"},{"lineNumber":25,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 3);"},{"lineNumber":26,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"natosy"},"content":""},{"lineNumber":28,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"natosy"},"content":"    void deleteTask_validId_success() throws DukeException {"},{"lineNumber":30,"author":{"gitId":"natosy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"natosy"},"content":"        Task todo \u003d new Todo(\"todo\");"},{"lineNumber":32,"author":{"gitId":"natosy"},"content":"        Task deadline \u003d new Deadline(\"deadline\", LocalDateTime.now());"},{"lineNumber":33,"author":{"gitId":"natosy"},"content":"        Task event \u003d new Event(\"event\", LocalDateTime.now());"},{"lineNumber":34,"author":{"gitId":"natosy"},"content":""},{"lineNumber":35,"author":{"gitId":"natosy"},"content":"        tasks.add(todo);"},{"lineNumber":36,"author":{"gitId":"natosy"},"content":"        tasks.add(deadline);"},{"lineNumber":37,"author":{"gitId":"natosy"},"content":"        tasks.add(event);"},{"lineNumber":38,"author":{"gitId":"natosy"},"content":""},{"lineNumber":39,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 3);"},{"lineNumber":40,"author":{"gitId":"natosy"},"content":"        assertEquals(todo, TaskList.deleteTask(0, tasks));"},{"lineNumber":41,"author":{"gitId":"natosy"},"content":"        assertEquals(deadline, TaskList.deleteTask(0, tasks));"},{"lineNumber":42,"author":{"gitId":"natosy"},"content":"        assertEquals(event, TaskList.deleteTask(0, tasks));"},{"lineNumber":43,"author":{"gitId":"natosy"},"content":"        assertEquals(tasks.size(), 0);"},{"lineNumber":44,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":45}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":""},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":""},{"lineNumber":6,"author":{"gitId":"natosy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"natosy"},"content":""},{"lineNumber":8,"author":{"gitId":"natosy"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"natosy"},"content":""},{"lineNumber":10,"author":{"gitId":"natosy"},"content":"class TodoTest {"},{"lineNumber":11,"author":{"gitId":"natosy"},"content":""},{"lineNumber":12,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"natosy"},"content":"    void createTodo_tagOnly_exceptionThrown() {"},{"lineNumber":14,"author":{"gitId":"natosy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":15,"author":{"gitId":"natosy"},"content":"            Todo.createTodo(new String[]{\"todo\"});"},{"lineNumber":16,"author":{"gitId":"natosy"},"content":"        });"},{"lineNumber":17,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"natosy"},"content":""},{"lineNumber":19,"author":{"gitId":"natosy"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"natosy"},"content":"    void createTodo_allFields_success() throws DukeException {"},{"lineNumber":21,"author":{"gitId":"natosy"},"content":"        Task todo \u003d Todo.createTodo(new String[]{\"todo\", \"something something\"});"},{"lineNumber":22,"author":{"gitId":"natosy"},"content":"        assertEquals(todo.getFormattedStorageString(), \"TODO /\u0026/ 0 /\u0026/ something something\\n\");"},{"lineNumber":23,"author":{"gitId":"natosy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"natosy"},"content":"}"}],"authorContributionMap":{"natosy":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"natosy"},"content":"todo task 1"},{"lineNumber":2,"author":{"gitId":"natosy"},"content":"deadline task 2 /by tomorrow"},{"lineNumber":3,"author":{"gitId":"natosy"},"content":"event task 3 /at tonight"},{"lineNumber":4,"author":{"gitId":"natosy"},"content":"list"},{"lineNumber":5,"author":{"gitId":"natosy"},"content":"bye"}],"authorContributionMap":{"natosy":5}}]
