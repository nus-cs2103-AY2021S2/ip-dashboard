[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"# Travis Task Handler"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"This project is a simple chatbot that handles your task as a markdown list."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"## Setting up using Gradle"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version, Gradle."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"1. Open the Gradle option on the right and click run, you should see the ui appear."},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"## Using the bot"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"These are some simple commands for you to manipulate the bot"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"### Task creation"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"- todo {name of your todo task}"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"- deadline {name of you deadline task} /by {date in \u0027dd/mm/yyyy hhhh\u0027 format}"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"- event {name of you event task} /at {date in \u0027dd/mm/yyyy hhhh\u0027 format}"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"### Task manipulation"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"The task index is 1 based."},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"- delete {task index}"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"- snooze {task index} \u0027/at\u0027 or \u0027/by\u0027 {date in \u0027dd/mm/yyyy hhhh\u0027 format}"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"- done {task index}"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"- find {string you want to find in task name}"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"- list"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"Explanations on some functions:"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"- find will list all task that have the string you input"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"- list will list out all tasks you have inputted and not deleted"}],"authorContributionMap":{"-":10,"BenedictBCJJ":30}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"    mainClassName \u003d \"duke.gui.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"BenedictBCJJ":17}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"done"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"exit $ret"}],"authorContributionMap":{"BenedictBCJJ":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"\u0027"}],"authorContributionMap":{"BenedictBCJJ":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"\u0027"}],"authorContributionMap":{"BenedictBCJJ":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"done"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"exit $ret"}],"authorContributionMap":{"BenedictBCJJ":11}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"# Travis Task Handler"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"This project is a simple chatbot that handles your task as a markdown list."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"## Setting up using Gradle"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version, Gradle."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"1. Open the Gradle option on the right and click run, you should see the ui appear."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"## Using the bot"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"These are some simple commands for you to manipulate the bot"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"### Task creation"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"- todo {name of your todo task}"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"- deadline {name of you deadline task} /by {date in \u0027dd/mm/yyyy hhhh\u0027 format}"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"- event {name of you event task} /at {date in \u0027dd/mm/yyyy hhhh\u0027 format}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"### Task manipulation"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"The task index is 1 based."},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"- delete {task index}"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"- snooze {task index} \u0027/at\u0027 or \u0027/by\u0027 {date in \u0027dd/mm/yyyy hhhh\u0027 format}"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"- done {task index}"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"- find {string you want to find in task name}"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"- list"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"Explanations on some functions:"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"- find will list all task that have the string you input"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"- list will list out all tasks you have inputted and not deleted"}],"authorContributionMap":{"-":9,"BenedictBCJJ":31}},{"path":"savedTasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"T | 0 | read book"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":"D | 0 | return book "}],"authorContributionMap":{"BenedictBCJJ":2}},{"path":"src/main/java/src/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.datahandler.DukeTaskHandler;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.datahandler.Parser;"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.datahandler.Storage;"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.datahandler.TaskList;"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.datahandler.Ui;"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.enums.Command;"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.exception.TaskException;"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":" * A chat bot that accepts certain commands and keeps track of them in a"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":" * seperate file. The commands are similar to a calendar where the user would"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":" * like to keep track of todo events and deadlines that are upcoming. Tasks can"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":" * be marked as done or pending, time can be specified for time sensitive"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":" * events."},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"public class Duke {"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"    private String illegalArgumentString \u003d \"    Invalid command, work harder!!!\\n\";"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"    private TaskList taskList;"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"     * Construct duke for input"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"    public Duke() {"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"     * Get the users input and generates the relevant response based on the command"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"     * input and validity."},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param input input from the user in the ui"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return text display to the user"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getResponse(String input) {"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"        Parser parser \u003d new Parser(input);"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"        Command taskType \u003d parser.getCommand();"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"        String output \u003d \"\";"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"            switch (taskType) {"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"            case LIST:"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"                output \u003d Ui.execute(Command.LIST, taskList, null);"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"                System.out.println(output);"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"            case DELETE:"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"                Task deletedTask \u003d taskList.get(parser.getTaskIndex() - 1);"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":"                taskList.delete(parser.getTaskIndex() - 1);"},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"                output \u003d Ui.execute(Command.DELETE, taskList, deletedTask.getStatus());"},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"            case DONE:"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":"                Task doneTask \u003d taskList.get(parser.getTaskIndex() - 1);"},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"                doneTask.setDone(true);"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"                output \u003d Ui.execute(Command.DONE, taskList, doneTask.getStatus());"},{"lineNumber":63,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":64,"author":{"gitId":"BenedictBCJJ"},"content":"            case SNOOZE:"},{"lineNumber":65,"author":{"gitId":"BenedictBCJJ"},"content":"                Task changeTask \u003d taskList.get(parser.getTaskIndex() - 1);"},{"lineNumber":66,"author":{"gitId":"BenedictBCJJ"},"content":"                LocalDate newDate \u003d LocalDate.parse(parser.getDate(),"},{"lineNumber":67,"author":{"gitId":"BenedictBCJJ"},"content":"                        DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\"));"},{"lineNumber":68,"author":{"gitId":"BenedictBCJJ"},"content":"                changeTask.changeEventTime(newDate);"},{"lineNumber":69,"author":{"gitId":"BenedictBCJJ"},"content":"                taskList.update(changeTask, parser.getTaskIndex() - 1);"},{"lineNumber":70,"author":{"gitId":"BenedictBCJJ"},"content":"                output \u003d Ui.execute(Command.SNOOZE, taskList, changeTask.getStatus());"},{"lineNumber":71,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"BenedictBCJJ"},"content":"            case DEADLINE:"},{"lineNumber":73,"author":{"gitId":"BenedictBCJJ"},"content":"            case EVENT:"},{"lineNumber":74,"author":{"gitId":"BenedictBCJJ"},"content":"            case TODO:"},{"lineNumber":75,"author":{"gitId":"BenedictBCJJ"},"content":"                DukeTaskHandler dukeTaskHandler \u003d new DukeTaskHandler(parser, taskType);"},{"lineNumber":76,"author":{"gitId":"BenedictBCJJ"},"content":"                Task task \u003d dukeTaskHandler.getNewTask();"},{"lineNumber":77,"author":{"gitId":"BenedictBCJJ"},"content":"                taskList.add(task);"},{"lineNumber":78,"author":{"gitId":"BenedictBCJJ"},"content":"                output \u003d Ui.execute(Command.TODO, taskList, task.getStatus());"},{"lineNumber":79,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":80,"author":{"gitId":"BenedictBCJJ"},"content":"            case FIND:"},{"lineNumber":81,"author":{"gitId":"BenedictBCJJ"},"content":"                output \u003d Ui.execute(Command.FIND, taskList, parser.getDescription());"},{"lineNumber":82,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"BenedictBCJJ"},"content":"            case NONE:"},{"lineNumber":84,"author":{"gitId":"BenedictBCJJ"},"content":"                throw new TaskException(illegalArgumentString);"},{"lineNumber":85,"author":{"gitId":"BenedictBCJJ"},"content":"            case BYE:"},{"lineNumber":86,"author":{"gitId":"BenedictBCJJ"},"content":"                output \u003d Ui.execute(Command.BYE, taskList, null);"},{"lineNumber":87,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":88,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":89,"author":{"gitId":"BenedictBCJJ"},"content":"            default:"},{"lineNumber":90,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":91,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":92,"author":{"gitId":"BenedictBCJJ"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":94,"author":{"gitId":"BenedictBCJJ"},"content":"        } catch (TaskException e) {"},{"lineNumber":95,"author":{"gitId":"BenedictBCJJ"},"content":"            return (e.getMessage());"},{"lineNumber":96,"author":{"gitId":"BenedictBCJJ"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":97,"author":{"gitId":"BenedictBCJJ"},"content":"            return (illegalArgumentString);"},{"lineNumber":98,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"BenedictBCJJ"},"content":"        Storage.createAndWrite(\"savedTasks.txt\", taskList);"},{"lineNumber":100,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":101,"author":{"gitId":"BenedictBCJJ"},"content":"        return output;"},{"lineNumber":102,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":103,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":105,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"BenedictBCJJ"},"content":"     * sends the greeting from duke to the user"},{"lineNumber":107,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return text shown to the user when they start duke"},{"lineNumber":108,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":110,"author":{"gitId":"BenedictBCJJ"},"content":"    public static String greeting() {"},{"lineNumber":111,"author":{"gitId":"BenedictBCJJ"},"content":"        return \"    Hey yo, I\u0027m Travis.\\n    I make you work. \\n\";"},{"lineNumber":112,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":113}},{"path":"src/main/java/src/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.gui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"            stage.setTitle(\"Travis Work Work\");"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"            stage.setResizable(false);"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":34}},{"path":"src/main/java/src/duke/datahandler/DukeTaskHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.datahandler;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.enums.Command;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.enums.TaskType;"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.exception.TaskException;"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.task.Event;"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.task.ToDo;"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":" * Handles all task related logic for duke and returns the newly created task to"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":" * be added."},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"public class DukeTaskHandler {"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"    private Task newTask;"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"     * constructs the task handler by taking in a parser that has parsed the input"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"     * and a task type to determine what type of task is created"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param parser   the parser that has been given user input"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param taskType the task that the handler should create"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"     * @throws TaskException invalid arguments or missing arguments"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"    public DukeTaskHandler(Parser parser, Command taskType) throws TaskException {"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"        if (parser.hasDescriptionError()) {"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"            Parser.exception(\"The is no description, please enter description.\");"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"        } else if (parser.hasDateError()) {"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"            Parser.exception(\"Date is either invalid or not entered, please rectify.\");"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"        TaskType typeOfTask \u003d TaskType.valueOf(taskType.toString());"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"        switch (typeOfTask) {"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"        case DEADLINE:"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"            newTask \u003d new Deadline(parser.getDescription(), LocalDate.parse(parser.getDate(), formatter));"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"        case EVENT:"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"            newTask \u003d new Event(parser.getDescription(), LocalDate.parse(parser.getDate(), formatter));"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"        case TODO:"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"            newTask \u003d new ToDo(parser.getDescription());"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"        default:"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"     * returns the task created by the task handler"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return new task created by task handler"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"    public Task getNewTask() {"},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"        return newTask;"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":61}},{"path":"src/main/java/src/duke/datahandler/ParseTaskHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.datahandler;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.enums.TaskType;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":" * The ParseTaskHandler object handles all task logic for the parser"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"public class ParseTaskHandler {"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    private String description;"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    private String date;"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"     * Gets the relevant information from the parser and breaks down the relevant"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"     * informatino needed to create a new task"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param information informatino needed to create a new task"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    ParseTaskHandler(String[] information) {"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"        ArrayList\u003cString\u003e timeAndDescription;"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"        if (information.length \u003c 2) {"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"            timeAndDescription \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"            timeAndDescription \u003d new ArrayList\u003cString\u003e(Arrays.asList(information[1].split(\"/\", 2)));"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"        TaskType typeOfTask \u003d TaskType.valueOf(information[0].toUpperCase());"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"        timeAndDescription.add(\"DESCRIPTION.ERROR DATE.ERROR\");"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"        timeAndDescription.add(\"DATE.ERROR \");"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"        assert timeAndDescription.size() \u003e\u003d 2;"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"        switch (typeOfTask) {"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"        case TODO:"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"            this.description \u003d timeAndDescription.get(0);"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"        case DEADLINE:"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"        case EVENT:"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"            this.description \u003d timeAndDescription.get(0);"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"            this.date \u003d timeAndDescription.get(1).split(\" \", 2)[1];"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"        default:"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"     * gets the date of the new task"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return inputted new task date"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getDate() {"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"        return date;"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"     * gets the description of the new task"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return inputted new task description"},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getDescription() {"},{"lineNumber":63,"author":{"gitId":"BenedictBCJJ"},"content":"        return description;"},{"lineNumber":64,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":65}},{"path":"src/main/java/src/duke/datahandler/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.datahandler;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.enums.Command;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.exception.TaskException;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" * The parser object reads and deconstructs the user input into useful parts"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":" * that can be processed by other handlers."},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    private String date;"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    private Command command;"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    private String description;"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"    private int taskIndex;"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"     * contructs a Parser object that breaksdown user input to useful parts relevant"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"     * to execution of commands"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param input user input"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    public Parser(String input) {"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"            String[] information \u003d input.split(\" \", 2);"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"            assert information.length \u003e 0;"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"            this.command \u003d Command.valueOf(information[0].toUpperCase());"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"            switch (this.command) {"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"            case FIND:"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"                this.description \u003d information[1];"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"            case DELETE:"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"            case DONE:"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"                this.taskIndex \u003d Integer.parseInt(information[1]);"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"            case TODO:"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"            case DEADLINE:"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"            case EVENT:"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"                ParseTaskHandler handleTaskInfo \u003d new ParseTaskHandler(information);"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"                this.description \u003d handleTaskInfo.getDescription();"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"                this.date \u003d handleTaskInfo.getDate();"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"            case SNOOZE:"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"                this.taskIndex \u003d Integer.parseInt(information[1].split(\" \", 2)[0]);"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"                this.date \u003d information[1].split(\" \", 3)[2];"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"                break;"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"            case BYE:"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"            case NONE:"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"            case LIST:"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"            default:"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"            this.command \u003d Command.NONE;"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":"     * checks whether there is a lack of decription"},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return true if there is no description false otherwise"},{"lineNumber":63,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"BenedictBCJJ"},"content":"    public boolean hasDescriptionError() {"},{"lineNumber":65,"author":{"gitId":"BenedictBCJJ"},"content":"        return description.equals(\"DESCRIPTION.ERROR DATE.ERROR\") || description.equals(\"\");"},{"lineNumber":66,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":68,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"BenedictBCJJ"},"content":"     * checks if there is a lack of date input"},{"lineNumber":70,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return true if there is no date input false otherwise"},{"lineNumber":72,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"BenedictBCJJ"},"content":"    public boolean hasDateError() {"},{"lineNumber":74,"author":{"gitId":"BenedictBCJJ"},"content":"        return !this.command.equals(Command.TODO) \u0026\u0026 this.date.equals(\"DATE.ERROR\");"},{"lineNumber":75,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":77,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"BenedictBCJJ"},"content":"     * checks if the bye input has been entered"},{"lineNumber":79,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return true if command is bye, false otherwise"},{"lineNumber":81,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"BenedictBCJJ"},"content":"    public boolean isCommandBye() {"},{"lineNumber":83,"author":{"gitId":"BenedictBCJJ"},"content":"        return this.command.equals(Command.BYE);"},{"lineNumber":84,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":86,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"BenedictBCJJ"},"content":"     * throws a task exception for when the parser has a task exception"},{"lineNumber":88,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param exceptionMessage the message to be passed to the task exception"},{"lineNumber":89,"author":{"gitId":"BenedictBCJJ"},"content":"     * @throws TaskException the exception that will be thowen by parser"},{"lineNumber":90,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"BenedictBCJJ"},"content":"    public static void exception(String exceptionMessage) throws TaskException {"},{"lineNumber":92,"author":{"gitId":"BenedictBCJJ"},"content":"        throw new TaskException(exceptionMessage);"},{"lineNumber":93,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":95,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"BenedictBCJJ"},"content":"     * returns task index the user has inputted"},{"lineNumber":97,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return inputted task index"},{"lineNumber":98,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"BenedictBCJJ"},"content":"    public int getTaskIndex() {"},{"lineNumber":100,"author":{"gitId":"BenedictBCJJ"},"content":"        return taskIndex;"},{"lineNumber":101,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":103,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"BenedictBCJJ"},"content":"     * gets the command the user has inputted"},{"lineNumber":105,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return inputted command"},{"lineNumber":106,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"BenedictBCJJ"},"content":"    public Command getCommand() {"},{"lineNumber":108,"author":{"gitId":"BenedictBCJJ"},"content":"        return command;"},{"lineNumber":109,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":111,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"BenedictBCJJ"},"content":"     * gets the date inputted by the user"},{"lineNumber":113,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return inputted date"},{"lineNumber":114,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getDate() {"},{"lineNumber":116,"author":{"gitId":"BenedictBCJJ"},"content":"        return date;"},{"lineNumber":117,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":119,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"BenedictBCJJ"},"content":"     * gets the task description inputted by the user"},{"lineNumber":121,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return inputted task description"},{"lineNumber":122,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getDescription() {"},{"lineNumber":124,"author":{"gitId":"BenedictBCJJ"},"content":"        return description;"},{"lineNumber":125,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":126}},{"path":"src/main/java/src/duke/datahandler/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.datahandler;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":" * The Storage class is responsible for storing the users list of task that they"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":" * have created. A text file is created to store all the statuses of the task"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":" * that the user has inputted."},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"     * Creates and writes all the task statues in listOfTasks into the path"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"     * sepcified"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param path        path where the text file would be created and written to"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param listOfTasks the list of tasks that would be written to the text file"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    public static void createAndWrite(String path, TaskList listOfTasks) {"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"            File savedTasks \u003d new File(System.getProperty(\"user.dir\"), path);"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"            savedTasks.createNewFile();"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"            FileWriter writer \u003d new FileWriter(path);"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"            for (int i \u003d 0; i \u003c listOfTasks.numberOfTasks(); i++) {"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"                writer.write(listOfTasks.get(i).currentStatus());"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"            writer.close();"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":33}},{"path":"src/main/java/src/duke/datahandler/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.datahandler;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":" * The TaskList class ia a wrapper class around the ArrayList class with added"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":" * functionality. The class includes methods that streamlines and refactors"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":" * arraylist methods in to one method."},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    private ArrayList\u003cTask\u003e listOfTasks;"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"     * Consturcts an empty TaskList"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"    public TaskList() {"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"        this.listOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"     * Adds a task to the task list"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param task task to be added to list"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"    public void add(Task task) {"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"        this.listOfTasks.add(task);"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"     * Delete a task at the index - 1, due to 0 indexing and user input compensation"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param taskIndex index - 1 where the task is to be deleted"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"    public void delete(int taskIndex) {"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"        this.listOfTasks.remove(taskIndex);"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"     * Prints out each task in a new line"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    public String listOutTasks() {"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"        String output \u003d \"\";"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    \" + this.listOfTasks.get(i).getStatus() + \"\\n\";"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"        return output;"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"     * return size of TaskList"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return size of TaskList"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":"    public int numberOfTasks() {"},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"        return this.listOfTasks.size();"},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":"    public Task get(int taskIndex) {"},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"        return this.listOfTasks.get(taskIndex);"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":64,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"BenedictBCJJ"},"content":"     * Searches for task that contains the word and prints them out"},{"lineNumber":66,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param words word that the task must contain to be printed"},{"lineNumber":68,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"BenedictBCJJ"},"content":"    public String findContains(String words) {"},{"lineNumber":70,"author":{"gitId":"BenedictBCJJ"},"content":"        String output \u003d \"\";"},{"lineNumber":71,"author":{"gitId":"BenedictBCJJ"},"content":"        int j \u003d 0;"},{"lineNumber":72,"author":{"gitId":"BenedictBCJJ"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"},{"lineNumber":73,"author":{"gitId":"BenedictBCJJ"},"content":"            if (this.listOfTasks.get(i).doesDescriptionContain(words)) {"},{"lineNumber":74,"author":{"gitId":"BenedictBCJJ"},"content":"                j++;"},{"lineNumber":75,"author":{"gitId":"BenedictBCJJ"},"content":"                output +\u003d \"    \" + j + \".\" + this.listOfTasks.get(i).getStatus() + \"\\n\";"},{"lineNumber":76,"author":{"gitId":"BenedictBCJJ"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"BenedictBCJJ"},"content":"        return output;"},{"lineNumber":79,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":81,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"BenedictBCJJ"},"content":"     * removes the task at the taskindex and replaces it with the new task"},{"lineNumber":83,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param task      task to be put in the task list"},{"lineNumber":84,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param taskIndex deletes the task at this index"},{"lineNumber":85,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"BenedictBCJJ"},"content":"    public void update(Task task, int taskIndex) {"},{"lineNumber":87,"author":{"gitId":"BenedictBCJJ"},"content":"        this.delete(taskIndex);"},{"lineNumber":88,"author":{"gitId":"BenedictBCJJ"},"content":"        this.listOfTasks.add(taskIndex, task);"},{"lineNumber":89,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":90}},{"path":"src/main/java/src/duke/datahandler/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.datahandler;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.enums.Command;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":" * The UI class handles the printing of statements for the user to see."},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"     * Executes the command by printing out the relevant statements to the user"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param command  the command issued by the user"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param taskList the list of tasks that information may be needed from"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param status   the status of the newly added task"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"    public static String execute(Command command, TaskList taskList, String status) {"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"        String output \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"        switch (command) {"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"        case BYE:"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    Bye bye, catch you soon.\";"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"        case EVENT:"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"        case TODO:"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"        case DEADLINE:"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    Got it. I\u0027ve added this task: \\n\";"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"        case DELETE:"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    Noted. I\u0027ve removed this task:\\n\";"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"        case DONE:"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    Nice! I\u0027ve marked this task as done:\\n\";"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"        case LIST:"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    Here are the tasks in your list:\\n\";"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d taskList.listOutTasks();"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"        case FIND:"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    Here are the matching tasks in your list:\";"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d taskList.findContains(status);"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"        case SNOOZE:"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    Task successfully snoozed, this is the new status:\\n\";"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"        case NONE:"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"        if (!(command.equals(Command.LIST) || command.equals(Command.BYE) || command.equals(Command.FIND))) {"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"      \" + status + \"\\n\";"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"            output +\u003d \"    Now you have \" + taskList.numberOfTasks() + \" tasks in the list.\\n\";"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"        assert output !\u003d \"\";"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"        return output;"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":57}},{"path":"src/main/java/src/duke/enums/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.enums;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":" * Commands that can be sent to duke"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, NONE, FIND, SNOOZE"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":8}},{"path":"src/main/java/src/duke/enums/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.enums;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":" * the types of tasks available"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":8}},{"path":"src/main/java/src/duke/exception/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":" * The TaskException class is used to handle exceptions that occur due to input"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":" * errors"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"public class TaskException extends Exception {"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    public TaskException(String message) {"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":14}},{"path":"src/main/java/src/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":" * An example of a custom control using FXML. This control represents a dialog"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":" * box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"     * right."},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"        return new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"        db.flip();"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":"        return db;"},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":62}},{"path":"src/main/java/src/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.Main;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":13}},{"path":"src/main/java/src/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"        duke \u003d d;"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(Duke.greeting(), dukeImage));"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"     * Duke\u0027s reply and then appends them to the dialog container. Clears the user"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"     * input after processing."},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"    private void handleUserInput() {"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"                DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"        userInput.clear();"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":54}},{"path":"src/main/java/src/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" * Deadline implementation of the super class task. In addition to tracking"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":" * event time, this class provide methods to return strings relevant to user"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":" * input."},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    private LocalDate deadlineTime;"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"     * Constructs a deadline with specified name and time."},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param description  the name of the task"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param deadlineTime when the task would need to be done by"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    public Deadline(String description, LocalDate deadlineTime) {"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"        this.deadlineTime \u003d deadlineTime;"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"     * Makes use of the time and desciption to return well formatted status of"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"     * deadline"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return status, descripton and time of deadline"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getStatus() {"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"        return \"[D]\" + super.getStatus() + \"(by: \" + this.deadlineTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"                + \")\";"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"     * Returns the current status of the deadline"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return status of deadline"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    public String currentStatus() {"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"        return \"D\" + super.currentStatus();"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"     * Changes the task time to a new time"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"    public void changeEventTime(LocalDate newEventTime) {"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"        this.deadlineTime \u003d newEventTime;"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":54}},{"path":"src/main/java/src/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" * Event implementation of the super class Task. In addition to tracking event"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":" * time, this class provide methods to return strings relevant to user input."},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    private LocalDate eventTime;"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"     * Constructs an event that would happen as eventTime"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param description name of the event"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param eventTime   time the event occurs"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"    public Event(String description, LocalDate eventTime) {"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"     * returns well formatted event status for the bot to print to the user"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return status of event with relevant information"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getStatus() {"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"        return \"[E]\" + super.getStatus() + \"(at: \" + this.eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"                + \")\";"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"     * returns current status of event"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return current status of event"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"    public String currentStatus() {"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"        return \"E\" + super.currentStatus();"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"     * Changes the task time to a new time"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"    public void changeEventTime(LocalDate newEventTime) {"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"        this.eventTime \u003d newEventTime;"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":52}},{"path":"src/main/java/src/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":" * This Task class is responsible for handling and manipulating task"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" * information."},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":" *"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"public abstract class Task {"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    protected final String description;"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"     * Constructs a task the given description"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param description name of the task"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"    public Task(String description) {"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"     * changes the status of the task, done or not"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param isDone sets the status to this input"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"     * returns a \"[X] \" if task is not done, and \"[ ] \" if task is done"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return \"[X] \" or \"[ ] \""},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getStatus() {"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"        String isDoneSymbol \u003d isDone ? \"[X] \" : \"[ ] \";"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"        return isDoneSymbol + this.description;"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"     * returns formatted string based on whether task is done"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return a formatted string based on done status"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"    public String currentStatus() {"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":"        if (this.isDone) {"},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"            return \" | 1 | \" + this.description + \"\\n\";"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"            return \" | 0 | \" + this.description + \"\\n\";"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":"     * checks if the description of the task contains specified word"},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param word word that is to be found the in task"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return true if found, false otherwise"},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"    public boolean doesDescriptionContain(String word) {"},{"lineNumber":63,"author":{"gitId":"BenedictBCJJ"},"content":"        return this.description.contains(word);"},{"lineNumber":64,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":66,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"BenedictBCJJ"},"content":"     * gets the current is done status"},{"lineNumber":68,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return true is task is done false if not"},{"lineNumber":69,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":71,"author":{"gitId":"BenedictBCJJ"},"content":"    public boolean getDone() {"},{"lineNumber":72,"author":{"gitId":"BenedictBCJJ"},"content":"        return this.isDone;"},{"lineNumber":73,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":75,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"BenedictBCJJ"},"content":"     * to be implemented by subclasses if they intend to support the snooze command"},{"lineNumber":77,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":79,"author":{"gitId":"BenedictBCJJ"},"content":"    public abstract void changeEventTime(LocalDate newTime);"},{"lineNumber":80,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":80}},{"path":"src/main/java/src/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":" * Todo implementation of the super class task. Includes method to properly"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" * format the printing of todo tasks."},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"public class ToDo extends Task {"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"     * Constructs a task the given description"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"     * @param description name of the task"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"    public ToDo(String description) {"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"     * returns well formatted event status for the bot to print to the user"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return status of event with relevant information"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":"    public String getStatus() {"},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"        return \"[T]\" + super.getStatus();"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"     * returns current status of event"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"     * @return current status of event"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"    public String currentStatus() {"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"        return \"T\" + super.currentStatus();"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"     * Does nothing since todo tasks do not track time"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"    public void changeEventTime(LocalDate newTime) {"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":47}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"150.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"BenedictBCJJ":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"BenedictBCJJ":19}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testSetDone() {"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"        Deadline testDeadline \u003d new Deadline(\"\", LocalDate.now());"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"        testDeadline.setDone(true);"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(true, testDeadline.getDone());"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"        testDeadline.setDone(false);"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(false, testDeadline.getDone());"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testGetStatus() {"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"        LocalDate nowDate \u003d LocalDate.now();"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"        Deadline testDeadline \u003d new Deadline(\"\", nowDate);"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"        testDeadline.setDone(true);"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"        String testDate \u003d \"[D][X] (by: \" + nowDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(testDate, testDeadline.getStatus());"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"        testDeadline.setDone(false);"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"        testDate \u003d \"[D][ ] (by: \" + nowDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(testDate, testDeadline.getStatus());"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testSaveStatus() {"},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"        Deadline testDeadline \u003d new Deadline(\"\", LocalDate.now());"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"        testDeadline.setDone(true);"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(\"D | 1 | \\n\", testDeadline.currentStatus());"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"        testDeadline.setDone(false);"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(\"D | 0 | \\n\", testDeadline.currentStatus());"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":43,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testDoesDescriptionContain() {"},{"lineNumber":45,"author":{"gitId":"BenedictBCJJ"},"content":"        Deadline testDeadline \u003d new Deadline(\"\", LocalDate.now());"},{"lineNumber":46,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(true, testDeadline.doesDescriptionContain(\"\"));"},{"lineNumber":47,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(false, testDeadline.doesDescriptionContain(\"123\"));"},{"lineNumber":48,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":50,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testChangeEventTime() {"},{"lineNumber":52,"author":{"gitId":"BenedictBCJJ"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"},{"lineNumber":53,"author":{"gitId":"BenedictBCJJ"},"content":"        LocalDate nowDate \u003d LocalDate.now();"},{"lineNumber":54,"author":{"gitId":"BenedictBCJJ"},"content":"        Deadline testDeadline \u003d new Deadline(\"\", nowDate);"},{"lineNumber":55,"author":{"gitId":"BenedictBCJJ"},"content":"        String testDate \u003d \"[D][ ] (by: \" + nowDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":56,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(testDate , testDeadline.getStatus());"},{"lineNumber":57,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":58,"author":{"gitId":"BenedictBCJJ"},"content":"        LocalDate newDate \u003d LocalDate.parse(\"04/08/1997 1200\", formatter);"},{"lineNumber":59,"author":{"gitId":"BenedictBCJJ"},"content":"        testDeadline.changeEventTime(newDate);"},{"lineNumber":60,"author":{"gitId":"BenedictBCJJ"},"content":"        testDate \u003d \"[D][ ] (by: \" + newDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":61,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(testDate , testDeadline.getStatus());"},{"lineNumber":62,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":63}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":" * Sanity check for junit tests"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":" */"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"public class DukeTest {"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"    public void dummyTest() {"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(2, 2);"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":13}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"import duke.task.ToDo;"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"public class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testSetDone() {"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"        ToDo testToDo \u003d new ToDo(\"\");"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"        testToDo.setDone(true);"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(true, testToDo.getDone());"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"        testToDo.setDone(false);"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(false, testToDo.getDone());"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testGetStatus() {"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"        ToDo testToDo \u003d new ToDo(\"\");"},{"lineNumber":21,"author":{"gitId":"BenedictBCJJ"},"content":"        testToDo.setDone(true);"},{"lineNumber":22,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(\"[T][X] \", testToDo.getStatus());"},{"lineNumber":23,"author":{"gitId":"BenedictBCJJ"},"content":"        testToDo.setDone(false);"},{"lineNumber":24,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(\"[T][ ] \", testToDo.getStatus());"},{"lineNumber":25,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":27,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testSaveStatus() {"},{"lineNumber":29,"author":{"gitId":"BenedictBCJJ"},"content":"        ToDo testToDo \u003d new ToDo(\"\");"},{"lineNumber":30,"author":{"gitId":"BenedictBCJJ"},"content":"        testToDo.setDone(true);"},{"lineNumber":31,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(\"T | 1 | \\n\", testToDo.currentStatus());"},{"lineNumber":32,"author":{"gitId":"BenedictBCJJ"},"content":"        testToDo.setDone(false);"},{"lineNumber":33,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(\"T | 0 | \\n\", testToDo.currentStatus());"},{"lineNumber":34,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"BenedictBCJJ"},"content":""},{"lineNumber":36,"author":{"gitId":"BenedictBCJJ"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"BenedictBCJJ"},"content":"    public void testDoesDescriptionContain() {"},{"lineNumber":38,"author":{"gitId":"BenedictBCJJ"},"content":"        ToDo testToDo \u003d new ToDo(\"\");"},{"lineNumber":39,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(true, testToDo.doesDescriptionContain(\"\"));"},{"lineNumber":40,"author":{"gitId":"BenedictBCJJ"},"content":"        assertEquals(false, testToDo.doesDescriptionContain(\"123\"));"},{"lineNumber":41,"author":{"gitId":"BenedictBCJJ"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"BenedictBCJJ"},"content":"}"}],"authorContributionMap":{"BenedictBCJJ":42}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"BenedictBCJJ"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"BenedictBCJJ"},"content":"deadline return book /by 2/05/1997 1600"},{"lineNumber":3,"author":{"gitId":"BenedictBCJJ"},"content":"snooze 2 /at 04/08/1997 1200"},{"lineNumber":4,"author":{"gitId":"BenedictBCJJ"},"content":"event project meeting /at 04/08/1997 1200"},{"lineNumber":5,"author":{"gitId":"BenedictBCJJ"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"BenedictBCJJ"},"content":"todo borrow book"},{"lineNumber":7,"author":{"gitId":"BenedictBCJJ"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"BenedictBCJJ"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"BenedictBCJJ"},"content":"list"},{"lineNumber":10,"author":{"gitId":"BenedictBCJJ"},"content":"deadline return book /by 04/08/1997 1200"},{"lineNumber":11,"author":{"gitId":"BenedictBCJJ"},"content":"event project meeting /at 04/08/1997 1200"},{"lineNumber":12,"author":{"gitId":"BenedictBCJJ"},"content":"list"},{"lineNumber":13,"author":{"gitId":"BenedictBCJJ"},"content":"delete 3"},{"lineNumber":14,"author":{"gitId":"BenedictBCJJ"},"content":"list"},{"lineNumber":15,"author":{"gitId":"BenedictBCJJ"},"content":"blah"},{"lineNumber":16,"author":{"gitId":"BenedictBCJJ"},"content":"todo"},{"lineNumber":17,"author":{"gitId":"BenedictBCJJ"},"content":"deadline"},{"lineNumber":18,"author":{"gitId":"BenedictBCJJ"},"content":"event"},{"lineNumber":19,"author":{"gitId":"BenedictBCJJ"},"content":"deadline nice"},{"lineNumber":20,"author":{"gitId":"BenedictBCJJ"},"content":"event not nice"}],"authorContributionMap":{"BenedictBCJJ":20}}]
