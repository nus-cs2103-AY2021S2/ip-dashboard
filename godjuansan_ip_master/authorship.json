[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.time.ZoneId;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"public class Deadline extends Task{"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    private final String type;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    private final LocalDate date;"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    private final LocalTime time;"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    Deadline(String job, LocalDate date, LocalTime time) {"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"        super(job);"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"D\";"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"        this.time \u003d time;"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    Deadline(String job, Boolean isDone, LocalDate date, LocalTime time) {"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        super(job, isDone);"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"D\";"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"        this.time \u003d time;"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"     * Date Getter."},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"    public LocalDate getDate() {"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"        return this.date;"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"     * Date Getter."},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"    public LocalTime getTime() {"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"        return this.time;"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"     * Print the new format of date and time."},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"    public String printDateTime() {"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"        ZonedDateTime zonedDateTime \u003d ZonedDateTime.of("},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"                this.date, this.time, ZoneId.of(\"Asia/Singapore\"));"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"        return DateTimeFormatter"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"                .ofLocalizedDateTime(FormatStyle.FULL)"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"                .format(zonedDateTime);"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"     * Return a new Deadline object after Task is executed."},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"    public Task doTask() {"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"        return new Deadline(this.job, true, this.date, this.time);"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"        return \"[\" + this.type + \"]\" + super.toString()"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"                + \"(by:\" + printDateTime() + \")\";"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":64}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"    private static String FILE_PATH \u003d \"./data/\";"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"    private static String FILE_NAME \u003d \"history.txt\";"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    private Ui ui;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    private TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"        Duke duke \u003d new Duke(FILE_PATH, FILE_NAME);"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"        duke.doCommand();"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    public Duke(String filePath, String fileName) {"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"        ui \u003d new Ui();"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        storage \u003d new Storage(filePath, fileName);"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        taskList \u003d new TaskList(storage.readPreviousFile());"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"     * Process command given by user."},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    private void doCommand() {"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"        ui.printGreetings();"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"        while (sc.hasNext()) {"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"            String word \u003d sc.nextLine();"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"            String[] tmp \u003d word.split(\" \");"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"            String command \u003d tmp[0];"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"            if (word.equals(\"bye\")) {"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"                ui.printBye();"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"                break;"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"            } else if (word.equals(\"list\")) {"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"                doList();"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"            } else if (command.equals(\"done\")) {"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"                int index \u003d Integer.parseInt(tmp[1]);"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"                doDone(index);"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"            } else if (command.equals(\"delete\")) {"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"                int index \u003d Integer.parseInt(tmp[1]);"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"                doDelete(index);"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"            } else if (command.equals(\"find\")) {"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"                doFind(word);"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"            } else {"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"                doTask(word);"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"            storage.saveTasks(taskList);"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"     * Process command list given by user."},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"    private void doList() {"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"        for (int i\u003d0; i \u003c taskList.size(); i++) {"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"            Task task \u003d taskList.get(i);"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"            ui.printList(i, task);"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"     * Process command done given by user."},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"     * @param index Index of task from TaskList"},{"lineNumber":67,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"godjuansan"},"content":"    private void doDone(int index) {"},{"lineNumber":69,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"godjuansan"},"content":"            Task currTask \u003d taskList.get(index - 1);"},{"lineNumber":71,"author":{"gitId":"godjuansan"},"content":"            currTask \u003d currTask.doTask();"},{"lineNumber":72,"author":{"gitId":"godjuansan"},"content":"            taskList.set(index - 1, currTask);"},{"lineNumber":73,"author":{"gitId":"godjuansan"},"content":"            ui.printDoneSuccess(currTask);"},{"lineNumber":74,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"godjuansan"},"content":"        catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":76,"author":{"gitId":"godjuansan"},"content":"            ui.printDoneFail();"},{"lineNumber":77,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":80,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"godjuansan"},"content":"     * Process command delete given by user."},{"lineNumber":82,"author":{"gitId":"godjuansan"},"content":"     * @param index Index of task from TaskList"},{"lineNumber":83,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"godjuansan"},"content":"    private void doDelete(int index) {"},{"lineNumber":85,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"godjuansan"},"content":"            Task currTask \u003d taskList.get(index - 1);"},{"lineNumber":87,"author":{"gitId":"godjuansan"},"content":"            taskList.remove(index - 1);"},{"lineNumber":88,"author":{"gitId":"godjuansan"},"content":"            ui.printDeleteSuccess(currTask, taskList.size());"},{"lineNumber":89,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"godjuansan"},"content":"        catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":91,"author":{"gitId":"godjuansan"},"content":"            ui.printDeleteFail();"},{"lineNumber":92,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":95,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"godjuansan"},"content":"     * Process command find given by user."},{"lineNumber":97,"author":{"gitId":"godjuansan"},"content":"     * @param word String inputted by user."},{"lineNumber":98,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"godjuansan"},"content":"    private void doFind(String word){"},{"lineNumber":100,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"godjuansan"},"content":"            String toSearch \u003d word.substring(5);"},{"lineNumber":102,"author":{"gitId":"godjuansan"},"content":"            List\u003cTask\u003e searchedTaskList \u003d taskList.find(toSearch);"},{"lineNumber":103,"author":{"gitId":"godjuansan"},"content":"            ui.printFindSuccess(searchedTaskList);"},{"lineNumber":104,"author":{"gitId":"godjuansan"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":105,"author":{"gitId":"godjuansan"},"content":"            ui.printFindFail(new NoMeaningException("},{"lineNumber":106,"author":{"gitId":"godjuansan"},"content":"                    \"☹ OOPS!!! The description of a find cannot be empty.\"));"},{"lineNumber":107,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":110,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"godjuansan"},"content":"     * Process task type command given by user."},{"lineNumber":112,"author":{"gitId":"godjuansan"},"content":"     * @param word the whole sentences entered by the user"},{"lineNumber":113,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"godjuansan"},"content":"    private void doTask(String word) {"},{"lineNumber":115,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"godjuansan"},"content":"            String[] tmp \u003d word.split(\" \");"},{"lineNumber":117,"author":{"gitId":"godjuansan"},"content":"            String command \u003d tmp[0];"},{"lineNumber":118,"author":{"gitId":"godjuansan"},"content":"            if (command.equals(\"todo\")) {"},{"lineNumber":119,"author":{"gitId":"godjuansan"},"content":"                doToDo(word);"},{"lineNumber":120,"author":{"gitId":"godjuansan"},"content":"            } else if (command.equals(\"deadline\")) {"},{"lineNumber":121,"author":{"gitId":"godjuansan"},"content":"                doDeadline(word);"},{"lineNumber":122,"author":{"gitId":"godjuansan"},"content":"            } else if (command.equals(\"event\")) {"},{"lineNumber":123,"author":{"gitId":"godjuansan"},"content":"                doEvent(word);"},{"lineNumber":124,"author":{"gitId":"godjuansan"},"content":"            } else {"},{"lineNumber":125,"author":{"gitId":"godjuansan"},"content":"                throw new NoMeaningException("},{"lineNumber":126,"author":{"gitId":"godjuansan"},"content":"                        \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":127,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"godjuansan"},"content":"        } catch (NoMeaningException e){"},{"lineNumber":129,"author":{"gitId":"godjuansan"},"content":"            ui.printTaskFail(e);"},{"lineNumber":130,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":133,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"godjuansan"},"content":"     * Process task command todo given by user."},{"lineNumber":135,"author":{"gitId":"godjuansan"},"content":"     * @param word the whole sentences entered by the user"},{"lineNumber":136,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"godjuansan"},"content":"    private void doToDo(String word) throws NoMeaningException {"},{"lineNumber":138,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"godjuansan"},"content":"            String realWord \u003d word.substring(5);"},{"lineNumber":140,"author":{"gitId":"godjuansan"},"content":"            ToDo todo \u003d new ToDo(realWord);"},{"lineNumber":141,"author":{"gitId":"godjuansan"},"content":"            taskList.add(todo);"},{"lineNumber":142,"author":{"gitId":"godjuansan"},"content":"            doTaskFinally(todo);"},{"lineNumber":143,"author":{"gitId":"godjuansan"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":144,"author":{"gitId":"godjuansan"},"content":"            throw new NoMeaningException("},{"lineNumber":145,"author":{"gitId":"godjuansan"},"content":"                    \"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":146,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":149,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"godjuansan"},"content":"     * Process task command deadline given by user."},{"lineNumber":151,"author":{"gitId":"godjuansan"},"content":"     * @param word the whole sentences entered by the user"},{"lineNumber":152,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"godjuansan"},"content":"    private void doDeadline(String word) throws NoMeaningException {"},{"lineNumber":154,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":155,"author":{"gitId":"godjuansan"},"content":"            String realWord \u003d word.substring(9);"},{"lineNumber":156,"author":{"gitId":"godjuansan"},"content":"            String[] deadlineWords \u003d realWord.split(\"/by\");"},{"lineNumber":157,"author":{"gitId":"godjuansan"},"content":"            String deadlineWord \u003d deadlineWords[0];"},{"lineNumber":158,"author":{"gitId":"godjuansan"},"content":"            String deadlineTime \u003d deadlineWords[1];"},{"lineNumber":159,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":160,"author":{"gitId":"godjuansan"},"content":"            String[] deadlineDateHours \u003d deadlineTime.split(\" \");"},{"lineNumber":161,"author":{"gitId":"godjuansan"},"content":"            LocalDate deadlineDate \u003d LocalDate.parse(deadlineDateHours[1]);"},{"lineNumber":162,"author":{"gitId":"godjuansan"},"content":"            LocalTime deadlineHour \u003d LocalTime.parse(deadlineDateHours[2]);"},{"lineNumber":163,"author":{"gitId":"godjuansan"},"content":"            Deadline deadline \u003d new Deadline(deadlineWord, deadlineDate, deadlineHour);"},{"lineNumber":164,"author":{"gitId":"godjuansan"},"content":"            taskList.add(deadline);"},{"lineNumber":165,"author":{"gitId":"godjuansan"},"content":"            doTaskFinally(deadline);"},{"lineNumber":166,"author":{"gitId":"godjuansan"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":167,"author":{"gitId":"godjuansan"},"content":"            throw new NoMeaningException("},{"lineNumber":168,"author":{"gitId":"godjuansan"},"content":"                    \"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":169,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":172,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"godjuansan"},"content":"     * Process task command event given by user."},{"lineNumber":174,"author":{"gitId":"godjuansan"},"content":"     * @param word the whole sentences entered by the user"},{"lineNumber":175,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"godjuansan"},"content":"    private void doEvent(String word) throws NoMeaningException {"},{"lineNumber":177,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"godjuansan"},"content":"            String realWord \u003d word.substring(6);"},{"lineNumber":179,"author":{"gitId":"godjuansan"},"content":"            String[] eventWords \u003d realWord.split(\"/at\");"},{"lineNumber":180,"author":{"gitId":"godjuansan"},"content":"            String eventWord \u003d eventWords[0];"},{"lineNumber":181,"author":{"gitId":"godjuansan"},"content":"            String eventTime \u003d eventWords[1];"},{"lineNumber":182,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":183,"author":{"gitId":"godjuansan"},"content":"            String[] eventDateHours \u003d eventTime.split(\" \");"},{"lineNumber":184,"author":{"gitId":"godjuansan"},"content":"            LocalDate eventDate \u003d LocalDate.parse(eventDateHours[1]);"},{"lineNumber":185,"author":{"gitId":"godjuansan"},"content":"            LocalTime eventHour \u003d LocalTime.parse(eventDateHours[2]);"},{"lineNumber":186,"author":{"gitId":"godjuansan"},"content":"            Event event \u003d new Event(eventWord, eventDate, eventHour);"},{"lineNumber":187,"author":{"gitId":"godjuansan"},"content":"            taskList.add(event);"},{"lineNumber":188,"author":{"gitId":"godjuansan"},"content":"            doTaskFinally(event);"},{"lineNumber":189,"author":{"gitId":"godjuansan"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":190,"author":{"gitId":"godjuansan"},"content":"            throw new NoMeaningException("},{"lineNumber":191,"author":{"gitId":"godjuansan"},"content":"                    \"☹ OOPS!!! The description of a event cannot be empty.\");"},{"lineNumber":192,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":195,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"godjuansan"},"content":"     * Process task typed command after all the above functions."},{"lineNumber":197,"author":{"gitId":"godjuansan"},"content":"     * @param task Task to print"},{"lineNumber":198,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"godjuansan"},"content":"    private void doTaskFinally(Task task) {"},{"lineNumber":200,"author":{"gitId":"godjuansan"},"content":"        ui.printTaskFinally(task, taskList.size());"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"godjuansan":198,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.time.ZoneId;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"public class Event extends Task{"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    private final String type;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    private final LocalDate date;"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    private final LocalTime time;"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    Event(String job, LocalDate date, LocalTime time) {"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"        super(job);"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"E\";"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"        this.time \u003d time;"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    Event(String job, Boolean isDone, LocalDate date, LocalTime time) {"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        super(job, isDone);"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"E\";"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"        this.time \u003d time;"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"     * Date Getter."},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"    public LocalDate getDate() {"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"        return this.date;"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"     * Time Getter."},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"    public LocalTime getTime() {"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"        return this.time;"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"     * Print the new format of date and time."},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"    public String printDateTime() {"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"        ZonedDateTime zonedDateTime \u003d ZonedDateTime.of("},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"                this.date, this.time, ZoneId.of(\"Asia/Singapore\"));"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"        return DateTimeFormatter"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"                .ofLocalizedDateTime(FormatStyle.FULL)"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"                .format(zonedDateTime);"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"     * Return a new Event object after Task is executed."},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"    public Event doTask() {"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"        return new Event(this.job, true, this.date, this.time);"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"        return \"[\" + this.type + \"]\" + super.toString()"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"                + \"(at:\" + printDateTime() + \")\";"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":64}},{"path":"src/main/java/NoMeaningException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"public class NoMeaningException extends Exception {"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"    public NoMeaningException(String errorMessage) {"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"        super(errorMessage);"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":5}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"    private static final String splitString \u003d \"p@nt3k\";"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"     * Parse list of strings and convert it into list of tasks to get the TaskList from previous save."},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"     * @param listOfString List of String to be parsed"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    public static List\u003cTask\u003e parseResult(List\u003cString\u003e listOfString) {"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"        for (String str : listOfString) {"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"            String[] previousVersionTasks \u003d str.split(splitString);"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"            String job \u003d previousVersionTasks[0];"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"            String jobName \u003d previousVersionTasks[1];"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"            Boolean done \u003d Boolean.parseBoolean(previousVersionTasks[2]);"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"            if (job.equals(\"ToDo\")) {"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"                ToDo task \u003d new ToDo(jobName, done);"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"                lst.add(task);"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"            } else if (job.equals(\"Deadline\")) {"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"                LocalDate jobDate \u003d LocalDate.parse(previousVersionTasks[3]);"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"                LocalTime jobTime \u003d LocalTime.parse(previousVersionTasks[4]);"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"                Deadline task \u003d new Deadline(jobName, done, jobDate, jobTime);"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"                lst.add(task);"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"            } else if (job.equals(\"Event\")) {"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"                LocalDate jobDate \u003d LocalDate.parse(previousVersionTasks[3]);"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"                LocalTime jobTime \u003d LocalTime.parse(previousVersionTasks[4]);"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"                Event task \u003d new Event(jobName, done, jobDate, jobTime);"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"                lst.add(task);"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"        return lst;"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"     * Convert the current TaskList into String to be saved locally."},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"     * @param taskManager TaskList to be converted"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"    public static String convertTasksToString(TaskList taskManager) {"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"        List\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"        for (int i\u003d0; i \u003c taskManager.size(); i++) {"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"            Task task \u003d taskManager.get(i);"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"            StringBuilder taskInStringForm \u003d new StringBuilder();"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(\"ToDo\");"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getJob());"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getDoneStatus());"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(\"Deadline\");"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getJob());"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getDoneStatus());"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(((Deadline)task).getDate());"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(((Deadline)task).getTime());"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"            } else if (task instanceof Event) {"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(\"Event\");"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getJob());"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":67,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getDoneStatus());"},{"lineNumber":68,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":69,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(((Event)task).getDate());"},{"lineNumber":70,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":71,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(((Event)task).getTime());"},{"lineNumber":72,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"godjuansan"},"content":"            lst.add(taskInStringForm.toString());"},{"lineNumber":74,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":76,"author":{"gitId":"godjuansan"},"content":"        StringBuilder combinedStringTasks \u003d new StringBuilder();"},{"lineNumber":77,"author":{"gitId":"godjuansan"},"content":"        for (String str: lst) {"},{"lineNumber":78,"author":{"gitId":"godjuansan"},"content":"            combinedStringTasks.append(str);"},{"lineNumber":79,"author":{"gitId":"godjuansan"},"content":"            combinedStringTasks.append(\"\\n\");"},{"lineNumber":80,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"godjuansan"},"content":"        return combinedStringTasks.toString();"},{"lineNumber":82,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":83}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"public class Storage {"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    private String filePath;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    private String fileName;"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    public Storage(String filePath, String fileName) {"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"        filePath \u003d makeDirectory(filePath);"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"     * create directory locally if it doesn\u0027t exist yet"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"     * @param filePath The name of the folder"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"    private String makeDirectory(String filePath) {"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"        Boolean bool \u003d file.mkdirs();"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"        System.out.println(bool);"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"        return filePath;"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"     * read previous save of List\u003cTask\u003e if it exist."},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"    public List\u003cTask\u003e readPreviousFile() {"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"            listOfTasks \u003d Parser.parseResult(scanFile());"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"            System.out.println(\"Looks like you don\u0027t have any previous file. We will create a new Task Manager for you!\");"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"        } finally {"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"            return listOfTasks;"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"     * save current TaskList locally"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"     * @param taskList The task list we would like to save"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"    public void saveTasks(TaskList taskList) {"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"        String taskToSave \u003d Parser.convertTasksToString(taskList);"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"            FileWriter writer \u003d new FileWriter(this.filePath + this.fileName);"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"            writer.write(taskToSave);"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"            writer.close();"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"        } catch (Exception e) {"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"     * scan the .txt file that we have saved previously. helper function of readPreviousFile() function"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"    private List\u003cString\u003e scanFile() throws FileNotFoundException {"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"        List\u003cString\u003e fileInString \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"        File file \u003d new File(this.filePath + this.fileName);"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"            fileInString.add(scanner.nextLine());"},{"lineNumber":67,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"godjuansan"},"content":"        return fileInString;"},{"lineNumber":69,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":71,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":71}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"    protected final String job;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"    protected final Boolean isDone;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"    public Task(String job) {"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"        this.job \u003d job;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"        this.isDone \u003d false;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    public Task(String job, Boolean isDone) {"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"        this.job \u003d job;"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     * Return a new Task object after Task is executed."},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    public Task doTask() {"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"        return new Task(this.job, true);"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"     * Job getter."},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    public String getJob() {"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"        return this.job;"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"     * Done status getter."},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    public Boolean getDoneStatus() {"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"        return this.isDone;"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"        String status \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"        if (isDone) {"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"            status \u003d \"[X] \";"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"        else {"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"            status \u003d \"[ ] \";"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"        return status + job;"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":45}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"public class TaskList {"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"    private List\u003cTask\u003e listOfTasks;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"    public TaskList(List\u003cTask\u003e listOfTasks) {"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"        this.listOfTasks \u003d listOfTasks;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"     * Return the size of the TaskList."},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    public int size() {"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"        return this.listOfTasks.size();"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"     * Add a task into the TaskList"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"     * @param task the Task we would like to add to our TaskList"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    public void add(Task task) {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        listOfTasks.add(task);"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"     * get the i-th element of the TaskList"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"     * @param i the index of the element in our TaskList"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"    public Task get(int i) {"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"        return this.listOfTasks.get(i);"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"     * set the i-th element of the TaskList with task"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"     * @param i the index of the element in our TaskList"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"     *        task Task we would like to set into the i-th position in the TaskList"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"    public Task set(int i, Task task) {"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"        return this.listOfTasks.set(i, task);"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"     * remove the i-th element of the TaskList"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"     * @param i the index of the element we want to remove in our TaskList"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"    public Task remove(int i) {"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"        return this.listOfTasks.remove(i);"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"     * find the element of TaskList containing toSearch String"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"     * @param toSearch the String we would like to find inside TaskList"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"    public List\u003cTask\u003e find(String toSearch) {"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e listFound \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"        for (int i\u003d0; i \u003c listOfTasks.size(); i++) {"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"            Task iElementListOfTasks \u003d listOfTasks.get(i);"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"            if (iElementListOfTasks.getJob().contains(toSearch)) {"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"                listFound.add(iElementListOfTasks);"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"        return listFound;"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":64}},{"path":"src/main/java/TaskName.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"public enum TaskName {"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":3}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"public class ToDo extends Task{"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"    private final String type;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"    ToDo(String job) {"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"        super(job);"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"T\";"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    public ToDo(String job, Boolean isDone) {"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"        super(job, isDone);"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"T\";"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"     * Return a new ToDo object after Task is executed."},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    public Task doTask() {"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"        return new ToDo(this.job, true);"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"        return \"[\" + this.type + \"]\" + super.toString();"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":25}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"public class Ui {"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"    private Scanner scan;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"    private static String greetings \u003d \"Hi, I am Bebong, a self-centered bot. I can\u0027t do anything for you.\";"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"    private static String bye \u003d \"Goodbye, hope to not see you again.\";"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    private static String doneFail \u003d \"☹ OOPS!!! The description of a done cannot be empty.\";"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    private static String deleteFail \u003d \"☹ OOPS!!! The description of a delete cannot be empty.\";"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    public Ui() {"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"        Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     * Print Greetings at the beginning of the program."},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    public void printGreetings() {"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        System.out.println(greetings);"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"     * Print Bye at the end of the program."},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"    public void printBye() {"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"        System.out.println(bye);"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"     * Print whenever command list is called."},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"     * @param i current ordering number in the TaskList"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"     *        task Task to print"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"    public void printList(int i, Task task) {"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"        System.out.print(i+1);"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"        System.out.print(\".\");"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"        System.out.println(task);"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"     * Print whenever done command is called successfully."},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"     * @param task Task done"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"    public void printDoneSuccess(Task task) {"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"        System.out.println(\"Nice I have marked this task as done!\");"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"        System.out.println(task);"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"     * Print whenever there is exception when done command is called."},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"    public void printDoneFail() {"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"        System.out.println(doneFail);"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"     * Print whenever delete command is called successfully."},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"     * @param task Task to delete"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"     *        size The size of the TaskList after removal"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"    public void printDeleteSuccess(Task task, int size) {"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"        System.out.println(task);"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":67,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"godjuansan"},"content":"     * Print whenever there is exception when delete command is called."},{"lineNumber":69,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"godjuansan"},"content":"    public void printDeleteFail() {"},{"lineNumber":71,"author":{"gitId":"godjuansan"},"content":"        System.out.println(deleteFail);"},{"lineNumber":72,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":74,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"godjuansan"},"content":"     * Print whenever find command is called successfully."},{"lineNumber":76,"author":{"gitId":"godjuansan"},"content":"     * @param listFound List\u003cTask\u003e found that we would like to print"},{"lineNumber":77,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"godjuansan"},"content":"    public void printFindSuccess(List\u003cTask\u003e listFound) {"},{"lineNumber":79,"author":{"gitId":"godjuansan"},"content":"        for (int i\u003d0; i \u003c listFound.size(); i++) {"},{"lineNumber":80,"author":{"gitId":"godjuansan"},"content":"            printList(i, listFound.get(i));"},{"lineNumber":81,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":84,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"godjuansan"},"content":"     * Print whenever there is exception when find command is called."},{"lineNumber":86,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"godjuansan"},"content":"    public void printFindFail(NoMeaningException e) {"},{"lineNumber":88,"author":{"gitId":"godjuansan"},"content":"        System.out.println(e.getMessage());"},{"lineNumber":89,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":91,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"godjuansan"},"content":"     * Print whenever there is exception when task typed command is called."},{"lineNumber":93,"author":{"gitId":"godjuansan"},"content":"     * @param e NoMeaningException that arises whenever task command failed."},{"lineNumber":94,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"godjuansan"},"content":"    public void printTaskFail(NoMeaningException e) {"},{"lineNumber":96,"author":{"gitId":"godjuansan"},"content":"        System.out.println(e.getMessage());"},{"lineNumber":97,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":99,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"godjuansan"},"content":"     * Print at the end when task typed command is called."},{"lineNumber":101,"author":{"gitId":"godjuansan"},"content":"     * @param task Task to print"},{"lineNumber":102,"author":{"gitId":"godjuansan"},"content":"     *        size The current size of TaskList"},{"lineNumber":103,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"godjuansan"},"content":"    public void printTaskFinally(Task task, int size) {"},{"lineNumber":105,"author":{"gitId":"godjuansan"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":106,"author":{"gitId":"godjuansan"},"content":"        System.out.println(task);"},{"lineNumber":107,"author":{"gitId":"godjuansan"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"},{"lineNumber":108,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":109}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    public void taskListSizeTest() {"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"        TaskList taskList \u003d new TaskList(lst);"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"        assertEquals(taskList.size(), 0);"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"    public void taskListAddTest() {"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"        TaskList taskList \u003d new TaskList(lst);"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        taskList.add(new ToDo(\"task 1\"));"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        assertEquals(taskList.get(0).getJob(), \"task 1\");"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"done 2"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"event study /at 4pm"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"list"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"todo"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"deadline"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"event"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"blah"}],"authorContributionMap":{"godjuansan":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"godjuansan":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"godjuansan":1,"-":37}}]
