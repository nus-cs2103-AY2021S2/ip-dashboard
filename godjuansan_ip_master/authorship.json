[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"godjuansan":15,"-":45}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":" */"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":59}},{"path":"src/main/java/Driver.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.Scene;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import javafx.stage.Stage;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"public class Driver extends Application {"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    private static final String STAGE_TITLE \u003d \"Duke\";"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    private static final String BYE_STRING \u003d \"bye\";"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    private static final String MAIN_WINDOW_FXML \u003d \"/view/MainWindow.fxml\";"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     * The main method runs the program."},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"     * @param args The command line arguments entered into the program."},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    public static void main(String[] args) {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        Ui userInterface \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"            Duke duke \u003d Duke.start();"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"            userInterface.displayMessage(userInterface.printGreetings());"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"            String sentence \u003d userInterface.readCommand();"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"            while (isNotEqualBye(sentence)) {"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"                String message \u003d duke.doCommand(sentence);"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"                userInterface.displayMessage(message);"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"                sentence \u003d userInterface.readCommand();"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"        } finally {"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"            userInterface.displayMessage(userInterface.getBye());"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"     * Returns whether the command string equals to bye."},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"     * @param command The command entered by the client."},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"     * @return The boolean value."},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"    private static boolean isNotEqualBye(String command) {"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"        return !command.equals(BYE_STRING);"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"     * Starts the app\u0027s GUI by loading the resources from MainWindow.fxml."},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"     * @param stage The stage of the GUI."},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"    public void start(Stage stage) {"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Driver.class.getResource(MAIN_WINDOW_FXML));"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"            stage.setTitle(STAGE_TITLE);"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"            stage.setScene(scene);"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(Duke.start());"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"            stage.show();"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"        } catch (IOException e) {"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"            e.printStackTrace();"},{"lineNumber":67,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":69}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import duke.exception.NoCommandException;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import duke.util.*;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"    private static String FILE_PATH \u003d \"./data/\";"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"    private static String FILE_NAME \u003d \"history.txt\";"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    private Ui ui;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    private TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    private Duke(String filePath, String fileName) {"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"        ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"        storage \u003d new Storage(filePath, fileName);"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"        taskList \u003d new TaskList(storage.readPreviousFile());"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    public static Duke start(){"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        return new Duke(FILE_PATH, FILE_NAME);"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"     * Process command given by user."},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"    public String doCommand(String sentence) {"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"            Command command \u003d Parser.parseCommand(sentence, taskList);"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"            return command.execute(storage, taskList, ui, sentence);"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"        } catch (NoCommandException e) {"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"            return e.getMessage();"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"godjuansan":30,"-":3}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"        Application.launch(Driver.class, args);"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":11}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpeg\"));"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"    public void initialize() {"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"        duke \u003d d;"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    private void handleUserInput() {"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"        String response \u003d duke.doCommand(input);"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"        );"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"        userInput.clear();"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":49}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"import duke.util.Deadline;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"import duke.exception.NoMeaningException;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"public class AddDeadlineCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    public AddDeadlineCommand() {}"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     * Process command deadline given by user."},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     * @param storage The storage to store result"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     *        taskList TaskList associated to the current Duke"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"     *        ui The UI we use to print stuff"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"     *        command Sentences entered by the user"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui, String command) {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"            String commandContent \u003d command.substring(9);"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"            String[] deadlineWords \u003d commandContent.split(\"/by\");"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"            String deadlineWord \u003d deadlineWords[0];"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"            String deadlineTime \u003d deadlineWords[1];"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"            String[] deadlineDateHours \u003d deadlineTime.split(\" \");"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"            LocalDate deadlineDate \u003d LocalDate.parse(deadlineDateHours[1]);"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"            LocalTime deadlineHour \u003d LocalTime.parse(deadlineDateHours[2]);"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"            Deadline deadline \u003d new Deadline(deadlineWord, deadlineDate, deadlineHour);"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"            taskList.add(deadline);"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"            storage.saveTasks(taskList);"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"            return ui.getTaskFinally(deadline, taskList.size());"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"        }  catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"            return ui.getTaskFail(new NoMeaningException("},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"                    \"☹ OOPS!!! The description of a deadline cannot be empty.\")"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"            );"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":41}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"import duke.util.Event;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"import duke.exception.NoMeaningException;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"public class AddEventCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    public AddEventCommand() {}"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     * Process command event given by user."},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     * @param storage The storage to store result"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     *        taskList TaskList associated to the current Duke"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"     *        ui The UI we use to print stuff"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"     *        command Sentences entered by the user"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui, String command) {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"            String commandContent \u003d command.substring(6);"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"            String[] eventWords \u003d commandContent.split(\"/at\");"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"            String eventWord \u003d eventWords[0];"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"            String eventTime \u003d eventWords[1];"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"            String[] eventDateHours \u003d eventTime.split(\" \");"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"            LocalDate eventDate \u003d LocalDate.parse(eventDateHours[1]);"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"            LocalTime eventHour \u003d LocalTime.parse(eventDateHours[2]);"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"            Event event \u003d new Event(eventWord, eventDate, eventHour);"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"            taskList.add(event);"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"            storage.saveTasks(taskList);"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"            return ui.getTaskFinally(event, taskList.size());"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"        }  catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"            return ui.getTaskFail(new NoMeaningException("},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"                    \"☹ OOPS!!! The description of a event cannot be empty.\")"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"            );"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":42}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import duke.util.ToDo;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import duke.exception.NoMeaningException;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"public class AddToDoCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    public AddToDoCommand() {}"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"     * Process command todo given by user."},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"     * @param storage The storage to store result"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     *        taskList TaskList associated to the current Duke"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     *        ui The UI we use to print stuff"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     *        command Sentences entered by the user"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui, String command) {"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"            String commandContent \u003d command.substring(5);"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"            ToDo todo \u003d new ToDo(commandContent);"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"            taskList.add(todo);"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"            storage.saveTasks(taskList);"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"            return ui.getTaskFinally(todo, taskList.size());"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"            return ui.getTaskFail(new NoMeaningException("},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"                    \"☹ OOPS!!! The description of a todo cannot be empty.\")"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"            );"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":32}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"public class ByeCommand extends Command{"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    private static String bye \u003d \"Goodbye, hope to not see you again.\";"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    public ByeCommand() {}"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"     * Process command bye given by user."},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"     * @param storage The storage to store result"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     *        taskList TaskList associated to the current Duke"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     *        ui The UI we use to print stuff"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     *        command Sentences entered by the user"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui, String command) {"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        return bye;"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":22}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":" * Abstract class to process commands given by user."},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":" */"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"     * Process various commands given by user."},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    public abstract String execute(Storage storage, TaskList taskList, Ui ui, String command);"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":15}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import duke.util.Task;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    public DeleteCommand() {}"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"     * Process command delete given by user."},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"     * @param storage The storage to store result"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"     *        taskList TaskList associated to the current Duke"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     *        ui The UI we use to print stuff"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     *        command Sentences entered by the user"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui, String command) {"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        String[] splitCommand \u003d command.split(\" \");"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        int index \u003d Integer.parseInt(splitCommand[1]);"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"            Task currTask \u003d taskList.get(index - 1);"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"            taskList.remove(index - 1);"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"            storage.saveTasks(taskList);"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"            return ui.getDeleteSuccess(currTask, taskList.size());"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"        catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"            return ui.getDeleteFail();"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":31}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import duke.util.Task;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    public DoneCommand() {}"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"     * Process command done given by user."},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"     * @param storage The storage to store result"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"     *        taskList TaskList associated to the current Duke"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     *        ui The UI we use to print stuff"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     *        command Sentences entered by the user"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui, String command) {"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        String[] splitCommand \u003d command.split(\" \");"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        int index \u003d Integer.parseInt(splitCommand[1]);"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"            Task currTask \u003d taskList.get(index - 1);"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"            currTask \u003d currTask.doTask();"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"            taskList.set(index - 1, currTask);"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"            storage.saveTasks(taskList);"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"            return ui.getDoneSuccess(currTask);"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"        catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"            return ui.getDoneFail();"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":32}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.exception.NoMeaningException;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import duke.util.Task;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"public class FindCommand extends Command{"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    public FindCommand() {}"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     * Process command find given by user."},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     * @param storage The storage to store result"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     *        taskList TaskList associated to the current Duke"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"     *        ui The UI we use to print stuff"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"     *        command Sentences entered by the user"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui, String command) {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"            String toSearch \u003d command.substring(5);"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"            List\u003cTask\u003e searchedTaskList \u003d taskList.find(toSearch);"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"            return ui.getFindSuccess(searchedTaskList);"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"            return ui.getFindFail(new NoMeaningException("},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"                    \"☹ OOPS!!! The description of a find cannot be empty.\"));"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":31}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.util.Storage;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import duke.util.Task;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import duke.util.Ui;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"public class ListCommand extends Command{"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    public ListCommand() {}"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"     * Process command list given by user."},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"     * @param storage The storage to store result"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"     *        taskList TaskList associated to the current Duke"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     *        ui The UI we use to print stuff"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     *        command Sentences entered by the user"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui, String command) {"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        String result \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        for (int i\u003d0; i \u003c taskList.size(); i++) {"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"            Task task \u003d taskList.get(i);"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"            result +\u003d ui.getList(i, task);"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"            result +\u003d \"\\n\";"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"        return result;"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":27}},{"path":"src/main/java/duke/exception/NoCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"public class NoCommandException extends Exception {"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"    public NoCommandException(String errorMessage) {"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"        super(errorMessage);"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"}"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""}],"authorContributionMap":{"godjuansan":7}},{"path":"src/main/java/duke/exception/NoMeaningException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"public class NoMeaningException extends Exception {"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"    public NoMeaningException(String errorMessage) {"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"        super(errorMessage);"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":6}},{"path":"src/main/java/duke/util/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"public class Deadline extends Task{"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    private final String type;"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    private final LocalDate date;"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    private final LocalTime time;"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    public Deadline(String job, LocalDate date, LocalTime time) {"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"        super(job);"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"D\";"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"        this.date \u003d date;"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"        this.time \u003d time;"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    public Deadline(String job, Boolean isDone, LocalDate date, LocalTime time) {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        super(job, isDone);"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"D\";"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"        this.time \u003d time;"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"     * Date Getter."},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    public LocalDate getDate() {"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"        return this.date;"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"     * Date Getter."},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"    public LocalTime getTime() {"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"        return this.time;"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"     * Print the new format of date and time."},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"    public String printDateTime() {"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"        ZonedDateTime zonedDateTime \u003d ZonedDateTime.of("},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"                this.date, this.time, ZoneId.of(\"Asia/Singapore\"));"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"        return DateTimeFormatter"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"                .ofLocalizedDateTime(FormatStyle.FULL)"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"                .format(zonedDateTime);"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"     * Return a new Deadline object after Task is executed."},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"    public Task doTask() {"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"        return new Deadline(this.job, true, this.date, this.time);"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"        return \"[\" + this.type + \"]\" + super.toString()"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"                + \"(by:\" + printDateTime() + \")\";"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":66}},{"path":"src/main/java/duke/util/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"public class Event extends Task{"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    private final String type;"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    private final LocalDate date;"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    private final LocalTime time;"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    public Event(String job, LocalDate date, LocalTime time) {"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"        super(job);"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"E\";"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"        this.date \u003d date;"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"        this.time \u003d time;"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    Event(String job, Boolean isDone, LocalDate date, LocalTime time) {"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"        super(job, isDone);"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"E\";"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"        this.time \u003d time;"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"     * Date Getter."},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    public LocalDate getDate() {"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"        return this.date;"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"     * Time Getter."},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"    public LocalTime getTime() {"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"        return this.time;"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"     * Print the new format of date and time."},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"    public String printDateTime() {"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"        ZonedDateTime zonedDateTime \u003d ZonedDateTime.of("},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"                this.date, this.time, ZoneId.of(\"Asia/Singapore\"));"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"        return DateTimeFormatter"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"                .ofLocalizedDateTime(FormatStyle.FULL)"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"                .format(zonedDateTime);"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"     * Return a new Event object after Task is executed."},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"    public Event doTask() {"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"        return new Event(this.job, true, this.date, this.time);"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"        return \"[\" + this.type + \"]\" + super.toString()"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"                + \"(at:\" + printDateTime() + \")\";"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":66}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import duke.exception.NoCommandException;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    private static final String splitString \u003d \"p@nt3k\";"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"     * Parse list of strings and convert it into list of tasks to get the TaskList from previous save."},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"     * @param listOfString List of String to be parsed"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    public static List\u003cTask\u003e parseResult(List\u003cString\u003e listOfString) {"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        for (String str : listOfString) {"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"            String[] previousVersionTasks \u003d str.split(splitString);"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"            String job \u003d previousVersionTasks[0];"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"            String jobName \u003d previousVersionTasks[1];"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"            Boolean done \u003d Boolean.parseBoolean(previousVersionTasks[2]);"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"            if (job.equals(\"ToDo\")) {"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"                ToDo task \u003d new ToDo(jobName, done);"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"                lst.add(task);"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"            } else if (job.equals(\"Deadline\")) {"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"                LocalDate jobDate \u003d LocalDate.parse(previousVersionTasks[3]);"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"                LocalTime jobTime \u003d LocalTime.parse(previousVersionTasks[4]);"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"                Deadline task \u003d new Deadline(jobName, done, jobDate, jobTime);"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"                lst.add(task);"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"            } else if (job.equals(\"Event\")) {"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"                LocalDate jobDate \u003d LocalDate.parse(previousVersionTasks[3]);"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"                LocalTime jobTime \u003d LocalTime.parse(previousVersionTasks[4]);"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"                Event task \u003d new Event(jobName, done, jobDate, jobTime);"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"                lst.add(task);"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"        return lst;"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"     * Convert the current TaskList into String to be saved locally."},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"     * @param taskManager TaskList to be converted"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"    public static String convertTasksToString(TaskList taskManager) {"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"        List\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"        for (int i\u003d0; i \u003c taskManager.size(); i++) {"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"            Task task \u003d taskManager.get(i);"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"            StringBuilder taskInStringForm \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(\"ToDo\");"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getJob());"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getDoneStatus());"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(\"Deadline\");"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getJob());"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getDoneStatus());"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(((Deadline)task).getDate());"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(((Deadline)task).getTime());"},{"lineNumber":67,"author":{"gitId":"godjuansan"},"content":"            } else if (task instanceof Event) {"},{"lineNumber":68,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(\"Event\");"},{"lineNumber":69,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":70,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getJob());"},{"lineNumber":71,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":72,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(task.getDoneStatus());"},{"lineNumber":73,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":74,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(((Event)task).getDate());"},{"lineNumber":75,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(splitString);"},{"lineNumber":76,"author":{"gitId":"godjuansan"},"content":"                taskInStringForm.append(((Event)task).getTime());"},{"lineNumber":77,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"godjuansan"},"content":"            lst.add(taskInStringForm.toString());"},{"lineNumber":79,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":81,"author":{"gitId":"godjuansan"},"content":"        StringBuilder combinedStringTasks \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"godjuansan"},"content":"        for (String str: lst) {"},{"lineNumber":83,"author":{"gitId":"godjuansan"},"content":"            combinedStringTasks.append(str);"},{"lineNumber":84,"author":{"gitId":"godjuansan"},"content":"            combinedStringTasks.append(\"\\n\");"},{"lineNumber":85,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"godjuansan"},"content":"        return combinedStringTasks.toString();"},{"lineNumber":87,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":89,"author":{"gitId":"godjuansan"},"content":"    public static Command parseCommand(String sentence, TaskList taskList) throws NoCommandException {"},{"lineNumber":90,"author":{"gitId":"godjuansan"},"content":"        String keyword \u003d getKeyword(sentence);"},{"lineNumber":91,"author":{"gitId":"godjuansan"},"content":"        if (keyword.equals(\"bye\")) {"},{"lineNumber":92,"author":{"gitId":"godjuansan"},"content":"            return new ByeCommand();"},{"lineNumber":93,"author":{"gitId":"godjuansan"},"content":"        } else if (keyword.equals(\"list\")) {"},{"lineNumber":94,"author":{"gitId":"godjuansan"},"content":"            return new ListCommand();"},{"lineNumber":95,"author":{"gitId":"godjuansan"},"content":"        } else if (keyword.equals(\"done\")) {"},{"lineNumber":96,"author":{"gitId":"godjuansan"},"content":"            return new DoneCommand();"},{"lineNumber":97,"author":{"gitId":"godjuansan"},"content":"        } else if (keyword.equals(\"delete\")) {"},{"lineNumber":98,"author":{"gitId":"godjuansan"},"content":"            return new DeleteCommand();"},{"lineNumber":99,"author":{"gitId":"godjuansan"},"content":"        } else if (keyword.equals(\"find\")) {"},{"lineNumber":100,"author":{"gitId":"godjuansan"},"content":"            return new FindCommand();"},{"lineNumber":101,"author":{"gitId":"godjuansan"},"content":"        } else if (keyword.equals(\"todo\")) {"},{"lineNumber":102,"author":{"gitId":"godjuansan"},"content":"            return new AddToDoCommand();"},{"lineNumber":103,"author":{"gitId":"godjuansan"},"content":"        } else if (keyword.equals(\"deadline\")) {"},{"lineNumber":104,"author":{"gitId":"godjuansan"},"content":"            return new AddDeadlineCommand();"},{"lineNumber":105,"author":{"gitId":"godjuansan"},"content":"        } else if (keyword.equals(\"event\")) {"},{"lineNumber":106,"author":{"gitId":"godjuansan"},"content":"            return new AddEventCommand();"},{"lineNumber":107,"author":{"gitId":"godjuansan"},"content":"        } else {"},{"lineNumber":108,"author":{"gitId":"godjuansan"},"content":"            throw new NoCommandException(\"Daddy, I don\u0027t understand what that means :)\");"},{"lineNumber":109,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":112,"author":{"gitId":"godjuansan"},"content":"    public static String getKeyword(String sentence) {"},{"lineNumber":113,"author":{"gitId":"godjuansan"},"content":"        String[] splitSentence \u003d sentence.split(\" \");"},{"lineNumber":114,"author":{"gitId":"godjuansan"},"content":"        String keyword \u003d splitSentence[0];"},{"lineNumber":115,"author":{"gitId":"godjuansan"},"content":"        return keyword;"},{"lineNumber":116,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":117}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"public class Storage {"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    private String filePath;"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    private String fileName;"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    public Storage(String filePath, String fileName) {"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"        filePath \u003d makeDirectory(filePath);"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"     * create directory locally if it doesn\u0027t exist yet"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"     * @param filePath The name of the folder"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    private String makeDirectory(String filePath) {"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"        Boolean bool \u003d file.mkdirs();"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"        System.out.println(bool);"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"        return filePath;"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"     * read previous save of List\u003cTask\u003e if it exist."},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"    public List\u003cTask\u003e readPreviousFile() {"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"            listOfTasks \u003d Parser.parseResult(scanFile());"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"            System.out.println(\"Looks like you don\u0027t have any previous file. We will create a new Task Manager for you!\");"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"        } finally {"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"            return listOfTasks;"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"     * save current TaskList locally"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"     * @param taskList The task list we would like to save"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"    public void saveTasks(TaskList taskList) {"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"        String taskToSave \u003d Parser.convertTasksToString(taskList);"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"            FileWriter writer \u003d new FileWriter(this.filePath + this.fileName);"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"            writer.write(taskToSave);"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"            writer.close();"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"        } catch (Exception e) {"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"     * scan the .txt file that we have saved previously. helper function of readPreviousFile() function"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"    private List\u003cString\u003e scanFile() throws FileNotFoundException {"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"        List\u003cString\u003e fileInString \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"        File file \u003d new File(this.filePath + this.fileName);"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":67,"author":{"gitId":"godjuansan"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":68,"author":{"gitId":"godjuansan"},"content":"            fileInString.add(scanner.nextLine());"},{"lineNumber":69,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"godjuansan"},"content":"        return fileInString;"},{"lineNumber":71,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":73,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":73}},{"path":"src/main/java/duke/util/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"    protected final String job;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"    protected final Boolean isDone;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"    public Task(String job) {"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"        this.job \u003d job;"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"        this.isDone \u003d false;"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    public Task(String job, Boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"        this.job \u003d job;"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     * Return a new Task object after Task is executed."},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    public Task doTask() {"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        return new Task(this.job, true);"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"     * Job getter."},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    public String getJob() {"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"        return this.job;"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"     * Done status getter."},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    public Boolean getDoneStatus() {"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"        return this.isDone;"},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"        String status \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"        if (isDone) {"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"            status \u003d \"[X] \";"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"        else {"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"            status \u003d \"[ ] \";"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"        return status + job;"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":47}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"public class TaskList {"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"    private List\u003cTask\u003e listOfTasks;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    public TaskList(List\u003cTask\u003e listOfTasks) {"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"        this.listOfTasks \u003d listOfTasks;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"     * Return the size of the TaskList."},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    public int size() {"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"        return this.listOfTasks.size();"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"     * Add a task into the TaskList"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"     * @param task the Task we would like to add to our TaskList"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"    public void add(Task task) {"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"        listOfTasks.add(task);"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"     * get the i-th element of the TaskList"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"     * @param i the index of the element in our TaskList"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    public Task get(int i) {"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":"        return this.listOfTasks.get(i);"},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"     * set the i-th element of the TaskList with task"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"     * @param i the index of the element in our TaskList"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"     *        task Task we would like to set into the i-th position in the TaskList"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"    public Task set(int i, Task task) {"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"        return this.listOfTasks.set(i, task);"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"     * remove the i-th element of the TaskList"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"     * @param i the index of the element we want to remove in our TaskList"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"    public Task remove(int i) {"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"        return this.listOfTasks.remove(i);"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"     * find the element of TaskList containing toSearch String"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"     * @param toSearch the String we would like to find inside TaskList"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"    public List\u003cTask\u003e find(String toSearch) {"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e listFound \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"        for (int i\u003d0; i \u003c listOfTasks.size(); i++) {"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"            Task iElementListOfTasks \u003d listOfTasks.get(i);"},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"            if (iElementListOfTasks.getJob().contains(toSearch)) {"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"                listFound.add(iElementListOfTasks);"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"        return listFound;"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":66}},{"path":"src/main/java/duke/util/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"public class ToDo extends Task{"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"    private final String type;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"    public ToDo(String job) {"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"        super(job);"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"T\";"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    public ToDo(String job, Boolean isDone) {"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"        super(job, isDone);"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"        this.type \u003d \"T\";"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"     * Return a new ToDo object after Task is executed."},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    public Task doTask() {"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        return new ToDo(this.job, true);"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":"        return \"[\" + this.type + \"]\" + super.toString();"},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":27}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"import duke.exception.NoMeaningException;"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    private Scanner scan;"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    private static String greetings \u003d \"Hi, I am Bebong, a self-centered bot. I can\u0027t do anything for you.\";"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"    private static String bye \u003d \"Goodbye, hope to not see you again.\";"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    private static String doneFail \u003d \"☹ OOPS!!! The description of a done cannot be empty.\";"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    private static String deleteFail \u003d \"☹ OOPS!!! The description of a delete cannot be empty.\";"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    public Ui() {"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"        Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"     * Print Greetings at the beginning of the program."},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"    public String printGreetings() {"},{"lineNumber":23,"author":{"gitId":"godjuansan"},"content":"        return greetings;"},{"lineNumber":24,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":26,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"godjuansan"},"content":"     * Print Bye at the end of the program."},{"lineNumber":28,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"godjuansan"},"content":"    public String getBye() {"},{"lineNumber":30,"author":{"gitId":"godjuansan"},"content":"        return bye;"},{"lineNumber":31,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":33,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"godjuansan"},"content":"     * Print whenever command list is called."},{"lineNumber":35,"author":{"gitId":"godjuansan"},"content":"     * @param i current ordering number in the TaskList"},{"lineNumber":36,"author":{"gitId":"godjuansan"},"content":"     *        task Task to print"},{"lineNumber":37,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"godjuansan"},"content":"    public String getList(int i, Task task) {"},{"lineNumber":39,"author":{"gitId":"godjuansan"},"content":"        String number \u003d String.valueOf(i+1);"},{"lineNumber":40,"author":{"gitId":"godjuansan"},"content":"        return number + \".\" + task;"},{"lineNumber":41,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":43,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"godjuansan"},"content":"     * Print whenever done command is called successfully."},{"lineNumber":45,"author":{"gitId":"godjuansan"},"content":"     * @param task Task done"},{"lineNumber":46,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"godjuansan"},"content":"    public String getDoneSuccess(Task task) {"},{"lineNumber":48,"author":{"gitId":"godjuansan"},"content":"        return \"Nice I have marked this task as done!\\n\" + task;"},{"lineNumber":49,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":51,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"godjuansan"},"content":"     * Print whenever there is exception when done command is called."},{"lineNumber":53,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"godjuansan"},"content":"    public String getDoneFail() {"},{"lineNumber":55,"author":{"gitId":"godjuansan"},"content":"        return doneFail;"},{"lineNumber":56,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":58,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"godjuansan"},"content":"     * Print whenever delete command is called successfully."},{"lineNumber":60,"author":{"gitId":"godjuansan"},"content":"     * @param task Task to delete"},{"lineNumber":61,"author":{"gitId":"godjuansan"},"content":"     *        size The size of the TaskList after removal"},{"lineNumber":62,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"godjuansan"},"content":"    public String getDeleteSuccess(Task task, int size) {"},{"lineNumber":64,"author":{"gitId":"godjuansan"},"content":"        return \"Noted. I\u0027ve removed this task: \\n\" + task + \"\\n\" +"},{"lineNumber":65,"author":{"gitId":"godjuansan"},"content":"                \"Now you have \" + size + \" tasks in the list.\";"},{"lineNumber":66,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":68,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"godjuansan"},"content":"     * Print whenever there is exception when delete command is called."},{"lineNumber":70,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"godjuansan"},"content":"    public String getDeleteFail() {"},{"lineNumber":72,"author":{"gitId":"godjuansan"},"content":"        return deleteFail;"},{"lineNumber":73,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":75,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"godjuansan"},"content":"     * Print whenever find command is called successfully."},{"lineNumber":77,"author":{"gitId":"godjuansan"},"content":"     * @param listFound List\u003cTask\u003e found that we would like to print"},{"lineNumber":78,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"godjuansan"},"content":"    public String getFindSuccess(List\u003cTask\u003e listFound) {"},{"lineNumber":80,"author":{"gitId":"godjuansan"},"content":"        String result \u003d \"\";"},{"lineNumber":81,"author":{"gitId":"godjuansan"},"content":"        for (int i\u003d0; i \u003c listFound.size(); i++) {"},{"lineNumber":82,"author":{"gitId":"godjuansan"},"content":"            result +\u003d getList(i, listFound.get(i));"},{"lineNumber":83,"author":{"gitId":"godjuansan"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"godjuansan"},"content":"        return result;"},{"lineNumber":85,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":87,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"godjuansan"},"content":"     * Print whenever there is exception when find command is called."},{"lineNumber":89,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"godjuansan"},"content":"    public String getFindFail(NoMeaningException e) {"},{"lineNumber":91,"author":{"gitId":"godjuansan"},"content":"        return e.getMessage();"},{"lineNumber":92,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":94,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"godjuansan"},"content":"     * Print whenever there is exception when task typed command is called."},{"lineNumber":96,"author":{"gitId":"godjuansan"},"content":"     * @param e NoMeaningException that arises whenever task command failed."},{"lineNumber":97,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"godjuansan"},"content":"    public String getTaskFail(NoMeaningException e) {"},{"lineNumber":99,"author":{"gitId":"godjuansan"},"content":"        return e.getMessage();"},{"lineNumber":100,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":102,"author":{"gitId":"godjuansan"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"godjuansan"},"content":"     * Print at the end when task typed command is called."},{"lineNumber":104,"author":{"gitId":"godjuansan"},"content":"     * @param task Task to print"},{"lineNumber":105,"author":{"gitId":"godjuansan"},"content":"     *        size The current size of TaskList"},{"lineNumber":106,"author":{"gitId":"godjuansan"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"godjuansan"},"content":"    public String getTaskFinally(Task task, int size) {"},{"lineNumber":108,"author":{"gitId":"godjuansan"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + task + \"\\n\" +"},{"lineNumber":109,"author":{"gitId":"godjuansan"},"content":"        \"Now you have \" + size + \" tasks in the list.\";"},{"lineNumber":110,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":112,"author":{"gitId":"godjuansan"},"content":"    public String readCommand() {"},{"lineNumber":113,"author":{"gitId":"godjuansan"},"content":"        return this.scan.nextLine();"},{"lineNumber":114,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":116,"author":{"gitId":"godjuansan"},"content":"    public void displayMessage(String message) {"},{"lineNumber":117,"author":{"gitId":"godjuansan"},"content":"        System.out.println(message);"},{"lineNumber":118,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":119}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"godjuansan":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"godjuansan":19}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"    public void taskListSizeTest() {"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"godjuansan"},"content":"        TaskList taskList \u003d new TaskList(lst);"},{"lineNumber":12,"author":{"gitId":"godjuansan"},"content":"        assertEquals(taskList.size(), 0);"},{"lineNumber":13,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"godjuansan"},"content":""},{"lineNumber":15,"author":{"gitId":"godjuansan"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"    public void taskListAddTest() {"},{"lineNumber":17,"author":{"gitId":"godjuansan"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"godjuansan"},"content":"        TaskList taskList \u003d new TaskList(lst);"},{"lineNumber":19,"author":{"gitId":"godjuansan"},"content":"        taskList.add(new ToDo(\"task 1\"));"},{"lineNumber":20,"author":{"gitId":"godjuansan"},"content":"        assertEquals(taskList.get(0).getJob(), \"task 1\");"},{"lineNumber":21,"author":{"gitId":"godjuansan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"godjuansan"},"content":"}"}],"authorContributionMap":{"godjuansan":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"godjuansan"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"godjuansan"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"godjuansan"},"content":"done 2"},{"lineNumber":4,"author":{"gitId":"godjuansan"},"content":"event study /at 4pm"},{"lineNumber":5,"author":{"gitId":"godjuansan"},"content":"list"},{"lineNumber":6,"author":{"gitId":"godjuansan"},"content":"todo"},{"lineNumber":7,"author":{"gitId":"godjuansan"},"content":"deadline"},{"lineNumber":8,"author":{"gitId":"godjuansan"},"content":"event"},{"lineNumber":9,"author":{"gitId":"godjuansan"},"content":"blah"}],"authorContributionMap":{"godjuansan":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"godjuansan"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"godjuansan":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"godjuansan"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"godjuansan":1,"-":37}}]
