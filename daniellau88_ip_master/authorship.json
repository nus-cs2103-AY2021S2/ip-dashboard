[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daniellau88":16,"-":46}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import duke.commands.Command;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import duke.ui.CliUi;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import duke.ui.JavafxUi;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":" * Main Duke class."},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    private Ui ui;"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    private Storage storage;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    private TaskList tasks;"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public Duke(boolean isCli) {"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        this(null, isCli);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    public Duke(String directoryPath, boolean isCli) {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        if (isCli) {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"            ui \u003d new CliUi();"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"            ui \u003d new JavafxUi();"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        if (directoryPath !\u003d null) {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"            storage \u003d new Storage(Paths.get(directoryPath));"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"            storage \u003d new Storage();"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"            tasks \u003d storage.readTasks();"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"            ui.printError(\"Unable to create file\");"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"            ui.printError(\"Unable to parse file\");"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"     * Executes the Duke program by reading in commands and giving appropriate outputs."},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"    public void run() {"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"        ui.printIntro();"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        Scanner stdin \u003d new Scanner(System.in);"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        String line \u003d stdin.nextLine();"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        boolean end \u003d false;"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"        while (line !\u003d null) {"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"            ui.printHorizontalLine();"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"            getResponse(line);"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"            ui.printHorizontalLine();"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"            if (end) {"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"            line \u003d stdin.nextLine();"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"     * Replace this stub with your completed method."},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"    public String getResponse(String input) {"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"            storage.writeTasks(tasks);"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"        } catch (DukeException e) {"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"        } catch (IOException e) {"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"            ui.printError(\"Unable to write to file\");"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"        String replyString \u003d ui.getReplyString();"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"        ui.resetReplyString();"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"        return replyString;"},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"    public static void main(String[] args) {"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"        new Duke(true).run();"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daniellau88":91,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":" * Exception class for any errors produced in Duke."},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"        super(errorMessage);"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":10}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.controllers.Main;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":13}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.commands.Command;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.commands.DeadlineCommand;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import duke.commands.EventCommand;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import duke.commands.ExitCommand;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import duke.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import duke.commands.ListCommand;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"import duke.commands.TodoCommand;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":" * Parser class to parse commands given by the user."},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"public class Parser {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    private static boolean isCommandMatch(String line, String match) {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        return line.startsWith(match)"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 (line.length() \u003d\u003d match.length()"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"                || line.charAt(line.indexOf(match) + match.length()) \u003d\u003d \u0027 \u0027);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"     * Converts the user\u0027s input into a command object."},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"     * The command object would contain the code to carry out the relevant actions intended by the user."},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"     * @param line user\u0027s input"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"     * @return relevant command object"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"     * @throws DukeException"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public static Command parse(String line) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        if (line.equals(\"bye\")) {"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"            return new ExitCommand();"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        } else if (line.equals(\"list\")) {"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"            return new ListCommand();"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        } else if (isCommandMatch(line, \"done\")) {"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"            String[] cmdArgs \u003d ParserUtils.getCommandArgs(line, \"I\u0027m sorry, but done needs the index of a Task.\");"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"            int index \u003d ParserUtils.parseInt(cmdArgs[1], \"The index of the task needs to be an integer.\");"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"            return new DoneCommand(index);"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        } else if (isCommandMatch(line, \"todo\")) {"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"            String[] cmdArgs \u003d ParserUtils.getCommandArgs(line, \"The description of a todo cannot be empty.\");"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"            String taskName \u003d cmdArgs[1];"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"            return new TodoCommand(taskName);"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        } else if (isCommandMatch(line, \"deadline\")) {"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"            String[] cmdArgs \u003d ParserUtils.getCommandArgs(line, \"The description of a todo cannot be empty.\");"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"            String[] deadlineArgs \u003d cmdArgs[1].split(\" /by \", 2);"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"            if (deadlineArgs.length \u003c 2) {"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"                throw new DukeException(\"The deadline needs to have a date specified with \\\"/by\\\".\");"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"            String taskName \u003d deadlineArgs[0];"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"            LocalDateTime deadline \u003d ParserUtils.parseDateTime(deadlineArgs[1],"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"                    \"The deadline needs to be specified in a valid date format.\");"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"            return new DeadlineCommand(taskName, deadline);"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        } else if (isCommandMatch(line, \"event\")) {"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"            String[] cmdArgs \u003d ParserUtils.getCommandArgs(line, \"The description of an event cannot be empty.\");"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"            String[] eventArgs \u003d cmdArgs[1].split(\" /at \", 2);"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"            if (eventArgs.length \u003c 2) {"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"                throw new DukeException(\"The event needs to have a date specified with \\\"/at\\\".\");"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"            String taskName \u003d eventArgs[0];"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"            LocalDateTime dateTime \u003d ParserUtils.parseDateTime(eventArgs[1],"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"                    \"The event date needs to be specified in a valid date format.\");"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"            return new EventCommand(taskName, dateTime);"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"        } else if (isCommandMatch(line, \"delete\")) {"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"            String[] cmdArgs \u003d ParserUtils.getCommandArgs(line, \"I\u0027m sorry, but delete needs the index of a Task.\");"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"            int index \u003d ParserUtils.parseInt(cmdArgs[1], \"The index of the task needs to be an integer.\");"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"            return new DeleteCommand(index);"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        } else if (isCommandMatch(line, \"find\")) {"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"            String[] cmdArgs \u003d ParserUtils.getCommandArgs(line, \"I\u0027m sorry, but find needs a keyword specified.\");"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"            String keyword \u003d cmdArgs[1];"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"            return new FindCommand(keyword);"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":78}},{"path":"src/main/java/duke/ParserUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import java.util.Locale;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Utility methods for Parser class."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class ParserUtils {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    public static final DateTimeFormatter INPUT_DATE_TIME_FORMATTER \u003d new DateTimeFormatterBuilder()"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[d/M/yyyy HHmm]\")"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[d/M/yyyy]\")"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[yyyy-M-d]\")"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[yyyy-M-d HH:mm]\")"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[MMM d yyyy]\")"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        .toFormatter(Locale.ENGLISH);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"     * Parses user-given datetime strings into DateTime objects."},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"     * Valid datetime formats are specified in FORMATTER."},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"     * @param dateTime dateTime string"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"     * @param errorMessage error message to display if string could not be parsed"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"     * @return dateTime object"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"     * @throws DukeException"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"    public static LocalDateTime parseDateTime(String dateTime, String errorMessage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"            return LocalDateTime.parse(dateTime, INPUT_DATE_TIME_FORMATTER);"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"     * Parses an integer string into an integer."},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"     * Similar to Integer.parseInt(String s)."},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"     * @param integer integer string"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"     * @param errorMessage error message to display if string could not be parsed"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"     * @return integer value of string"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"     * @throws DukeException"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"    public static int parseInt(String integer, String errorMessage) throws DukeException {"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"            return Integer.parseInt(integer);"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"     * Gets arguments for a command."},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"     * @param line user command"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"     * @param errorMessage error message to display if arguments cannot be found"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"     * @return array containing command and its argument"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"     * @throws DukeException"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"    public static String[] getCommandArgs(String line, String errorMessage) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"        String[] cmdArgs \u003d line.split(\" \", 2);"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        if (cmdArgs.length \u003c 2) {"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        if (cmdArgs[1].isEmpty()) {"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"        return cmdArgs;"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":74}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" * Interface to manage saving and retrieving task list from file."},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public static final String FILENAME \u003d \"data.log\";"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    private final Path directoryPath;"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    private File file \u003d null;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public Storage(Path directoryPath) {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        this.directoryPath \u003d directoryPath;"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    public Storage() {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        this(Paths.get(\".\", \"data\"));"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    private File getFile() throws IOException {"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        // Create file if does not exist"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        if (file \u003d\u003d null) {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"            File directory \u003d directoryPath.toFile();"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"            directory.mkdirs();"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"            File dataFile \u003d new File(directory, FILENAME);"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"            dataFile.createNewFile();"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"            this.file \u003d dataFile;"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        return this.file;"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"     * Reads all tasks from the given file."},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"     * @return task list containing all tasks in file"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"     * @throws IOException"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"    public TaskList readTasks() throws IOException {"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(getFile()));"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        String line;"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"            taskList.addTask(TaskList.parseTask(line));"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        return taskList;"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"     * Writes all tasks in the given task list to the file."},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"     * @param tasks task list"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"     * @throws IOException"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"    public void writeTasks(TaskList tasks) throws IOException {"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"        FileWriter writer \u003d new FileWriter(getFile());"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"            writer.write(TaskList.taskToString(tasks.getTask(i)) + \u0027\\n\u0027);"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        writer.close();"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":68}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import duke.models.Deadline;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import duke.models.Event;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import duke.models.Todo;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":" * Abstraction to store Tasks in a list."},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"public class TaskList {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss\");"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    public void addTask(Task t) {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        this.tasks.add(t);"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    public Task getTask(int index) {"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        return this.tasks.get(index);"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public int size() {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        return this.tasks.size();"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    public void removeTask(int index) {"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        this.tasks.remove(index);"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"     * Converts the tasks to string (to be used by Storage for file saving)."},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"     * @param task task"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"     * @return string representation of task"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"    public static String taskToString(Task task) {"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"            builder.append(\u0027D\u0027);"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"            builder.append(\u0027E\u0027);"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"        } else if (task instanceof Todo) {"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"            builder.append(\u0027T\u0027);"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        builder.append(\"|\");"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"        builder.append(task.getTaskDone() ? 1 : 0);"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"        builder.append(\"|\");"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"        builder.append(task.getTaskName());"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"            builder.append(\"|\");"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"            builder.append(DATE_TIME_FORMATTER.format(((Deadline) task).getDeadline()));"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"            builder.append(\"|\");"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"            builder.append(DATE_TIME_FORMATTER.format(((Event) task).getDate()));"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        return builder.toString();"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"     * Parses the given string (from file) into the correct task object."},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"     * @param taskString task string (from file)"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"     * @return task object"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"    public static Task parseTask(String taskString) {"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"        String[] taskDetails \u003d taskString.split(\"\\\\|\");"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"        String type \u003d taskDetails[0];"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"        Task task \u003d null;"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"        if (type.equals(\"T\")) {"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"            task \u003d new Todo(taskDetails[2]);"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"        } else if (type.equals(\"D\")) {"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"            task \u003d new Deadline(taskDetails[2], LocalDateTime.parse(taskDetails[3], DATE_TIME_FORMATTER));"},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"        } else if (type.equals(\"E\")) {"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"            task \u003d new Event(taskDetails[2], LocalDateTime.parse(taskDetails[3], DATE_TIME_FORMATTER));"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"        if (taskDetails[1].equals(\"1\") \u0026\u0026 task !\u003d null) {"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"            task.markAsDone();"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"        return task;"},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":96}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":" * Abstract class for commands adding new tasks to the list."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"public abstract class AddCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    private String taskName;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    public AddCommand(String taskName) {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     * Gets the task to be added to the list."},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"     * @return task to be added to the list"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public abstract Task getTask();"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"     * Returns the name of the task."},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"     * @return name of the task"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    public String getTaskName() {"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        return taskName;"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        Task curTask \u003d getTask();"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        tasks.addTask(curTask);"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        ui.printTaskListStatus(tasks, curTask);"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    public boolean isExit() {"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        return false;"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":42}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":" * Base command class to define relevant actions for each given user\u0027s command."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"public interface Command {"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"     * Executes the command given."},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"     * @param tasks list of tasks"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"     * @param ui command line interface"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     * @param storage storage to handle file IO"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"     * @throws DukeException"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"     * Returns whether the program should end."},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"     * @return whether the program should end"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public boolean isExit();"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":26}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.models.Deadline;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":" * Handles the Deadline command of the user to create new deadlines in the list."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Format of command: \"deadline [deadline_name] /by [deadline]\"."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"public class DeadlineCommand extends AddCommand {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    private LocalDateTime deadline;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public DeadlineCommand(String taskName, LocalDateTime deadline) {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        super(taskName);"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public Task getTask() {"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        return new Deadline(getTaskName(), deadline);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":24}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Handles the Delete command of the user to delete a certain task in the list."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Format of command: \"delete [task_index]\"."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    private int index;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        this.index \u003d index;"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        Task curTask \u003d tasks.getTask(index - 1);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        tasks.removeTask(index - 1);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        ui.printIndentOutput(\"Nice! I\u0027ve removed this task:\");"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        ui.printIndentOutput(\"   \" + curTask);"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        ui.printIndentOutput(\"Now you have \" + tasks.size() + \" task(s) in the list.\");"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public boolean isExit() {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        return false;"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":32}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Handles the Done command of the user to mark tasks as done."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Format of command: \"done [task_index]\"."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class DoneCommand implements Command {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    private int index;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public DoneCommand(int index) {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        this.index \u003d index;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        if (index \u003e\u003d tasks.size()) {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"            throw new DukeException(\"The index of the task needs to be present in the list.\");"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        Task curTask \u003d tasks.getTask(index - 1);"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        curTask.markAsDone();"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        ui.printIndentOutput(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        ui.printIndentOutput(\"   \" + curTask);"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public boolean isExit() {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        return false;"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":35}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.models.Event;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":" * Handles the Event command of the user to create new events in the list."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Format of command: \"event [event_name] /at [datetime]\"."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"public class EventCommand extends AddCommand {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public EventCommand(String taskName, LocalDateTime dateTime) {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        super(taskName);"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public Task getTask() {"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        return new Event(getTaskName(), dateTime);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":24}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":" * Handles the Exit command of the user to allow user to exit the command line interface."},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":" * Format of command: \"bye\"."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"public class ExitCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        ui.printIndentOutput(\"Bye. Hope to see you again soon!\");"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public boolean isExit() {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        return true;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":21}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Handles the find command of the user to search tasks based on keyword."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Format of command: \"find [keyword]\"."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class FindCommand implements Command {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    private String keyword;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        if (tasks.size() \u003c\u003d 0) {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"            ui.printIndentOutput(\"The current list is empty.\");"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"            ArrayList\u003cInteger\u003e indexList \u003d new ArrayList\u003c\u003e(tasks.size());"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"                if (tasks.getTask(i).getTaskName().contains(keyword)) {"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"                    indexList.add(i);"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"                }"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"            if (indexList.size() \u003c\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"                ui.printIndentOutput(\"No tasks found with the given keyword.\");"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"            } else {"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"                ui.printIndentOutput(\"Here are the matching tasks in you list:\");"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"                for (int i \u003d 0; i \u003c indexList.size(); i++) {"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"                    ui.printIndentOutput((i + 1) + \". \" + tasks.getTask(indexList.get(i)));"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"                }"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"    public boolean isExit() {"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        return false;"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":46}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":" * Handles the List command of the user to list out all tasks."},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":" * Format of command: \"list\"."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"public class ListCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        if (tasks.size() \u003c\u003d 0) {"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"            ui.printIndentOutput(\"The current list is empty.\");"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        } else {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"            ui.printIndentOutput(\"Here are the tasks in you list:\");"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"                ui.printIndentOutput((i + 1) + \". \" + tasks.getTask(i));"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        return false;"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":28}},{"path":"src/main/java/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import duke.models.Todo;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Handles the Todo command of the user to create new todos in the list."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" * Format of command: \"todo [todo_name]\"."},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"public class TodoCommand implements Command {"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    private String taskName;"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    public TodoCommand(String taskName) {"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        Task curTask \u003d new Todo(taskName);"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        tasks.addTask(curTask);"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        ui.printTaskListStatus(tasks, curTask);"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public boolean isExit() {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        return false;"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":32}},{"path":"src/main/java/duke/controllers/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"public class DialogBox extends HBox {"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    private Label dialog;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    private ImageView displayPicture;"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"            fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        dialog.setText(text);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        displayPicture.setImage(img);"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    private void flip() {"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        Collections.reverse(tmp);"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        return new DialogBox(text, img);"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        db.flip();"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        return db;"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":56}},{"path":"src/main/java/duke/controllers/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    private Duke duke \u003d new Duke(false);"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public void start(Stage stage) {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"            scene.getStylesheets().add(Main.class.getResource(\"/stylesheets/main.css\").toExternalForm());"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":29}},{"path":"src/main/java/duke/controllers/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    @FXML"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    private VBox dialogContainer;"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    private TextField userInput;"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    private Button sendButton;"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    private Duke duke;"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    public void initialize() {"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        duke \u003d d;"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    private void handleUserInput() {"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"            DialogBox.getUserDialog(\"Da:\" + input, userImage),"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"            DialogBox.getDukeDialog(\"Duke: \" + response, dukeImage)"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        );"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        userInput.clear();"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":51}},{"path":"src/main/java/duke/models/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":" * A subclass of Task representing a task with a deadline."},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    private LocalDateTime deadline;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    public Deadline(String taskName, LocalDateTime deadline) {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"        super(taskName);"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     * Returns the deadline of task."},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"     * @return deadline of task"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public LocalDateTime getDeadline() {"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        return deadline;"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"     * Returns the string representation of deadline."},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"     * @return string representation of deadline"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"                + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":34}},{"path":"src/main/java/duke/models/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":" * A subclass of Task, representing an event with date and time."},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    public Event(String taskName, LocalDateTime dateTime) {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"        super(taskName);"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     * Returns the date and time of the event."},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"     * @return date and time of event"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public LocalDateTime getDate() {"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        return dateTime;"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"     * String representation of event"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"     * @return"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        return \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"                + dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":34}},{"path":"src/main/java/duke/models/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":" * Abstract class of all Tasks."},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    private final String taskName;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    public Task(String taskName) {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     * Marks the task as done."},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public void markAsDone() {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        isDone \u003d true;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"     * Returns the task\u0027s name."},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"     * @return task name"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    public String getTaskName() {"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        return taskName;"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"     * Returns whether the task has been marked done."},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"     * @return whether the task has been marked done"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    public boolean getTaskDone() {"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        return isDone;"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"     * Return the string representation of task."},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"     * @return string representation of task"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        builder.append(\u0027[\u0027);"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        builder.append(isDone ? \u0027X\u0027 : \u0027 \u0027);"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        builder.append(\"] \");"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        builder.append(taskName);"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        return builder.toString();"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":51}},{"path":"src/main/java/duke/models/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":" * A subclass of Task, representing a todo task."},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    public Todo(String taskName) {"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"        super(taskName);"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"     * Returns a string representation of todo."},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"     * @return string representation of todo"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":19}},{"path":"src/main/java/duke/ui/CliUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"public class CliUi extends Ui {"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"    public static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    public static final String HORIZONTAL_LINE \u003d \"____________________________________\""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"        + \"_________________________________\";"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    public String getReplyString() {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        return null;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public void resetReplyString() {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"     * Prints the output with an indent."},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"     * @param output output to be printed"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    public void printIndentOutput(String output) {"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        System.out.println(\u0027\\t\u0027 + output);"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"     * Prints a straight horizontal line."},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    public void printHorizontalLine() {"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(HORIZONTAL_LINE);"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"     * Prints out the intro of the application."},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"    public void printIntro() {"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        printHorizontalLine();"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"What can I do for you?\");"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        printHorizontalLine();"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":50}},{"path":"src/main/java/duke/ui/JavafxUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"public class JavafxUi extends Ui {"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"    private String replyString;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    public JavafxUi() {"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"        this.replyString \u003d \"\";"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    public String getReplyString() {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"        return replyString;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    public void resetReplyString() {"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        this.replyString \u003d \"\";"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public void printIndentOutput(String output) {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        this.replyString +\u003d output + \"\\n\";"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    public void printHorizontalLine() {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        // Do nothing"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public void printIntro() {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"What can I do for you?\");"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":32}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":" * Manages the Command line interface of the application."},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"public abstract class Ui {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    public abstract void resetReplyString();"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    public abstract String getReplyString();"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"     * Prints the output with an indent."},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"     * @param output output to be printed"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    public abstract void printIndentOutput(String output);"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"     * Prints a straight horizontal line."},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    public abstract void printHorizontalLine();"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"     * Print the current status of tasks."},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"     * @param tasks list of task"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"     * @param curTask relevant task that was added / deleted"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public void printTaskListStatus(TaskList tasks, Task curTask) {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"   \" + curTask);"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"Now you have \" + tasks.size() + \" task(s) in the list.\");"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"     * Prints out the intro of the application."},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    public abstract void printIntro();"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"     * Prints out the given error message in the application."},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"     * @param errorMessage error message"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"    public void printError(String errorMessage) {"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"OOPSIE!! \" + errorMessage);"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":47}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"daniellau88":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"\u003cAnchorPane styleClass\u003d\"root\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"duke.controllers.MainWindow\"\u003e"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    \u003cchildren\u003e"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"            \u003ccontent\u003e"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"            \u003c/content\u003e"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    \u003c/children\u003e"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"daniellau88":16}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"public class DukeTest {"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    public void empty() {"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"        Duke d \u003d new Duke(true);"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":10}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import duke.commands.Command;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import duke.commands.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"import duke.commands.ListCommand;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"public class ParserTest {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    public void testExitCommand() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"        Command c \u003d Parser.parse(\"bye\");"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        assertTrue(c instanceof ExitCommand);"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        assertTrue(c.isExit());"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    public void testListCommand() throws DukeException {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        Command c \u003d Parser.parse(\"list\");"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        assertTrue(c instanceof ListCommand);"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        assertFalse(c.isExit());"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    public void testDoneCommand() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        Command c \u003d Parser.parse(\"done 5\");"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        assertTrue(c instanceof DoneCommand);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        assertFalse(c.isExit());"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    public void testEmptyDoneCommand() throws DukeException {"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"            Parser.parse(\"done\");"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        });"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        String expectedMessage \u003d \"I\u0027m sorry, but done needs the index of a Task.\";"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        String actualMessage \u003d exception.getMessage();"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"    public void testUnknownExtendedCommand() {"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"            Parser.parse(\"doned\");"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        });"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        String expectedMessage \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"        String actualMessage \u003d exception.getMessage();"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"    public void testInvalidDoneCommand() throws DukeException {"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"            Parser.parse(\"done a\");"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        });"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"        String expectedMessage \u003d \"The index of the task needs to be an integer.\";"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        String actualMessage \u003d exception.getMessage();"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"        assertEquals(expectedMessage, actualMessage);"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":73}},{"path":"src/test/java/duke/ParserUtilsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"public class ParserUtilsTest {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    public void testParseDateTimeBySlash() throws DukeException {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"        LocalDateTime dateTime \u003d ParserUtils.parseDateTime(\"1/12/1212\", \"Invalid Date\");"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        assertEquals(LocalDateTime.of(1212, 12, 1, 0, 0), dateTime);"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public void testParseInvalidFormatDate() {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        String errorMessage \u003d \"Invalid Date\";"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"            ParserUtils.parseDateTime(\"12/15/1212\", errorMessage);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        assertEquals(errorMessage, exception.getMessage());"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public void testGetNoArgs() {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        String line \u003d \"command\";"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        String errorMessage \u003d \"No arguments given\";"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"            ParserUtils.getCommandArgs(line, errorMessage);"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        });"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        assertEquals(errorMessage, exception.getMessage());"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    public void testValidArgs() throws DukeException {"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        String line \u003d \"command a very long argument\";"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        String errorMessage \u003d \"No arguments given\";"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        String[] args \u003d ParserUtils.getCommandArgs(line, errorMessage);"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        assertEquals(\"a very long argument\", args[1]);"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":50}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"public class StorageTest {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    public void testNoneExistentPath() {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"        Path p \u003d Paths.get(\".\", \"tmp\");"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        assert(!Files.exists(Paths.get(p.toString(), Storage.FILENAME)));"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        Storage s \u003d new Storage(p);"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        assert(!Files.exists(Paths.get(p.toString(), Storage.FILENAME)));"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        File f \u003d new File(Paths.get(p.toString(), Storage.FILENAME).toString());"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"        f.delete();"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":20}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import duke.models.Deadline;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import duke.models.Event;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"import duke.models.Task;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"import duke.models.Todo;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"public class TaskListTest {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public void testAddToList() {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        TaskList l \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        Todo t \u003d new Todo(\"New Todo\");"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        l.addTask(t);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        assertEquals(t, l.getTask(0));"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    public void testRemoveFromList() {"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        TaskList l \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        Todo t \u003d new Todo(\"New Todo\");"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        l.addTask(t);"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        assertEquals(t, l.getTask(0));"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        l.removeTask(0);"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        Exception exception \u003d assertThrows(IndexOutOfBoundsException.class, () -\u003e {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"            l.getTask(0);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        });"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    public void testTaskEventToString() {"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        Event t \u003d new Event(\"Event 1\", LocalDateTime.of(2020, 12, 2, 15, 20));"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        t.markAsDone();"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        String s \u003d TaskList.taskToString(t);"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        assertEquals(\"E|1|Event 1|2020-12-02T15:20:00\", s);"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"    public void testParseStringToDeadline() {"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        String s \u003d \"D|1|Deadline 1|2020-05-08T13:10:00\";"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        Task t \u003d TaskList.parseTask(s);"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        assertTrue(t instanceof Deadline);"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"        assertTrue(t.getTaskDone());"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"        assertEquals(LocalDateTime.of(2020, 5, 8, 13, 10, 0), ((Deadline) t).getDeadline());"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"        assertEquals(\"Deadline 1\", t.getTaskName());"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":54}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.io.PrintStream;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import duke.ui.CliUi;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"import duke.ui.Ui;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"public class UiTest {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    private final PrintStream originalErr \u003d System.err;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    @BeforeEach"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    public void setUpStreams() {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        System.setErr(new PrintStream(errContent));"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    @AfterEach"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    public void restoreStreams() {"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        System.setOut(originalOut);"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        System.setErr(originalErr);"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    public void testHorizontalLine() {"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        Ui ui \u003d new CliUi();"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        ui.printHorizontalLine();"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        assertEquals(\"\\t\" + CliUi.HORIZONTAL_LINE + \"\\n\", outContent.toString());"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    public void testIntro() {"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        Ui ui \u003d new CliUi();"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        ui.printIntro();"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        assertEquals(\"Hello from\\n\" + CliUi.LOGO + \"\\n\\t\" + CliUi.HORIZONTAL_LINE"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"                + \"\\n\\tWhat can I do for you?\\n\\t\" + CliUi.HORIZONTAL_LINE + \u0027\\n\u0027, outContent.toString());"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":47}},{"path":"src/test/java/duke/models/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"public class TaskTest {"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    public void testCreateDeadline() {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2020, 04, 04, 03, 00, 00);"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        Deadline d \u003d new Deadline(\"Deadline 1\", dateTime);"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        assertEquals(\"Deadline 1\", d.getTaskName());"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        assertEquals(dateTime, d.getDeadline());"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public void testCreateEvent() {"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2020, 03, 04, 03, 00, 00);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        Event e \u003d new Event(\"Event 1\", dateTime);"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        assertEquals(\"Event 1\", e.getTaskName());"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        assertEquals(dateTime, e.getDate());"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public void testMarkDone() {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        Todo t \u003d new Todo(\"Todo 1\");"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        assertFalse(t.getTaskDone());"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        t.markAsDone();"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        assertTrue(t.getTaskDone());"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":"todo add book"},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"todo throw book"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"todo store book"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"deadline read book /by Sunday"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"event book signing /at Monday"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"todo buy new book"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"done 1"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"done 5"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"delete 3"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"bye"}],"authorContributionMap":{"daniellau88":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\**\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"daniellau88":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/**/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"daniellau88":1,"-":37}}]
