[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"import models.Deadline;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":"import models.Event;"},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import models.Task;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import models.Todo;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import java.util.Locale;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public static final DateTimeFormatter formatter \u003d new DateTimeFormatterBuilder()."},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"            appendPattern(\"[d/M/yyyy HHmm]\")."},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"            appendPattern(\"[d/M/yyyy]\")."},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"            appendPattern(\"[yyyy-M-d]\")."},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"            appendPattern(\"[yyyy-M-d HH:mm]\")."},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"            appendPattern(\"[MMM d yyyy]\")."},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"            parseDefaulting(ChronoField.HOUR_OF_DAY, 0)."},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"            parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)."},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"            toFormatter(Locale.ENGLISH);"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    private static void printIndentOutput(String output) {"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        System.out.println(\u0027\\t\u0027 + output);"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    private static void printHorizontalLine() {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"_____________________________________________________________________\");"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    private static boolean checkMatchString(String line, String match) {"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        return line.length() \u003e\u003d match.length() \u0026\u0026 line.startsWith(match);"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    private static void printTaskListStatus(ArrayList\u003cTask\u003e tasks, Task curTask) {"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"   \" + curTask);"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"Now you have \" + tasks.size() + \" task(s) in the list.\");"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"    private static String[] getCommandArgs(String line, String errorMessage) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        String[] cmdArgs \u003d line.split(\" \", 2);"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        if (cmdArgs.length \u003c 2) {"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        return cmdArgs;"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        Storage storage \u003d new Storage();"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        ArrayList\u003cTask\u003e tasks;"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"            tasks \u003d storage.readTasks();"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"        } catch(IOException e) {"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"            System.err.println(\"Unable to create file\");"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"            tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":66,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        printHorizontalLine();"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"        printIndentOutput(\"What can I do for you?\");"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"        printHorizontalLine();"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"        Scanner stdin \u003d new Scanner(System.in);"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"        String line \u003d stdin.nextLine();"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"        boolean end \u003d false;"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"        while (line !\u003d null) {"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"            printHorizontalLine();"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"            try {"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"                if (line.equals(\"bye\")) {"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"                    printIndentOutput(\"Bye. Hope to see you again soon!\");"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"                    end \u003d true;"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"                } else if (line.equals(\"list\")) {"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"                    if (tasks.size() \u003c\u003d 0) {"},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"                        printIndentOutput(\"The current list is empty.\");"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"                    } else {"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"                        printIndentOutput(\"Here are the tasks in you list:\");"},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":"                        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"                            printIndentOutput((i + 1) + \". \" + tasks.get(i));"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"                        }"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"                    }"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":"                } else if (checkMatchString(line, \"done \")) {"},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"                    String[] cmdArgs \u003d getCommandArgs(line, \"I\u0027m sorry, but done needs the index of a Task.\");"},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"                    try {"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"                        int index \u003d Integer.parseInt(cmdArgs[1]);"},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"                        Task curTask \u003d tasks.get(index - 1);"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"                        curTask.markAsDone();"},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"                        printIndentOutput(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"                        printIndentOutput(\"   \" + curTask);"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":"                    } catch (NumberFormatException e) {"},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":"                        throw new DukeException(\"The index of the task needs to be an integer.\");"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"                    } catch (IndexOutOfBoundsException e) {"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"                        throw new DukeException(\"The index of the task needs to be present in the list.\");"},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"                    }"},{"lineNumber":106,"author":{"gitId":"daniellau88"},"content":"                } else if (checkMatchString(line, \"todo \")) {"},{"lineNumber":107,"author":{"gitId":"daniellau88"},"content":"                    String[] cmdArgs \u003d getCommandArgs(line, \"The description of a todo cannot be empty.\");"},{"lineNumber":108,"author":{"gitId":"daniellau88"},"content":"                    String taskName \u003d cmdArgs[1];"},{"lineNumber":109,"author":{"gitId":"daniellau88"},"content":"                    Task curTask \u003d new Todo(taskName);"},{"lineNumber":110,"author":{"gitId":"daniellau88"},"content":"                    tasks.add(curTask);"},{"lineNumber":111,"author":{"gitId":"daniellau88"},"content":"                    printTaskListStatus(tasks, curTask);"},{"lineNumber":112,"author":{"gitId":"daniellau88"},"content":"                } else if (checkMatchString(line, \"deadline \")) {"},{"lineNumber":113,"author":{"gitId":"daniellau88"},"content":"                    String[] cmdArgs \u003d getCommandArgs(line, \"The description of a todo cannot be empty.\");"},{"lineNumber":114,"author":{"gitId":"daniellau88"},"content":"                    String[] deadlineArgs \u003d cmdArgs[1].split(\" /by \", 2);"},{"lineNumber":115,"author":{"gitId":"daniellau88"},"content":"                    if (deadlineArgs.length \u003c 2) {"},{"lineNumber":116,"author":{"gitId":"daniellau88"},"content":"                        throw new DukeException(\"The deadline needs to have a date specified with \\\"/by\\\".\");"},{"lineNumber":117,"author":{"gitId":"daniellau88"},"content":"                    }"},{"lineNumber":118,"author":{"gitId":"daniellau88"},"content":"                    String taskName \u003d deadlineArgs[0];"},{"lineNumber":119,"author":{"gitId":"daniellau88"},"content":"                    LocalDateTime deadline \u003d LocalDateTime.parse(deadlineArgs[1], formatter);"},{"lineNumber":120,"author":{"gitId":"daniellau88"},"content":"                    Task curTask \u003d new Deadline(taskName, deadline);"},{"lineNumber":121,"author":{"gitId":"daniellau88"},"content":"                    tasks.add(curTask);"},{"lineNumber":122,"author":{"gitId":"daniellau88"},"content":"                    printTaskListStatus(tasks, curTask);"},{"lineNumber":123,"author":{"gitId":"daniellau88"},"content":"                } else if (checkMatchString(line, \"event \")) {"},{"lineNumber":124,"author":{"gitId":"daniellau88"},"content":"                    String[] cmdArgs \u003d getCommandArgs(line, \"The description of an event cannot be empty.\");"},{"lineNumber":125,"author":{"gitId":"daniellau88"},"content":"                    String[] eventArgs \u003d cmdArgs[1].split(\" /at \", 2);"},{"lineNumber":126,"author":{"gitId":"daniellau88"},"content":"                    if (eventArgs.length \u003c 2) {"},{"lineNumber":127,"author":{"gitId":"daniellau88"},"content":"                        throw new DukeException(\"The event needs to have a date specified with \\\"/at\\\".\");"},{"lineNumber":128,"author":{"gitId":"daniellau88"},"content":"                    }"},{"lineNumber":129,"author":{"gitId":"daniellau88"},"content":"                    String taskName \u003d eventArgs[0];"},{"lineNumber":130,"author":{"gitId":"daniellau88"},"content":"                    LocalDateTime datetime \u003d LocalDateTime.parse(eventArgs[1], formatter);"},{"lineNumber":131,"author":{"gitId":"daniellau88"},"content":"                    Task curTask \u003d new Event(taskName, datetime);"},{"lineNumber":132,"author":{"gitId":"daniellau88"},"content":"                    tasks.add(curTask);"},{"lineNumber":133,"author":{"gitId":"daniellau88"},"content":"                    printTaskListStatus(tasks, curTask);"},{"lineNumber":134,"author":{"gitId":"daniellau88"},"content":"                } else if (checkMatchString(line, \"delete \")) {"},{"lineNumber":135,"author":{"gitId":"daniellau88"},"content":"                    String[] cmdArgs \u003d getCommandArgs(line, \"I\u0027m sorry, but delete needs the index of a Task.\");"},{"lineNumber":136,"author":{"gitId":"daniellau88"},"content":"                    try {"},{"lineNumber":137,"author":{"gitId":"daniellau88"},"content":"                        int index \u003d Integer.parseInt(cmdArgs[1]);"},{"lineNumber":138,"author":{"gitId":"daniellau88"},"content":"                        Task curTask \u003d tasks.get(index - 1);"},{"lineNumber":139,"author":{"gitId":"daniellau88"},"content":"                        tasks.remove(index - 1);"},{"lineNumber":140,"author":{"gitId":"daniellau88"},"content":"                        printIndentOutput(\"Nice! I\u0027ve removed this task:\");"},{"lineNumber":141,"author":{"gitId":"daniellau88"},"content":"                        printIndentOutput(\"   \" + curTask);"},{"lineNumber":142,"author":{"gitId":"daniellau88"},"content":"                        printIndentOutput(\"Now you have \" + tasks.size() + \" task(s) in the list.\");"},{"lineNumber":143,"author":{"gitId":"daniellau88"},"content":"                    } catch (NumberFormatException e) {"},{"lineNumber":144,"author":{"gitId":"daniellau88"},"content":"                        throw new DukeException(\"The index of the task needs to be an integer.\");"},{"lineNumber":145,"author":{"gitId":"daniellau88"},"content":"                    } catch (IndexOutOfBoundsException e) {"},{"lineNumber":146,"author":{"gitId":"daniellau88"},"content":"                        throw new DukeException(\"The index of the task needs to be present in the list.\");"},{"lineNumber":147,"author":{"gitId":"daniellau88"},"content":"                    }"},{"lineNumber":148,"author":{"gitId":"daniellau88"},"content":"                } else {"},{"lineNumber":149,"author":{"gitId":"daniellau88"},"content":"                    throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":150,"author":{"gitId":"daniellau88"},"content":"                }"},{"lineNumber":151,"author":{"gitId":"daniellau88"},"content":"                if (storage !\u003d null) {"},{"lineNumber":152,"author":{"gitId":"daniellau88"},"content":"                    try {"},{"lineNumber":153,"author":{"gitId":"daniellau88"},"content":"                        storage.writeTasks(tasks);"},{"lineNumber":154,"author":{"gitId":"daniellau88"},"content":"                    } catch (IOException e) {"},{"lineNumber":155,"author":{"gitId":"daniellau88"},"content":"                        System.err.println(\"Unable to write to file\");"},{"lineNumber":156,"author":{"gitId":"daniellau88"},"content":"                    }"},{"lineNumber":157,"author":{"gitId":"daniellau88"},"content":"                }"},{"lineNumber":158,"author":{"gitId":"daniellau88"},"content":"            } catch (DukeException e) {"},{"lineNumber":159,"author":{"gitId":"daniellau88"},"content":"                printIndentOutput(\"OOPSIE!! \" + e.getMessage());"},{"lineNumber":160,"author":{"gitId":"daniellau88"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":162,"author":{"gitId":"daniellau88"},"content":"            printHorizontalLine();"},{"lineNumber":163,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":164,"author":{"gitId":"daniellau88"},"content":"            if (end) break;"},{"lineNumber":165,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":166,"author":{"gitId":"daniellau88"},"content":"            line \u003d stdin.nextLine();"},{"lineNumber":167,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daniellau88":159,"-":10}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"        super(errorMessage);"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":5}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"import models.Deadline;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":"import models.Event;"},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import models.Task;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import models.Todo;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.io.*;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    public static final String FILENAME \u003d \"data.log\";"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    private final Path directoryPath;"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    private File file \u003d null;"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public Storage(Path directoryPath) {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        this.directoryPath \u003d directoryPath;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    public Storage() {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        this(Paths.get(\".\", \"data\"));"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    public static String taskToString(Task task) {"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"            builder.append(\u0027D\u0027);"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"            builder.append(\u0027E\u0027);"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        } else if (task instanceof Todo) {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"            builder.append(\u0027T\u0027);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        builder.append(\"|\");"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        builder.append(task.getTaskDone() ? 1 : 0);"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        builder.append(\"|\");"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        builder.append(task.getTaskName());"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"            builder.append(\"|\");"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"            builder.append(((Deadline) task).getDeadline());"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"            builder.append(\"|\");"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"            builder.append(((Event) task).getDate());"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"        return builder.toString();"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"    public static Task parseTask(String taskString) {"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        String[] taskStringArray \u003d taskString.split(\"\\\\|\");"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        String type \u003d taskStringArray[0];"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"        Task task \u003d null;"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"        if (type.equals(\"T\")) {"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"            task \u003d new Todo(taskStringArray[2]);"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"        } else if (type.equals(\"D\")) {"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"            task \u003d new Deadline(taskStringArray[2], LocalDateTime.parse(taskStringArray[3]));"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"        } else if (type.equals(\"E\")) {"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"            task \u003d new Event(taskStringArray[2], LocalDateTime.parse(taskStringArray[3]));"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        if (taskStringArray[1].equals(\u00271\u0027) \u0026\u0026 task !\u003d null) {"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"            task.markAsDone();"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"        return task;"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"    private File getFile() throws IOException {"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"        // Create file if does not exist"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"        if (file \u003d\u003d null) {"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"            File directory \u003d directoryPath.toFile();"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"            directory.mkdirs();"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"            File dataFile \u003d new File(directory, FILENAME);"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"            dataFile.createNewFile();"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"            this.file \u003d dataFile;"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"        return this.file;"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"    public ArrayList\u003cTask\u003e readTasks() throws IOException {"},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(getFile()));"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"        String line;"},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"            taskList.add(parseTask(line));"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"        return taskList;"},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"    public void writeTasks(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"        FileWriter writer \u003d new FileWriter(getFile());"},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"        for (Task task : tasks) {"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"            writer.write(taskToString(task) + \u0027\\n\u0027);"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":"        writer.close();"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":104}},{"path":"src/main/java/models/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    private LocalDateTime deadline;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    public Deadline(String taskName, LocalDateTime deadline) {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"        super(taskName);"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    public LocalDateTime getDeadline() {"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        return deadline;"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":22}},{"path":"src/main/java/models/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    private LocalDateTime datetime;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    public Event(String taskName, LocalDateTime datetime) {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"        super(taskName);"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"        this.datetime \u003d datetime;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    public LocalDateTime getDate() {"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        return datetime;"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + datetime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":22}},{"path":"src/main/java/models/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"    private final String taskName;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"    private boolean isDone;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    public Task(String taskName) {"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    public void markAsDone() {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"        isDone \u003d true;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public String getTaskName() {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        return taskName;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public boolean getTaskDone() {"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        return isDone;"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        builder.append(\u0027[\u0027);"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        builder.append(isDone ? \u0027X\u0027 : \u0027 \u0027);"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        builder.append(\"] \");"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        builder.append(taskName);"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        return builder.toString();"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":33}},{"path":"src/main/java/models/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"    public Todo(String taskName) {"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"        super(taskName);"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":"todo add book"},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"todo throw book"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"todo store book"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"deadline read book /by Sunday"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"event book signing /at Monday"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"todo buy new book"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"done 1"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"done 5"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"delete 3"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"list"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"bye"}],"authorContributionMap":{"daniellau88":18}}]
