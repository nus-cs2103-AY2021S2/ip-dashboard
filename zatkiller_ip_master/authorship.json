[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zatkiller":16,"-":45}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"        "},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"import duke.exceptions.UnknownInputException;"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.DeadlineTask;"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.EventTask;"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.Task;"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.ToDoTask;"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":" * Duke class that simulates the running of the Duke Program"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"public class Duke{"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    /** Storage instance that is used by Duke during run for loading and writing of file*/"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    private Storage storage;"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    /** TaskList instance used by Duke during run that manages the tasks */"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    private TaskList tasks;"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"    /** Ui instance used by Duke during run to interact with User */"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"    private Ui ui;"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"    private String filePath \u003d \"./data/tasks.txt\";"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"     * Constructor for the Duke class"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    public Duke() {"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        ui \u003d new Ui();"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"            storage \u003d new Storage(filePath);"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"            ui.showLoadingError();"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"     * Replace this stub with your completed method."},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"    protected String getResponse(String input) {"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"        String toReply\u003d\"\";"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"                Parser parser \u003d new Parser(input);"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"                parser.check();"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"            "},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"                String[] parsedInput \u003d parser.getParsedAction();"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"                "},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"                switch (parsedInput[0]) {"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"                case \"todo\":"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.addPrint();"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"                    ToDoTask todo \u003d tasks.handleToDoTask(input);"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printTask(todo);"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.countTasks(tasks);"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"                case \"deadline\":"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"                    "},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.addPrint();"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"                    DeadlineTask deadlineTask \u003d tasks.handleDeadlineTask(input);"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printTask(deadlineTask);"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.countTasks(tasks);"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"                case \"event\":"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.addPrint();"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"                    EventTask eventTask \u003d tasks.handleEventTask(input);"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printTask(eventTask);"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.countTasks(tasks);"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"                case \"list\":"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printStored(tasks);"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":106,"author":{"gitId":"zatkiller"},"content":"                case \"done\":"},{"lineNumber":107,"author":{"gitId":"zatkiller"},"content":"                    int number \u003d Integer.valueOf(parsedInput[1]);"},{"lineNumber":108,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":109,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printMarked();"},{"lineNumber":110,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":111,"author":{"gitId":"zatkiller"},"content":"                    Task completed \u003d tasks.handleDone(number);"},{"lineNumber":112,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":113,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printTask(completed);"},{"lineNumber":114,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":115,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":116,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":117,"author":{"gitId":"zatkiller"},"content":"                case \"check\":"},{"lineNumber":118,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":119,"author":{"gitId":"zatkiller"},"content":"                    String result \u003d tasks.findOnDateTasks((parsedInput[1]));"},{"lineNumber":120,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":121,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.print(result);"},{"lineNumber":122,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":123,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":124,"author":{"gitId":"zatkiller"},"content":"                case \"bye\":"},{"lineNumber":125,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d Ui.printBye();"},{"lineNumber":126,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":127,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":128,"author":{"gitId":"zatkiller"},"content":"                case \"delete\":"},{"lineNumber":129,"author":{"gitId":"zatkiller"},"content":"                    int index \u003d Integer.valueOf(parsedInput[1]);"},{"lineNumber":130,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":131,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printRemoved();"},{"lineNumber":132,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":133,"author":{"gitId":"zatkiller"},"content":"                    Task task \u003d tasks.handleDelete(index);"},{"lineNumber":134,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":135,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printTask(task);"},{"lineNumber":136,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.countTasks(tasks);"},{"lineNumber":137,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":138,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":139,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":140,"author":{"gitId":"zatkiller"},"content":"                case \"find\":"},{"lineNumber":141,"author":{"gitId":"zatkiller"},"content":"                    String keyword \u003d parsedInput[1];"},{"lineNumber":142,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":143,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printMatching();"},{"lineNumber":144,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":145,"author":{"gitId":"zatkiller"},"content":"                    List\u003cTask\u003e matches \u003d tasks.getMatch(keyword);"},{"lineNumber":146,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":147,"author":{"gitId":"zatkiller"},"content":"                    toReply +\u003d ui.printList(matches);"},{"lineNumber":148,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":149,"author":{"gitId":"zatkiller"},"content":"                    break;"},{"lineNumber":150,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":151,"author":{"gitId":"zatkiller"},"content":"                default:"},{"lineNumber":152,"author":{"gitId":"zatkiller"},"content":"                    throw new UnknownInputException();"},{"lineNumber":153,"author":{"gitId":"zatkiller"},"content":"                }"},{"lineNumber":154,"author":{"gitId":"zatkiller"},"content":"                "},{"lineNumber":155,"author":{"gitId":"zatkiller"},"content":"            storage.write(tasks);"},{"lineNumber":156,"author":{"gitId":"zatkiller"},"content":"        "},{"lineNumber":157,"author":{"gitId":"zatkiller"},"content":"        } catch (DukeException e) {"},{"lineNumber":158,"author":{"gitId":"zatkiller"},"content":"            return e.getMessage();"},{"lineNumber":159,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":161,"author":{"gitId":"zatkiller"},"content":"        return toReply;"},{"lineNumber":162,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zatkiller":163,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import javafx.util.Duration;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/cat3.png\"));"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/cat2.jpg\"));"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"                DialogBox.getDukeDialog(Ui.printWelcome(), dukeImage)"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"        );"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        duke \u003d d;"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"        "},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":" "},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"        );"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"        if (response.equals(Ui.printBye())) {"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"            Platform.exit();"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"        "},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"        userInput.clear();"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":64}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import duke.exceptions.DukeIncompleteInputException;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import duke.exceptions.MissingTaskInputException;"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import duke.exceptions.UnknownInputException;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":" * The Parser class parses is a class which parses the user input"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":" * to check if the user input is valid"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":" * If the user input is invalid, an exception will be thrown"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    /** Action input from user that is parsed into an array for checking */"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    private String [] parsedAction \u003d null;"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"     * Constructor to initialize the Parser object"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public Parser() {"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"        parsedAction \u003d null;"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"     * Constructor to initialize the Parser object with given action"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"     * @param  action action refers to the user input when Duke asks what it should do"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    public Parser(String action) {"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"        parsedAction \u003d action.split(\" \");"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"     * Checks the input and validates it"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"     * @throws MissingTaskInputException if adding task command has missing input"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"     * @throws DukeIncompleteInputException if command has incomplete input"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"     * @throws UnknownInputException if input is not recognized by duke"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    public void check() throws MissingTaskInputException, DukeIncompleteInputException {"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"        if (parsedAction[0].equals(\"todo\") || parsedAction[0].equals(\"deadline\")"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"                || parsedAction[0].equals(\"event\")) {"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"            if (parsedAction.length \u003c\u003d 1) {"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"                throw new MissingTaskInputException(parsedAction[0]);"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"        } else if (parsedAction[0].equals(\"done\") \u0026\u0026 parsedAction.length \u003c\u003d 1) {"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"            throw new DukeIncompleteInputException(\"done not completed\");"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        } else if (parsedAction[0].equals(\"delete\") \u0026\u0026 parsedAction.length \u003c\u003d 1) {"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"            throw new DukeIncompleteInputException(\"delete not completed\");"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"        } else if (parsedAction[0].equals(\"check\") \u0026\u0026 parsedAction.length \u003c\u003d 1) {"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"            throw new DukeIncompleteInputException(\"check not completed\");"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        } else if (parsedAction[0].equals(\"find\") \u0026\u0026 parsedAction.length \u003c\u003d 1) {"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"            throw new DukeIncompleteInputException(\"find not completed\");"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"     * Returns the result of the action parsed by the parser"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"     * @return A string array containing the parsed user input"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"    public String[] getParsedAction() {"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"        return this.parsedAction;"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":73}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import duke.exceptions.DukeOnlyIoException;"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":" * Storage class that is used for the reading and writing of the list file"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    /** Filewriter instance used to write into the file */"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    private FileWriter writer \u003d null;"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    /** File instance that will be used to load file */"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    private File file \u003d null;"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    /** Scanner instance that will be used to load file contents into Duke */"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    private Scanner sc \u003d null;"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"     * Storage class constructor to initialize the Storage object"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"     * @param filepath is the file path for loading of the file"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"    public Storage(String filepath) throws DukeOnlyIoException {"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"            this.file \u003d new File(filepath);"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"            "},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"            if (!this.file.exists()) {"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"                this.file.getParentFile().mkdir();"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"                this.file.createNewFile();"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"            sc \u003d new Scanner(this.file);"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        } catch (IOException err) {"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"            throw new DukeOnlyIoException();"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"     * Returns a arraylist of String objects that will be used to load the TaskList"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"     * @return An ArrayList of String"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"    public ArrayList\u003cString\u003e load() {"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"        while (sc.hasNext()) {"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"            String nextLine \u003d sc.nextLine();"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"            list.add(nextLine);"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        return list;"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"     * Writes into the current TaskList into file"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"     * @param list the TaskList"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"     * @throws DukeOnlyIoException when there is a IOException"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"    public void write(TaskList list) throws DukeOnlyIoException {"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"            this.writer \u003d new FileWriter(file, false);"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"            this.writer.write(list.getListToWrite());"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"            this.writer.close();"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"        } catch (IOException err) {"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"            throw new DukeOnlyIoException();"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":81}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.DeadlineTask;"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.EventTask;"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.Task;"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.ToDoTask;"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":" * TaskList class contains a list in which stores all the tasks that the user has inputted and not deltted"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"public class TaskList {"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    /** The list of tasks */"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    private List\u003cTask\u003e inputList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"     * TaskList constructor to intialize a new empty TaskList"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    public TaskList() {"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"        this.inputList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"     * TaskList constructor to intialize a new TaskList with a given ArrayList of tasks"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"     * the tasks are all stored as string format which is processed before being"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"     * added to the current task list"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"    public TaskList(ArrayList\u003cString\u003e tasks) {"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        for (String taskStr: tasks) {"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"            String[] arr \u003d taskStr.split(\"\\\\|\");"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"            for (int i \u003d 0; i \u003c arr.length; i++) {"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"                arr[i] \u003d arr[i].trim();"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"            if (arr[0].equals(\"D\")) {"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"                String[] deadline \u003d arr[3].split(\"-\");"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"                String reformattedDeadline \u003d deadline[2] + \"-\" + deadline[1] + \"-\" + deadline[0];"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"                DeadlineTask deadlineTask \u003d new DeadlineTask(arr[2], reformattedDeadline);"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"                if (arr[1].equals(\"1\")) {"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"                    deadlineTask.markAsDone();"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"                }"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"                inputList.add(deadlineTask);"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"            } else if (arr[0].equals(\"E\")) {"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"                String[] timing \u003d arr[3].split(\"-\");"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"                String reformattedTiming \u003d timing[2] + \"-\" + timing[1] + \"-\" + timing[0];"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"                EventTask eventTask \u003d new EventTask(arr[2], reformattedTiming);"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"                if (arr[1].equals(\"1\")) {"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"                    eventTask.markAsDone();"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"                inputList.add(eventTask);"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"            } else {"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"                ToDoTask toDoTask \u003d new ToDoTask(arr[2]);"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"                if (arr[1].equals(\"1\")) {"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"                    toDoTask.markAsDone();"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"                inputList.add(toDoTask);"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"     * Returns The list of tasks."},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"     * @return The task list"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"        return this.inputList;"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"     * Adds a task to the task list"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"     * @param task A task"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"    public void add(Task task) {"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"        this.inputList.add(task);"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"     * Returns The task inside the task list at the index specified"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"     * @param index index of task inside the tasklist"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"     * @return A task"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"    public Task get(int index) {"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"        return this.inputList.get(index);"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":106,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"zatkiller"},"content":"     * Returns a ToDoTask based on the user input and adds it to the list"},{"lineNumber":108,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"zatkiller"},"content":"     * @param action  The string action input by the user"},{"lineNumber":110,"author":{"gitId":"zatkiller"},"content":"     * @return A ToDoTask"},{"lineNumber":111,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"zatkiller"},"content":"    public ToDoTask handleToDoTask(String action) {"},{"lineNumber":113,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":114,"author":{"gitId":"zatkiller"},"content":"        int index \u003d action.indexOf(\" \");"},{"lineNumber":115,"author":{"gitId":"zatkiller"},"content":"        String description \u003d action.substring(index + 1);"},{"lineNumber":116,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":117,"author":{"gitId":"zatkiller"},"content":"        ToDoTask toDoTask \u003d new ToDoTask(description);"},{"lineNumber":118,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":119,"author":{"gitId":"zatkiller"},"content":"        this.add(toDoTask);"},{"lineNumber":120,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":121,"author":{"gitId":"zatkiller"},"content":"        return toDoTask;"},{"lineNumber":122,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"zatkiller"},"content":"     * Returns a EventTask based on the user input and adds it to the list"},{"lineNumber":125,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"zatkiller"},"content":"     * @param action  The string action input by the user"},{"lineNumber":127,"author":{"gitId":"zatkiller"},"content":"     * @return A EventTask"},{"lineNumber":128,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"zatkiller"},"content":"    public EventTask handleEventTask(String action) {"},{"lineNumber":130,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":131,"author":{"gitId":"zatkiller"},"content":"        int actionIndex \u003d action.indexOf(\" \");"},{"lineNumber":132,"author":{"gitId":"zatkiller"},"content":"        int descriptionIndex \u003d action.indexOf(\"/\");"},{"lineNumber":133,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":134,"author":{"gitId":"zatkiller"},"content":"        String description \u003d action.substring(actionIndex + 1, descriptionIndex - 1);"},{"lineNumber":135,"author":{"gitId":"zatkiller"},"content":"        String event \u003d action.substring(descriptionIndex + 4);"},{"lineNumber":136,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":137,"author":{"gitId":"zatkiller"},"content":"        EventTask eventTask \u003d new EventTask(description, event);"},{"lineNumber":138,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":139,"author":{"gitId":"zatkiller"},"content":"        this.add(eventTask);"},{"lineNumber":140,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":141,"author":{"gitId":"zatkiller"},"content":"        return eventTask;"},{"lineNumber":142,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":144,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"zatkiller"},"content":"     * Returns a DeadLineTask based on the user input and adds it to the list"},{"lineNumber":146,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"zatkiller"},"content":"     * @param action  The string action input by the user"},{"lineNumber":148,"author":{"gitId":"zatkiller"},"content":"     * @return A DeadLineTask"},{"lineNumber":149,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"zatkiller"},"content":"    public DeadlineTask handleDeadlineTask(String action) {"},{"lineNumber":151,"author":{"gitId":"zatkiller"},"content":"        int actionIndex \u003d action.indexOf(\" \");"},{"lineNumber":152,"author":{"gitId":"zatkiller"},"content":"        int descriptionIndex \u003d action.indexOf(\"/\");"},{"lineNumber":153,"author":{"gitId":"zatkiller"},"content":"        "},{"lineNumber":154,"author":{"gitId":"zatkiller"},"content":"        String description \u003d action.substring(actionIndex + 1, descriptionIndex - 1);"},{"lineNumber":155,"author":{"gitId":"zatkiller"},"content":"        String deadline \u003d action.substring(descriptionIndex + 4);"},{"lineNumber":156,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":157,"author":{"gitId":"zatkiller"},"content":"        DeadlineTask deadlineTask \u003d new DeadlineTask(description, deadline);"},{"lineNumber":158,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":159,"author":{"gitId":"zatkiller"},"content":"        this.add(deadlineTask);"},{"lineNumber":160,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":161,"author":{"gitId":"zatkiller"},"content":"        return deadlineTask;"},{"lineNumber":162,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":164,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"zatkiller"},"content":"     * Returns A task that is mark as done"},{"lineNumber":166,"author":{"gitId":"zatkiller"},"content":"     * The task at the specified index is"},{"lineNumber":167,"author":{"gitId":"zatkiller"},"content":"     * marked as done before being returned"},{"lineNumber":168,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"zatkiller"},"content":"     * @param index index of task in list"},{"lineNumber":170,"author":{"gitId":"zatkiller"},"content":"     * @return Task that is marked"},{"lineNumber":171,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"zatkiller"},"content":"    public Task handleDone(int index) {"},{"lineNumber":173,"author":{"gitId":"zatkiller"},"content":"        Task markDone \u003d this.inputList.get(index - 1);"},{"lineNumber":174,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":175,"author":{"gitId":"zatkiller"},"content":"        markDone.markAsDone();"},{"lineNumber":176,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":177,"author":{"gitId":"zatkiller"},"content":"        return markDone;"},{"lineNumber":178,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":180,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"zatkiller"},"content":"     * Returns the task that was at specified index is now removed."},{"lineNumber":182,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"zatkiller"},"content":"     * @param index index of Task in list"},{"lineNumber":184,"author":{"gitId":"zatkiller"},"content":"     * @return The task that is removed"},{"lineNumber":185,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"zatkiller"},"content":"    public Task handleDelete(int index) {"},{"lineNumber":187,"author":{"gitId":"zatkiller"},"content":"        Task task \u003d this.inputList.remove(index - 1);"},{"lineNumber":188,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":189,"author":{"gitId":"zatkiller"},"content":"        return task;"},{"lineNumber":190,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":192,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"zatkiller"},"content":"     * Returns The String that will be used to write into the file."},{"lineNumber":194,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":195,"author":{"gitId":"zatkiller"},"content":"     * @return A string to be written into the file."},{"lineNumber":196,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"zatkiller"},"content":"    public String getListToWrite() {"},{"lineNumber":198,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":199,"author":{"gitId":"zatkiller"},"content":"        String result \u003d \"\";"},{"lineNumber":200,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":201,"author":{"gitId":"zatkiller"},"content":"        for (int i \u003d 0; i \u003c inputList.size(); i++) {"},{"lineNumber":202,"author":{"gitId":"zatkiller"},"content":"            Task task \u003d inputList.get(i);"},{"lineNumber":203,"author":{"gitId":"zatkiller"},"content":"            char type \u003d task.getType();"},{"lineNumber":204,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":205,"author":{"gitId":"zatkiller"},"content":"            String status \u003d task.getStatusIcon().equals(\" \") ? \"0\" : \"1\";"},{"lineNumber":206,"author":{"gitId":"zatkiller"},"content":"            String description \u003d task.getDescription();"},{"lineNumber":207,"author":{"gitId":"zatkiller"},"content":"            String date \u003d \"\";"},{"lineNumber":208,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":209,"author":{"gitId":"zatkiller"},"content":"            if (type \u003d\u003d \u0027D\u0027) {"},{"lineNumber":210,"author":{"gitId":"zatkiller"},"content":"                DeadlineTask deadlineTask \u003d (DeadlineTask) task;"},{"lineNumber":211,"author":{"gitId":"zatkiller"},"content":"                date \u003d deadlineTask.getUnformattedDeadline();"},{"lineNumber":212,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":213,"author":{"gitId":"zatkiller"},"content":"            } else if (type \u003d\u003d \u0027E\u0027) {"},{"lineNumber":214,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":215,"author":{"gitId":"zatkiller"},"content":"                EventTask eventTask \u003d (EventTask) task;"},{"lineNumber":216,"author":{"gitId":"zatkiller"},"content":"                date \u003d eventTask.getUnformattedTiming();;"},{"lineNumber":217,"author":{"gitId":"zatkiller"},"content":"            }"},{"lineNumber":218,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":219,"author":{"gitId":"zatkiller"},"content":"            result +\u003d type + \" | \" + status + \" | \" + description;"},{"lineNumber":220,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":221,"author":{"gitId":"zatkiller"},"content":"            if (date.equals(\"\")) {"},{"lineNumber":222,"author":{"gitId":"zatkiller"},"content":"                result +\u003d \"\\n\";"},{"lineNumber":223,"author":{"gitId":"zatkiller"},"content":"            } else {"},{"lineNumber":224,"author":{"gitId":"zatkiller"},"content":"                result +\u003d \" | \" + date + \"\\n\";"},{"lineNumber":225,"author":{"gitId":"zatkiller"},"content":"            }"},{"lineNumber":226,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":228,"author":{"gitId":"zatkiller"},"content":"        return result;"},{"lineNumber":229,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":231,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":232,"author":{"gitId":"zatkiller"},"content":"     * Returns a String containing the tasks that have this date"},{"lineNumber":233,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":234,"author":{"gitId":"zatkiller"},"content":"     * @param date the date to search for"},{"lineNumber":235,"author":{"gitId":"zatkiller"},"content":"     * @return A string of tasks to be printed"},{"lineNumber":236,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"zatkiller"},"content":"    public String findOnDateTasks(String date) {"},{"lineNumber":238,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":239,"author":{"gitId":"zatkiller"},"content":"        LocalDate toSearch \u003d LocalDate.parse(date);"},{"lineNumber":240,"author":{"gitId":"zatkiller"},"content":"        String result \u003d \"Here are the tasks due on the date: \\n\";"},{"lineNumber":241,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":242,"author":{"gitId":"zatkiller"},"content":"        for (Task task: inputList) {"},{"lineNumber":243,"author":{"gitId":"zatkiller"},"content":"            if (task.getType() \u003d\u003d \u0027D\u0027) {"},{"lineNumber":244,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":245,"author":{"gitId":"zatkiller"},"content":"                DeadlineTask deadlineTask \u003d (DeadlineTask) task;"},{"lineNumber":246,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":247,"author":{"gitId":"zatkiller"},"content":"                if (deadlineTask.getDeadlineAsLocalDate().equals(toSearch)) {"},{"lineNumber":248,"author":{"gitId":"zatkiller"},"content":"                    result +\u003d deadlineTask + \"\\n\";"},{"lineNumber":249,"author":{"gitId":"zatkiller"},"content":"                }"},{"lineNumber":250,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":251,"author":{"gitId":"zatkiller"},"content":"            } else if (task.getType() \u003d\u003d \u0027E\u0027) {"},{"lineNumber":252,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":253,"author":{"gitId":"zatkiller"},"content":"                EventTask eventTask \u003d (EventTask) task;"},{"lineNumber":254,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":255,"author":{"gitId":"zatkiller"},"content":"                if (eventTask.getTimingAsLocalDate().equals(toSearch)) {"},{"lineNumber":256,"author":{"gitId":"zatkiller"},"content":"                    result +\u003d eventTask + \"\\n\";"},{"lineNumber":257,"author":{"gitId":"zatkiller"},"content":"                }"},{"lineNumber":258,"author":{"gitId":"zatkiller"},"content":"            }"},{"lineNumber":259,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":260,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":261,"author":{"gitId":"zatkiller"},"content":"        return result;"},{"lineNumber":262,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"zatkiller"},"content":"     * Returns a List of tasks that match the keyword inputted"},{"lineNumber":265,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":266,"author":{"gitId":"zatkiller"},"content":"     * @param keyword the keyword to search for in the tasks"},{"lineNumber":267,"author":{"gitId":"zatkiller"},"content":"     * @return the list of tasks which contain that keyword"},{"lineNumber":268,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"zatkiller"},"content":"    public List\u003cTask\u003e getMatch(String keyword) {"},{"lineNumber":270,"author":{"gitId":"zatkiller"},"content":"        List\u003cTask\u003e matchList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":271,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":272,"author":{"gitId":"zatkiller"},"content":"        for (Task task: inputList) {"},{"lineNumber":273,"author":{"gitId":"zatkiller"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":274,"author":{"gitId":"zatkiller"},"content":"                matchList.add(task);"},{"lineNumber":275,"author":{"gitId":"zatkiller"},"content":"            }"},{"lineNumber":276,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":278,"author":{"gitId":"zatkiller"},"content":"        return matchList;"},{"lineNumber":279,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":280}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":" * UI class that is responsible for reading user input and printing"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"     * Constructor to initialize the UI Class"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    public Ui() {"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"     * Prints the welcome message."},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    public static String printWelcome() {"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        String introduction \u003d \"     Hello! I\u0027m Duke\\n\" + \"     What can I do for you?\\n\";"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"        return introduction;"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"     * Prints the goodbye message."},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    public static String printBye() {"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        String farewell \u003d \"     Bye. Hope to see you again soon!\\n\";"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"        return farewell;"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"     * Prints out a task."},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"     * @param task  A task."},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"    public String printTask(Task task) {"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        return task.toString() + \"\\n\";"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        //System.out.println(task);"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"     * Prints out the string input"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"     * @param str A string"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"    public String print(String str) {"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"        return str;"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"     * Prints the message when a task is added."},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"    public String addPrint() {"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"        String printAddTask \u003d \"     Got it. I\u0027ve added this task: \\n\";"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"        return printAddTask;"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"     * Prints the error when attempting to load file message."},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"    public String showLoadingError() {"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"    "},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"        String unableToLoad \u003d \"     Unable to load file. Creating new one\\n\";"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"        return unableToLoad;"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"     * Prints out the number of tasks inside the TaskList"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"     * @param list Tasklist"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"zatkiller"},"content":"    public String countTasks(TaskList list) {"},{"lineNumber":77,"author":{"gitId":"zatkiller"},"content":"        String countTasksMessage \u003d \"     Now you have \" + list.getList().size() + \" tasks in the list. \\n\";"},{"lineNumber":78,"author":{"gitId":"zatkiller"},"content":"        return countTasksMessage;"},{"lineNumber":79,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":81,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"zatkiller"},"content":"     * Prints the message when a task is removed."},{"lineNumber":83,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"zatkiller"},"content":"    public static String printRemoved() {"},{"lineNumber":85,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":86,"author":{"gitId":"zatkiller"},"content":"        String removeTasksMessage \u003d \"     Noted. I\u0027ve removed this task: \\n\";"},{"lineNumber":87,"author":{"gitId":"zatkiller"},"content":"        return removeTasksMessage;"},{"lineNumber":88,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":90,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"zatkiller"},"content":"     * Prints the message when a task is marked."},{"lineNumber":92,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"zatkiller"},"content":"    public static String printMarked() {"},{"lineNumber":94,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":95,"author":{"gitId":"zatkiller"},"content":"        String taskMarkedMessage \u003d \"     Nice! I\u0027ve marked this task as done:\\n\";"},{"lineNumber":96,"author":{"gitId":"zatkiller"},"content":"        return taskMarkedMessage;"},{"lineNumber":97,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"zatkiller"},"content":"     * @param list the Task list to be printed"},{"lineNumber":100,"author":{"gitId":"zatkiller"},"content":"     * Prints out the current task list"},{"lineNumber":101,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"zatkiller"},"content":"    public String printList(List\u003cTask\u003e list) {"},{"lineNumber":103,"author":{"gitId":"zatkiller"},"content":"        String printedList \u003d \"\";"},{"lineNumber":104,"author":{"gitId":"zatkiller"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":105,"author":{"gitId":"zatkiller"},"content":"            Task task \u003d list.get(i);"},{"lineNumber":106,"author":{"gitId":"zatkiller"},"content":"            printedList +\u003d \"      \" + (i + 1) + \".\" + task.toString().trim() + \"\\n\";"},{"lineNumber":107,"author":{"gitId":"zatkiller"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"zatkiller"},"content":"        return printedList;"},{"lineNumber":109,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"zatkiller"},"content":"     * Prints out the number of tasks inside the TaskList on list command."},{"lineNumber":112,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"zatkiller"},"content":"     * @param list The tasklist."},{"lineNumber":114,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"zatkiller"},"content":"    public String printStored(TaskList list) {"},{"lineNumber":116,"author":{"gitId":"zatkiller"},"content":"        List\u003cTask\u003e taskList \u003d list.getList();"},{"lineNumber":117,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":118,"author":{"gitId":"zatkiller"},"content":"        String taskListMessage \u003d \"     Here are the tasks in your list:\\n\";"},{"lineNumber":119,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":120,"author":{"gitId":"zatkiller"},"content":"        return taskListMessage + this.printList(taskList);"},{"lineNumber":121,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"zatkiller"},"content":"     * Prints out the matching message when user is finding for a keyword in the list"},{"lineNumber":124,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"zatkiller"},"content":"    public String printMatching() {"},{"lineNumber":126,"author":{"gitId":"zatkiller"},"content":"        String printMatchingMessage \u003d \"     Here are the matching tasks in your list: \\n\";"},{"lineNumber":127,"author":{"gitId":"zatkiller"},"content":"        return printMatchingMessage;"},{"lineNumber":128,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":129}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * DukeException class is a class for all the exceptions thrown"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * during execution of the Duke program"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * It inherit from the Java exception class"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"     * DukeException constructor used to initialize the Exception"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"     * @param message message of the exception"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public DukeException(String message) {"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":18}},{"path":"src/main/java/duke/exceptions/DukeFileNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * DukeFileNotFoundException class is a class for all the exceptions thrown"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * when the file to load cannot be found"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * It inherit from the DukeException class"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"public class DukeFileNotFoundException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"     * DukeFileNotFoundException class constructor"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    public DukeFileNotFoundException () {"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"        super(\"File not found!\");"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":16}},{"path":"src/main/java/duke/exceptions/DukeIncompleteInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * DukeIncompleteInputException class is a class for all the exceptions thrown"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * Caused by a command that does not add a task to the task list"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * during execution of the Duke program"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" * E.g. find, check. done"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":" *"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":" * It inherit from the Java DukeException class"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"public class DukeIncompleteInputException extends DukeException {"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"     * DukeException constructor used to initialize the Exception"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"     * @param action causing the exception to be thrown"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    public DukeIncompleteInputException(String action) {"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"        super(action);"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":21}},{"path":"src/main/java/duke/exceptions/DukeOnlyIoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * DukeOnlyIOException class is a class for all the IO exceptions thrown during Duke"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * It inherit from the DukeException class"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"public class DukeOnlyIoException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"     * DukeOnlyIOException constructor used to initialize the Exception"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    public DukeOnlyIoException() {"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"        super(\"A IO Exception occurred!\");"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":16}},{"path":"src/main/java/duke/exceptions/MissingTaskInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * MissingTaskInputException class is a class for all the exceptions thrown when"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * A task related command is inputted but there is incomplete input"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * It inherit from DukeException class"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"public class MissingTaskInputException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"     * MissingTaskInput class constructor to initialize an instance"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"     * @param action the action causing the exception to be thrown"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public MissingTaskInputException(String action) {"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"        super(\"     ☹ OOPS!!! The description of a \" + action + \" cannot be empty.\");"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":18}},{"path":"src/main/java/duke/exceptions/UnknownInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * UnknownInputException class is a class for all the exceptions thrown"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * when Duke faces an input it does not know"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" *"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" * It inherit from the DukeException class"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"public class UnknownInputException extends DukeException {"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"     * UnknownInputException constructor"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    public UnknownInputException () {"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"        super(\"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":17}},{"path":"src/main/java/duke/tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * DetailTask class models an actual task that the user is about to do or has completed"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" * with a given deadline. It also inherits from the Task class."},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":" * Its details include the description"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"    /** The deadline of the deadline task */"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    private LocalDate deadline;"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"     * Constructor to initalize a Deadline Task"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"     * @param description the description of the task"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"     * @param deadline the task deadline"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"    public DeadlineTask(String description, String deadline) {"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"        super(description, \"[D]\");"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"        this.deadline \u003d LocalDate.parse(deadline);"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":"     * Returns the deadline of the task formatted to be dd-MM-YYYY"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"     * with closing paranthesis"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"     * @return deadline."},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"    public String getDeadline() {"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        return \"(by: \" + this.deadline.format(format) + \")\";"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"     * Returns the deadline of the deadline task formatted to be dd-MM-YYYY."},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"     * @return deadline."},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"    public String getUnformattedDeadline() {"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        return this.deadline.format(format);"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"     * Returns the deadline as a LocalDate Object"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"     * @return deadline."},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"    public LocalDate getDeadlineAsLocalDate() {"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"        return this.deadline;"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"     * toString method of DeadlineTask which prints out details of the deadline task"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"        return \"       \" + this.type + super.toString().trim() + \" \" + this.getDeadline();"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":62}},{"path":"src/main/java/duke/tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * EventTask class models an actual task that the user is about to do or has completed"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" * with a given timing of the task. It also inherits from the Task class."},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":" * Its details include the description"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"public class EventTask extends Task {"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    /** Timing of the event task */"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    private LocalDate timing;"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"     * Constructor to initialize the EventTask"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"     * @param description the description of the EventTask"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"     * @param timing the EventTask timing"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    public EventTask(String description, String timing) {"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"        super(description, \"[E]\");"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        this.timing \u003d LocalDate.parse(timing);"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"     * Returns the timing of the event task formatted to be dd-MM-YYYY"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"     * and enclosed paranthesis."},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"     * @return timing."},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"    public String getTiming() {"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"        return \"(at: \" + this.timing.format(format) + \")\";"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"     * Returns the timing of the event task formatted to be dd-MM-YYYY."},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"     * @return timing."},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":"    public String getUnformattedTiming() {"},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"        return this.timing.format(format);"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":"     * Returns the timing of the event task as a LocalDate"},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"     * @return timing"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"    public LocalDate getTimingAsLocalDate() {"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"        return this.timing;"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"     * toString method of EventTask which prints out details of the EventTask"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"        return \"       \" + this.type + super.toString().trim() + \" \" + getTiming();"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":64}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * Task class models an actual task that the user is about to do or has completed"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * Its details include the description as well as the type of the task"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"    /** description about task */"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"    /** status on whether task is completed */"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    /** type of Task */"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    protected String type \u003d \"\";"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"     * @param description the description of the task"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"     * @param  type the task type"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    public Task(String description, String type) {"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"        this.type \u003d type;"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"        this.isDone \u003d false;"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"zatkiller"},"content":"     * Returns a String icon based on whether task has been completed"},{"lineNumber":28,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"zatkiller"},"content":"     * @return Status Icon"},{"lineNumber":30,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"zatkiller"},"content":"    public String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"zatkiller"},"content":"        return (isDone ? \"\\u2718\" : \" \");"},{"lineNumber":33,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":35,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"zatkiller"},"content":"     * Returns the status icon with enclosing brackets"},{"lineNumber":37,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"zatkiller"},"content":"     * @return Status Icon with brackets"},{"lineNumber":39,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"zatkiller"},"content":"    public String getStatus() {"},{"lineNumber":41,"author":{"gitId":"zatkiller"},"content":"        return \"[\" + getStatusIcon() + \"]\";"},{"lineNumber":42,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":44,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"zatkiller"},"content":"     * Sets a task to be done"},{"lineNumber":46,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"zatkiller"},"content":"    public void markAsDone() {"},{"lineNumber":48,"author":{"gitId":"zatkiller"},"content":"        this.isDone \u003d true;"},{"lineNumber":49,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":51,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"zatkiller"},"content":"     * Returns the character type"},{"lineNumber":53,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"zatkiller"},"content":"     * @return Character"},{"lineNumber":55,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"zatkiller"},"content":"    public char getType() {"},{"lineNumber":57,"author":{"gitId":"zatkiller"},"content":"        return type.charAt(1);"},{"lineNumber":58,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":60,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"zatkiller"},"content":"     * Returns the task description"},{"lineNumber":62,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"zatkiller"},"content":"     * @return task description"},{"lineNumber":64,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"zatkiller"},"content":"    public String getDescription() {"},{"lineNumber":66,"author":{"gitId":"zatkiller"},"content":"        return this.description;"},{"lineNumber":67,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"zatkiller"},"content":"     * toString method of Task which prints out details of the task"},{"lineNumber":70,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"zatkiller"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"zatkiller"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"zatkiller"},"content":"        return \"       \" + this.getStatus() + \" \" + this.description;"},{"lineNumber":74,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":75}},{"path":"src/main/java/duke/tasks/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":" * TodoTask class models an actual task that the user is about to do or has completed"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":" * It also inherits from the Task class."},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":" * Its details include the description"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"public class ToDoTask extends Task {"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"     * Constructor to initialize the ToDoTask"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"     * @param description the description of the EventTask"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"    public ToDoTask(String description) {"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"        super(description, \"[T]\");"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"     * toString method of ToDoTask which prints out details of the ToDoTask"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"zatkiller"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"zatkiller"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"zatkiller"},"content":"        return \"       \" + this.type + super.toString().trim();"},{"lineNumber":23,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":24}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"zatkiller":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"        \u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"        \u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"        \u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":"        \u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"        \u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"zatkiller"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"zatkiller"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"zatkiller"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"zatkiller"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"zatkiller"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"zatkiller":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    public void dummyTest() {"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":12}},{"path":"src/test/java/duke/tasks/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"public class DeadlineTaskTest {"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"    public void testEventGetType() {"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"testing\", \"2020-01-01\");"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"        assertEquals(\u0027D\u0027, task.getType());"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":14}},{"path":"src/test/java/duke/tasks/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"public class EventTaskTest {"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"    public void testEventGetType() {"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"        EventTask task \u003d new EventTask(\"testing\", \"2020-01-01\");"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"        assertEquals(\u0027E\u0027, task.getType());"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":14}},{"path":"src/test/java/duke/tasks/ToDoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":7,"author":{"gitId":"zatkiller"},"content":"public class ToDoTaskTest {"},{"lineNumber":8,"author":{"gitId":"zatkiller"},"content":""},{"lineNumber":9,"author":{"gitId":"zatkiller"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"zatkiller"},"content":"    public void testEventGetType() {"},{"lineNumber":11,"author":{"gitId":"zatkiller"},"content":"        ToDoTask task \u003d new ToDoTask(\"testing\");"},{"lineNumber":12,"author":{"gitId":"zatkiller"},"content":"        assertEquals(\u0027T\u0027, task.getType());"},{"lineNumber":13,"author":{"gitId":"zatkiller"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zatkiller"},"content":"}"}],"authorContributionMap":{"zatkiller":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zatkiller"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"zatkiller"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"zatkiller"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"zatkiller"},"content":"list"},{"lineNumber":5,"author":{"gitId":"zatkiller"},"content":"bye"}],"authorContributionMap":{"zatkiller":5}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"zatkiller"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"zatkiller":1,"-":33}}]
