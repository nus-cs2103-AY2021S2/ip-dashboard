[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"javafx {"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    version\u003d\u002711\u0027"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    modules\u003d[\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"}"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"Ellevy":22}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"T | 1 | join sports club"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"D | 1 | return book  | 2019-09-09"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"E | 0 | meeting | 2020-01-01"}],"authorContributionMap":{"Ellevy":4}},{"path":"src/main/java/ArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class ArgumentException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Wrong Arguments Specified: \\n\";"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"     * Error type according to the list below:"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 1. Format error of a todo-task \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 2. Format error of a deadline-task \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 3. Format error of a event-task \u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 4. Format error of a done or delete command \u003c/p\u003e"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected int type;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created ArgumentException object with the error type."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @param type Error type according to the list below:"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 1. Format error of a todo-task \u003c/p\u003e"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 2. Format error of a deadline-task \u003c/p\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 3. Format error of a event-task \u003c/p\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 4. Format error of a done or delete command \u003c/p\u003e"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public ArgumentException(int type) {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        this.type \u003d type;"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message depending on the specific error it is associated with"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        switch (this.type) {"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        case 1:"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"            return super.toString()"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"                + \"A todo-task should be specified as follows \\n \""},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"                + \"todo \u003ctask_description\u003e\";"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        case 2:"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"            return super.toString()"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"                + \"A deadline-task should be specified as follows \\n \""},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"                + \"deadline \u003ctask_description\u003e /by \u003ctask_deadline\u003e\";"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        case 3:"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            return super.toString()"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"                + \"A event-task should be specified as follows \\n \""},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"                + \"event \u003cevent_description\u003e /at \u003cevent_date\u003e\";"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        case 4:"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"            return super.toString()"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"                + \"Please enter a valid item number in the list.\";"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        default:"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"            return super.toString();"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":55}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":" * Represents a deadline-task object that inherits from a task object."},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":" * Contains a description, status on whether the task is done and deadline of task."},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /** Stores the date this event will be due by. */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate by;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created deadline-task object with a description and the date."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done."},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * @param by Date of the task (yyyy-mm-dd)."},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the date is in the wrong format."},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public Deadline(String description, boolean isDone, String by) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            throw new DukeException(\"Incorrect date format: Please specify the date as yyyy-mm-dd :)\");"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * Returns string object that formats the deadline-task to be saved."},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * Format: (Date format: d MMM yyyy)"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Deadline-task that is done: D | 1 | \u0026lt;task_description\u0026lt; | \u0026lt;date\u0026lt; \u003c/p\u003e"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Deadline-task that is not done: D | 0 | \u0026lt;task_description\u0026lt; \u0026lt;date\u0026lt; \u003c/p\u003e"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     * @return String representing deadline-task in format to be saved into txt."},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        return \"D | \" + super.saveTask() + \" | \" + this.by;"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the deadline-task."},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     * @return String representing whether the deadline-task is done and the deadline-task description with the date."},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        return \"[D]\" + super.toString() + \" (By: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":52}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"     * Creates a DialogBox for User with string and image."},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     * @return DialogBox that represents the user input and image."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"        return new DialogBox(text, img);"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"     * Creates a DialogBox for Duke with string and image."},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"     * @return DialogBox that represents the processed output and image."},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        db.flip();"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        return db;"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":69}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.Scene;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":" * Duke keeps track of a list of tasks."},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"public class Duke extends Application {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    /** Storage that controls saving and reading file. */"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    /** Parser that processes commands. */"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    private Parser parser;"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    /** List of tasks. */"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    private VBox dialogContainer;"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    private TextField userInput;"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    private Button sendButton;"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    private Scene scene;"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bot.png\"));"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Duke object with empty task list, storage and parser."},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    public Duke() {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        storage \u003d new Storage(tasks);"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        parser \u003d new Parser(tasks);"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     * Returns the storage of this Duke object."},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     * @return Storage object of this Duke object."},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public Storage getStorage() {"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        return this.storage;"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     * Returns the parser of this Duke object."},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * @return Parser object of this Duke object."},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    public Parser getParser() {"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        return this.parser;"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"    public void start(Stage stage) {"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        //Step 1. Setting up required components"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        //The container for the content of the chat to scroll."},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"        userInput \u003d new TextField();"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        stage.setScene(scene);"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        stage.show();"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        //Step 2. Formatting the window to look as expected"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"        stage.setResizable(false);"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"        //Part 3. Add functionality to handle user input."},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"            handleUserInput(duke);"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"        });"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"            handleUserInput(duke);"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"        });"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes."},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"     * Iteration 2:"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"    private void handleUserInput(Duke duke) {"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"        String response \u003d duke.getResponse(input, duke);"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":"            DialogBox.getUserDialog(input, userImage),"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"            DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"        );"},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"        userInput.clear();"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"Ellevy"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":143,"author":{"gitId":"Ellevy"},"content":"     * Replace this stub with your completed method."},{"lineNumber":144,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"Ellevy"},"content":"    public String getResponse(String input, Duke duke) {"},{"lineNumber":146,"author":{"gitId":"Ellevy"},"content":"        String processedString \u003d duke.parser.processCommand(input);"},{"lineNumber":147,"author":{"gitId":"Ellevy"},"content":"        return processedString;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Ellevy":147,"-":2}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DukeException object without a message."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    DukeException() {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"        super();"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DukeException object with a given message."},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     * @param message Error message given for the exception"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    DukeException(String message) {"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        return getMessage();"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":25}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":" * Represents an event-task object that inherits from a task object."},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":" * Contains a description, status on whether the event is done and date of event."},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /** Stores the date this event will be at. */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate at;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created event-task object with a description and the date."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done."},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * @param at Date of the task (yyyy-mm-dd)."},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the date is in the wrong format."},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public Event(String description, boolean isDone, String at) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"            this.at \u003d LocalDate.parse(at);"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            throw new DukeException(\"Incorrect date format: Please specify the date as yyyy-mm-dd :)\");"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * Returns string object that formats the event-task to be saved."},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * Format: (Date format: d MMM yyyy)"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Event-task that is done: E | 1 | \u0026lt;task_description\u0026lt; | \u0026lt;date\u0026lt; \u003c/p\u003e"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Event-task that is not done: E | 0 | \u0026lt;task_description\u0026lt; \u0026lt;date\u0026lt; \u003c/p\u003e"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     * @return String representing event-task in format to be saved into txt."},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        return \"E | \" + super.saveTask() + \" | \" + this.at;"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the event-task."},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     * @return String representing whether the event-task is done and the event-task description with the date."},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        return \"[E]\" + super.toString() + \" (At: \" + at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":52}},{"path":"src/main/java/KeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class KeywordException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     * Fixed message for all KeywordExceptions"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Unidentified Keyword: Please try again using the correct keywords and order :)\";"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created KeywordException object with the default MESSAGE."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    public KeywordException() {"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        return super.toString();"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":24}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"            GridPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().greetings();"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"public class MainWindow extends GridPane {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    private Duke duke;"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bot.png\"));"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    public void initialize() {"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * Runs Duke and access storage."},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * @param d Duke object used."},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            duke.getStorage().loadData();"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"File not found :(\");"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     * Greets the user and prints out list in storage."},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public void greetings() {"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"            DialogBox.getDukeDialog(\"Welcome to Duke! \\n\" + duke.getParser().printList(), dukeImage)"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    private void handleUserInput() {"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        if (\"bye\".equals(input)) {"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"            Platform.setImplicitExit(true);"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"            Platform.exit();"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            String response \u003d duke.getResponse(input, duke);"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"            duke.getStorage().writeTaskList();"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"            );"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"            userInput.clear();"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":77}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.util.Arrays;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" * Parser processes commands."},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /** List of tasks */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Parser object with a given list of tasks."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     * @param tasks List of tasks to process commands on."},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    public Parser(TaskList tasks) {"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     * Processes a command given by user."},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Commands recognised: \u003c/p\u003e"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 1. List out all tasks in list: list \u003c/p\u003e"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 2. Set task in list as done: done \u0026lt;position_of_task_in_list\u0026gt; \u003c/p\u003e"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 3. Delete task in list: delete \u0026lt;position_of_task_in_list\u0026gt; \u003c/p\u003e"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 4. Add todo-task: todo \u0026lt;task_description\u0026gt; \u003c/p\u003e"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 5. Add deadline-task: deadline \u0026lt;task_description\u0026gt; /by \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 6. Add event-task: event \u0026lt;event_description\u0026gt; /at \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 7. Find task using keyword: find \u0026lt;keyword\u0026gt; \u003c/p\u003e"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 7. Exit Duke: bye \u003c/p\u003e"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Command from user."},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    protected String processCommand(String userInput) {"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        if (\"list\".equals(userInput)) {"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"            return printList();"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"done \")) {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"            return setAsDone(userInput);"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"delete \")) {"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"            return deleteFromList(userInput);"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"find \")) {"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"            return findFromList(userInput);"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            return addTaskToList(userInput, false);"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"     * Sets a task as done and prints out the task marked as done."},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: done \u0026lt;indexOfItem\u0026gt;"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    protected String setAsDone(String userInput) {"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"            int indexToMark \u003d Integer.parseInt(userInput.substring(5));"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"            Task ts \u003d tasks.getTask(indexToMark);"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"            ts.markAsDone();"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"Nice! I\u0027ve marked this task as done: \\n\";"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"  \" + ts;"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"            return textToReturn;"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"            return new ArgumentException(4).toString();"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"     * Deletes a task in the list and prints out the task deleted with the remaining number of tasks in the list."},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: delete \u0026lt;indexOfItem\u0026gt;"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"    protected String deleteFromList(String userInput) {"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"            int indexToDelete \u003d Integer.parseInt(userInput.substring(7));"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"            Task ts \u003d tasks.getTask(indexToDelete);"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"            tasks.removeTask(indexToDelete);"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"Okay! I\u0027ve removed this task: \\n\";"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"  \" + ts;"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"\\nNow you have \" + tasks.getSize() + \" tasks in the list.\";"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"            return textToReturn;"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"            return new ArgumentException(4).toString();"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"     * Finds all tasks in the list that matches the keyword given by user."},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: find \u0026lt;keyword\u0026gt;"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"    protected String findFromList(String userInput) {"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"        TaskList tasksMatchingKeyword \u003d new TaskList();"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"        String keyword \u003d userInput.substring(5);"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.getSize(); i++) {"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"            Task task \u003d tasks.getTask(i);"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"                tasksMatchingKeyword.addTask(task);"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"        return printList(tasksMatchingKeyword);"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"     * Adds a task into the list and prints out the task added with the number of tasks in the list."},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the given formats for each task type:"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e todo task: todo \u0026lt;task_description\u0026gt; \u003c/p\u003e"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e deadline task: deadline \u0026lt;task_description\u0026gt; /by \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e event task: event \u0026lt;event_description\u0026gt; /at \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"     * @param isDone True if task to be added is done, else false."},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"    protected String addTaskToList(String userInput, boolean isDone) {"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"        if (userInput.startsWith(\"todo \")) {"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"todo \");"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"            if (splits.length \u003d\u003d 2) {"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"                Todo addedTask \u003d new Todo(Arrays.asList(splits).get(1), isDone);"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"                tasks.addTask(addedTask);"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"                textToReturn +\u003d \"Got it, I\u0027ve added this task to the list: \\n\";"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"                textToReturn +\u003d \"  \" + addedTask;"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"                textToReturn \u003d new ArgumentException(1).toString();"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"deadline \")) {"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"deadline |/by \");"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"            if ((splits.length \u003d\u003d 3) \u0026\u0026 !(splits[1].equals(\"\")) \u0026\u0026 !(splits[2].equals(\"\"))) {"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"                try {"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"                    Deadline addedTask \u003d new Deadline(Arrays.asList(splits).get(1),"},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":"                            isDone, Arrays.asList(splits).get(2));"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"                    tasks.addTask(addedTask);"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"                    textToReturn +\u003d \"Got it, I\u0027ve added this task to the list: \\n\";"},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"                    textToReturn +\u003d \"  \" + addedTask;"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":"                } catch (DukeException ex) {"},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":"                    textToReturn \u003d ex.toString();"},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"                }"},{"lineNumber":142,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":143,"author":{"gitId":"Ellevy"},"content":"                textToReturn \u003d new ArgumentException(2).toString();"},{"lineNumber":144,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"event \")) {"},{"lineNumber":146,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"event | /at \");"},{"lineNumber":147,"author":{"gitId":"Ellevy"},"content":"            if ((splits.length \u003d\u003d 3) \u0026\u0026 !(splits[1].equals(\"\")) \u0026\u0026 !(splits[2].equals(\"\"))) {"},{"lineNumber":148,"author":{"gitId":"Ellevy"},"content":"                try {"},{"lineNumber":149,"author":{"gitId":"Ellevy"},"content":"                    Event addedTask \u003d new Event(Arrays.asList(splits).get(1),"},{"lineNumber":150,"author":{"gitId":"Ellevy"},"content":"                            isDone, Arrays.asList(splits).get(2));"},{"lineNumber":151,"author":{"gitId":"Ellevy"},"content":"                    tasks.addTask(addedTask);"},{"lineNumber":152,"author":{"gitId":"Ellevy"},"content":"                    textToReturn +\u003d \"Got it, I\u0027ve added this task to the list: \\n\";"},{"lineNumber":153,"author":{"gitId":"Ellevy"},"content":"                    textToReturn +\u003d \"  \" + addedTask;"},{"lineNumber":154,"author":{"gitId":"Ellevy"},"content":"                } catch (DukeException ex) {"},{"lineNumber":155,"author":{"gitId":"Ellevy"},"content":"                    textToReturn \u003d ex.toString();"},{"lineNumber":156,"author":{"gitId":"Ellevy"},"content":"                }"},{"lineNumber":157,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":158,"author":{"gitId":"Ellevy"},"content":"                textToReturn \u003d new ArgumentException(3).toString();"},{"lineNumber":159,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":161,"author":{"gitId":"Ellevy"},"content":"            textToReturn \u003d new KeywordException().toString();"},{"lineNumber":162,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"Ellevy"},"content":"        textToReturn +\u003d \"\\nYou currently have \" + tasks.getSize() + \" tasks in the list.\";"},{"lineNumber":164,"author":{"gitId":"Ellevy"},"content":"        return textToReturn;"},{"lineNumber":165,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":167,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"Ellevy"},"content":"     * Returns the representation of the list of all events."},{"lineNumber":169,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the list of all events."},{"lineNumber":171,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"Ellevy"},"content":"    protected String printList() {"},{"lineNumber":173,"author":{"gitId":"Ellevy"},"content":"        String listRepresentation \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":174,"author":{"gitId":"Ellevy"},"content":"        listRepresentation +\u003d tasks.toString();"},{"lineNumber":175,"author":{"gitId":"Ellevy"},"content":"        return listRepresentation;"},{"lineNumber":176,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":178,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"Ellevy"},"content":"     * Returns the list of all matching events."},{"lineNumber":180,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":181,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the list of all matching events."},{"lineNumber":182,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"Ellevy"},"content":"    protected String printList(TaskList tasks) {"},{"lineNumber":184,"author":{"gitId":"Ellevy"},"content":"        String listRepresentation \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":185,"author":{"gitId":"Ellevy"},"content":"        listRepresentation +\u003d tasks.toString();"},{"lineNumber":186,"author":{"gitId":"Ellevy"},"content":"        return listRepresentation;"},{"lineNumber":187,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":189,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":189}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":" * Storage controls saving into and reading from txt files."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    /** Constant path of folder that the txt file will be in. */"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    private static final String DATA_FOLDER_PATH \u003d \"data\";"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    /** Constant path to txt file. */"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    private static final String DUKE_FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    /** List of tasks */"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Storage object with a given list of tasks."},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"     * @param tasks List of tasks to save."},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    public Storage(TaskList tasks) {"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * Loads data from txt file."},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e If folder does not exist, the folder will be created. \u003c/p\u003e"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e If txt file does not exist, task list remains empty. Else, txt file will be processed. \u003c/p\u003e"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     * @throws FileNotFoundException Throws error if the file is not found."},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    public void loadData() throws FileNotFoundException {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        File dataFolder \u003d new File(Storage.DATA_FOLDER_PATH);"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        if (!dataFolder.exists()) {"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"            dataFolder.mkdir();"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        File dukeFile \u003d new File(Storage.DUKE_FILE_PATH);"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        if (dukeFile.exists()) {"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            Scanner s \u003d new Scanner(dukeFile); // create a Scanner using the File as the source"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"            while (s.hasNext()) {"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"                readTaskList(s.nextLine());"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     * Takes in each line in txt file and adds it into the task list."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"     * @param taskData A line in txt file containing information about a task."},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    private void readTaskList(String taskData) {"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        String[] splits \u003d taskData.split(\" \\\\| \");"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        if (splits[0].equals(\"T\")) {"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"            Todo addedTask \u003d new Todo(Arrays.asList(splits).get(2), Arrays.asList(splits).get(1).equals(\"1\"));"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"            tasks.addTask(addedTask);"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        } else if (splits[0].equals(\"D\")) {"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"            try {"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"                Deadline addedTask \u003d new Deadline(Arrays.asList(splits).get(2),"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"                        Arrays.asList(splits).get(1).equals(\"1\"), Arrays.asList(splits).get(3));"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"                tasks.addTask(addedTask);"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"            } catch (DukeException e) {"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"                System.out.println(e);"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        } else if (splits[0].equals(\"E\")) {"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"            try {"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"                Event addedTask \u003d new Event(Arrays.asList(splits).get(2),"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"                        Arrays.asList(splits).get(1).equals(\"1\"), Arrays.asList(splits).get(3));"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"                tasks.addTask(addedTask);"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"            } catch (DukeException e) {"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"                System.out.println(e);"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"    private void writeNewFile(String userInput) throws IOException {"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        FileWriter fw \u003d new FileWriter(Storage.DUKE_FILE_PATH);"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        fw.write(userInput);"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        fw.close();"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"     * Creates a new txt file and writes in all the tasks in the task list."},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Prints out \"ERROR\" if an error occurs in the process. \u003c/p\u003e"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"    public void writeTaskList() {"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"        String userInput \u003d tasks.joinToTxt();"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"            writeNewFile(userInput);"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"ERROR\");"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":100}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":" * Represents a task object."},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":" * Contains a description and status on whether the task is done."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class Task {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    /** Stores the description of this Task. */"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    /** Represents whether this Task is done. */"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Task object with a description."},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task."},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"     * Returns description of task."},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"     * @return String representing description of the task."},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    protected String getDescription() {"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        return this.description;"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * Checks whether the task is done or not."},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     * @return String representing a tick if the task is done, else a String of a space."},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    protected String getStatusIcon() {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        if (isDone) {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            return (\"\\u2713\"); //return tick"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            return (\" \");"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     * Marks the task as done."},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    protected void markAsDone() {"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        this.isDone \u003d true;"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     * Returns string object that formats the task to be saved."},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"     * Format:"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Task that is done: 1 | \u0026lt;task_description\u0026lt; \u003c/p\u003e"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Task that is not done: 0 | \u0026lt;task_description\u0026lt; \u003c/p\u003e"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"     * @return String representing task in format to be saved into txt."},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        int done \u003d isDone ? 1 : 0;"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"        return done + \" | \" + this.description;"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the task."},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"     * @return String representing whether the task is done and the task description."},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":75}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" * TaskList keeps a list of all tasks."},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /** List of tasks */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    private ArrayList\u003cTask\u003e list;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created TaskList object with an empty list of tasks."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * Adds a task to the list of tasks."},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     * @param taskToAdd Task to be added to the list of tasks."},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    protected void addTask(Task taskToAdd) {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        this.list.add(taskToAdd);"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     * Removes a task from the list of tasks."},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     * @param positionOfTask Position of task to be removed in the list of tasks."},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    protected void removeTask(int positionOfTask) {"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        this.list.remove(positionOfTask - 1);"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     * Returns the number of tasks in the list."},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"     * @return Integer representing the size of the list (number of tasks in the list)."},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"    protected int getSize() {"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        return this.list.size();"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     * Returns the task in the given position from the list."},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     * @param positionOfTask Position of task to get in the list of tasks."},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"     * @return Task in the given position from the list."},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    protected Task getTask(int positionOfTask) {"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        return this.list.get(positionOfTask - 1);"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * Returns a string representation of the list of tasks in txt format."},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the list of tasks in txt format."},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    protected String joinToTxt() {"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        String joined \u003d \"\";"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        for (Task t : this.list) {"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"            joined +\u003d System.lineSeparator() + t.saveTask();"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        return joined;"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"     * Returns list of all events."},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the list of all events."},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"        String stringToReturn \u003d \"\";"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        for (int i \u003d 1; i \u003c\u003d this.getSize(); i++) {"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"            if (i \u003d\u003d this.getSize()) {"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"                stringToReturn +\u003d \"\\n\" + i + \". \" + this.getTask(i);"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"                stringToReturn +\u003d \"\\n\" + i + \". \" + this.getTask(i) + \"\\n\";"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        return stringToReturn;"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":86}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":" * Represents a todo-task object that inherits from a task object."},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":" * Contains a description and status on whether the task is done."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class Todo extends Task {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created todo-task object with a description."},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done."},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * Returns string object that formats the todo-task to be saved."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     * Format:"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Todo-task that is done: T | 1 | \u0026lt;task_description\u0026lt; \u003c/p\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Todo-task that is not done: T | 0 | \u0026lt;task_description\u0026lt; \u003c/p\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * @return String representing todo-task in format to be saved into txt."},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        return \"T | \" + super.saveTask();"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the todo-task."},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     * @return String representing whether the todo-task is done and the todo-task description."},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":37}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.effect.DropShadow?\u003e"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"   \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        \u003cLabel fx:id\u003d\"dialog\" style\u003d\"-fx-background-color: #338991; -fx-background-radius: 30; -fx-line-spacing: 3; -fx-label-padding: 10;\" text\u003d\"Label\" textFill\u003d\"WHITE\" textOverrun\u003d\"CENTER_WORD_ELLIPSIS\" wrapText\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"         \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"            \u003cFont name\u003d\"Lucida Console\" size\u003d\"14.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"         \u003c/font\u003e"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"         \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"         \u003c/padding\u003e"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"   \u003c/children\u003e"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    \u003cpadding\u003e"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    \u003c/padding\u003e"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"   \u003ceffect\u003e"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"      \u003cDropShadow height\u003d\"40.34\" radius\u003d\"19.777500000000003\" width\u003d\"40.77\" /\u003e"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"   \u003c/effect\u003e"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"      \u003cInsets /\u003e"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Ellevy":36}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.effect.ColorAdjust?\u003e"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"\u003cGridPane minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"   \u003ccolumnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"      \u003cColumnConstraints /\u003e"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"   \u003c/columnConstraints\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"   \u003crowConstraints\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"      \u003cRowConstraints maxHeight\u003d\"488.33331298828125\" minHeight\u003d\"10.0\" prefHeight\u003d\"71.66666666666666\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"      \u003cRowConstraints maxHeight\u003d\"488.33331298828125\" minHeight\u003d\"10.0\" prefHeight\u003d\"475.66666666666674\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"      \u003cRowConstraints maxHeight\u003d\"51.66668701171869\" minHeight\u003d\"10.0\" prefHeight\u003d\"49.66668701171869\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"   \u003c/rowConstraints\u003e"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"   \u003cchildren\u003e"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"407.0\" prefWidth\u003d\"383.0\" vvalue\u003d\"1.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            \u003ccontent\u003e"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"            \u003c/content\u003e"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"400.0\" promptText\u003d\"Insert an input\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"         \u003cfont\u003e"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"            \u003cFont name\u003d\"Monospaced Bold\" size\u003d\"16.0\" /\u003e"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"         \u003c/font\u003e"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"         \u003ceffect\u003e"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"            \u003cColorAdjust brightness\u003d\"-0.19\" hue\u003d\"1.0\" saturation\u003d\"-1.0\" /\u003e"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"         \u003c/effect\u003e"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"         \u003cGridPane.margin\u003e"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"         \u003c/GridPane.margin\u003e"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"      \u003c/TextField\u003e"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"64.0\" style\u003d\"-fx-background-color: #338991;\" text\u003d\"Send\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"2\"\u003e"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"         \u003cfont\u003e"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"            \u003cFont name\u003d\"Monospaced Bold\" size\u003d\"16.0\" /\u003e"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"         \u003c/font\u003e"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"         \u003cGridPane.margin\u003e"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets right\u003d\"10.0\" /\u003e"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"         \u003c/GridPane.margin\u003e"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"      \u003c/Button\u003e"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"      \u003cTextField fx:id\u003d\"userInput1\" alignment\u003d\"CENTER\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" promptText\u003d\"Insert an input\" style\u003d\"-fx-background-color: black; -fx-text-fill: white;\" text\u003d\"Duke\" GridPane.columnIndex\u003d\"1\"\u003e"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"         \u003cfont\u003e"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"            \u003cFont name\u003d\"DejaVu Sans Mono Bold\" size\u003d\"24.0\" /\u003e"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"         \u003c/font\u003e"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"      \u003c/TextField\u003e"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"   \u003c/children\u003e"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"\u003c/GridPane\u003e"}],"authorContributionMap":{"Ellevy":56}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class DeadlineTest {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    public void deadline_wrongDateFormat_dukeExceptionThrown() {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", false, \"\"));"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", true, \"9 Sep 2019\"));"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", true, \"09-09-2019\"));"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", false, \"2019/09/09\"));"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"D | 1 | return book | 2019-09-09\","},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"                new Deadline(\"return book\", true, \"2019-09-09\").saveTask());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"D | 0 | return book | 2019-09-09\","},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"                new Deadline(\"return book\", false, \"2019-09-09\").saveTask());"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[D][\\u2713] return book (By: 9 Sep 2019)\","},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"                new Deadline(\"return book\", true, \"2019-09-09\").toString());"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[D][ ] return book (By: 9 Sep 2019)\","},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"                new Deadline(\"return book\", false, \"2019-09-09\").toString());"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":31}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class EventTest {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    public void event_wrongDateFormat_dukeExceptionThrown() {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", false, \"\"));"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", true, \"1 Jan 2020\"));"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", true, \"01-01-2020\"));"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", false, \"2020/01/01\"));"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"E | 1 | meeting | 2020-01-01\","},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"                new Event(\"meeting\", true, \"2020-01-01\").saveTask());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"E | 0 | meeting | 2020-01-01\","},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"                new Event(\"meeting\", false, \"2020-01-01\").saveTask());"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[E][\\u2713] meeting (At: 1 Jan 2020)\","},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"                new Event(\"meeting\", true, \"2020-01-01\").toString());"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[E][ ] meeting (At: 1 Jan 2020)\","},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"                new Event(\"meeting\", false, \"2020-01-01\").toString());"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":31}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void setAsDone_invalidInput_argumentExceptionString() throws DukeException {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"            + \"Please enter a valid item number in the list.\";"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done \"));"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done a\"));"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done 0\"));"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done -1\"));"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done 6\"));"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    public void deleteFromList_invalidInput_argumentExceptionString() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"            + \"Please enter a valid item number in the list.\";"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete \"));"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete a\"));"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete 0\"));"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete -1\"));"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete 6\"));"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidTodo_argumentExceptionString() {"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"            + \"A todo-task should be specified as follows \\n \""},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"            + \"todo \u003ctask_description\u003e\\n\""},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"            + \"You currently have 0 tasks in the list.\";"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"todo \", false));"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidDeadline_argumentExceptionString() {"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"            + \"A deadline-task should be specified as follows \\n \""},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"            + \"deadline \u003ctask_description\u003e /by \u003ctask_deadline\u003e\\n\""},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"            + \"You currently have 0 tasks in the list.\";"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline \", false));"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline /by \", false));"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline /by jan\", false));"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline return book /by\", false));"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline return book /by \", false));"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline /by 2019-09-09\", false));"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline /by2019-09-09\", false));"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidEvent_argumentExceptionString() {"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"            + \"A event-task should be specified as follows \\n \""},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"            + \"event \u003cevent_description\u003e /at \u003cevent_date\u003e\\n\""},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"            + \"You currently have 0 tasks in the list.\";"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event \", false));"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event /at \", false));"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event /at jan\", false));"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event return book /at\", false));"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event return book /at \", false));"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event /at 2019-09-09\", false));"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event /at2019-09-09\", false));"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_unknownKeyword_argumentExceptionString() {"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Unidentified Keyword: Please try again using the correct keywords and order :)\\n\""},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"            + \"You currently have 0 tasks in the list.\";"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"\", false));"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\" \", false));"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"s\", false));"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"1\", false));"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"hi\", false));"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"todo\", false));"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline\", false));"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event\", false));"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"Event \", false));"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":125}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TaskListTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testGetSize() throws DukeException {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        assertEquals(3, tasks.getSize());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public void testGetTask() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t1, tasks.getTask(1));"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t2, tasks.getTask(2));"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t3, tasks.getTask(3));"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    public void testJoinToTxt() throws DukeException {"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        assertEquals(System.lineSeparator() + \"T | 0 | join sports club\""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"                + System.lineSeparator() + \"D | 1 | return book | 2019-09-09\""},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"                + System.lineSeparator() + \"E | 0 | meeting | 2020-01-01\" , tasks.joinToTxt());"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"\\n1. [T][ ] join sports club\\n\\n\""},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"                + \"2. [D][\\u2713] return book (By: 9 Sep 2019)\\n\\n\""},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"                + \"3. [E][ ] meeting (At: 1 Jan 2020)\", tasks.toString());"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":73}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TaskTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testGetStatusIcon() {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"\\u2713\", new Todo(\"join sports club\", true).getStatusIcon());"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\" \", new Todo(\"join sports club\", false).getStatusIcon());"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"1 | join sports club\", new Task(\"join sports club\", true).saveTask());"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"0 | join sports club\", new Task(\"join sports club\", false).saveTask());"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[\\u2713] join sports club\","},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"                new Task(\"join sports club\", true).toString());"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[ ] join sports club\","},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"                new Task(\"join sports club\", false).toString());"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":26}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TodoTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"T | 1 | join sports club\","},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"                new Todo(\"join sports club\", true).saveTask());"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"T | 0 | join sports club\","},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"                new Todo(\"join sports club\", false).saveTask());"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() {"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[T][\\u2713] join sports club\","},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"                new Todo(\"join sports club\", true).toString());"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[T][ ] join sports club\","},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"                new Todo(\"join sports club\", false).toString());"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"bye"}],"authorContributionMap":{"Ellevy":11}}]
