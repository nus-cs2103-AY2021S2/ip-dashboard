[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"javafx {"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    version\u003d\u002711\u0027"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    modules\u003d[\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"}"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"    enableAssertions \u003d true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":42,"Ellevy":23}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"E | 0 | meeting | 2020-01-01"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"E | 0 | lecture | 2021-08-13"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"T | 0 | drink water"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"D | 1 | assignment | 2021-02-16"}],"authorContributionMap":{"Ellevy":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"Duke is a desktop app for managing tasks using Command Line Interface (CLI)."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"## Quick start"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"1. Download the latest `duke.jar` from [here](https://github.com/Ellevy/ip/releases/tag/A-Release)."},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your Duke."},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. "},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"   Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"   ![Ui](Ui.png)"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"1. Type the command in the command box and press Enter to execute it. "},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"   \u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"   Some example commands you can try:"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    * **`list`** : Lists all tasks."},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    * **`todo`**`drink water` : Adds a todo task to drink water."},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    * **`done`**`1` : Marks the 1st task shown in the current list as done."},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    * **`delete`**`1` : Deletes the 1st task shown in the current list."},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    "},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    * **`bye`** : Exits the app."},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"**Notes about the command format**\u003cbr\u003e"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"  e.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `add drink water`."},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"* When `DESCRIPTION` is used as a parameter to be supplied by the user, the `DESCRIPTION` cannot contain `|`."},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"* When `DATE` is used as a parameter to be supplied by the user, the only format accepted is `yyyy-mm-dd`."},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"  e.g. in `deadline DESCRIPTION /by DATE`, `DATE` is specified in `yyyy-mm-dd` format which can be used as"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"  `deadline assignment /by 2021-02-16`."},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"  e.g. `remind [DAYS]` can be used as `remind` or as `remind 3`."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"  "},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"\u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"### Adding a todo task: `todo`"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"Adds a todo task to Duke."},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"Examples:"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"* `todo drink water`"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"* `todo tutorial`"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"### Adding a deadline task: `deadline`"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"Adds a deadline task to Duke."},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"Format: `deadline DESCRIPTION /by DATE`"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"Examples:"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"* `deadline assignment /by 2021-02-16`"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"### Adding an event task: `event`"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"Adds an event task to Duke."},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"Format: `event DESCRIPTION /at DATE`"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"Examples:"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"* `event meeting /at 2020-01-01`"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"### Marking task as done : `done`"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"Marks the specified task from Duke as done."},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"Format: `done INDEX`"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"* Marks the task at the specified `INDEX` as done."},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"* The index refers to the index number shown in the displayed task list."},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"* The index **must be a valid positive integer** 1, 2, 3, …​"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"Examples:"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"* `list` followed by `done 2` marks the 2nd task in Duke as done."},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"### Deleting a task : `delete`"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"Deletes the specified task from Duke."},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"Format: `delete INDEX`"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"* Deletes the task at the specified `INDEX`."},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"* The index refers to the index number shown in the displayed task list."},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"* The index **must be a valid positive integer** 1, 2, 3, …​"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"Examples:"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"* `list` followed by `delete 2` deletes the 2nd task in Duke."},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"### Listing all tasks : `list`"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"Shows a list of all tasks in Duke. "},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"Format: `list`  "},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"Priority of listing:"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"1. deadline/event tasks that are not done, ordered by date."},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"2. todo tasks that are not done, by order of addition to Duke."},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"3. deadline/event tasks that are done, ordered by date."},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"4. todo tasks that are done, by order of being marked as done."},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"### Locating tasks by name: `find`"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"Finds tasks whose descriptions contain the given keyword."},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"Format: `find KEYWORD`"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"Examples:"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"* `find water` returns `drink water`"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"* `find a` returns `drink water`, `assignment`\u003cbr\u003e"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"  ![result for \u0027find a\u0027](findA.png)"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"### Remind user of tasks due: `remind`"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"Reminds user of tasks due within the specified number of `DAYS`. \u003cbr\u003e"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"When `DAYS` is not specified, the default number of `DAYS` is 7."},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"Format: `remind [DAYS]`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"Examples:"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":"* `remind` returns nothing since none of the tasks are due within 7 days."},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":"* `remind 365` returns `lecture` since the lecture is happening within 365 days from today. \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"  ![result for \u0027remind 365\u0027](remind365Result.png)"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"Ellevy"},"content":"### Exiting the program : `bye`"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"Ellevy"},"content":"Exits the program."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"Ellevy"},"content":"Format: `bye`"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"Ellevy"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"Ellevy"},"content":"## Command summary"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"Ellevy"},"content":"Action | Format, Examples"},{"lineNumber":154,"author":{"gitId":"Ellevy"},"content":"--------|------------------"},{"lineNumber":155,"author":{"gitId":"Ellevy"},"content":"**Add Todo** | `todo DESCRIPTION` \u003cbr\u003e e.g., `todo drink water`"},{"lineNumber":156,"author":{"gitId":"Ellevy"},"content":"**Add Deadline** | `deadline DESCRIPTION /by DATE` \u003cbr\u003e e.g., `deadline assignment /by 2021-02-16` "},{"lineNumber":157,"author":{"gitId":"Ellevy"},"content":"**Add Event** | `event DESCRIPTION /at DATE` \u003cbr\u003e e.g., `event meeting /at 2020-01-01`"},{"lineNumber":158,"author":{"gitId":"Ellevy"},"content":"**Done** | `done INDEX`\u003cbr\u003e e.g., `done 3`"},{"lineNumber":159,"author":{"gitId":"Ellevy"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":160,"author":{"gitId":"Ellevy"},"content":"**List** | `list`"},{"lineNumber":161,"author":{"gitId":"Ellevy"},"content":"**Find** | `find KEYWORD`\u003cbr\u003e e.g., `find water`"},{"lineNumber":162,"author":{"gitId":"Ellevy"},"content":"**Remind** | `remind [DAYS]`\u003cbr\u003e e.g., `remind 365`"},{"lineNumber":163,"author":{"gitId":"Ellevy"},"content":"**Exit** | `bye`"}],"authorContributionMap":{"-":11,"Ellevy":152}},{"path":"src/main/java/ArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class ArgumentException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Wrong Arguments Specified: \\n\";"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"     * Error type according to the list below:"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 1. Format error of a todo-task \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 2. Format error of a deadline-task \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 3. Format error of a event-task \u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 4. Format error of a done or delete command \u003c/p\u003e"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected int type;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created ArgumentException object with the error type."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @param type Error type according to the list below:"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 1. Format error of a todo-task \u003c/p\u003e"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 2. Format error of a deadline-task \u003c/p\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 3. Format error of a event-task \u003c/p\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 4. Format error of a done or delete command \u003c/p\u003e"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public ArgumentException(int type) {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        this.type \u003d type;"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        assert (type \u003d\u003d 1 || type \u003d\u003d 2 || type \u003d\u003d 3 || type \u003d\u003d 4) : \"Problem in Argument Exception type.\";"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message depending on the specific error it is associated with"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        switch (this.type) {"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        case 1:"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"            return super.toString()"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"                + \"A todo-task should be specified as follows \\n \""},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"                + \"todo \u003ctask_description\u003e\";"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        case 2:"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            return super.toString()"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"                + \"A deadline-task should be specified as follows \\n \""},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"                + \"deadline \u003ctask_description\u003e /by \u003ctask_deadline\u003e\";"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        case 3:"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"            return super.toString()"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"                + \"A event-task should be specified as follows \\n \""},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"                + \"event \u003cevent_description\u003e /at \u003cevent_date\u003e\";"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        case 4:"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"            return super.toString()"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"                + \"Please enter a valid item number in the list.\";"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        default:"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"            assert false : \"Problem in Argument Exception type.\";"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"            return \"Problem in Argument Exception type.\";"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":57}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":" * Represents a deadline-task object that inherits from a task object."},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":" * Contains a description, status on whether the task is done and deadline of task."},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /** Stores the date this event will be due by. */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate by;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created deadline-task object with a description and the date."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done."},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * @param by Date of the task (yyyy-mm-dd)."},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the date is in the wrong format."},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public Deadline(String description, boolean isDone, String by) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            throw new DukeException(\"Incorrect date format: Please specify the date as yyyy-mm-dd :)\");"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * Returns date of deadline."},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * @return LocalDate representing date of the deadline."},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate getDate() {"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        return this.by;"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     * Returns string object that formats the deadline-task to be saved."},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     * Format: (Date format: d MMM yyyy)"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Deadline-task that is done: D | 1 | \u0026lt;task_description\u0026lt; | \u0026lt;date\u0026lt; \u003c/p\u003e"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Deadline-task that is not done: D | 0 | \u0026lt;task_description\u0026lt; \u0026lt;date\u0026lt; \u003c/p\u003e"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     * @return String representing deadline-task in format to be saved into txt."},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        return \"D | \" + super.saveTask() + \" | \" + this.by;"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the deadline-task."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"     * @return String representing whether the deadline-task is done and the deadline-task description with the date."},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        return \"[D]\" + super.toString() + \" (By: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":61}},{"path":"src/main/java/DescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class DescriptionException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"     * Fixed message for all DescriptionExceptions"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Description for tasks cannot contain \u0027|\u0027. \""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"        + \"Please try again with a new description! :)\";"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DescriptionException object with the default MESSAGE."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    public DescriptionException() {"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        return super.toString();"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":25}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"     * Creates a DialogBox for User with string and image."},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     * @return DialogBox that represents the user input and image."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"        return new DialogBox(text, img);"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"     * Creates a DialogBox for Duke with string and image."},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"     * @return DialogBox that represents the processed output and image."},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        db.flip();"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        return db;"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":69}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":" * Duke keeps track of a list of tasks."},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    /** Storage that controls saving and reading file. */"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    private Storage storage;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    /** Parser that processes commands. */"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    private Parser parser;"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    /** List of tasks. */"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Duke object with empty task list, storage and parser."},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    public Duke() {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        storage \u003d new Storage(tasks);"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        parser \u003d new Parser(tasks);"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"     * Returns the storage of this Duke object."},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"     * @return Storage object of this Duke object."},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    public Storage getStorage() {"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        return this.storage;"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * Returns the parser of this Duke object."},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     * @return Parser object of this Duke object."},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    public Parser getParser() {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        return this.parser;"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"     * Generate a response to user input."},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     * @return String that represents the response to user input."},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"    public String getResponse(String input, Duke duke) {"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        String processedString \u003d duke.parser.processCommand(input);"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        return processedString;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Ellevy":48,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DukeException object without a message."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    DukeException() {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"        super();"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DukeException object with a given message."},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     * @param message Error message given for the exception"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    DukeException(String message) {"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        return getMessage();"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":25}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":" * Represents an event-task object that inherits from a task object."},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":" * Contains a description, status on whether the event is done and date of event."},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /** Stores the date this event will be at. */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate at;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created event-task object with a description and the date."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done."},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * @param at Date of the task (yyyy-mm-dd)."},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the date is in the wrong format."},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public Event(String description, boolean isDone, String at) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"            this.at \u003d LocalDate.parse(at);"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            throw new DukeException(\"Incorrect date format: Please specify the date as yyyy-mm-dd :)\");"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * Returns date of event."},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * @return LocalDate representing date of the event."},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate getDate() {"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        return this.at;"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     * Returns string object that formats the event-task to be saved."},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     * Format: (Date format: d MMM yyyy)"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Event-task that is done: E | 1 | \u0026lt;task_description\u0026lt; | \u0026lt;date\u0026lt; \u003c/p\u003e"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Event-task that is not done: E | 0 | \u0026lt;task_description\u0026lt; \u0026lt;date\u0026lt; \u003c/p\u003e"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     * @return String representing event-task in format to be saved into txt."},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        return \"E | \" + super.saveTask() + \" | \" + this.at;"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the event-task."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"     * @return String representing whether the event-task is done and the event-task description with the date."},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        return \"[E]\" + super.toString() + \" (At: \" + at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":61}},{"path":"src/main/java/KeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class KeywordException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     * Fixed message for all KeywordExceptions"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Unidentified Keyword: Please try again using the correct keywords and order :)\";"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created KeywordException object with the default MESSAGE."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    public KeywordException() {"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        return super.toString();"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":24}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"            GridPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().greetings();"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":31}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"public class MainWindow extends GridPane {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    private Duke duke;"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bot.png\"));"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    public void initialize() {"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * Runs Duke and access storage."},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * @param d Duke object used."},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            duke.getStorage().loadData();"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"File not found :(\");"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     * Greets the user and prints out list in storage."},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    public void greetings() {"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"            DialogBox.getDukeDialog(\"Welcome to Duke! \\n\" + duke.getParser().printList(), dukeImage)"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    private void handleUserInput() {"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        String input \u003d userInput.getText().trim();"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        if (\"bye\".equals(input)) {"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"            Platform.setImplicitExit(true);"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"            Platform.exit();"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            String response \u003d duke.getResponse(input, duke);"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"            duke.getStorage().writeTaskList();"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"            );"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"            userInput.clear();"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":77}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" * Parser processes commands."},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /** List of tasks */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Parser object with a given list of tasks."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     * @param tasks List of tasks to process commands on."},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    public Parser(TaskList tasks) {"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     * Processes a command given by user."},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Commands recognised: \u003c/p\u003e"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 1. List out all tasks in list: list \u003c/p\u003e"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 2. Set task in list as done: done \u0026lt;position_of_task_in_list\u0026gt; \u003c/p\u003e"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 3. Delete task in list: delete \u0026lt;position_of_task_in_list\u0026gt; \u003c/p\u003e"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 4. Add todo-task: todo \u0026lt;task_description\u0026gt; \u003c/p\u003e"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 5. Add deadline-task: deadline \u0026lt;task_description\u0026gt; /by \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 6. Add event-task: event \u0026lt;event_description\u0026gt; /at \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 7. Find task using keyword: find \u0026lt;keyword\u0026gt; \u003c/p\u003e"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 8. Remind tasks due soon: remind (optional: \u0026lt;coming_within_this_number_of_days\u0026gt;) \u003c/p\u003e"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 9. Exit Duke: bye \u003c/p\u003e"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Command from user."},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    protected String processCommand(String userInput) {"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        if (\"list\".equals(userInput)) {"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"            return printList();"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"done \")) {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            return setAsDone(userInput);"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"delete \")) {"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            return deleteFromList(userInput);"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"find \")) {"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"            return findFromList(userInput);"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"remind\")) {"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"            return remindTasks(userInput);"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"            return addTaskToList(userInput, false);"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     * Sets a task as done and return the task marked as done."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: done \u0026lt;indexOfItem\u0026gt;"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    protected String setAsDone(String userInput) {"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"            int indexToMark \u003d Integer.parseInt(userInput.substring(5));"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"            Task ts \u003d tasks.getTask(indexToMark);"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"            ts.markAsDone();"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"Nice! I\u0027ve marked this task as done: \\n\";"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"  \" + ts;"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            return textToReturn;"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"            return new ArgumentException(4).toString();"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"     * Deletes a task in the list and returns the task deleted with the remaining number of tasks in the list."},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: delete \u0026lt;indexOfItem\u0026gt;"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"    private String deleteFromList(String userInput) {"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"            int indexToDelete \u003d Integer.parseInt(userInput.substring(7));"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"            Task ts \u003d tasks.getTask(indexToDelete);"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"            tasks.removeTask(indexToDelete);"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"Okay! I\u0027ve removed this task: \\n\";"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"  \" + ts;"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"\\nNow you have \" + tasks.getSize() + \" tasks in the list.\";"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"            return textToReturn;"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"            return new ArgumentException(4).toString();"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"     * Finds all tasks in the list that matches the keyword given by user."},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: find \u0026lt;keyword\u0026gt;"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"    private String findFromList(String userInput) {"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        TaskList tasksMatchingKeyword \u003d new TaskList();"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        String keyword \u003d userInput.substring(5);"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.getSize(); i++) {"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"            Task task \u003d tasks.getTask(i);"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"                tasksMatchingKeyword.addTask(task);"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        return printList(tasksMatchingKeyword);"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"     * Reminds user of all deadlines/events in the list that is due soon."},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"     * With no input of number of days, default is 1 week."},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format:"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"     *                  remind (optional: \u0026lt;coming_within_this_number_of_days\u0026gt;)"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"    private String remindTasks(String userInput) {"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"        TaskComparator compareTasks \u003d new TaskComparator();"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"        TaskList tasksToRemind \u003d new TaskList();"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"        String trimmedUserInput \u003d userInput.trim();"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"        int daysToGet \u003d 7;"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"        if (!trimmedUserInput.equals(\"remind\")) {"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"            try {"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"                daysToGet \u003d Integer.parseInt(userInput.substring(7));"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"            } catch (NumberFormatException ex) {"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"                return \"Invalid input: Please try again with a valid integer or leave it blank! :)\";"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"        LocalDate fromDate \u003d LocalDate.now();"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"        LocalDate toDate \u003d LocalDate.now().plusDays(daysToGet);"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.getSize(); i++) {"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"            Task task \u003d tasks.getTask(i);"},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":"            if (!task.isDone() \u0026\u0026 !compareTasks.isTodo(task)) {"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"                LocalDate date \u003d compareTasks.getTaskDate(task);"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"                if (!date.isBefore(fromDate) \u0026\u0026 !date.isAfter(toDate)) {"},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"                    tasksToRemind.addTask(task);"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":"                }"},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"Ellevy"},"content":"        return printList(tasksToRemind);"},{"lineNumber":143,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":145,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"Ellevy"},"content":"     * Adds a task into the list and returns the task added with the number of tasks in the list."},{"lineNumber":147,"author":{"gitId":"Ellevy"},"content":"     * Calls the respective functions to add different tasks into the list."},{"lineNumber":148,"author":{"gitId":"Ellevy"},"content":"     * Else returns an error string describing the error."},{"lineNumber":149,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the given formats for each task type:"},{"lineNumber":151,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e todo task: todo \u0026lt;task_description\u0026gt; \u003c/p\u003e"},{"lineNumber":152,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e deadline task: deadline \u0026lt;task_description\u0026gt; /by \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":153,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e event task: event \u0026lt;event_description\u0026gt; /at \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":154,"author":{"gitId":"Ellevy"},"content":"     * @param isDone True if task to be added is done, else false."},{"lineNumber":155,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":156,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"Ellevy"},"content":"    protected String addTaskToList(String userInput, boolean isDone) {"},{"lineNumber":158,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":159,"author":{"gitId":"Ellevy"},"content":"        if (userInput.startsWith(\"todo \")) {"},{"lineNumber":160,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d addTodo(userInput, isDone);"},{"lineNumber":161,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"deadline \")) {"},{"lineNumber":162,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d addDeadline(userInput, isDone);"},{"lineNumber":163,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"event \")) {"},{"lineNumber":164,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d addEvent(userInput, isDone);"},{"lineNumber":165,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":166,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d new KeywordException().toString();"},{"lineNumber":167,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"Ellevy"},"content":"        textToReturn +\u003d \"\\nYou currently have \" + tasks.getSize() + \" tasks in the list.\";"},{"lineNumber":169,"author":{"gitId":"Ellevy"},"content":"        return textToReturn;"},{"lineNumber":170,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":172,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"Ellevy"},"content":"     * Adds a Todo-task into the list and returns the confirmation of adding the task."},{"lineNumber":174,"author":{"gitId":"Ellevy"},"content":"     * Else returns an error string describing the error."},{"lineNumber":175,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the given format:"},{"lineNumber":177,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e todo task: todo \u0026lt;task_description\u0026gt; \u003c/p\u003e"},{"lineNumber":178,"author":{"gitId":"Ellevy"},"content":"     * @param isDone True if task to be added is done, else false."},{"lineNumber":179,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":180,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"Ellevy"},"content":"    private String addTodo(String userInput, boolean isDone) {"},{"lineNumber":182,"author":{"gitId":"Ellevy"},"content":"        String[] splits \u003d userInput.split(\"todo \");"},{"lineNumber":183,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":184,"author":{"gitId":"Ellevy"},"content":"        if (splits.length !\u003d 2) {"},{"lineNumber":185,"author":{"gitId":"Ellevy"},"content":"            return new ArgumentException(1).toString();"},{"lineNumber":186,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"Ellevy"},"content":"        String description \u003d splits[1];"},{"lineNumber":188,"author":{"gitId":"Ellevy"},"content":"        if (description.contains(\"|\")) {"},{"lineNumber":189,"author":{"gitId":"Ellevy"},"content":"            return new DescriptionException().toString();"},{"lineNumber":190,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"Ellevy"},"content":"        Todo addedTask \u003d new Todo(description, isDone);"},{"lineNumber":192,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(addedTask);"},{"lineNumber":193,"author":{"gitId":"Ellevy"},"content":"        textToReturn +\u003d \"Got it, I\u0027ve added this task to the list: \\n\";"},{"lineNumber":194,"author":{"gitId":"Ellevy"},"content":"        textToReturn +\u003d \"  \" + addedTask;"},{"lineNumber":195,"author":{"gitId":"Ellevy"},"content":"        return textToReturn;"},{"lineNumber":196,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":197,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":199,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":200,"author":{"gitId":"Ellevy"},"content":"     * Adds a Deadline-task into the list and returns the confirmation of adding the task."},{"lineNumber":201,"author":{"gitId":"Ellevy"},"content":"     * Else returns an error string describing the error."},{"lineNumber":202,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the given format:"},{"lineNumber":204,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e deadline task: deadline \u0026lt;task_description\u0026gt; /by \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":205,"author":{"gitId":"Ellevy"},"content":"     * @param isDone True if task to be added is done, else false."},{"lineNumber":206,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":207,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"Ellevy"},"content":"    private String addDeadline(String userInput, boolean isDone) {"},{"lineNumber":209,"author":{"gitId":"Ellevy"},"content":"        String[] splits \u003d userInput.split(\"deadline |/by \");"},{"lineNumber":210,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":211,"author":{"gitId":"Ellevy"},"content":"        if ((splits.length !\u003d 3) || (splits[1].equals(\"\")) || (splits[2].equals(\"\"))) {"},{"lineNumber":212,"author":{"gitId":"Ellevy"},"content":"            return new ArgumentException(2).toString();"},{"lineNumber":213,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"Ellevy"},"content":"        String description \u003d splits[1];"},{"lineNumber":215,"author":{"gitId":"Ellevy"},"content":"        String date \u003d splits[2];"},{"lineNumber":216,"author":{"gitId":"Ellevy"},"content":"        if (description.contains(\"|\")) {"},{"lineNumber":217,"author":{"gitId":"Ellevy"},"content":"            return new DescriptionException().toString();"},{"lineNumber":218,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":220,"author":{"gitId":"Ellevy"},"content":"            Deadline addedTask \u003d new Deadline(description, isDone, date);"},{"lineNumber":221,"author":{"gitId":"Ellevy"},"content":"            tasks.addTask(addedTask);"},{"lineNumber":222,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"Got it, I\u0027ve added this task to the list: \\n\";"},{"lineNumber":223,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"  \" + addedTask;"},{"lineNumber":224,"author":{"gitId":"Ellevy"},"content":"        } catch (DukeException ex) {"},{"lineNumber":225,"author":{"gitId":"Ellevy"},"content":"            textToReturn \u003d ex.toString();"},{"lineNumber":226,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"Ellevy"},"content":"        return textToReturn;"},{"lineNumber":228,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":230,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"Ellevy"},"content":"     * Adds a Event-task into the list and returns the confirmation of adding the task."},{"lineNumber":232,"author":{"gitId":"Ellevy"},"content":"     * Else returns an error string describing the error."},{"lineNumber":233,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":234,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the given format:"},{"lineNumber":235,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e event task: event \u0026lt;event_description\u0026gt; /at \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":236,"author":{"gitId":"Ellevy"},"content":"     * @param isDone True if task to be added is done, else false."},{"lineNumber":237,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the output of processing command."},{"lineNumber":238,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"Ellevy"},"content":"    private String addEvent(String userInput, boolean isDone) {"},{"lineNumber":240,"author":{"gitId":"Ellevy"},"content":"        String[] splits \u003d userInput.split(\"event | /at \");"},{"lineNumber":241,"author":{"gitId":"Ellevy"},"content":"        String textToReturn \u003d \"\";"},{"lineNumber":242,"author":{"gitId":"Ellevy"},"content":"        if ((splits.length !\u003d 3) || (splits[1].equals(\"\")) || (splits[2].equals(\"\"))) {"},{"lineNumber":243,"author":{"gitId":"Ellevy"},"content":"            return new ArgumentException(3).toString();"},{"lineNumber":244,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"Ellevy"},"content":"        String description \u003d splits[1];"},{"lineNumber":246,"author":{"gitId":"Ellevy"},"content":"        String date \u003d splits[2];"},{"lineNumber":247,"author":{"gitId":"Ellevy"},"content":"        if (description.contains(\"|\")) {"},{"lineNumber":248,"author":{"gitId":"Ellevy"},"content":"            return new DescriptionException().toString();"},{"lineNumber":249,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":251,"author":{"gitId":"Ellevy"},"content":"            Event addedTask \u003d new Event(description, isDone, date);"},{"lineNumber":252,"author":{"gitId":"Ellevy"},"content":"            tasks.addTask(addedTask);"},{"lineNumber":253,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"Got it, I\u0027ve added this task to the list: \\n\";"},{"lineNumber":254,"author":{"gitId":"Ellevy"},"content":"            textToReturn +\u003d \"  \" + addedTask;"},{"lineNumber":255,"author":{"gitId":"Ellevy"},"content":"        } catch (DukeException ex) {"},{"lineNumber":256,"author":{"gitId":"Ellevy"},"content":"            textToReturn \u003d ex.toString();"},{"lineNumber":257,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"Ellevy"},"content":"        return textToReturn;"},{"lineNumber":259,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":261,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":262,"author":{"gitId":"Ellevy"},"content":"     * Returns the representation of the list of all events."},{"lineNumber":263,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":264,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the list of all events."},{"lineNumber":265,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"Ellevy"},"content":"    protected String printList() {"},{"lineNumber":267,"author":{"gitId":"Ellevy"},"content":"        if (tasks.getSize() \u003d\u003d 0) {"},{"lineNumber":268,"author":{"gitId":"Ellevy"},"content":"            return \"Your task list is currently empty!\";"},{"lineNumber":269,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":270,"author":{"gitId":"Ellevy"},"content":"            String listRepresentation \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":271,"author":{"gitId":"Ellevy"},"content":"            listRepresentation +\u003d tasks.toString();"},{"lineNumber":272,"author":{"gitId":"Ellevy"},"content":"            return listRepresentation;"},{"lineNumber":273,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":276,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":277,"author":{"gitId":"Ellevy"},"content":"     * Returns the list of all requested events."},{"lineNumber":278,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":279,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the list of all matching events."},{"lineNumber":280,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":281,"author":{"gitId":"Ellevy"},"content":"    protected String printList(TaskList tasks) {"},{"lineNumber":282,"author":{"gitId":"Ellevy"},"content":"        if (tasks.getSize() \u003d\u003d 0) {"},{"lineNumber":283,"author":{"gitId":"Ellevy"},"content":"            return \"None of the tasks in your list matches the condition!\";"},{"lineNumber":284,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":285,"author":{"gitId":"Ellevy"},"content":"            String listRepresentation \u003d \"Here are the tasks you requested for:\\n\";"},{"lineNumber":286,"author":{"gitId":"Ellevy"},"content":"            listRepresentation +\u003d tasks.toString();"},{"lineNumber":287,"author":{"gitId":"Ellevy"},"content":"            return listRepresentation;"},{"lineNumber":288,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":289,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":291,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":291}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":" * Storage controls saving into and reading from txt files."},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"public class Storage {"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    /** Constant path of folder that the txt file will be in. */"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    private static final String DATA_FOLDER_PATH \u003d \"data\";"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    /** Constant path to txt file. */"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    private static final String DUKE_FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    /** List of tasks */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Storage object with a given list of tasks."},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     * @param tasks List of tasks to save."},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    public Storage(TaskList tasks) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     * Loads data from txt file."},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e If folder does not exist, the folder will be created. \u003c/p\u003e"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e If txt file does not exist, task list remains empty. Else, txt file will be processed. \u003c/p\u003e"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * @throws FileNotFoundException Throws error if the file is not found."},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    public void loadData() throws FileNotFoundException {"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        File dataFolder \u003d new File(Storage.DATA_FOLDER_PATH);"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        if (!dataFolder.exists()) {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            dataFolder.mkdir();"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        File dukeFile \u003d new File(Storage.DUKE_FILE_PATH);"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        if (dukeFile.exists()) {"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"            Scanner s \u003d new Scanner(dukeFile); // create a Scanner using the File as the source"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            while (s.hasNext()) {"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"                readTaskList(s.nextLine());"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"     * Takes in each line in txt file and adds it into the task list."},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     * @param taskData A line in txt file containing information about a task."},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    private void readTaskList(String taskData) {"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        String[] splits \u003d taskData.split(\" \\\\| \");"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        String taskType \u003d splits[0].trim();"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        if (taskType.equals(\"T\")) {"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"            readTodoTask(splits);"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        } else if (taskType.equals(\"D\")) {"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"            readDeadlineTask(splits);"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"        } else if (taskType.equals(\"E\")) {"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"            readEventTask(splits);"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        } else if (!taskType.trim().equals(\"\")) {"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            assert false : \"Error in storage file duke.txt format.\";"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"     * Adds a Todo-task into the task list."},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"     * @param splits An array containing specifics ot the task."},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"    private void readTodoTask(String[] splits) {"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        String isDoneString;"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"        String description;"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"        assert splits.length \u003d\u003d 3 : \"Error in storage file duke.txt format.\";"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        isDoneString \u003d splits[1].trim();"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        description \u003d splits[2].trim();"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        assert (isDoneString.equals(\"1\") || isDoneString.equals(\"0\")) : \"Error in storage file duke.txt format.\";"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        assert (!description.equals(\"\")) : \"Error in storage file duke.txt format.\";"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        Todo addedTask \u003d new Todo(description, isDoneString.equals(\"1\"));"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(addedTask);"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"     * Adds a Deadline-task into the task list."},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"     * @param splits An array containing specifics ot the task."},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"    private void readDeadlineTask(String[] splits) {"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"        String isDoneString;"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        String description;"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"        String date;"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"        assert splits.length \u003d\u003d 4 : \"Error in storage file duke.txt format.\";"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"        isDoneString \u003d splits[1].trim();"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        description \u003d splits[2].trim();"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        date \u003d splits[3].trim();"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"        assert (isDoneString.equals(\"1\") || isDoneString.equals(\"0\")) : \"Error in storage file duke.txt format.\";"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"        assert (!description.equals(\"\")) : \"Error in storage file duke.txt format.\";"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"        assert (!date.equals(\"\")) : \"Error in storage file duke.txt format.\";"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"            Deadline addedTask \u003d new Deadline(description, isDoneString.equals(\"1\"), date);"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"            tasks.addTask(addedTask);"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        } catch (DukeException e) {"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"            assert false : \"Error in storage file duke.txt format\";"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"     * Adds a Event-task into the task list."},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"     * @param splits An array containing specifics ot the task."},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"    private void readEventTask(String[] splits) {"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"        String isDoneString;"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"        String description;"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"        String date;"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"        assert splits.length \u003d\u003d 4 : \"Error in storage file duke.txt format.\";"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"        isDoneString \u003d splits[1].trim();"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"        description \u003d splits[2].trim();"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"        date \u003d splits[3].trim();"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"        assert (isDoneString.equals(\"1\") || isDoneString.equals(\"0\")) : \"Error in storage file duke.txt format.\";"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"        assert (!description.equals(\"\")) : \"Error in storage file duke.txt format.\";"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"        assert (!date.equals(\"\")) : \"Error in storage file duke.txt format.\";"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"            Event addedTask \u003d new Event(description, isDoneString.equals(\"1\"), date);"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"            tasks.addTask(addedTask);"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"        } catch (DukeException e) {"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"            assert false : \"Error in storage file duke.txt format\";"},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"    private void writeNewFile(String userInput) throws IOException {"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":"        FileWriter fw \u003d new FileWriter(Storage.DUKE_FILE_PATH);"},{"lineNumber":140,"author":{"gitId":"Ellevy"},"content":"        fw.write(userInput);"},{"lineNumber":141,"author":{"gitId":"Ellevy"},"content":"        fw.close();"},{"lineNumber":142,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":144,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"Ellevy"},"content":"     * Creates a new txt file and writes in all the tasks in the task list."},{"lineNumber":146,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Prints out \"ERROR\" if an error occurs in the process. \u003c/p\u003e"},{"lineNumber":147,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"Ellevy"},"content":"    public void writeTaskList() {"},{"lineNumber":149,"author":{"gitId":"Ellevy"},"content":"        String userInput \u003d tasks.joinToTxt();"},{"lineNumber":150,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":151,"author":{"gitId":"Ellevy"},"content":"            writeNewFile(userInput);"},{"lineNumber":152,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException e) {"},{"lineNumber":153,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"ERROR\");"},{"lineNumber":154,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":157,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":157}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":" * Represents a task object."},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":" * Contains a description and status on whether the task is done."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class Task implements Comparable\u003cTask\u003e {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    /** Stores the description of this Task. */"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    /** Represents whether this Task is done. */"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Task object with a description."},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task."},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"     * Returns description of task."},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"     * @return String representing description of the task."},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    protected String getDescription() {"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        return this.description;"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * Checks whether the task is done or not."},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     * @return String representing a tick if the task is done, else a String of a space."},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    protected String getStatusIcon() {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        if (isDone) {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            return (\"\\u2713\"); //return tick"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            return (\" \");"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     * Checks whether the task is done or not."},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"     * @return Boolean representing whether the task is done."},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"    protected boolean isDone() {"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        return this.isDone;"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * Marks the task as done."},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    protected void markAsDone() {"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        this.isDone \u003d true;"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"     * Returns string object that formats the task to be saved."},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"     * Format:"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Task that is done: 1 | \u0026lt;task_description\u0026lt; \u003c/p\u003e"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Task that is not done: 0 | \u0026lt;task_description\u0026lt; \u003c/p\u003e"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"     * @return String representing task in format to be saved into txt."},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"        int done \u003d isDone ? 1 : 0;"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"        return done + \" | \" + this.description;"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"     * Compares 2 tasks by task description."},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"     * @param task Task that this task is being compared to."},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"     * @return Integer that corresponds to the order of task."},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"    public int compareTo(Task task) {"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        String myDescription \u003d this.getDescription();"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        String otherDescription \u003d task.getDescription();"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        return myDescription.compareTo(otherDescription);"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the task."},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"     * @return String representing whether the task is done and the task description."},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":96}},{"path":"src/main/java/TaskComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.util.Comparator;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":" * Represents a task comparator object that implements a comparator on a Task object."},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":" * Contains a compare method with additional helper methods."},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"public class TaskComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     * Compares the two tasks."},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * Prioritizes events/deadlines that are not done yet."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * Prioritizes earlier dates."},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * @param taskOne Task to be compared."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * @param taskTwo Task to be compared."},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @return Integer representing which task should be prioritized."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public int compare(Task taskOne, Task taskTwo) {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        String taskOneDescription \u003d taskOne.getDescription();"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"        String taskTwoDescription \u003d taskTwo.getDescription();"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        boolean taskOneHasDate \u003d !isTodo(taskOne);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        boolean taskTwoHasDate \u003d !isTodo(taskTwo);"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        LocalDate taskOneDate \u003d LocalDate.now();"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        LocalDate taskTwoDate \u003d LocalDate.now();"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        if (taskOneHasDate) {"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            taskOneDate \u003d getTaskDate(taskOne);"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        if (taskTwoHasDate) {"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"            taskTwoDate \u003d getTaskDate(taskTwo);"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        if (taskOne.isDone() \u0026\u0026 !taskTwo.isDone()) {"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"            return 1;"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        } else if (!taskOne.isDone() \u0026\u0026 taskTwo.isDone()) {"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"            return -1;"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        } else if (taskOneHasDate \u0026\u0026 taskTwoHasDate) {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"            int dateComparison \u003d taskOneDate.compareTo(taskTwoDate);"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            if (dateComparison \u003d\u003d 0) {"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"                return taskOneDescription.compareTo(taskTwoDescription);"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"                return dateComparison;"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        } else if (taskOneHasDate) {"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"            return -1;"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"            return 1;"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     * Checks if task is a Todo-task."},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"     * @param task Task to check."},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"     * @return Boolean representing whether the task is a Todo-task."},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    protected boolean isTodo(Task task) {"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        if (task instanceof Deadline || task instanceof Event) {"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"     * Obtains Date of Event/Deadline-task."},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"     * @param task Task to obtain date of."},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"     * @return LocalDate representing the date associated with this task."},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate getTaskDate(Task task) {"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"            return ((Deadline) task).getDate();"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"            return ((Event) task).getDate();"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":80}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":" * TaskList keeps a list of all tasks."},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    /** List of tasks */"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    private ArrayList\u003cTask\u003e list;"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created TaskList object with an empty list of tasks."},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * Adds a task to the list of tasks."},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * @param taskToAdd Task to be added to the list of tasks."},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    protected void addTask(Task taskToAdd) {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        this.list.add(taskToAdd);"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        this.sortList();"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     * Removes a task from the list of tasks."},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     * @param positionOfTask Position of task to be removed in the list of tasks."},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    protected void removeTask(int positionOfTask) {"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        this.list.remove(positionOfTask - 1);"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        this.sortList();"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     * Returns the number of tasks in the list."},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     * @return Integer representing the size of the list (number of tasks in the list)."},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    protected int getSize() {"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        return this.list.size();"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"     * Returns the task in the given position from the list."},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"     * @param positionOfTask Position of task to get in the list of tasks."},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"     * @return Task in the given position from the list."},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    protected Task getTask(int positionOfTask) {"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"        return this.list.get(positionOfTask - 1);"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"     * Returns a string representation of the list of tasks in txt format."},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the list of tasks in txt format."},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"    protected String joinToTxt() {"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        String joined \u003d \"\";"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        for (Task t : this.list) {"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            joined +\u003d System.lineSeparator() + t.saveTask();"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"        return joined;"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"    protected void sortList() {"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"        TaskComparator taskCompare \u003d new TaskComparator();"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        Collections.sort(this.list, taskCompare);"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"     * Returns list of all events."},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"     * @return String representing the list of all events."},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        String stringToReturn \u003d \"\";"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        for (int i \u003d 1; i \u003c\u003d this.getSize(); i++) {"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"            if (i \u003d\u003d this.getSize()) {"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"                stringToReturn +\u003d \"\\n\" + i + \". \" + this.getTask(i);"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"                stringToReturn +\u003d \"\\n\" + i + \". \" + this.getTask(i) + \"\\n\";"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"        return stringToReturn;"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":94}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":" * Represents a todo-task object that inherits from a task object."},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":" * Contains a description and status on whether the task is done."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":" */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class Todo extends Task {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created todo-task object with a description."},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done."},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * Returns string object that formats the todo-task to be saved."},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     * Format:"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Todo-task that is done: T | 1 | \u0026lt;task_description\u0026lt; \u003c/p\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e Todo-task that is not done: T | 0 | \u0026lt;task_description\u0026lt; \u003c/p\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * @return String representing todo-task in format to be saved into txt."},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        return \"T | \" + super.saveTask();"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the todo-task."},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     * @return String representing whether the todo-task is done and the todo-task description."},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":37}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.effect.DropShadow?\u003e"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"   \u003cchildren\u003e"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        \u003cLabel fx:id\u003d\"dialog\" style\u003d\"-fx-background-color: #338991; -fx-background-radius: 30; -fx-line-spacing: 3; -fx-label-padding: 10;\" text\u003d\"Label\" textFill\u003d\"WHITE\" textOverrun\u003d\"CENTER_WORD_ELLIPSIS\" wrapText\u003d\"true\"\u003e"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"         \u003cfont\u003e"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"            \u003cFont name\u003d\"Lucida Console\" size\u003d\"14.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"         \u003c/font\u003e"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"         \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"         \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"   \u003c/children\u003e"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    \u003cpadding\u003e"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    \u003c/padding\u003e"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"   \u003ceffect\u003e"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"      \u003cDropShadow height\u003d\"40.34\" radius\u003d\"19.777500000000003\" width\u003d\"40.77\" /\u003e"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"   \u003c/effect\u003e"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"      \u003cInsets /\u003e"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Ellevy":38}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.effect.ColorAdjust?\u003e"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"\u003cGridPane minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"410.0\""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"          xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"   \u003ccolumnConstraints\u003e"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"      \u003cColumnConstraints /\u003e"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"   \u003c/columnConstraints\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"   \u003crowConstraints\u003e"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"      \u003cRowConstraints maxHeight\u003d\"488.33331298828125\" minHeight\u003d\"10.0\" prefHeight\u003d\"71.66666666666666\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"      \u003cRowConstraints maxHeight\u003d\"488.33331298828125\" minHeight\u003d\"10.0\" prefHeight\u003d\"475.66666666666674\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"      \u003cRowConstraints maxHeight\u003d\"51.66668701171869\" minHeight\u003d\"10.0\" prefHeight\u003d\"49.66668701171869\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"   \u003c/rowConstraints\u003e"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"   \u003cchildren\u003e"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"407.0\" prefWidth\u003d\"383.0\" vvalue\u003d\"1.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            \u003ccontent\u003e"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"            \u003c/content\u003e"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"400.0\" promptText\u003d\"Insert an input\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"         \u003cfont\u003e"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"            \u003cFont name\u003d\"Monospaced Bold\" size\u003d\"16.0\" /\u003e"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"         \u003c/font\u003e"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"         \u003ceffect\u003e"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"            \u003cColorAdjust brightness\u003d\"-0.19\" hue\u003d\"1.0\" saturation\u003d\"-1.0\" /\u003e"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"         \u003c/effect\u003e"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"         \u003cGridPane.margin\u003e"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"         \u003c/GridPane.margin\u003e"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"      \u003c/TextField\u003e"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"64.0\" style\u003d\"-fx-background-color: #338991;\" text\u003d\"Send\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"2\"\u003e"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"         \u003cfont\u003e"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            \u003cFont name\u003d\"Monospaced Bold\" size\u003d\"16.0\" /\u003e"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"         \u003c/font\u003e"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"         \u003cGridPane.margin\u003e"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"            \u003cInsets right\u003d\"10.0\" /\u003e"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"         \u003c/GridPane.margin\u003e"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"      \u003c/Button\u003e"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"      \u003cTextField fx:id\u003d\"userInput1\" alignment\u003d\"CENTER\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" promptText\u003d\"Insert an input\" style\u003d\"-fx-background-color: black; -fx-text-fill: white;\" text\u003d\"Duke\" GridPane.columnIndex\u003d\"1\"\u003e"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"         \u003cfont\u003e"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"            \u003cFont name\u003d\"DejaVu Sans Mono Bold\" size\u003d\"24.0\" /\u003e"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"         \u003c/font\u003e"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"      \u003c/TextField\u003e"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"   \u003c/children\u003e"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"\u003c/GridPane\u003e"}],"authorContributionMap":{"Ellevy":57}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class DeadlineTest {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    public void deadline_wrongDateFormat_dukeExceptionThrown() {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", false, \"\"));"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", true, \"9 Sep 2019\"));"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", true, \"09-09-2019\"));"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", false, \"2019/09/09\"));"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"D | 1 | return book | 2019-09-09\","},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"                new Deadline(\"return book\", true, \"2019-09-09\").saveTask());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"D | 0 | return book | 2019-09-09\","},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"                new Deadline(\"return book\", false, \"2019-09-09\").saveTask());"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[D][\\u2713] return book (By: 9 Sep 2019)\","},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"                new Deadline(\"return book\", true, \"2019-09-09\").toString());"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[D][ ] return book (By: 9 Sep 2019)\","},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"                new Deadline(\"return book\", false, \"2019-09-09\").toString());"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":31}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class EventTest {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    public void event_wrongDateFormat_dukeExceptionThrown() {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", false, \"\"));"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", true, \"1 Jan 2020\"));"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", true, \"01-01-2020\"));"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", false, \"2020/01/01\"));"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"E | 1 | meeting | 2020-01-01\","},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"                new Event(\"meeting\", true, \"2020-01-01\").saveTask());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"E | 0 | meeting | 2020-01-01\","},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"                new Event(\"meeting\", false, \"2020-01-01\").saveTask());"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[E][\\u2713] meeting (At: 1 Jan 2020)\","},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"                new Event(\"meeting\", true, \"2020-01-01\").toString());"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[E][ ] meeting (At: 1 Jan 2020)\","},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"                new Event(\"meeting\", false, \"2020-01-01\").toString());"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":31}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void setAsDone_invalidInput_argumentExceptionString() throws DukeException {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"            + \"Please enter a valid item number in the list.\";"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done \"));"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done a\"));"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done 0\"));"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done -1\"));"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"done 6\"));"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    public void deleteFromList_invalidInput_argumentExceptionString() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"            + \"Please enter a valid item number in the list.\";"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete \"));"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete a\"));"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete 0\"));"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete -1\"));"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.setAsDone(\"delete 6\"));"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidTodo_argumentExceptionString() {"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"            + \"A todo-task should be specified as follows \\n \""},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"            + \"todo \u003ctask_description\u003e\\n\""},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"            + \"You currently have 0 tasks in the list.\";"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"todo \", false));"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidDeadline_argumentExceptionString() {"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"            + \"A deadline-task should be specified as follows \\n \""},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"            + \"deadline \u003ctask_description\u003e /by \u003ctask_deadline\u003e\\n\""},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"            + \"You currently have 0 tasks in the list.\";"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline \", false));"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline /by \", false));"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline /by jan\", false));"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline return book /by\", false));"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline return book /by \", false));"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline /by 2019-09-09\", false));"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline /by2019-09-09\", false));"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidEvent_argumentExceptionString() {"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Wrong Arguments Specified: \\n\""},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"            + \"A event-task should be specified as follows \\n \""},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"            + \"event \u003cevent_description\u003e /at \u003cevent_date\u003e\\n\""},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"            + \"You currently have 0 tasks in the list.\";"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event \", false));"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event /at \", false));"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event /at jan\", false));"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event return book /at\", false));"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event return book /at \", false));"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event /at 2019-09-09\", false));"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event /at2019-09-09\", false));"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_unknownKeyword_argumentExceptionString() {"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"        String expectedOutput \u003d \"Unidentified Keyword: Please try again using the correct keywords and order :)\\n\""},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"            + \"You currently have 0 tasks in the list.\";"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"\", false));"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\" \", false));"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"s\", false));"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"1\", false));"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"hi\", false));"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"todo\", false));"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"deadline\", false));"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"event\", false));"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"        assertEquals(expectedOutput, parser.addTaskToList(\"Event \", false));"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":125}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TaskListTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testGetSize() throws DukeException {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        assertEquals(3, tasks.getSize());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public void testGetTask() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t1, tasks.getTask(1));"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t2, tasks.getTask(2));"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t3, tasks.getTask(3));"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    public void testJoinToTxt() throws DukeException {"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        assertEquals(System.lineSeparator() + \"T | 0 | join sports club\""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"                + System.lineSeparator() + \"D | 1 | return book | 2019-09-09\""},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"                + System.lineSeparator() + \"E | 0 | meeting | 2020-01-01\" , tasks.joinToTxt());"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"\\n1. [T][ ] join sports club\\n\\n\""},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"                + \"2. [D][\\u2713] return book (By: 9 Sep 2019)\\n\\n\""},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"                + \"3. [E][ ] meeting (At: 1 Jan 2020)\", tasks.toString());"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":73}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TaskTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testGetStatusIcon() {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"\\u2713\", new Todo(\"join sports club\", true).getStatusIcon());"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\" \", new Todo(\"join sports club\", false).getStatusIcon());"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"1 | join sports club\", new Task(\"join sports club\", true).saveTask());"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"0 | join sports club\", new Task(\"join sports club\", false).saveTask());"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[\\u2713] join sports club\","},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"                new Task(\"join sports club\", true).toString());"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[ ] join sports club\","},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"                new Task(\"join sports club\", false).toString());"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":26}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TodoTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"T | 1 | join sports club\","},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"                new Todo(\"join sports club\", true).saveTask());"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"T | 0 | join sports club\","},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"                new Todo(\"join sports club\", false).saveTask());"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() {"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[T][\\u2713] join sports club\","},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"                new Todo(\"join sports club\", true).toString());"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[T][ ] join sports club\","},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"                new Todo(\"join sports club\", false).toString());"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"bye"}],"authorContributionMap":{"Ellevy":11}}]
