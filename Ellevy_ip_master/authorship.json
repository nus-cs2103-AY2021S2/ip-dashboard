[{"path":"src/main/java/ArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class ArgumentException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Wrong Arguments Specified: \";"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"     * Error type according to the list below:"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 1. Format error of a todo-task \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 2. Format error of a deadline-task \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 3. Format error of a event-task \u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 4. Format error of a done or delete command \u003c/p\u003e"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected int type;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created ArgumentException object with the error type."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * @param type Error type according to the list below:"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 1. Format error of a todo-task \u003c/p\u003e"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 2. Format error of a deadline-task \u003c/p\u003e"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 3. Format error of a event-task \u003c/p\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 4. Format error of a done or delete command \u003c/p\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public ArgumentException(int type) {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        this.type \u003d type;"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message depending on the specific error it is associated with"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        if (this.type \u003d\u003d 1) {"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"            return super.toString() + \"A todo-task should be specified as follows \\n todo \u003ctask_description\u003e \\n -----------------------------------------------------\";"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        } else if (this.type \u003d\u003d 2) {"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"            return super.toString() + \"A deadline-task should be specified as follows \\n deadline \u003ctask_description\u003e /by \u003ctask_deadline\u003e \\n -----------------------------------------------------\";"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        } else if (this.type \u003d\u003d 3) {"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"            return super.toString() + \"A event-task should be specified as follows \\n event \u003cevent_description\u003e /at \u003cevent_date\u003e \\n -----------------------------------------------------\";"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            return super.toString() + \"Please enter a valid item number in the list \\n -----------------------------------------------------\";"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":43}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     * Stores the date this event will be due by."},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    protected String by;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created deadline-task object with a description and the date."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     * @param by Date of the task"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        this.by \u003d by;"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the deadline-task"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing whether the deadline-task is done and the deadline-task description with the date"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        return \"[D]\" + super.toString() + \" (By: \" + by + \")\";"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":26}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    public static ArrayList\u003cTask\u003e ls \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Duke: Hello I\u0027m Duke, what can I do for you?\");"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Enter an input (\u0027bye\u0027 to quit): \");"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        String userInput \u003d sc.nextLine();"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"User Input: \" + userInput);"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        while (!\"bye\".equals(userInput)) {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"            if (\"list\".equals(userInput)) {"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"                Duke.printList();"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"            } else if (userInput.startsWith(\"done \")) {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"                try {"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"                    Duke.setAsDone(userInput);"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"                } catch (DukeException ex) {"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"                    System.out.println(ex);"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"                }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"            } else if (userInput.startsWith(\"delete \")) {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"                try {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"                    Duke.deleteFromList(userInput);"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"                } catch (DukeException ex) {"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"                    System.out.println(ex);"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"                }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"                try {"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"                    Duke.addTask(userInput);"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"                } catch (DukeException ex) {"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"                    System.out.println(ex);"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"Enter an input (\u0027bye\u0027 to quit): \");"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"            userInput \u003d sc.nextLine();"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"User Input: \" + userInput);"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Duke: Bye, hope to see you again! :)\");"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     * Prints out the list of all events."},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    public static void printList() {"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"        for (int i\u003d1; i\u003c\u003dDuke.ls.size(); i++) {"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"  \" + i + \". \" + Duke.ls.get(i-1));"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     * Sets a task as done and prints out the task marked as done."},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: done \u0026lt;indexOfItem\u0026gt;"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the indexOfItem given is invalid"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"    public static void setAsDone(String userInput) throws DukeException {"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"            int indexToMark \u003d Integer.parseInt(userInput.substring(5));"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"            Task ts \u003d Duke.ls.get(indexToMark - 1);"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"            ts.markAsDone();"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"  \" + ts);"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"            throw new ArgumentException(4);"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"     * Deletes a task in the list and prints out the task deleted with the remaining number of tasks in the list."},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: delete \u0026lt;indexOfItem\u0026gt;"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the indexOfItem given is invalid"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"    public static void deleteFromList(String userInput) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"            int indexToDelete \u003d Integer.parseInt(userInput.substring(7));"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"            Task ts \u003d Duke.ls.get(indexToDelete - 1);"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"            Duke.ls.remove(indexToDelete - 1);"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"Okay! I\u0027ve removed this task: \");"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"  \" + ts);"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"Now you have \" + Duke.ls.size() + \" tasks in the list.\");"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"            throw new ArgumentException(4);"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"     * Adds a task into the list and prints out the task added with the number of tasks in the list."},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the given formats for each task type:"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e todo task: todo \u0026lt;task_description\u0026gt; \u003c/p\u003e"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e deadline task: deadline \u0026lt;task_description\u0026gt; /by \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e event task: event \u0026lt;event_description\u0026gt; /at \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the keyword or format is wrong."},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"    public static void addTask(String userInput) throws DukeException {"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"        if (userInput.startsWith(\"todo \")) {"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"todo \");"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"            if (splits.length \u003d\u003d 2) {"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"                Todo addedTask \u003d new Todo(Arrays.asList(splits).get(1));"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"                Duke.ls.add(addedTask);"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"Got it, I\u0027ve added this task to the list: \");"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"  \" + addedTask);"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"                throw new ArgumentException(1);"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"deadline \")) {"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"deadline |/by \");"},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"            System.out.println(Arrays.asList(splits));"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"            if ((splits.length \u003d\u003d 3) \u0026\u0026 !(splits[1].equals(\"\")) \u0026\u0026 !(splits[2].equals(\"\"))) {"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"                Deadline addedTask \u003d new Deadline(Arrays.asList(splits).get(1), Arrays.asList(splits).get(2));"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"                Duke.ls.add(addedTask);"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"Got it, I\u0027ve added this task to the list: \");"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"  \" + addedTask);"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"                throw new ArgumentException(2);"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"event \")) {"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"event |/at \");"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":"            if ((splits.length \u003d\u003d 3) \u0026\u0026 !(splits[1].equals(\"\")) \u0026\u0026 !(splits[2].equals(\"\"))) {"},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"                Event addedTask \u003d new Event(Arrays.asList(splits).get(1), Arrays.asList(splits).get(2));"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"                Duke.ls.add(addedTask);"},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"Got it, I\u0027ve added this task to the list: \");"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"  \" + addedTask);"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"                throw new ArgumentException(3);"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":"            throw new KeywordException();"},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Now you have \" + Duke.ls.size() + \" tasks in the list.\");"},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":138,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Ellevy":136,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.lang.Exception;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DukeException object without a message."},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    DukeException() {"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"        super();"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DukeException object with a given message."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * @param message Error message given for the exception"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    DukeException(String message) {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        super(message);"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        return getMessage();"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":27}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     * Stores the date this event will be at."},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    protected String at;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created event-task object with a description and the date."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     * @param at Date of the task"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    public Event(String description, String at) {"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        this.at \u003d at;"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the event-task"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing whether the event-task is done and the event-task description with the date"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        return \"[E]\" + super.toString() + \" (At: \" + at + \")\";"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":26}},{"path":"src/main/java/KeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class KeywordException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     * Fixed message for all KeywordExceptions"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Unidentified Keyword: Please try again using the correct keywords and order :)\";"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created KeywordException object with the default MESSAGE."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    public KeywordException() {"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        return super.toString() + \"\\n -----------------------------------------------------\";"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":24}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"     * Stores the description of this Task."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"     * Represents whether this Task is done."},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Task object with a description."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     * Checks whether the task is done or not."},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * @return String representing a tick if the task is done, else a String of a space"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    public String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        if (isDone) {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"            return (\"\\u2713\"); //return tick"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            return (\" \");"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"     * Marks the task as done."},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    public void markAsDone() {"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        this.isDone \u003d true;"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the task"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing whether the task is done and the task description"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" +  this.description;"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":47}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created todo-task object with a description."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    public Todo(String description) {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the todo-task"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing whether the todo-task is done and the todo-task description"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"bye"}],"authorContributionMap":{"Ellevy":11}}]
