[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"T | 1 | join sports club"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"D | 1 | return book  | 2019-09-09"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"E | 0 | meeting | 2020-01-01"}],"authorContributionMap":{"Ellevy":4}},{"path":"src/main/java/ArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class ArgumentException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Wrong Arguments Specified: \";"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"     * Error type according to the list below:"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 1. Format error of a todo-task \u003c/p\u003e"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 2. Format error of a deadline-task \u003c/p\u003e"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 3. Format error of a event-task \u003c/p\u003e"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     * \u003cp\u003e 4. Format error of a done or delete command \u003c/p\u003e"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected int type;"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created ArgumentException object with the error type."},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * @param type Error type according to the list below:"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 1. Format error of a todo-task \u003c/p\u003e"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 2. Format error of a deadline-task \u003c/p\u003e"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 3. Format error of a event-task \u003c/p\u003e"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     *             \u003cp\u003e 4. Format error of a done or delete command \u003c/p\u003e"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    public ArgumentException(int type) {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        this.type \u003d type;"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message depending on the specific error it is associated with"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        if (this.type \u003d\u003d 1) {"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"            return super.toString() + \"A todo-task should be specified as follows \\n todo \u003ctask_description\u003e \\n -----------------------------------------------------\";"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        } else if (this.type \u003d\u003d 2) {"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"            return super.toString() + \"A deadline-task should be specified as follows \\n deadline \u003ctask_description\u003e /by \u003ctask_deadline\u003e \\n -----------------------------------------------------\";"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        } else if (this.type \u003d\u003d 3) {"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"            return super.toString() + \"A event-task should be specified as follows \\n event \u003cevent_description\u003e /at \u003cevent_date\u003e \\n -----------------------------------------------------\";"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"            return super.toString() + \"Please enter a valid item number in the list \\n -----------------------------------------------------\";"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":43}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     * Stores the date this event will be due by."},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate by;"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created deadline-task object with a description and the date."},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * @param by Date of the task (yyyy-mm-dd)"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    public Deadline(String description, boolean isDone, String by) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"            throw new DukeException(\"Incorrect date format: Please specify the date as yyyy-mm-dd :)\");"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() { return \"D | \" + super.saveTask() + \" | \" + this.by; }"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the deadline-task"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing whether the deadline-task is done and the deadline-task description with the date"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        return \"[D]\" + super.toString() + \" (By: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":37}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    private Storage storage;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    private Parser parser;"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    private Ui ui;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    public Duke() {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        storage \u003d new Storage(tasks);"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        parser \u003d new Parser(tasks);"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"            duke.storage.loadData();"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"            duke.parser.printList();"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"File not found :(\");"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        duke.ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        String userInput \u003d duke.ui.nextInput();"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        while (!\"bye\".equals(userInput)) {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"            duke.parser.processCommand(userInput);"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            duke.storage.writeTaskList();"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            userInput \u003d duke.ui.nextInput();"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        duke.ui.close();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Ellevy":28,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.lang.Exception;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DukeException object without a message."},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    DukeException() {"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"        super();"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created DukeException object with a given message."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * @param message Error message given for the exception"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    DukeException(String message) {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        super(message);"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        return getMessage();"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":27}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     * Stores the date this event will be at."},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    protected LocalDate at;"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created event-task object with a description and the date."},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     * @param at Date of the task (yyyy-mm-dd)"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public Event(String description, boolean isDone, String at) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"            this.at \u003d LocalDate.parse(at);"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"            throw new DukeException(\"Incorrect date format: Please specify the date as yyyy-mm-dd :)\");"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() { return \"E | \" + super.saveTask() + \" | \" + this.at; }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the event-task"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing whether the event-task is done and the event-task description with the date"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        return \"[E]\" + super.toString() + \" (At: \" + at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":36}},{"path":"src/main/java/KeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class KeywordException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     * Fixed message for all KeywordExceptions"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    static final String MESSAGE \u003d \"Unidentified Keyword: Please try again using the correct keywords and order :)\";"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created KeywordException object with the default MESSAGE."},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    public KeywordException() {"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        super(MESSAGE);"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the error message"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing the error message"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        return super.toString() + \"\\n -----------------------------------------------------\";"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":24}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.util.Arrays;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"public class Parser {"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    public Parser(TaskList tasks) {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"     * Processes a command given by user."},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Command from user"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    protected void processCommand(String userInput) {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        if (\"list\".equals(userInput)) {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"            printList();"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"done \")) {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"            try {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"                setAsDone(userInput);"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"            } catch (DukeException ex) {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"                System.out.println(ex);"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"delete \")) {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"            try {"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"                deleteFromList(userInput);"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"            } catch (DukeException ex) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"                System.out.println(ex);"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"            try {"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"                addTaskToList(userInput, false);"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"            } catch (DukeException ex) {"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"                System.out.println(ex);"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"     * Sets a task as done and prints out the task marked as done."},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: done \u0026lt;indexOfItem\u0026gt;"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the indexOfItem given is invalid"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    protected void setAsDone(String userInput) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            int indexToMark \u003d Integer.parseInt(userInput.substring(5));"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"            Task ts \u003d tasks.getTask(indexToMark);"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"            ts.markAsDone();"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"  \" + ts);"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"            throw new ArgumentException(4);"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"     * Deletes a task in the list and prints out the task deleted with the remaining number of tasks in the list."},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the format: delete \u0026lt;indexOfItem\u0026gt;"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the indexOfItem given is invalid"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"    protected void deleteFromList(String userInput) throws DukeException {"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"            int indexToDelete \u003d Integer.parseInt(userInput.substring(7));"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"            Task ts \u003d tasks.getTask(indexToDelete);"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"            tasks.removeTask(indexToDelete);"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"Okay! I\u0027ve removed this task: \");"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"  \" + ts);"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"            throw new ArgumentException(4);"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"     * Adds a task into the list and prints out the task added with the number of tasks in the list."},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"     * @param userInput Takes in command from user in the given formats for each task type:"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e todo task: todo \u0026lt;task_description\u0026gt; \u003c/p\u003e"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e deadline task: deadline \u0026lt;task_description\u0026gt; /by \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"     *                  \u003cp\u003e event task: event \u0026lt;event_description\u0026gt; /at \u0026lt;date\u0026gt; \u003c/p\u003e"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"     * @param isDone True if task to be added is done, else false."},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"     * @throws DukeException Throws error if the keyword or format is wrong."},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":"    protected void addTaskToList(String userInput, boolean isDone) throws DukeException {"},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"        if (userInput.startsWith(\"todo \")) {"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"todo \");"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"            if (splits.length \u003d\u003d 2) {"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"                Todo addedTask \u003d new Todo(Arrays.asList(splits).get(1), isDone);"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":"                tasks.addTask(addedTask);"},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"Got it, I\u0027ve added this task to the list: \");"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"  \" + addedTask);"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"                throw new ArgumentException(1);"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"deadline \")) {"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"deadline |/by \");"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"            if ((splits.length \u003d\u003d 3) \u0026\u0026 !(splits[1].equals(\"\")) \u0026\u0026 !(splits[2].equals(\"\"))) {"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"                try {"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"                    Deadline addedTask \u003d new Deadline(Arrays.asList(splits).get(1), isDone, Arrays.asList(splits).get(2));"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":"                    tasks.addTask(addedTask);"},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"                    System.out.println(\"Got it, I\u0027ve added this task to the list: \");"},{"lineNumber":102,"author":{"gitId":"Ellevy"},"content":"                    System.out.println(\"  \" + addedTask);"},{"lineNumber":103,"author":{"gitId":"Ellevy"},"content":"                } catch (DukeException ex) {"},{"lineNumber":104,"author":{"gitId":"Ellevy"},"content":"                    System.out.println(ex);"},{"lineNumber":105,"author":{"gitId":"Ellevy"},"content":"                }"},{"lineNumber":106,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":107,"author":{"gitId":"Ellevy"},"content":"                throw new ArgumentException(2);"},{"lineNumber":108,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"Ellevy"},"content":"        } else if (userInput.startsWith(\"event \")) {"},{"lineNumber":110,"author":{"gitId":"Ellevy"},"content":"            String[] splits \u003d userInput.split(\"event | /at \");"},{"lineNumber":111,"author":{"gitId":"Ellevy"},"content":"            if ((splits.length \u003d\u003d 3) \u0026\u0026 !(splits[1].equals(\"\")) \u0026\u0026 !(splits[2].equals(\"\"))) {"},{"lineNumber":112,"author":{"gitId":"Ellevy"},"content":"                Event addedTask \u003d new Event(Arrays.asList(splits).get(1), isDone, Arrays.asList(splits).get(2));"},{"lineNumber":113,"author":{"gitId":"Ellevy"},"content":"                tasks.addTask(addedTask);"},{"lineNumber":114,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"Got it, I\u0027ve added this task to the list: \");"},{"lineNumber":115,"author":{"gitId":"Ellevy"},"content":"                System.out.println(\"  \" + addedTask);"},{"lineNumber":116,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":117,"author":{"gitId":"Ellevy"},"content":"                throw new ArgumentException(3);"},{"lineNumber":118,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":120,"author":{"gitId":"Ellevy"},"content":"            throw new KeywordException();"},{"lineNumber":121,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");"},{"lineNumber":123,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":124,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":126,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"Ellevy"},"content":"     * Prints out the list of all events."},{"lineNumber":128,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"Ellevy"},"content":"    protected void printList() {"},{"lineNumber":130,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":131,"author":{"gitId":"Ellevy"},"content":"        System.out.println(tasks.toString());"},{"lineNumber":132,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":133,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":135,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":136,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":137,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":137}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"public class Storage {"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    private final String DATA_FOLDER_PATH \u003d \"data\";"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    private final String DUKE_FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"    public Storage(TaskList tasks) {"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    public void loadData() throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        File dataFolder \u003d new File(DATA_FOLDER_PATH);"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        if (!dataFolder.exists()) {"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"            dataFolder.mkdir();"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        File dukeFile \u003d new File(DUKE_FILE_PATH);"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        if (dukeFile.exists()) {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"            Scanner s \u003d new Scanner(dukeFile); // create a Scanner using the File as the source"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            while (s.hasNext()) {"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"                readTaskList(s.nextLine());"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    public void readTaskList(String taskData) {"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        String[] splits \u003d taskData.split(\" \\\\| \");"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        if (splits[0].equals(\"T\")) {"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"            Todo addedTask \u003d new Todo(Arrays.asList(splits).get(2), Arrays.asList(splits).get(1).equals(\"1\"));"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"            tasks.addTask(addedTask);"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        } else if (splits[0].equals(\"D\")) {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"                Deadline addedTask \u003d new Deadline(Arrays.asList(splits).get(2), Arrays.asList(splits).get(1).equals(\"1\"), Arrays.asList(splits).get(3));"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"                tasks.addTask(addedTask);"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"            } catch (DukeException e) {"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"                System.out.println(e);"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        } else if (splits[0].equals(\"E\")) {"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"                Event addedTask \u003d new Event(Arrays.asList(splits).get(2), Arrays.asList(splits).get(1).equals(\"1\"), Arrays.asList(splits).get(3));"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"                tasks.addTask(addedTask);"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"            } catch (DukeException e) {"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"                System.out.println(e);"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    public void writeNewFile(String userInput) throws IOException {"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"        FileWriter fw \u003d new FileWriter(DUKE_FILE_PATH);"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"        fw.write(userInput);"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        fw.close();"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"    public void writeTaskList() {"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        String userInput \u003d tasks.joinToTxt();"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"            writeNewFile(userInput);"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        } catch (IOException e) {"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"            System.out.println(\"ERROR\");"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":70}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"     * Stores the description of this Task."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"     * Represents whether this Task is done."},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created Task object with a description."},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     * @param isDone Whether or not the task is done"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"     * Checks whether the task is done or not."},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"     * @return String representing a tick if the task is done, else a String of a space"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"    protected String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        if (isDone) {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"            return (\"\\u2713\"); //return tick"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        } else {"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"            return (\" \");"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"     * Marks the task as done."},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"    protected void markAsDone() {"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        this.isDone \u003d true;"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() {"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        int done \u003d isDone ? 1 : 0;"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        return done + \" | \" + this.description;"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the task"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing whether the task is done and the task description"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" +  this.description;"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":53}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"public class TaskList {"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    private ArrayList\u003cTask\u003e list;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    public TaskList() {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    protected void addTask(Task taskToAdd) {"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        this.list.add(taskToAdd);"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    protected void removeTask(int i) {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        this.list.remove(i-1);"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"    protected int getSize() {"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        return this.list.size();"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    protected Task getTask(int i) {"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        return this.list.get(i - 1);"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    protected String joinToTxt() {"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        String joined \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        for (Task t : this.list) {"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"            joined +\u003d System.lineSeparator() + t.saveTask();"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        return joined;"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"     * Returns list of all events."},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"        String stringToReturn \u003d \"\";"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        for (int i\u003d1; i\u003c\u003dthis.getSize(); i++) {"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"            if (i\u003d\u003dthis.getSize()) {"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"                stringToReturn +\u003d \"  \" + i + \". \" + this.getTask(i);"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"                stringToReturn +\u003d \"  \" + i + \". \" + this.getTask(i) + \"\\n\";"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        return stringToReturn;"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":50}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"     * Initializes a newly created todo-task object with a description."},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"     * @param description Description of the task"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"        super(description, isDone);"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    protected String saveTask() { return \"T | \" + super.saveTask(); }"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"     * Converts this object to a string that represents the todo-task"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"     * @return A string representing whether the todo-task is done and the todo-task description"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":20}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"    private Scanner sc;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"    public Ui() {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Duke: Hello I\u0027m Duke, what can I do for you?\");"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"    protected String nextInput() {"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Enter an input (\u0027bye\u0027 to quit): \");"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"        String userInput \u003d sc.nextLine();"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"User Input: \" + userInput);"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        return userInput;"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    protected void close() {"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"Duke: Bye, hope to see you again! :)\");"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        System.out.println(\"-----------------------------------------------------\");"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":24}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class DeadlineTest {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    public void deadline_wrongDateFormat_dukeExceptionThrown() {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", false, \"\"));"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", true, \"9 Sep 2019\"));"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", true, \"09-09-2019\"));"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Deadline(\"return book\", false, \"2019/09/09\"));"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"D | 1 | return book | 2019-09-09\", new Deadline(\"return book\", true, \"2019-09-09\").saveTask());"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"D | 0 | return book | 2019-09-09\", new Deadline(\"return book\", false, \"2019-09-09\").saveTask());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[D][\\u2713] return book (By: 9 Sep 2019)\", new Deadline(\"return book\", true, \"2019-09-09\").toString());"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[D][ ] return book (By: 9 Sep 2019)\", new Deadline(\"return book\", false, \"2019-09-09\").toString());"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":27}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"public class EventTest {"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"    public void event_wrongDateFormat_dukeExceptionThrown() {"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", false, \"\"));"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", true, \"1 Jan 2020\"));"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", true, \"01-01-2020\"));"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        assertThrows(DukeException.class, () -\u003e new Event(\"meeting\", false, \"2020/01/01\"));"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"E | 1 | meeting | 2020-01-01\", new Event(\"meeting\", true, \"2020-01-01\").saveTask());"},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"E | 0 | meeting | 2020-01-01\", new Event(\"meeting\", false, \"2020-01-01\").saveTask());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[E][\\u2713] meeting (At: 1 Jan 2020)\", new Event(\"meeting\", true, \"2020-01-01\").toString());"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[E][ ] meeting (At: 1 Jan 2020)\", new Event(\"meeting\", false, \"2020-01-01\").toString());"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":27}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void setAsDone_invalidInput_argumentExceptionThrown() throws DukeException {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.setAsDone(\"done \"));"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.setAsDone(\"done a\"));"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.setAsDone(\"done 0\"));"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.setAsDone(\"done -1\"));"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.setAsDone(\"done 6\"));"},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":"    public void deleteFromList_invalidInput_argumentExceptionThrown() throws DukeException {"},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.deleteFromList(\"delete \"));"},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.deleteFromList(\"delete a\"));"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.deleteFromList(\"delete 0\"));"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.deleteFromList(\"delete -1\"));"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.deleteFromList(\"delete 6\"));"},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidTodo_argumentExceptionThrown() {"},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"todo \", false));"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidDeadline_argumentExceptionThrown() {"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"deadline \", false));"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"deadline /by \", false));"},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"deadline /by jan\", false));"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"deadline return book /by\", false));"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"deadline return book /by \", false));"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"deadline /by 2019-09-09\", false));"},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"deadline /by2019-09-09\", false));"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_invalidEvent_argumentExceptionThrown() {"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":74,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":75,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":76,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"event \", false));"},{"lineNumber":77,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"event /at \", false));"},{"lineNumber":78,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"event /at jan\", false));"},{"lineNumber":79,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"event return book /at\", false));"},{"lineNumber":80,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"event return book /at \", false));"},{"lineNumber":81,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"event /at 2019-09-09\", false));"},{"lineNumber":82,"author":{"gitId":"Ellevy"},"content":"        assertThrows(ArgumentException.class, () -\u003e parser.addTaskToList(\"event /at2019-09-09\", false));"},{"lineNumber":83,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":85,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"Ellevy"},"content":"    public void addTaskToList_unknownKeyword_argumentExceptionThrown() {"},{"lineNumber":87,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":88,"author":{"gitId":"Ellevy"},"content":"        Parser parser \u003d new Parser(tasks);"},{"lineNumber":89,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":90,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\"\", false));"},{"lineNumber":91,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\" \", false));"},{"lineNumber":92,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\"s\", false));"},{"lineNumber":93,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\"1\", false));"},{"lineNumber":94,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\"hi\", false));"},{"lineNumber":95,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\"todo\", false));"},{"lineNumber":96,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\"deadline\", false));"},{"lineNumber":97,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\"event\", false));"},{"lineNumber":98,"author":{"gitId":"Ellevy"},"content":"        assertThrows(KeywordException.class, () -\u003e parser.addTaskToList(\"Event \", false));"},{"lineNumber":99,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":101,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":101}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TaskListTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testGetSize() throws DukeException {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"        assertEquals(3, tasks.getSize());"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    public void testGetTask() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":26,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":27,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":28,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":29,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":30,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":31,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":32,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":33,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":34,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t1, tasks.getTask(1));"},{"lineNumber":35,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t2, tasks.getTask(2));"},{"lineNumber":36,"author":{"gitId":"Ellevy"},"content":"        assertEquals(t3, tasks.getTask(3));"},{"lineNumber":37,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":39,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Ellevy"},"content":"    public void testJoinToTxt() throws DukeException {"},{"lineNumber":41,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":43,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":44,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":45,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":46,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":47,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":48,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":49,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":50,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":51,"author":{"gitId":"Ellevy"},"content":"        assertEquals(System.lineSeparator() + \"T | 0 | join sports club\""},{"lineNumber":52,"author":{"gitId":"Ellevy"},"content":"                + System.lineSeparator() + \"D | 1 | return book | 2019-09-09\""},{"lineNumber":53,"author":{"gitId":"Ellevy"},"content":"                + System.lineSeparator() + \"E | 0 | meeting | 2020-01-01\" , tasks.joinToTxt());"},{"lineNumber":54,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":56,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() throws DukeException {"},{"lineNumber":58,"author":{"gitId":"Ellevy"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":59,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":60,"author":{"gitId":"Ellevy"},"content":"        Task t1 \u003d new Todo(\"join sports club\", false);"},{"lineNumber":61,"author":{"gitId":"Ellevy"},"content":"        Task t2 \u003d new Deadline(\"return book\", true, \"2019-09-09\");"},{"lineNumber":62,"author":{"gitId":"Ellevy"},"content":"        Task t3 \u003d new Event(\"meeting\", false, \"2020-01-01\");"},{"lineNumber":63,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":64,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t1);"},{"lineNumber":65,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t2);"},{"lineNumber":66,"author":{"gitId":"Ellevy"},"content":"        tasks.addTask(t3);"},{"lineNumber":67,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":68,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"  1. [T][ ] join sports club\\n\" +"},{"lineNumber":69,"author":{"gitId":"Ellevy"},"content":"                \"  2. [D][\\u2713] return book (By: 9 Sep 2019)\\n\" +"},{"lineNumber":70,"author":{"gitId":"Ellevy"},"content":"                \"  3. [E][ ] meeting (At: 1 Jan 2020)\", tasks.toString());"},{"lineNumber":71,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":72,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":73}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TaskTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testGetStatusIcon() {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"\\u2713\", new Todo(\"join sports club\", true).getStatusIcon());"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\" \", new Todo(\"join sports club\", false).getStatusIcon());"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"1 | join sports club\", new Task(\"join sports club\", true).saveTask());"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"0 | join sports club\", new Task(\"join sports club\", false).saveTask());"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":19,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() {"},{"lineNumber":21,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[\\u2713] join sports club\", new Task(\"join sports club\", true).toString());"},{"lineNumber":22,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[ ] join sports club\", new Task(\"join sports club\", false).toString());"},{"lineNumber":23,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":24}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"public class TodoTest {"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"    public void testSaveTask() {"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"T | 1 | join sports club\", new Todo(\"join sports club\", true).saveTask());"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"T | 0 | join sports club\", new Todo(\"join sports club\", false).saveTask());"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Ellevy"},"content":""},{"lineNumber":13,"author":{"gitId":"Ellevy"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Ellevy"},"content":"    public void testStringConversion() {"},{"lineNumber":15,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[T][\\u2713] join sports club\", new Todo(\"join sports club\", true).toString());"},{"lineNumber":16,"author":{"gitId":"Ellevy"},"content":"        assertEquals(\"[T][ ] join sports club\", new Todo(\"join sports club\", false).toString());"},{"lineNumber":17,"author":{"gitId":"Ellevy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Ellevy"},"content":"}"}],"authorContributionMap":{"Ellevy":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Ellevy"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"Ellevy"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"Ellevy"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"Ellevy"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"Ellevy"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"Ellevy"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"Ellevy"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"Ellevy"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Ellevy"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"Ellevy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"Ellevy"},"content":"bye"}],"authorContributionMap":{"Ellevy":11}}]
