[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":61}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"done"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"exit $ret"}],"authorContributionMap":{"skinnychenpi":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"\u0027"}],"authorContributionMap":{"skinnychenpi":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"\u0027"}],"authorContributionMap":{"skinnychenpi":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"done"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"exit $ret"}],"authorContributionMap":{"skinnychenpi":11}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"0|[T]go tos chosd"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"1|[T]set"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"0|[E]go to sleep (at: Oct 10 2020 19:00)"}],"authorContributionMap":{"skinnychenpi":3}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":":init"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"@rem Execute Gradle"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":":end"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":":fail"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"exit /b 1"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":":mainEnd"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":":omega"}],"authorContributionMap":{"skinnychenpi":104}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import javafx.geometry.Pos;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"public class DialogBox extends HBox {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    private Label text;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    private ImageView displayPicture;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public DialogBox(Label l, ImageView iv) {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        text \u003d l;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        displayPicture \u003d iv;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        text.setWrapText(true);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        displayPicture.setFitWidth(100.0);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        displayPicture.setFitHeight(100.0);"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        this.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        this.getChildren().addAll(text, displayPicture);"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    private void flip() {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        return new DialogBox(l, iv);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        var db \u003d new DialogBox(l, iv);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        db.flip();"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        return db;"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":48}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.Scene;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.Button;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import javafx.stage.Stage;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":" * The Duke program is a program that can help you"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":" * with the schedule management such as adding events, deadlines and todos"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":" * to it and it can also help you manage the tasks such as deleting tasks."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":" * Hope you like it!"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":" * @author skinnychenpi"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":" * @since 2021-01-18"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"public class Duke extends Application {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    private Scanner keyboard;"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    private Storage storage;"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    private VBox dialogContainer;"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    private TextField userInput;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    private Button sendButton;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    private Scene scene;"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     * A default constructor for Duke class"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public Duke(){}"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public void start(Stage stage) {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        userInput \u003d new TextField();"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        stage.setScene(scene);"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        stage.setResizable(false);"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        //Step 3. Add functionality to handle user input."},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"            userInput.clear();"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        });"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"            userInput.clear();"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"        });"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes."},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"        // This part is to read the txt file."},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        keyboard \u003d new Scanner(System.in);"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"        storage \u003d new Storage(\"./data/duke.txt\", \"./data\");"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"            taskList \u003d storage.readTasks(taskList);"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d \"OOPS! There is something wrong: \" + e.getMessage();"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"            Label dukeText \u003d new Label(botMessage);"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"                    DialogBox.getDukeDialog(dukeText, new ImageView(duke))"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"            );"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"        //Part 3. Add functionality to handle user input."},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        TaskList finalTaskList \u003d taskList;"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"            handleUserInput(finalTaskList);"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        });"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"            handleUserInput(finalTaskList);"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"        });"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"        stage.show();"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"        // Save the taskList to the txt file. Due to the property of Lambda, the final task list can\u0027t be"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"        // extracted after execution, and hence the save part will only save the imported tasks. Need to fix."},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"            storage.saveTasks(finalTaskList);"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(\"TXT file saved successfully!\");"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d \"OOPS! There is something wrong: \" + e.getMessage();"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(botMessage);"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"     * Iteration 1:"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"     * Creates a label with the specified text and adds it to the dialog container."},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"     * @param text String containing text to add"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"     * @return a label with the specified text that has word wrap enabled."},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"    private Label getDialogLabel(String text) {"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"        // You will need to import `javafx.scene.control.Label`."},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"        Label textToAdd \u003d new Label(text);"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"        textToAdd.setWrapText(true);"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"        return textToAdd;"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"     * Iteration 2:"},{"lineNumber":171,"author":{"gitId":"skinnychenpi"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":172,"author":{"gitId":"skinnychenpi"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"skinnychenpi"},"content":"    private void handleUserInput(TaskList taskList) {"},{"lineNumber":175,"author":{"gitId":"skinnychenpi"},"content":"        Label userText \u003d new Label(userInput.getText());"},{"lineNumber":176,"author":{"gitId":"skinnychenpi"},"content":"        Label dukeText \u003d new Label(getResponse(userInput.getText(), taskList));"},{"lineNumber":177,"author":{"gitId":"skinnychenpi"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":178,"author":{"gitId":"skinnychenpi"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),"},{"lineNumber":179,"author":{"gitId":"skinnychenpi"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"        );"},{"lineNumber":181,"author":{"gitId":"skinnychenpi"},"content":"        userInput.clear();"},{"lineNumber":182,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":184,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"skinnychenpi"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":186,"author":{"gitId":"skinnychenpi"},"content":"     * Replace this stub with your completed method."},{"lineNumber":187,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"skinnychenpi"},"content":"    private String getResponse(String input, TaskList taskList) {"},{"lineNumber":189,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":190,"author":{"gitId":"skinnychenpi"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d c.execute(taskList);"},{"lineNumber":192,"author":{"gitId":"skinnychenpi"},"content":"            return \"Duke says: \" + botMessage;"},{"lineNumber":193,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":194,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d e.getMessage();"},{"lineNumber":195,"author":{"gitId":"skinnychenpi"},"content":"            return \"Duke says: \" + botMessage;"},{"lineNumber":196,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":200,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":201,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":202,"author":{"gitId":"skinnychenpi"},"content":"//    private Scanner keyboard;"},{"lineNumber":203,"author":{"gitId":"skinnychenpi"},"content":"//    private Storage storage;"},{"lineNumber":204,"author":{"gitId":"skinnychenpi"},"content":"//    private Ui ui;"},{"lineNumber":205,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":206,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":207,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":208,"author":{"gitId":"skinnychenpi"},"content":"//     * A constructor for Duke class"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"//     *"},{"lineNumber":210,"author":{"gitId":"skinnychenpi"},"content":"//     * @param filePath The file path that stores the task list."},{"lineNumber":211,"author":{"gitId":"skinnychenpi"},"content":"//     * @param dirPath The directory path that stores the directory of the task list file."},{"lineNumber":212,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":213,"author":{"gitId":"skinnychenpi"},"content":"//    public Duke(String filePath, String dirPath) {"},{"lineNumber":214,"author":{"gitId":"skinnychenpi"},"content":"//        keyboard \u003d new Scanner(System.in);"},{"lineNumber":215,"author":{"gitId":"skinnychenpi"},"content":"//        ui \u003d new Ui();"},{"lineNumber":216,"author":{"gitId":"skinnychenpi"},"content":"//        storage \u003d new Storage(filePath, dirPath);"},{"lineNumber":217,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":218,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":219,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":220,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":221,"author":{"gitId":"skinnychenpi"},"content":"//     * Starts function to run the program."},{"lineNumber":222,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":223,"author":{"gitId":"skinnychenpi"},"content":"//    public void run() {"},{"lineNumber":224,"author":{"gitId":"skinnychenpi"},"content":"//        TaskList taskList \u003d new TaskList();"},{"lineNumber":225,"author":{"gitId":"skinnychenpi"},"content":"//        // Read from storage"},{"lineNumber":226,"author":{"gitId":"skinnychenpi"},"content":"//        try {"},{"lineNumber":227,"author":{"gitId":"skinnychenpi"},"content":"//            taskList \u003d storage.readTasks(taskList);"},{"lineNumber":228,"author":{"gitId":"skinnychenpi"},"content":"//        } catch (Exception e) {"},{"lineNumber":229,"author":{"gitId":"skinnychenpi"},"content":"//            ui.display(\"OOPS! There is something wrong: \" + e.getMessage());"},{"lineNumber":230,"author":{"gitId":"skinnychenpi"},"content":"//        }"},{"lineNumber":231,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":232,"author":{"gitId":"skinnychenpi"},"content":"//        // In Execution"},{"lineNumber":233,"author":{"gitId":"skinnychenpi"},"content":"//        ui.welcome();"},{"lineNumber":234,"author":{"gitId":"skinnychenpi"},"content":"//        boolean isExit \u003d false;"},{"lineNumber":235,"author":{"gitId":"skinnychenpi"},"content":"//        while (!isExit) {"},{"lineNumber":236,"author":{"gitId":"skinnychenpi"},"content":"//            try {"},{"lineNumber":237,"author":{"gitId":"skinnychenpi"},"content":"//                String fullCommand \u003d ui.readCommand(keyboard);"},{"lineNumber":238,"author":{"gitId":"skinnychenpi"},"content":"//                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":239,"author":{"gitId":"skinnychenpi"},"content":"//                c.execute(taskList, ui);"},{"lineNumber":240,"author":{"gitId":"skinnychenpi"},"content":"//                isExit \u003d c.isExit();"},{"lineNumber":241,"author":{"gitId":"skinnychenpi"},"content":"//            } catch (DukeException e) {"},{"lineNumber":242,"author":{"gitId":"skinnychenpi"},"content":"//                ui.display(e.getMessage());"},{"lineNumber":243,"author":{"gitId":"skinnychenpi"},"content":"//            }"},{"lineNumber":244,"author":{"gitId":"skinnychenpi"},"content":"//        }"},{"lineNumber":245,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":246,"author":{"gitId":"skinnychenpi"},"content":"//        // Save to files"},{"lineNumber":247,"author":{"gitId":"skinnychenpi"},"content":"//        try {"},{"lineNumber":248,"author":{"gitId":"skinnychenpi"},"content":"//            storage.saveTasks(taskList);"},{"lineNumber":249,"author":{"gitId":"skinnychenpi"},"content":"//        } catch (Exception e) {"},{"lineNumber":250,"author":{"gitId":"skinnychenpi"},"content":"//            ui.display(\"OOPS! There is something wrong: \" + e.getMessage());"},{"lineNumber":251,"author":{"gitId":"skinnychenpi"},"content":"//        }"},{"lineNumber":252,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":253,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":254,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":255,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":256,"author":{"gitId":"skinnychenpi"},"content":"//     * The main function of the program."},{"lineNumber":257,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":258,"author":{"gitId":"skinnychenpi"},"content":"//    public static void main(String[] args) {"},{"lineNumber":259,"author":{"gitId":"skinnychenpi"},"content":"//        //        String logo \u003d \" ____        _        \\n\""},{"lineNumber":260,"author":{"gitId":"skinnychenpi"},"content":"//        //                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":261,"author":{"gitId":"skinnychenpi"},"content":"//        //                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":262,"author":{"gitId":"skinnychenpi"},"content":"//        //                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":263,"author":{"gitId":"skinnychenpi"},"content":"//        //                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":264,"author":{"gitId":"skinnychenpi"},"content":"//        Duke duke \u003d new Duke(\"./data/duke.txt\", \"./data\");"},{"lineNumber":265,"author":{"gitId":"skinnychenpi"},"content":"//        duke.run();"},{"lineNumber":266,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":267,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":266,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class Launcher {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        Application.launch(Duke.class, args);"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":11}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new deadlines to the task list."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class AddDeadlineCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddDeadlineCommand object"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public AddDeadlineCommand(String userMessage) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will add a deadline object into the tasks."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no deadline time specified, no deadline task name, then"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        int dateIndex \u003d userMessage.indexOf(\u0027/\u0027);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        if (dateIndex \u003d\u003d -1) {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I can\u0027t find your deadline time.\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        if (spaceIndex \u003d\u003d -1 || dateIndex - spaceIndex \u003d\u003d 1) {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        String deadlineName \u003d userMessage.substring(spaceIndex + 1, dateIndex - 1);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        String by \u003d userMessage.substring(dateIndex + 4);"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        Deadline deadline;"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            deadline \u003d new Deadline(deadlineName, by);"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\");"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTasks(deadline);"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + deadline.getStatusIcon() + \"] \" + deadline.toString());"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + taskList.getNumOfTasks() + \" tasks in the list.\");"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":58}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Event;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new events to the task list."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class AddEventCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddEventCommand object"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public AddEventCommand(String userMessage) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will add a event object into the tasks."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no event time specified, no event task name, then"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        int dateIndex \u003d userMessage.indexOf(\u0027/\u0027);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        if (dateIndex \u003d\u003d -1) {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I can\u0027t find your event time.\");"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        if (spaceIndex \u003d\u003d -1 || dateIndex - spaceIndex \u003d\u003d 1) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        String eventName \u003d userMessage.substring(spaceIndex + 1,dateIndex - 1);"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        String at \u003d userMessage.substring(dateIndex + 4);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        Event event;"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            event \u003d new Event(eventName, at);"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\");"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTasks(event);"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + event.getStatusIcon() + \"] \" + event.toString());"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + Integer.toString(taskList.getNumOfTasks()) + \" tasks in the list.\");"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":58}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new todos to the task list."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"public class AddToDoCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddToDoCommand object"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public AddToDoCommand(String userMessage) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will add a ToDo object into the tasks."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no ToDo task name, then"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        if (spaceIndex \u003d\u003d -1) {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        String todoName \u003d userMessage.substring(spaceIndex+1);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        ToDo todo \u003d new ToDo(todoName);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTasks(todo);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + todo.getStatusIcon() + \"] \" + todo.toString());"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + Integer.toString(taskList.getNumOfTasks()) + \" tasks in the list.\");"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":47}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and change the status of the status"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * of command as wants to exit, and hence terminates the program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ByeCommand object"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public ByeCommand(String userMessage) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will change the static variable of all Command"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * object into exit \u003d true, which means the user wants to exit."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        isExit \u003d true;"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        return \"Bye! Hope to see you again soon.\";"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":32}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * It is a super class that named Command for the Duke program."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to call its subclasses for"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * execution."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"public class Command {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    protected String userMessage;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    protected static boolean isExit;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public Command(String userMessage) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        this.userMessage \u003d userMessage;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        isExit \u003d false;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        return isExit;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        return \"\";"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":28}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * delete the tasks by task index."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for DeleteCommand object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public DeleteCommand(String userMessage) {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will delete the task based on the index."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the index of the task is wrong or"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * wrong description of the command."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        String[] arr \u003d userMessage.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        //Exception: If the input is like delete 1 2 3:"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        if (arr.length \u003e 2) {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a delete is wrong.\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            // Possible exceptions like delete A."},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            int taskIndex \u003d Integer.valueOf(arr[1]) - 1;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            Task task \u003d tasks.get(taskIndex);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"Noted. I\u0027ve removed this task:\\n\");"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"[\" + task.getStatusIcon() + \"]\" + task.toString());"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            taskList.delete(task);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"\\nNow you have \" + taskList.getNumOfTasks() + \" tasks in the list.\");"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d builder.toString();"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            return botMessage;"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a delete is wrong.\");"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The event index of a delete is wrong.\");"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":58}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to mark the users requested"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * task as done."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class DoneCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for DoneCommand object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public DoneCommand(String userMessage) {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will mark the task as done based on the index."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the index of the task is wrong or"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * wrong description of the command."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        String [] arr \u003d userMessage.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        //Exception: If the input is like done 1 2 3:"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        if (arr.length \u003e 2) throw new DukeException(\"OOPS!!! The description of a done is wrong.\");"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            // Possible exceptions like done A."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            int taskIndex \u003d Integer.valueOf(arr[1]) - 1;"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            Task task \u003d tasks.get(taskIndex);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            task.markAsDone();"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"Nice! I\u0027ve marked this as done!\\n\");"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"[\" + task.getStatusIcon() + \"]\" + task.toString());"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d builder.toString();"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            return botMessage;"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a done is wrong.\");"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The event index of a done is wrong.\");"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":58}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to list all the tasks."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ListCommand object"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    public ListCommand(String userMessage) {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, list out all the current tasks."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there is no task in the list."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasks \u003d taskList.getNumOfTasks();"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        // Exception case"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasks \u003d\u003d 0) {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! No task right now!\");"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"Here are the tasks in your list\\n\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            for (int i \u003d 0; i \u003c numOfTasks; i++) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"                Task task \u003d tasks.get(i);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"                String taskName \u003d task.toString();"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"                String icon \u003d task.getStatusIcon();"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"                String index \u003d Integer.toString(i + 1);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(index + \". \" + \"[\" + icon + \"]\");"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(taskName + \"\\n\");"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d builder.toString();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            return botMessage;"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":51}},{"path":"src/main/java/duke/command/SearchByTaskNameCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to search the task that matches the name"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * user asks."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class SearchByTaskNameCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for SearchByTaskNameCommand object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public SearchByTaskNameCommand(String userMessage) {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will search relevant tasks based on the task name."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the input time format is wrong."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        String[] info;"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        String name;"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        // prevent input mistakes."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            info \u003d userMessage.split(\" \", 2);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            name \u003d info[1];"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"The search input format is wrong, the format should be: \\n\""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"                    + \"search name \u003cThe task name\u003e\");"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Here are the search results: \\n\");"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasksFound \u003d 0;"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        // Search by loop"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        for (Task single : tasks) {"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"            String singleName \u003d single.getTaskName();"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            if (singleName.contains(name)) {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"[\" + single.getStatusIcon() + \"]\" + single.toString() + \"\\n\");"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"                numOfTasksFound++;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasksFound \u003d\u003d 0) {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! There is no task that matches the name.\");"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":66}},{"path":"src/main/java/duke/command/SearchByTimeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to search the task that matches the time"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" * user asks."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"public class SearchByTimeCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for SearchByTimeCommand object"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public SearchByTimeCommand(String userMessage) {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will search relevant tasks based on the time."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the input time format is wrong."},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        String[] info;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        LocalDateTime time;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        // prevent input mistakes."},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            info \u003d userMessage.split(\" \",3);"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            time \u003d LocalDateTime.parse(info[2], df);"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"The search input format is wrong, the format should be: \\n\" + \"search time yyyy-MM-dd HH:mm!\");"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Here are the search results: \\n\");"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasksFound \u003d 0;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        // Search by loop"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        for (Task single : tasks) {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"            if (single instanceof ToDo) {"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"                continue;"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"            } else if (single instanceof Event) {"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime eventTime \u003d ((Event) single).getAt();"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"                if (eventTime.isEqual(time)) {"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"                    builder.append(\"[\" + single.getStatusIcon() + \"]\" + single.toString() + \"\\n\");"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"                    numOfTasksFound++;"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"            } else if (single instanceof Deadline) {"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime deadlineTime \u003d ((Deadline) single).getBy();"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"                if (deadlineTime.isEqual(time)) {"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"                    builder.append(\"[\" + single.getStatusIcon() + \"]\" + single.toString() + \"\\n\");"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"                    numOfTasksFound++;"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasksFound \u003d\u003d 0) {"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! There is no task that matches the time.\");"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":83}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * It is a new exception class extends from Exception for the Duke program."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * It will receive the exceptions during the running of the program and"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * will present to the user if needed."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class DukeException extends Exception {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    public DukeException(){}"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":14}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * Represents a parser object that will read the input from"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * the users and then parse the input to the program."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * The function will take the user message and then parse it to return the command objects"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * for further procedures."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message the user inputs."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if the user input message can\u0027t be parsed."},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * @return a specific subclass of the Command object. eg. ListCommand object."},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public static Command parse(String userMessage) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        if (userMessage.equals(\"list\")) {"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"            return new ListCommand(userMessage);"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"done\")) {"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"            return new DoneCommand(userMessage);"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"todo\")) {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"            return new AddToDoCommand(userMessage);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"deadline\")) {"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            return new AddDeadlineCommand(userMessage);"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"event\")) {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            return new AddEventCommand(userMessage);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"delete\")) {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            return new DeleteCommand(userMessage);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"search time\")) {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"            return new SearchByTimeCommand(userMessage);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.equals(\"bye\")) {"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            return new ByeCommand(userMessage);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"find\")) {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            return new SearchByTaskNameCommand(userMessage);"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":46}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * Represents a storage object that responsible for the read and save tasks file for Duke."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    private boolean existFile;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    private String filePath;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private boolean existDir;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    private String dirPath;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Storage object"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param filePath The file path of the txt file that stores the tasks. eg. ./data/duke.txt"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @param dirPath The directory path of the txt file. eg. ./data"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public Storage(String filePath, String dirPath) {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        this.dirPath \u003d dirPath;"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * The function will read the txt file based on the file path and"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     * directory path and then returns the taskList."},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The taskList that will be used in the program, usually an empty list"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     *                 and then the tasks in the txt file will be added into this empty list."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     * @throws FileNotFoundException if the program cannot find the file then it will throw the exception."},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"     * @return a taskList object that tasks in the txt file is added into."},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    public TaskList readTasks(TaskList taskList) throws FileNotFoundException {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        File f \u003d new File(dirPath);"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        if (!f.exists()) {"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            existDir \u003d f.mkdir();"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            f \u003d new File(filePath);"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"            if (!f.exists()) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"                existFile \u003d f.createNewFile();"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"            throw new FileNotFoundException();"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        while (s.hasNext()) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"            String info \u003d s.nextLine();"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"            boolean status \u003d Integer.parseInt(info.substring(0,1)) \u003d\u003d 1;"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"            String type \u003d info.substring(3, 4);"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"            if (type.equals(\"T\")) {"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5);"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"                ToDo todo \u003d new ToDo(name, status);"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTasks(todo);"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"            } else if (type.equals(\"D\")) {"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"                int endNameIndex \u003d info.indexOf(\"(\");"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"                int endTimeIndex \u003d info.length() - 1;"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5 , endNameIndex - 1);"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"                String by \u003d info.substring(endNameIndex + 5, endTimeIndex);"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime byTime \u003d LocalDateTime.parse(by, df);"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"                Deadline deadline \u003d new Deadline(name, byTime, status);"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTasks(deadline);"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"            } else if (type.equals(\"E\")) {"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"                int endNameIndex \u003d info.indexOf(\"(\");"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"                int endTimeIndex \u003d info.length() - 1;"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5 , endNameIndex - 1);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"                String at \u003d info.substring(endNameIndex + 5, endTimeIndex);"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime atTime \u003d LocalDateTime.parse(at, df);"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"                Event event \u003d new Event(name, atTime, status);"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTasks(event);"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        return taskList;"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"     * The function will save the tasks immediately after the program terminates into the txt file into the"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"     * path that the user specified."},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The taskList that will be used in the program."},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"     * @throws IOException if the program meets IO problem."},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    public void saveTasks(TaskList taskList) throws IOException {"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        FileWriter fw \u003d new FileWriter(filePath, false);"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        if (taskList.getNumOfTasks() \u003d\u003d 0) {"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"            String textToAppend \u003d builder.toString();"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"            fw.write(textToAppend);"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"            fw.close();"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"            for (Task task:taskList.getTasks()) {"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"                int status \u003d task.getStatus() ? 1 : 0;"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(status);"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"|\");"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"                String taskName \u003d task.toString();"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(taskName);"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"\\n\");"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"            String textToAppend \u003d builder.toString();"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(textToAppend);"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"            fw.write(textToAppend);"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"            fw.close();"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":125}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a deadline task as a special case of task. A \u003ccode\u003edeadline\u003c/code\u003e object has three"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name, due time and done-status. e.g., \u003ccode\u003ego to school, 2020-01-01 19:00, false\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    protected LocalDateTime by;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d stringToDatetime(by);"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task in String type."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the deadline task."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, String by, boolean status) {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status);"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d stringToDatetime(by);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task in LocalDateTime type."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the deadline task."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, LocalDateTime by, boolean status) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d by;"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    private LocalDateTime stringToDatetime(String by) {"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        return LocalDateTime.parse(by, DF1);"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    private String datetimeToString(LocalDateTime by) {"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return DF2.format(by);"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"     * Get the deadline time as a LocalDateTime object."},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"     * @return the the deadline time as a LocalDateTime object."},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    public LocalDateTime getBy() {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        return by;"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"     * Get the task name for a deadline object."},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type, name and deadline time."},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        return \"[D]\" + super.getTaskName() + \" (by: \" + datetimeToString(by) + \")\";"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":72}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a event task as a special case of task. A \u003ccode\u003eevent\u003c/code\u003e object has three"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name, due time and done-status. e.g., \u003ccode\u003ego to school, 2020-01-01 19:00, false\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    protected LocalDateTime at;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, String at) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d stringToDatetime(at);"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task in String type."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the event task."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, String at, boolean status) {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status);"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d stringToDatetime(at);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task in LocalDateTime type."},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the event task."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, LocalDateTime at, boolean status) {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status);"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d at;"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    private LocalDateTime stringToDatetime(String at) {"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return LocalDateTime.parse(at, DF1);"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    private String datetimeToString(LocalDateTime at) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        return DF2.format(at);"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     * Get the event time as a LocalDateTime object."},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     * @return the the event time as a LocalDateTime object."},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    public LocalDateTime getAt() {"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        return at;"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     * Get the task name for a event object."},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type, name and event time."},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        return \"[E]\" + super.getTaskName() + \" (at: \" + datetimeToString(at) + \")\";"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":77}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a task. A \u003ccode\u003etask\u003c/code\u003e object has two"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name and done-status."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * And it will be the super class for deadline, event and todo."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    protected String taskName;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    protected final static DateTimeFormatter DF1 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    protected final static DateTimeFormatter DF2 \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Default Constructor for Task object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * that has no name and done-status as undone."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public Task() {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        taskName \u003d \"\";"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Task object"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskName The name of the task."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    public Task(String taskName) {"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d false;"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskName The name of the task."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the task."},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public Task(String taskName, boolean status) {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d status;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s status icon."},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns a tick if the task is done, otherwise a cross."},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public String getStatusIcon() {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s status."},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the task\u0027s done-status, if done then true, otherwise false."},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    public boolean getStatus() {"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        return isDone;"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s name."},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the name of the task as a string."},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    public String getTaskName() {"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        return this.taskName;"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s name in specific format."},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the name of the task as a string in a specific format."},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        return this.taskName;"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"     * Set the task as done."},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    public void markAsDone() {"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"        this.isDone \u003d true;"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":90}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * Represents a task list. A \u003ccode\u003etask list\u003c/code\u003e object stores"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * the information of all tasks in the program. It has two"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task list stored in the linked list and the number of the tasks."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    private LinkedList\u003cTask\u003e Tasks;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    private int numOfTasks;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Default Constructor for TaskList object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * that has an empty LinkedList that can store Task object"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * and the number of tasks as 0."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        Tasks \u003d new LinkedList\u003cTask\u003e();"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks \u003d 0;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for TaskList object\u0027s current number of tasks."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @return the number of tasks in the TaskList object."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public int getNumOfTasks() {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        return numOfTasks;"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for TaskList object\u0027s List of the current tasks."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * @return LinkedList of current tasks."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public LinkedList\u003cTask\u003e getTasks() {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        return Tasks;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     * Setter for adding task to a TaskList object."},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     * @param task the task you want to add."},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    public void addTasks(Task task) {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        Tasks.add(task);"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks++;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     * Setter for deleting a task to a TaskList object."},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"     * @param task the task you want to delete."},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public void delete(Task task) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        int taskIndex \u003d Tasks.indexOf(task);"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        Tasks.remove(taskIndex);"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks -\u003d 1;"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":69}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Todo task as a special case of task. A \u003ccode\u003eToDo\u003c/code\u003e object has two"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name and done-status. e.g., \u003ccode\u003ego to school, false\u003c/code\u003e"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class ToDo extends Task {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ToDo object"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the todo task."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    public ToDo(String description) {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ToDo object"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the todo task."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the todo task."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public ToDo(String description, boolean status) {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status);"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * Get the task name for a todo object."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type and task name."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        return \"[T]\" + super.getTaskName();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":39}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * Represents a UI for the duke program. A \u003ccode\u003eUi\u003c/code\u003e object corresponds to"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * a UI for the program e.g., \u003ccode\u003eterminal\u003c/code\u003e"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     * Returns the user input at the terminal as a String to the program."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param keyboard A scanner that will take the user input."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * @return message The user input will be transformed into a String named message."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public String readCommand(Scanner keyboard) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        String message \u003d new String();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"****************** User Message *****************\");"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        if (keyboard.hasNextLine()) {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"            message \u003d keyboard.nextLine();"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        return message;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * Print out the welcome message when the program starts."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public void welcome() {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        display(\"Hello! I am Duke!\\nWhat can I do for you?\");"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * Take the message from the program and then transfer into the designed UI format."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * @param botMessage The string that the robot (program) wants to show."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public void display(String botMessage) {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"**************** Chatbot Message ****************\");"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(botMessage);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":42}},{"path":"src/main/java/duke/user/User.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.user;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a user for the duke program. A \u003ccode\u003euser\u003c/code\u003e object corresponds to"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * a user for the program e.g., \u003ccode\u003eStudent 1\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class User {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"     * A constructor for User class"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     * @param keyboard The scanner that will be used to get user input."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    public String inputMessage(Scanner keyboard) {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        String message \u003d new String();"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"****************** User Message *****************\");"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        if (keyboard.hasNextLine()) {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"            message \u003d keyboard.nextLine();"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        return message;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":23}},{"path":"src/test/java/AddDeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddDeadlineCommand;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"class AddDeadlineCommandTest {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        AddDeadlineCommand c1 \u003d new AddDeadlineCommand(\"deadline go to school /by 2020-01-01 19:00\");"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[D]go to school (by: Jan 01 2020 19:00)\",output.toString());"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        AddDeadlineCommand c2 \u003d new AddDeadlineCommand(\"deadline go to school /by 2020-01-1 19:02\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList,ui);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\",e.getMessage());"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":47}},{"path":"src/test/java/AddEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"class AddEventCommandTest {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[E]go to school (at: Jan 01 2020 19:00)\",output.toString());"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c2 \u003d new AddEventCommand(\"event go to school /at 2020-01-1 19:02\");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList,ui);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\",e.getMessage());"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":46}},{"path":"src/test/java/AddToDoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddToDoCommand;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"class AddToDoCommandTest {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        AddToDoCommand c1 \u003d new AddToDoCommand(\"todo go to school\");"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[T]go to school\",output.toString());"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":32}},{"path":"src/test/java/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"class DeleteCommandTest {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        DeleteCommand c2 \u003d new DeleteCommand(\"delete 1\");"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList,ui);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(0,taskList.getNumOfTasks());"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        DeleteCommand c2 \u003d new DeleteCommand(\"delete 2\");"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList,ui);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS!!! The event index of a delete is wrong.\",e.getMessage());"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"deadline return book /by 2020-01-01 19:00"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"event project meeting /at 2020-02-12 17:00"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"deadline return book"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"event project meeting"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"delete 1"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"delete 4"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"blah"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"bye"}],"authorContributionMap":{"skinnychenpi":15}}]
