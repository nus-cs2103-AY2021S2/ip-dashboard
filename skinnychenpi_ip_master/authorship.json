[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"# Duke"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"This is a project for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"   "},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"   ![Ui](docs/Ui.png)"}],"authorContributionMap":{"skinnychenpi":4,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":61}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"done"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"exit $ret"}],"authorContributionMap":{"skinnychenpi":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"\u0027"}],"authorContributionMap":{"skinnychenpi":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"\u0027"}],"authorContributionMap":{"skinnychenpi":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"done"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"exit $ret"}],"authorContributionMap":{"skinnychenpi":11}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"1|[T]sleep5"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"0|[E]github (at: Jan 01 2020 19:00)4"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"1|[D]watch youtube video (by: Jan 01 2020 19:00)4"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"1|[T]go to school1"}],"authorContributionMap":{"skinnychenpi":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"The Duke program is a task management program that can help you schedule management such as **adding, deleting** events, deadlines and todos."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"It is also optimized for use via a **Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"If you can type fast, Duke can help you manage tasks faster than traditional GUI apps."},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"### Viewing help: `help` "},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"Shows a command guide."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"Type in: `help`"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"### Adding a task: `todo`, `event`, `deadline`"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"Adds a task to the address book."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"Command part 1:`{taskType} {taskName}`"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"Command part 2:`/by {YYYY-MM-DD HH:MM}` or `/at {YYYY-MM-DD HH:MM}`"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"Command part 3:`-p {levelOfPriority}`"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"Type in: `{Command part 1} {Command part 2} {Command part 3}` in correct order."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"For example:"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"* `todo go to school -p 3` "},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"* `deadline HW2 /at 2021-01-01 19:00 -p 5` "},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"* `todo watch movie`"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"Tips:"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"* `taskType` can only be `todo`, `event`, `deadline`."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"* For `todo` type of task, there is no need to specify Command part 2."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"* For `deadline`, use `/by`. For `event`, use `/at` when specifying Command part 2."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"* Command part 3 can be ignored. If ignored, the default level of priority is 1."},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"* New added task will be regarded as undone."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"### Listing all tasks : `list`"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"Shows a list of all tasks in Duke."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"Type in: `list` or `list -p`"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"Tips:"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"* `list` will list all the tasks. "},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"* `list -p` will list all the tasks sorted by priority."},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"### Delete tasks : `delete`"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"Deletes a task in Duke."},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"Type in: `delete {taskIndex}`"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"For example:"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"* `delete 3`"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"### Mark task as done : `done`"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"Mark a task as done."},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"Type in: `done {taskIndex}`"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"For example:"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"* `done 2`"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"### Search tasks : `find` or `search time`"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"Search a task based on the information provided."},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"Type in: `find {taskName}` or `search time {YYYY-MM-DD HH:MM}`"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"Tips:"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"* The time format must follow YYYY-MM-DD HH:MM."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"### Quit Duke : `bye`"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"Quit the program."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"Type in: `bye`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"### Save and read tasks :"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"Once launching Duke, the tasks will be read from local txt file. When user quit the program, the tasks will be saved to local. "},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"Tips: "},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"* If there is no such txt file, the program will automatically create a new txt file."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"## Credit"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"@author caitlinjee: Reference CSS file and FXML file for JavaFx UI design."}],"authorContributionMap":{"skinnychenpi":78,"-":10}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":":init"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"@rem Execute Gradle"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":":end"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":":fail"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"exit /b 1"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":":mainEnd"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":":omega"}],"authorContributionMap":{"skinnychenpi":104}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * The Duke program is a program that can help you"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * with the schedule management such as adding events, deadlines and todos"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" * to it and it can also help you manage the tasks such as deleting tasks."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * Hope you like it!"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * @author skinnychenpi-reused"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" * (Reused some CSS file and FXML file from @author caitlinjee)"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":" * @since 2021-01-18"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"public class Duke {"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private Storage storage;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    private TaskList taskList;"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * A constructor for Duke class"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @param filePath The file path that stores the task list."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * @param dirPath The directory path that stores the directory of the task list file."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public Duke(String filePath, String dirPath) {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        storage \u003d new Storage(filePath, dirPath);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        taskList \u003d dukeReadFromStorage();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * A getter for Duke task list."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * @return the task list stored in a duke object."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public TaskList getTaskList() {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        return taskList;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     * Reads txt file stored in the disk to restore the task list last time."},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"     * @return the task list stored in the txt file."},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    private TaskList dukeReadFromStorage() {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            TaskList taskListFromStorage \u003d storage.readTasks(new TaskList());"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            return taskListFromStorage;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(\"Errors occur when duke try to read tasks from txt files:\" + e.getMessage());"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"            return new TaskList();"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"     * Executes when user type in \u0027bye\u0027, duke will store the current tasks into the txt file."},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    public void dukeSaveToStorage() {"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"            storage.saveTasks(taskList);"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(\"Errors occur when duke try to save tasks to txt files:\" + e.getMessage());"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"     * Takes in the user input and ask duke to handle the user input. The result from duke will be sent back."},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"     * @param input The message that the user types in."},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"     * @return The message that Duke sends to the user."},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"    public String getResponse(String input) {"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d c.execute(taskList);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"            return \"Duke says: \" + botMessage;"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d e.getMessage();"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"            return \"Duke says: \" + botMessage;"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":89,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * A launcher class."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class Launcher {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":11}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.MainWindow;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    private Duke duke \u003d new Duke(\"./data/duke.txt\", \"./data\");"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * Starter for JavaFx."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public void start(Stage stage) {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/style/MainWindow.fxml\"));"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            stage.setResizable(false);"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"            stage.setScene(scene);"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().createDuke(duke);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"            stage.show();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":38}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it receives the requests from the users"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new deadlines to the task list."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class AddDeadlineCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddDeadlineCommand object"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public AddDeadlineCommand(String userMessage) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it adds a deadline object into the tasks."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it raises an exception."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no deadline time specified, no deadline task name, then"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        int dateTimeIndex \u003d userMessage.indexOf(\u0027/\u0027);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        int priorityIndex \u003d userMessage.indexOf(\"-p\");"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        boolean noDateTime \u003d dateTimeIndex \u003d\u003d -1;"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        boolean noEventName \u003d spaceIndex \u003d\u003d -1;"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        boolean hasPriority \u003d !(priorityIndex \u003d\u003d -1);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        if (noDateTime) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I can\u0027t find your deadline time.\");"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        if (noEventName) {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        Deadline deadline;"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        if (hasPriority) {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            String deadlineName \u003d userMessage.substring(spaceIndex + 1, dateTimeIndex - 1);"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"            String by \u003d userMessage.substring(dateTimeIndex + 4, priorityIndex - 1);"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            int priority;"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            try {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"                priority \u003d Integer.parseInt(userMessage.substring(priorityIndex + 3));"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"                if (priority \u003c 1 || priority \u003e 5) {"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"                    throw new DukeException(\"OOPS!!! Please use integer range from 1-5 as the level of priority!\");"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"            } catch (Exception e) {"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"                throw new DukeException(\"OOPS!!! Please use integer range from 1-5 as the level of priority!\");"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"            try {"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"                deadline \u003d new Deadline(deadlineName, by, false, priority);"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"            } catch (Exception e) {"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"                throw new DukeException(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\");"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"            try {"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"                String deadlineName \u003d userMessage.substring(spaceIndex + 1, dateTimeIndex - 1);"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"                String by \u003d userMessage.substring(dateTimeIndex + 4);"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"                deadline \u003d new Deadline(deadlineName, by);"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"            } catch (Exception e) {"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"                throw new DukeException(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\");"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTask(deadline);"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + deadline.getStatusIcon() + \"] \" + deadline.toString() + \" \" + deadline.getPriorityIcon());"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + taskList.getNumOfTasks() + \" tasks in the list.\");"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":86}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Event;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it receives the requests from the users"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new events to the task list."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"public class AddEventCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddEventCommand object"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public AddEventCommand(String userMessage) {"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it adds a event object into the tasks."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it raises an exception."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no event time specified, no event task name, then"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        int dateTimeIndex \u003d userMessage.indexOf(\u0027/\u0027);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        int priorityIndex \u003d userMessage.indexOf(\"-p\");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        boolean noDateTime \u003d dateTimeIndex \u003d\u003d -1;"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        boolean noEventName \u003d spaceIndex \u003d\u003d -1;"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        boolean hasPriority \u003d !(priorityIndex \u003d\u003d -1);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        if (noDateTime) {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I can\u0027t find your event time.\");"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        if (noEventName) {"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        Event event;"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        if (hasPriority) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            String deadlineName \u003d userMessage.substring(spaceIndex + 1, dateTimeIndex - 1);"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            String by \u003d userMessage.substring(dateTimeIndex + 4, priorityIndex - 1);"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            int priority;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"            try {"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"                priority \u003d Integer.parseInt(userMessage.substring(priorityIndex + 3));"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"                if (priority \u003c 1 || priority \u003e 5) {"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"                    throw new DukeException(\"OOPS!!! Please use integer range from 1-5 as the level of priority!\");"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"            } catch (Exception e) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"                throw new DukeException(\"OOPS!!! Please use integer range from 1-5 as the level of priority!\");"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"            try {"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"                event \u003d new Event(deadlineName, by, false, priority);"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"            } catch (Exception e) {"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"                throw new DukeException(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\");"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"            try {"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"                String eventName \u003d userMessage.substring(spaceIndex + 1, dateTimeIndex - 1);"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"                String at \u003d userMessage.substring(dateTimeIndex + 4);"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"                event \u003d new Event(eventName, at);"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"            } catch (Exception e) {"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"                throw new DukeException(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\");"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTask(event);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + event.getStatusIcon() + \"] \" + event.toString() + \" \" + event.getPriorityIcon());"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + taskList.getNumOfTasks() + \" tasks in the list.\");"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":89}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it receives the requests from the users"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new todos to the task list."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"public class AddToDoCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddToDoCommand object"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public AddToDoCommand(String userMessage) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it adds a ToDo object into the tasks."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it raises an exception."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no ToDo task name, then"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        int priorityIndex \u003d userMessage.indexOf(\"-p\");"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        boolean noName \u003d spaceIndex \u003d\u003d -1;"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        boolean hasPriority \u003d !(priorityIndex \u003d\u003d -1);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        if (noName) {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        ToDo todo;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        if (!hasPriority) {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            String todoName \u003d userMessage.substring(spaceIndex + 1);"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            todo \u003d new ToDo(todoName);"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            // input example: todo go to school -p 4"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            String todoName \u003d userMessage.substring(spaceIndex + 1, priorityIndex - 1);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            int priority;"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            try {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"                priority \u003d Integer.parseInt(userMessage.substring(priorityIndex + 3));"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"                if (priority \u003c 1 || priority \u003e 5) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"                    throw new DukeException(\"OOPS!!! Please use integer range from 1-5 as the level of priority!\");"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            } catch (Exception e) {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"                throw new DukeException(\"OOPS!!! Please use integer range from 1-5 as the level of priority!\");"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"            todo \u003d new ToDo(todoName, false, priority);"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTask(todo);"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + todo.getStatusIcon() + \"] \" + todo.toString() + \" \" + todo.getPriorityIcon());"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + taskList.getNumOfTasks() + \" tasks in the list.\");"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":68}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it receives the requests from the users"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and change the status of the status"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * of command as wants to exit, and hence terminates the program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ByeCommand object"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public ByeCommand(String userMessage) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it changes the static variable of all Command"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * object into exit \u003d true, which means the user wants to exit."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        isExit \u003d true;"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        return \"Bye! Hope to see you again soon.\";"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":32}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * It is a super class that named Command for the Duke program."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it receives the requests from the users"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to call its subclasses for"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * execution."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"public class Command {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    protected String userMessage;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    protected static boolean isExit;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public Command(String userMessage) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        this.userMessage \u003d userMessage;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        isExit \u003d false;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        return isExit;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        return \"\";"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":28}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it receives the requests from the users"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * delete the tasks by task index."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for DeleteCommand object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public DeleteCommand(String userMessage) {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it deletes the task based on the index."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it raises an exception."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the index of the task is wrong or"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * wrong description of the command."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        String[] arr \u003d userMessage.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        //raises exception if the input is like \"delete 1 2 3\"."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        if (arr.length \u003e 2) {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a delete is wrong.\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            // Possible exceptions like delete A."},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            int taskIndex \u003d Integer.valueOf(arr[1]) - 1;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            Task task \u003d tasks.get(taskIndex);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"Noted. I\u0027ve removed this task:\\n\");"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"[\" + task.getStatusIcon() + \"]\" + task.toString() + \" \" + task.getPriorityIcon());"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            taskList.delete(task);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"\\nNow you have \" + taskList.getNumOfTasks() + \" tasks in the list.\");"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d builder.toString();"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            return botMessage;"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a delete is wrong.\");"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The event index of a delete is wrong.\");"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":58}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to mark the users requested"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * task as done."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class DoneCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for DoneCommand object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public DoneCommand(String userMessage) {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it marks the task as done based on the index."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it raises an exception."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the index of the task is wrong or"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * wrong description of the command."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        String [] arr \u003d userMessage.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        //Raises Exception if the input is like \"done 1 2 3\"."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        if (arr.length \u003e 2) throw new DukeException(\"OOPS!!! The description of a done is wrong.\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            // Possible exceptions like done A."},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            int taskIndex \u003d Integer.valueOf(arr[1]) - 1;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            Task task \u003d tasks.get(taskIndex);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            task.markAsDone();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"Nice! I\u0027ve marked this as done!\\n\");"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"[\" + task.getStatusIcon() + \"]\" + task.toString() + \" \" + task.getPriorityIcon());"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d builder.toString();"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            return botMessage;"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a done is wrong.\");"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The event index of a done is wrong.\");"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":59}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for HelpCommand object"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    public HelpCommand(String userMessage) {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it prints out the command guide for the user."},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program. (This is to follow the execute method in Command Class, however in this method,"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     *                  taskList is useless."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            String start \u003d \"Here is the guide for you!\";"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            String addCommandHelp \u003d \"\\n\\n 1. To add a task: type in \\n\\n1.1 \u0027todo {todoName}\u0027\\n\\n 1.2 \u0027event {eventName} /at {YYYY-MM-DD HH:MM}\u0027\\n\\n \""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"                    + \"1.3 \u0027deadline {deadlineName} /by {YYYY-MM-DD HH:MM}\u0027\\n\";"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"            String priorityCommandHelp \u003d \"\\n\\n 2. To add a priority for a task: \\n\\n2.1 You can add \u0027-p {level of priority}\u0027 at the end of add task command.\\n\""},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"                    + \"For example: \u0027todo go to school -p 4\u0027\\n\\n 2.2 The priority level range from 1 to 5, and should be an integer.\\n\\n\""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"                    + \"2.3 If you don\u0027t specify the level of priority, the default level is 1.\\n\";"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            String listCommandHelp \u003d \"\\n\\n 3. To show the task: \\n\\n3.1 type in \u0027list\u0027 to show all the tasks in the list.\""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"                    + \"\\n\\n 3.2 type in \u0027list -p\u0027 to show the task sorted by priority\\n\";"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            String doneCommandHelp \u003d \"\\n\\n 4. To mark the task as done: \\n\\n4.1 type in \u0027done {index of task}\u0027 to mark the task as done by the index you specified.\\n\";"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            String deleteCommandHelp \u003d \"\\n\\n 5. To delete the task: \\n\\n5.1 type in \u0027delete {index of task}\u0027 to delete the task by the index you specified.\\n\";"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            String searchCommandHelp \u003d \"\\n\\n 6. To search a task: \\n\\n6.1 type in \u0027find {task name fragment}\u0027 to search for the task whose name contains the fragment specified.\""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"                    + \"\\n\\n 6.2 type in \u0027search time {YYYY-MM-DD HH:MM}\u0027 search for the task whose time match the input.\\n\";"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            String byeCommandHelp \u003d \"\\n\\n 7. To exit the program: \\n\\n7.1 type in \u0027bye\u0027.\\n\";"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d start + addCommandHelp + priorityCommandHelp + listCommandHelp"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"                    + doneCommandHelp + deleteCommandHelp + searchCommandHelp + byeCommandHelp;"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            return botMessage;"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(\"HelpCommand raises exception.\" +  e.getMessage());"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! There is something wrong with HelpCommand.\");"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":58}},{"path":"src/main/java/duke/command/ListByPriorityCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class ListByPriorityCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ListCommand object"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public ListByPriorityCommand(String userMessage) {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it lists out all the current tasks and sorted by priority."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there is no task in the list."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasks \u003d taskList.getNumOfTasks();"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasks \u003d\u003d 0) {"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! No task right now!\");"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Here are the tasks in your list sorted by priority\\n\");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        Collections.sort(tasks);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        Collections.reverse(tasks);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        for (int i \u003d 0; i \u003c numOfTasks; i++) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            String taskName \u003d task.toString();"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            String icon \u003d task.getStatusIcon();"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            String index \u003d Integer.toString(i + 1);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            String priorityIcon \u003d task.getPriorityIcon();"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(index + \". \" + \"[\" + icon + \"]\");"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(taskName + \" \" + priorityIcon + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":53}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to list all the tasks."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ListCommand object"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    public ListCommand(String userMessage) {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it lists out all the current tasks."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there is no task in the list."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasks \u003d taskList.getNumOfTasks();"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasks \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! No task right now!\");"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Here are the tasks in your list\\n\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        for (int i \u003d 0; i \u003c numOfTasks; i++) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            String taskName \u003d task.toString();"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            String icon \u003d task.getStatusIcon();"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            String index \u003d Integer.toString(i + 1);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            String priorityIcon \u003d task.getPriorityIcon();"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(index + \". \" + \"[\" + icon + \"]\");"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(taskName + \" \" + priorityIcon + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":53}},{"path":"src/main/java/duke/command/SearchByTaskNameCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it receives the requests from the users"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to search the task that matches the name"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":" * user asks."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"public class SearchByTaskNameCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for SearchByTaskNameCommand object"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public SearchByTaskNameCommand(String userMessage) {"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it searches relevant tasks based on the task name."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it raises an exception."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the input time format is wrong."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        String[] info;"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        String name;"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            info \u003d userMessage.split(\" \", 2);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            name \u003d info[1];"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"The search input format is wrong, the format should be: \\n\""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"                    + \"search name \u003cThe task name\u003e\");"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Here are the search results: \\n\");"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasksFound \u003d 0;"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        // Search by loop"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        for (Task task : tasks) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            String singleName \u003d task.getTaskName();"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            if (singleName.contains(name)) {"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"[\" + task.getStatusIcon() + \"]\" + task.toString() + \" \" + task.getPriorityIcon() + \"\\n\");"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"                numOfTasksFound++;"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasksFound \u003d\u003d 0) {"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! There is no task that matches the name.\");"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":67}},{"path":"src/main/java/duke/command/SearchByTimeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it receives the requests from the users"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to search the task that matches the time"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" * user asks."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"public class SearchByTimeCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for SearchByTimeCommand object"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public SearchByTimeCommand(String userMessage) {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it searches relevant tasks based on the time."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it raises an exception."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @return The Duke robot massage to the GUI."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the input time format is wrong."},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public String execute(TaskList taskList) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        String[] info;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        LocalDateTime time;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            info \u003d userMessage.split(\" \", 3);"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            time \u003d LocalDateTime.parse(info[2], df);"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"The search input format is wrong, the format should be: \\n\" + \"search time yyyy-MM-dd HH:mm!\");"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Here are the search results: \\n\");"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasksFound \u003d 0;"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        for (Task single : tasks) {"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"            if (single instanceof ToDo) {"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"                continue;"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"            } else if (single instanceof Event) {"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime eventTime \u003d ((Event) single).getAt();"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"                if (eventTime.isEqual(time)) {"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"                    builder.append(\"[\" + single.getStatusIcon() + \"]\" + single.toString() + \" \" + single.getPriorityIcon() + \"\\n\");"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"                    numOfTasksFound++;"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"            } else if (single instanceof Deadline) {"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime deadlineTime \u003d ((Deadline) single).getBy();"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"                if (deadlineTime.isEqual(time)) {"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"                    builder.append(\"[\" + single.getStatusIcon() + \"]\" + single.toString() + \" \" + single.getPriorityIcon() + \"\\n\");"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"                    numOfTasksFound++;"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasksFound \u003d\u003d 0) {"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! There is no task that matches the time.\");"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        return botMessage;"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":82}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * It is a new exception class extends from Exception for the Duke program."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * It receives the exceptions during the running of the program and"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * presents to the user if needed."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class DukeException extends Exception {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    public DukeException(){}"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":14}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddDeadlineCommand;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddToDoCommand;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.HelpCommand;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.ListByPriorityCommand;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.ListCommand;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.SearchByTaskNameCommand;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.SearchByTimeCommand;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":" * Represents a parser object that will read the input from"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":" * the users and then parse the input to the program."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"public class Parser {"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * The function takes the user message and then parse it to return the command objects"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * for further procedures."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message the user inputs."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if the user input message can\u0027t be parsed."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @return a specific subclass of the Command object. eg. ListCommand object."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public static Command parse(String userMessage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        if (userMessage.equals(\"list\")) {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            return new ListCommand(userMessage);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.equals(\"list -p\")) {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"            return new ListByPriorityCommand(userMessage);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"done\")) {"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            return new DoneCommand(userMessage);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"todo\")) {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            return new AddToDoCommand(userMessage);"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"deadline\")) {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            return new AddDeadlineCommand(userMessage);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"event\")) {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            return new AddEventCommand(userMessage);"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"delete\")) {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            return new DeleteCommand(userMessage);"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"search time\")) {"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            return new SearchByTimeCommand(userMessage);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.equals(\"bye\")) {"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            return new ByeCommand(userMessage);"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"find\")) {"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"            return new SearchByTaskNameCommand(userMessage);"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"help\")) {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            return new HelpCommand(userMessage);"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":60}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * Represents a storage object that responsible for the read and save tasks file for Duke."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    private boolean isFileCreated \u003d true;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    private final String filePath;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private boolean isDirCreated \u003d true;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    private final String dirPath;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Storage object"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param filePath The file path of the txt file that stores the tasks. eg. ./data/duke.txt"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @param dirPath The directory path of the txt file. eg. ./data"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public Storage(String filePath, String dirPath) {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        this.dirPath \u003d dirPath;"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * The function reads the txt file based on the file path and"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     * directory path and then returns the taskList."},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The taskList that will be used in the program, usually an empty list"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     *                 and then the tasks in the txt file will be added into this empty list."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     * @throws FileNotFoundException if the program cannot find the file then it will throw the exception."},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"     * @return a taskList object that tasks in the txt file is added into."},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    public TaskList readTasks(TaskList taskList) throws FileNotFoundException {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        File f \u003d new File(dirPath);"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        if (!f.exists()) {"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            isDirCreated \u003d f.mkdir();"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        assert isDirCreated : \"The directory is not properly created! Please contact the developer.\";"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            f \u003d new File(filePath);"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"            if (!f.exists()) {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"                isFileCreated \u003d f.createNewFile();"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IOException e) {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"            throw new FileNotFoundException();"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        assert isFileCreated : \"The txt file is not properly created! Please contact the developer.\";"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        while (s.hasNext()) {"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"            String info \u003d s.nextLine();"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"            boolean status \u003d Integer.parseInt(info.substring(0, 1)) \u003d\u003d 1;"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"            String type \u003d info.substring(3, 4);"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"            int priority \u003d Integer.parseInt(info.substring(info.length() - 1));"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"            if (type.equals(\"T\")) {"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5, info.length() - 1);"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"                ToDo todo \u003d new ToDo(name, status, priority);"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTask(todo);"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"            } else if (type.equals(\"D\")) {"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"                int endNameIndex \u003d info.indexOf(\"(\");"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"                int endTimeIndex \u003d info.length() - 2;"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5 , endNameIndex - 1);"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"                String by \u003d info.substring(endNameIndex + 5, endTimeIndex);"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime byTime \u003d LocalDateTime.parse(by, df);"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"                Deadline deadline \u003d new Deadline(name, byTime, status, priority);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTask(deadline);"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"            } else if (type.equals(\"E\")) {"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"                int endNameIndex \u003d info.indexOf(\"(\");"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"                int endTimeIndex \u003d info.length() - 2;"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5 , endNameIndex - 1);"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"                String at \u003d info.substring(endNameIndex + 5, endTimeIndex);"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime atTime \u003d LocalDateTime.parse(at, df);"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"                Event event \u003d new Event(name, atTime, status, priority);"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTask(event);"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        return taskList;"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"     * The function saves the tasks immediately after the program terminates into the txt file into the"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"     * path that the user specified."},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The taskList that will be used in the program."},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"     * @throws IOException if the program meets IO problem."},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"    public void saveTasks(TaskList taskList) throws IOException {"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        FileWriter fw \u003d new FileWriter(filePath, false);"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        if (taskList.getNumOfTasks() \u003d\u003d 0) {"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"            String textToAppend \u003d builder.toString();"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"            fw.write(textToAppend);"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"            fw.close();"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"            for (Task task:taskList.getTasks()) {"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"                int status \u003d task.getStatus() ? 1 : 0;"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"                int priority \u003d task.getPriority();"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(status);"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"|\");"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"                String taskName \u003d task.toString();"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(taskName);"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(priority);"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"\\n\");"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"            String textToAppend \u003d builder.toString();"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"            fw.write(textToAppend);"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"            fw.close();"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":129}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a deadline task as a special case of task. A \u003ccode\u003edeadline\u003c/code\u003e object has three"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name, due time and done-status. e.g., \u003ccode\u003ego to school, 2020-01-01 19:00, false\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    protected LocalDateTime by;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d stringToDatetime(by);"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task in LocalDateTime type."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the deadline task."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority The priority of the deadline task."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, LocalDateTime by, boolean status, int priority) {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status, priority);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d by;"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task in String type."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the deadline task."},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority The priority of the deadline task."},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, String by, boolean status, int priority) {"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status, priority);"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d stringToDatetime(by);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task in LocalDateTime type."},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the deadline task."},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, LocalDateTime by, boolean status) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status);"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d by;"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    private LocalDateTime stringToDatetime(String by) {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        return LocalDateTime.parse(by, DF_INPUT);"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    private String datetimeToString(LocalDateTime by) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        return DF_OUTPUT.format(by);"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     * Gets the deadline time as a LocalDateTime object."},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     * @return the the deadline time as a LocalDateTime object."},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    public LocalDateTime getBy() {"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        return by;"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"     * Gets the task name for a deadline object."},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type, name and deadline time."},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        return \"[D]\" + super.getTaskName() + \" (by: \" + datetimeToString(by) + \")\";"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":86}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a event task as a special case of task. A \u003ccode\u003eevent\u003c/code\u003e object has three"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name, due time and done-status. e.g., \u003ccode\u003ego to school, 2020-01-01 19:00, false\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    protected LocalDateTime at;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, String at) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d stringToDatetime(at);"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task in String type."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the event task."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority The priority of the event task."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, String at, boolean status, int priority) {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status, priority);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d stringToDatetime(at);"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task in LocalDateTime type."},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the event task."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority The priority of the event task."},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, LocalDateTime at, boolean status, int priority) {"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status, priority);"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d at;"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task in LocalDateTime type."},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the event task."},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, LocalDateTime at, boolean status) {"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status);"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d at;"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    private LocalDateTime stringToDatetime(String at) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        return LocalDateTime.parse(at, DF_INPUT);"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    private String datetimeToString(LocalDateTime at) {"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        return DF_OUTPUT.format(at);"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"     * Gets the event time as a LocalDateTime object."},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"     * @return the the event time as a LocalDateTime object."},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"    public LocalDateTime getAt() {"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        return at;"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"     * Gets the task name for a event object."},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type, name and event time."},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        return \"[E]\" + super.getTaskName() + \" (at: \" + datetimeToString(at) + \")\";"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":91}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a task. A \u003ccode\u003etask\u003c/code\u003e object has two"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name and done-status."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * And it will be the super class for deadline, event and todo."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"public class Task implements Comparable\u003cTask\u003e {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    protected String taskName;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    protected int priority;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    protected final static DateTimeFormatter DF_INPUT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    protected final static DateTimeFormatter DF_OUTPUT \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * Default Constructor for Task object"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * that has no name and done-status as undone."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public Task() {"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        taskName \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d false;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Task object"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskName The name of the task."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public Task(String taskName) {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d false;"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        priority \u003d 1;"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Task object"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskName The name of the task."},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the task."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    public Task(String taskName, boolean status) {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d status;"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        priority \u003d 1;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Task object"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskName The name of the task."},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the task."},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority The priority of the task."},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    public Task(String taskName, boolean status, int priority) {"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d status;"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d priority;"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s status icon."},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns a tick if the task is done, otherwise a cross."},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    public String getStatusIcon() {"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s status."},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the task\u0027s done-status, if done then true, otherwise false."},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    public boolean getStatus() {"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        return isDone;"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s name."},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the name of the task as a string."},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    public String getTaskName() {"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        return this.taskName;"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s priority."},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the priority of the task as a string."},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    public int getPriority() {"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        return priority;"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s priority icon."},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the integer value of priority number of stars."},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"    public String getPriorityIcon() {"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"        return \"\\u2729\".repeat(priority);"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s name in specific format."},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the name of the task as a string in a specific format."},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        return this.taskName;"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the task as done."},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"    public void markAsDone() {"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        this.isDone \u003d true;"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"    public int compareTo(Task t) {"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"        if (priority \u003e t.getPriority()) {"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"            return 1;"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"        } else if (priority \u003d\u003d t.getPriority() \u0026\u0026 !isDone \u0026\u0026 t.getStatus()) {"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"            return 1;"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"        return -1;"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":135}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * Represents a task list. A \u003ccode\u003etask list\u003c/code\u003e object stores"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * the information of all tasks in the program. It has two"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task list stored in the linked list and the number of the tasks."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    private LinkedList\u003cTask\u003e Tasks;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    private int numOfTasks;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Default Constructor for TaskList object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * that has an empty LinkedList that can store Task object"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * and the number of tasks as 0."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        Tasks \u003d new LinkedList\u003cTask\u003e();"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks \u003d 0;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for TaskList object\u0027s current number of tasks."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @return the number of tasks in the TaskList object."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public int getNumOfTasks() {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        return numOfTasks;"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for TaskList object\u0027s List of the current tasks."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * @return LinkedList of current tasks."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public LinkedList\u003cTask\u003e getTasks() {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        return Tasks;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     * Setter for adding task to a TaskList object."},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     * @param task the task you want to add."},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    public void addTask(Task task) {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        Tasks.add(task);"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks++;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     * Setter for deleting a task to a TaskList object."},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"     * @param task the task you want to delete."},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public void delete(Task task) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        int taskIndex \u003d Tasks.indexOf(task);"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        Tasks.remove(taskIndex);"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks -\u003d 1;"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":69}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Todo task as a special case of task. A \u003ccode\u003eToDo\u003c/code\u003e object has two"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name and done-status. e.g., \u003ccode\u003ego to school, false\u003c/code\u003e"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ToDo object"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the todo task."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ToDo object"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the todo task."},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the todo task."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority The priority of the todo task."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public ToDo(String description, boolean status, int priority) {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        super(description, status, priority);"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * Gets the task name for a todo object."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type and task name."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        return \"[T]\" + super.getTaskName();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":38}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"public class DialogBox extends HBox {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    private Label text;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    private ImageView displayPicture;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for a new dialog box."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public DialogBox(String s, Image iv) {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/style/DialogBox.fxml\"));"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            fxmlLoader.load();"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        text.setText(s);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        displayPicture.setImage(iv);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     * Get the user dialog box in correct format."},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public static DialogBox getUserDialog(String l, Image iv) {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return new DialogBox(l, iv);"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"     * Get Duke dialog box in correct format."},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public static DialogBox getDukeDialog(String l, Image iv) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        var db \u003d new DialogBox(l, iv);"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        db.flip();"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        return db;"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":68}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    private Duke duke;"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Initialize the main window."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        DialogBox greeting \u003d DialogBox.getDukeDialog(MainWindow.showGreeting(), dukeImage);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        dialogContainer.getChildren().add(greeting);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    public void createDuke(Duke duke) {"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        this.duke \u003d duke;"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    protected static String showGreeting() {"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        String logo \u003d \" ___         _        \\n\""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        String info \u003d \"Hi! I\u0027m\\n\" + logo + \"\\n\""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"                + \"What can I help you with?\\n\""},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"                + \"(Type \u0027help\u0027 for the user guide!)\\n\""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"                + \"@Author:skinnychenpi\";"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        return info;"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    private void handleUserInput() {"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        if (input.toLowerCase().equals(\"bye\")) {"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"            String response \u003d duke.getResponse(input);"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"                    DialogBox.getUserDialog(input, userImage),"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"            );"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"            userInput.clear();"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"            duke.dukeSaveToStorage();"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"            Platform.exit();"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        );"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        userInput.clear();"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":87}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * Represents a UI for the duke program. A \u003ccode\u003eUi\u003c/code\u003e object corresponds to"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * a UI for the program e.g., \u003ccode\u003eterminal\u003c/code\u003e"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     * Returns the user input at the terminal as a String to the program."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param keyboard A scanner that will take the user input."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * @return message The user input will be transformed into a String named message."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public String readCommand(Scanner keyboard) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        String message \u003d new String();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"****************** User Message *****************\");"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        if (keyboard.hasNextLine()) {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"            message \u003d keyboard.nextLine();"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        return message;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * Prints out the welcome message when the program starts."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public void welcome() {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        display(\"Hello! I am Duke!\\nWhat can I do for you?\");"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Takes the message from the program and then transfer into the designed UI format."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * @param botMessage The string that the robot (program) wants to show."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public void display(String botMessage) {"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"**************** Chatbot Message ****************\");"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(botMessage);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":44}},{"path":"src/main/java/duke/user/User.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.user;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a user for the duke program. A \u003ccode\u003euser\u003c/code\u003e object corresponds to"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * a user for the program e.g., \u003ccode\u003eStudent 1\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class User {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"     * A constructor for User class"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     * @param keyboard The scanner that will be used to get user input."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    public String inputMessage(Scanner keyboard) {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        String message \u003d new String();"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"****************** User Message *****************\");"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        if (keyboard.hasNextLine()) {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"            message \u003d keyboard.nextLine();"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        return message;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":23}},{"path":"src/main/resources/style/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.effect.Blend?\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        \u003cHBox fx:id\u003d\"speechBubble\" maxHeight\u003d\"-Infinity\" styleClass\u003d\"speech-bubble\" stylesheets\u003d\"@diy.css\"\u003e"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"            \u003cchildren\u003e"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"                \u003cLabel fx:id\u003d\"text\" text\u003d\"Label\" textFill\u003d\"BLACK\" wrapText\u003d\"true\"\u003e"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"                    \u003cpadding\u003e"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"                    \u003c/padding\u003e"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"                    \u003cfont\u003e"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"                        \u003cFont size\u003d\"14.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"                    \u003c/font\u003e"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"                \u003c/Label\u003e"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"            \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        \u003c/HBox\u003e"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"            \u003ceffect\u003e"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"                \u003cBlend /\u003e"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            \u003c/effect\u003e\u003c/ImageView\u003e"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    \u003c/children\u003e"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    \u003cpadding\u003e"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    \u003c/padding\u003e"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"skinnychenpi":35}},{"path":"src/main/resources/style/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type here!\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" \u003e"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"            \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"                \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"            \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"            \u003cfont\u003e"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"                \u003cFont name\u003d\"System Bold\" size\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"            \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"                    AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"40\" stylesheets\u003d\"@diy.css\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"            \u003ccontent\u003e"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefHeight\u003d\"552.0\" prefWidth\u003d\"${scrollPane.width}\" styleClass\u003d\"anchor\" /\u003e"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"            \u003c/content\u003e"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    \u003c/children\u003e"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"skinnychenpi":27}},{"path":"src/test/java/AddDeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddDeadlineCommand;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"class AddDeadlineCommandTest {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        AddDeadlineCommand c1 \u003d new AddDeadlineCommand(\"deadline go to school /by 2020-01-01 19:00\");"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList);"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[D]go to school (by: Jan 01 2020 19:00)\",output.toString());"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        AddDeadlineCommand c2 \u003d new AddDeadlineCommand(\"deadline go to school /by 2020-01-1 19:02\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\",e.getMessage());"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":47}},{"path":"src/test/java/AddEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"class AddEventCommandTest {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[E]go to school (at: Jan 01 2020 19:00)\",output.toString());"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c2 \u003d new AddEventCommand(\"event go to school /at 2020-01-1 19:02\");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\",e.getMessage());"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":46}},{"path":"src/test/java/AddToDoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddToDoCommand;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"class AddToDoCommandTest {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        AddToDoCommand c1 \u003d new AddToDoCommand(\"todo go to school\");"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[T]go to school\",output.toString());"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":32}},{"path":"src/test/java/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"class DeleteCommandTest {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        DeleteCommand c2 \u003d new DeleteCommand(\"delete 1\");"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList);"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(0,taskList.getNumOfTasks());"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        DeleteCommand c2 \u003d new DeleteCommand(\"delete 2\");"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS!!! The event index of a delete is wrong.\",e.getMessage());"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"deadline return book /by 2020-01-01 19:00"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"event project meeting /at 2020-02-12 17:00"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"deadline return book"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"event project meeting"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"delete 1"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"delete 4"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"blah"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"bye"}],"authorContributionMap":{"skinnychenpi":15}}]
