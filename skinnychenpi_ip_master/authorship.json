[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"0|[T]go tos chosd"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"1|[T]set"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"0|[E]go to sleep (at: Oct 10 2020 19:00)"}],"authorContributionMap":{"skinnychenpi":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":" * The Duke program is a program that can help you"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * with the schedule management such as adding events, deadlines and todos"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * to it and it can also help you manage the tasks such as deleting tasks."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" * Hope you like it!"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":" * @author skinnychenpi"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":" * @since 2021-01-18"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    private Scanner keyboard;"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private Storage storage;"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    private Ui ui;"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * A constructor for Duke class"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * @param filePath The file path that stores the task list."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * @param dirPath The directory path that stores the directory of the task list file."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public Duke(String filePath, String dirPath){"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        keyboard \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        ui \u003d new Ui();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        storage \u003d new Storage(filePath,dirPath);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     * Start function to run the program."},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    public void run(){"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        // Read from storage"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            taskList \u003d storage.readTasks(taskList);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(\"OOPS! There is something wrong: \" + e.getMessage());"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        // In Execution"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        ui.welcome();"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        boolean isExit \u003d false;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        while ( ! isExit) {"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"            try {"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"                String fullCommand \u003d ui.readCommand(keyboard);"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"                c.execute(taskList, ui);"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"            } catch (DukeException e) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"                ui.display(e.getMessage());"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        // Save to files"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"            storage.saveTasks(taskList);"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e) {"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(\"OOPS! There is something wrong: \" + e.getMessage());"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"     * The main function of the program."},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    public static void main(String[] args) {"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"//        String logo \u003d \" ____        _        \\n\""},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"//                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"//                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"//                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"//                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"          Duke duke \u003d new Duke(\"./data/duke.txt\",\"./data\");"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"          duke.run();"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":89,"-":3}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new deadlines to the task list."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"public class AddDeadlineCommand extends Command{"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddDeadlineCommand object"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public AddDeadlineCommand(String userMessage){"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will add a deadline object into the tasks."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param ui The current ui in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no deadline time specified, no deadline task name, then"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        int dateIndex \u003d userMessage.indexOf(\u0027/\u0027);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        if (dateIndex \u003d\u003d -1) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I can\u0027t find your deadline time.\");"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        if (spaceIndex \u003d\u003d -1 || dateIndex - spaceIndex \u003d\u003d 1) {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        String deadlineName \u003d userMessage.substring(spaceIndex + 1,dateIndex - 1);"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        String by \u003d userMessage.substring(dateIndex + 4);"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        Deadline deadline;"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            deadline \u003d new Deadline(deadlineName,by);"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e){"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\");"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTasks(deadline);"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + deadline.getStatusIcon() + \"] \" + deadline.toString());"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + taskList.getNumOfTasks() + \" tasks in the list.\");"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        ui.display(botMessage);"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":60}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Event;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new events to the task list."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"public class AddEventCommand extends Command{"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddEventCommand object"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public AddEventCommand(String userMessage){"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will add a event object into the tasks."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param ui The current ui in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no event time specified, no event task name, then"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        int dateIndex \u003d userMessage.indexOf(\u0027/\u0027);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        if (dateIndex \u003d\u003d -1) {"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I can\u0027t find your event time.\");"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        if (spaceIndex \u003d\u003d -1 || dateIndex - spaceIndex \u003d\u003d 1) {"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        String eventName \u003d userMessage.substring(spaceIndex + 1,dateIndex - 1);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        String at \u003d userMessage.substring(dateIndex + 4);"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        Event event;"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            event \u003d new Event(eventName,at);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e){"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\");"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTasks(event);"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + event.getStatusIcon() + \"] \" + event.toString());"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + Integer.toString(taskList.getNumOfTasks()) + \" tasks in the list.\");"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        ui.display(botMessage);"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":60}},{"path":"src/main/java/duke/command/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.ToDo;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts add new todos to the task list."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class AddToDoCommand extends Command{"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for AddToDoCommand object"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public AddToDoCommand(String userMessage){"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will add a ToDo object into the tasks."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param ui The current ui in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as no ToDo task name, then"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * it will raise the DukeException."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Got it! I\u0027ve added this task:\\n\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        int spaceIndex \u003d userMessage.indexOf(\" \");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        if (spaceIndex \u003d\u003d -1) {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        String todoName \u003d userMessage.substring(spaceIndex+1);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        ToDo todo \u003d new ToDo(todoName);"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        taskList.addTasks(todo);"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"[\" + todo.getStatusIcon() + \"] \" + todo.toString());"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"\\nNow you have \" + Integer.toString(taskList.getNumOfTasks()) + \" tasks in the list.\");"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        ui.display(botMessage);"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":49}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and change the status of the status"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * of command as wants to exit, and hence terminates the program."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"public class ByeCommand extends Command{"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ByeCommand object"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public ByeCommand(String userMessage){"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will change the static variable of all Command"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * object into exit \u003d true, which means the user wants to exit."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param ui The current ui in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui){"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        exit \u003d true;"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        ui.display(\"Bye! Hope to see you again soon.\");"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":34}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * It is a super class that named Command for the Duke program."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to call its subclasses for"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * execution."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"public class Command {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    protected String userMessage;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    protected static boolean exit;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public Command(String userMessage){"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        this.userMessage \u003d userMessage;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        exit \u003d false;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public boolean isExit(){"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        return exit;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {}"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":27}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * delete the tasks by task index."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for DeleteCommand object"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public DeleteCommand(String userMessage) {"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will delete the task based on the index."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @param ui The current ui in the program."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the index of the task is wrong or"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * wrong description of the command."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        String[] arr \u003d userMessage.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        //Exception: If the input is like delete 1 2 3:"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        if (arr.length \u003e 2) throw new DukeException(\"OOPS!!! The description of a delete is wrong.\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            // Possible exceptions like delete A."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            int taskIndex \u003d Integer.valueOf(arr[1]) - 1;"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            Task task \u003d tasks.get(taskIndex);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"Noted. I\u0027ve removed this task:\\n\");"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"[\" + task.getStatusIcon() + \"]\" + task.toString());"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            taskList.delete(task);"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"\\nNow you have \" + taskList.getNumOfTasks() + \" tasks in the list.\");"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d builder.toString();"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(botMessage);"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a delete is wrong.\");"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The event index of a delete is wrong.\");"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":57}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to mark the users requested"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * task as done."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class DoneCommand extends Command{"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for DoneCommand object"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public DoneCommand(String userMessage){"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will mark the task as done based on the index."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @param ui The current ui in the program."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the index of the task is wrong or"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * wrong description of the command."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        String [] arr \u003d userMessage.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        //Exception: If the input is like done 1 2 3:"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        if (arr.length \u003e 2) throw new DukeException(\"OOPS!!! The description of a done is wrong.\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            // Possible exceptions like done A."},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            int taskIndex \u003d Integer.valueOf(arr[1]) - 1;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            Task task \u003d tasks.get(taskIndex);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            task.markAsDone();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"Nice! I\u0027ve marked this as done!\\n\");"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"[\"+task.getStatusIcon()+\"]\"+task.toString());"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d builder.toString();"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(botMessage);"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The description of a done is wrong.\");"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! The event index of a done is wrong.\");"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":59}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to list all the tasks."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class ListCommand extends Command{"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ListCommand object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public ListCommand(String userMessage){"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, list out all the current tasks."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param ui The current ui in the program."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui){"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasks \u003d taskList.getNumOfTasks();"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        // Exception case"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasks \u003d\u003d 0) {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(\"No Tasks right now!\");"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"            LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"Here are the tasks in your list\\n\");"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            for (int i \u003d 0; i \u003c numOfTasks; i++) {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"                Task task \u003d tasks.get(i);"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"                String taskName \u003d task.toString();"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"                String icon \u003d task.getStatusIcon();"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"                String index \u003d Integer.toString(i + 1);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(index + \". \" + \"[\" + icon + \"]\");"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(taskName + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            String botMessage \u003d builder.toString();"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(botMessage);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":52}},{"path":"src/main/java/duke/command/SearchByTaskNameCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.*;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class SearchByTaskNameCommand extends Command{"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    public SearchByTaskNameCommand(String userMessage){"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        String[] info;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        String name;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        // prevent input mistakes."},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"            info \u003d userMessage.split(\" \",2);"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            name \u003d info[1];"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e){"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"The search input format is wrong, the format should be: \\n\" +"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"                    \"search name \u003cThe task name\u003e\");"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Here are the search results: \\n\");"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasksFound \u003d 0;"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        // Search by loop"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        for (Task single : tasks) {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"            String singleName \u003d single.getTaskName();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            if (singleName.contains(name)){"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"[\" + single.getStatusIcon() + \"]\" + single.toString() + \"\\n\");"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"                numOfTasksFound++;"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasksFound \u003d\u003d 0){"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! There is no task that matches the name.\");"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        ui.display(botMessage);"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":50}},{"path":"src/main/java/duke/command/SearchByTimeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.ToDo;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * It is a command object extends from Command for the Duke program."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * When the parser calls it, it will receive the requests from the users"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" * during the running of the program and starts to search the task that matches the time"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":" * user asks."},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"public class SearchByTimeCommand extends Command{"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for SearchByTimeCommand object"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message that the user inputs for further execution."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public SearchByTimeCommand(String userMessage){"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        super(userMessage);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * The execution after parsing, it will search relevant tasks based on the time."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     * If the input is not correct, it will raise an exception."},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The current taskList in the program."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * @param ui The current ui in the program."},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if there are some cases such as the input time format is wrong."},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    public void execute(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        String[] info;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        LocalDateTime time;"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        // prevent input mistakes."},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            info \u003d userMessage.split(\" \",3);"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            time \u003d LocalDateTime.parse(info[2],df);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        } catch (Exception e){"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"The search input format is wrong, the format should be: \\n\" +"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"                    \"search time yyyy-MM-dd HH:mm!\");"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(\"Here are the search results: \\n\");"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        int numOfTasksFound \u003d 0;"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        // Search by loop"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        for (Task single : tasks) {"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"            if (single instanceof ToDo){"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"                continue;"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"            } else if (single instanceof Event){"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime eventTime \u003d ((Event) single).getAt();"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"                if (eventTime.isEqual(time)){"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"                    builder.append(\"[\" + single.getStatusIcon() + \"]\" + single.toString() + \"\\n\");"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"                    numOfTasksFound++;"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"            } else if (single instanceof Deadline){"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime deadlineTime \u003d ((Deadline) single).getBy();"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"                if (deadlineTime.isEqual(time)){"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"                    builder.append(\"[\" + single.getStatusIcon() + \"]\" + single.toString() + \"\\n\");"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"                    numOfTasksFound++;"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        if (numOfTasksFound \u003d\u003d 0){"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS! There is no task that matches the time.\");"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        String botMessage \u003d builder.toString();"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        ui.display(botMessage);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":85}},{"path":"src/main/java/duke/command/test/AddDeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command.test;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddDeadlineCommand;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"class AddDeadlineCommandTest {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        AddDeadlineCommand c1 \u003d new AddDeadlineCommand(\"deadline go to school /by 2020-01-01 19:00\");"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[D]go to school (by: Jan 01 2020 19:00)\",output.toString());"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        AddDeadlineCommand c2 \u003d new AddDeadlineCommand(\"deadline go to school /by 2020-01-1 19:02\");"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList,ui);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\",e.getMessage());"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":49}},{"path":"src/main/java/duke/command/test/AddEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command.test;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddDeadlineCommand;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"class AddEventCommandTest {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[E]go to school (at: Jan 01 2020 19:00)\",output.toString());"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c2 \u003d new AddEventCommand(\"event go to school /at 2020-01-1 19:02\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList,ui);"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS! The input format is wrong! Should be YYYY-MM-DD HH:MM\",e.getMessage());"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":48}},{"path":"src/main/java/duke/command/test/AddToDoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command.test;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddToDoCommand;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"class AddToDoCommandTest {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        AddToDoCommand c1 \u003d new AddToDoCommand(\"todo go to school\");"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        LinkedList\u003cTask\u003e outputList \u003d taskList.getTasks();"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        Task output \u003d outputList.getFirst();"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(\"[T]go to school\",output.toString());"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":33}},{"path":"src/main/java/duke/command/test/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.command.test;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"class DeleteCommandTest {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest1() {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        DeleteCommand c2 \u003d new DeleteCommand(\"delete 1\");"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList,ui);"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(0,taskList.getNumOfTasks());"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    @org.junit.jupiter.api.Test"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    void executeTest2() {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        AddEventCommand c1 \u003d new AddEventCommand(\"event go to school /at 2020-01-01 19:00\");"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        DeleteCommand c2 \u003d new DeleteCommand(\"delete 2\");"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            c1.execute(taskList,ui);"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            c2.execute(taskList,ui);"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        catch (DukeException e){"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            ui.display(e.getMessage());"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            assertEquals(\"OOPS!!! The event index of a delete is wrong.\",e.getMessage());"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":52}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * It is a new exception class extends from Exception for the Duke program."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * It will receive the exceptions during the running of the program and"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * will present to the user if needed."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class DukeException extends Exception {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    public DukeException(){}"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":14}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" * Represents a parser object that will read the input from"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":" * the users and then parse the input to the program."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * The function will take the user message and then parse it to return the command objects"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * for further procedures."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * @param userMessage The message the user inputs."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @throws DukeException if the user input message can\u0027t be parsed."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * @return a specific subclass of the Command object. eg. ListCommand object."},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public static Command parse(String userMessage) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        if (userMessage.equals(\"list\")) {"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            return new ListCommand(userMessage);"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"done\")) {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"            return new DoneCommand(userMessage);"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"todo\")) {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"            return new AddToDoCommand(userMessage);"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"deadline\")) {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            return new AddDeadlineCommand(userMessage);"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"event\")) {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"            return new AddEventCommand(userMessage);"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"delete\")) {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"            return new DeleteCommand(userMessage);"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"search time\")) {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            return new SearchByTimeCommand(userMessage);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.equals(\"bye\")) {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            return new ByeCommand(userMessage);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        } else if (userMessage.startsWith(\"find\")) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            return new SearchByTaskNameCommand(userMessage);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":45}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import duke.task.*;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * Represents a storage object that responsible for the read and save tasks file for Duke."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    private boolean existFile;"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    private String filePath;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    private boolean existDir;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    private String dirPath;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Storage object"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @param filePath The file path of the txt file that stores the tasks. eg. ./data/duke.txt"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * @param dirPath The directory path of the txt file. eg. ./data"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public Storage(String filePath, String dirPath){"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        this.dirPath \u003d dirPath;"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * The function will read the txt file based on the file path and"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     * directory path and then returns the taskList."},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The taskList that will be used in the program, usually an empty list"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     *                 and then the tasks in the txt file will be added into this empty list."},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     * @throws FileNotFoundException if the program cannot find the file then it will throw the exception."},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * @return a taskList object that tasks in the txt file is added into."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    public TaskList readTasks(TaskList taskList) throws FileNotFoundException {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        File f \u003d new File(dirPath);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        if ( ! f.exists()){"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            existDir \u003d f.mkdir();"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        try{"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            f \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            if ( ! f.exists()){"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"                existFile \u003d f.createNewFile();"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        } catch (IOException e){"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"            throw new FileNotFoundException();"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        while (s.hasNext()) {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"            String info \u003d s.nextLine();"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"            boolean status \u003d Integer.parseInt(info.substring(0,1)) \u003d\u003d 1;"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"            String type \u003d info.substring(3,4);"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"            if (type.equals(\"T\")){"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5);"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"                ToDo todo \u003d new ToDo(name,status);"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTasks(todo);"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"            } else if(type.equals(\"D\")){"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"                int endNameIndex \u003d info.indexOf(\"(\");"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"                int endTimeIndex \u003d info.length() - 1;"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5 , endNameIndex - 1);"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"                String by \u003d info.substring(endNameIndex + 5, endTimeIndex);"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime byTime \u003d LocalDateTime.parse(by,df);"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"                Deadline deadline \u003d new Deadline(name, byTime, status);"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTasks(deadline);"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"            } else if(type.equals(\"E\")){"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"                int endNameIndex \u003d info.indexOf(\"(\");"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"                int endTimeIndex \u003d info.length() - 1;"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"                String name \u003d info.substring(5 , endNameIndex - 1);"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"                String at \u003d info.substring(endNameIndex + 5, endTimeIndex);"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"                LocalDateTime atTime \u003d LocalDateTime.parse(at,df);"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"                Event event \u003d new Event(name, atTime, status);"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"                taskList.addTasks(event);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        return taskList;"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"     * The function will save the tasks immediately after the program terminates into the txt file into the"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"     * path that the user specified."},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskList The taskList that will be used in the program."},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"     * @throws IOException if the program meets IO problem."},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"    public void saveTasks(TaskList taskList) throws IOException {"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        FileWriter fw \u003d new FileWriter(filePath, false);"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        if (taskList.getNumOfTasks() \u003d\u003d 0) {"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"            String textToAppend \u003d builder.toString();"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"            fw.write(textToAppend);"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"            fw.close();"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        } else{"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"            for (Task task:taskList.getTasks()){"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"                int status \u003d task.getStatus() ? 1 : 0;"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(status);"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"|\");"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"                String taskName \u003d task.toString();"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(taskName);"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"                builder.append(\"\\n\");"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"            String textToAppend \u003d builder.toString();"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"            fw.write(textToAppend);"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"            fw.close();"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":118}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a deadline task as a special case of task. A \u003ccode\u003edeadline\u003c/code\u003e object has three"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name, due time and done-status. e.g., \u003ccode\u003ego to school, 2020-01-01 19:00, false\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    protected LocalDateTime by;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d stringToDatetime(by);"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task in String type."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the deadline task."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, String by, boolean status){"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        super(description,status);"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d stringToDatetime(by);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the deadline task."},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * @param by The deadline time of the deadline task in LocalDateTime type."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the deadline task."},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public Deadline(String description, LocalDateTime by, boolean status){"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        super(description,status);"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        this.by \u003d by;"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    private LocalDateTime stringToDatetime(String by){"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        return LocalDateTime.parse(by,DF1);"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    private String datetimeToString(LocalDateTime by){"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return DF2.format(by);"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"     * Get the deadline time as a LocalDateTime object."},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"     * @return the the deadline time as a LocalDateTime object."},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    public LocalDateTime getBy(){"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        return by;"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"     * Get the task name for a deadline object."},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type, name and deadline time."},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        return \"[D]\" + super.getTaskName() + \" (by: \" + datetimeToString(by) + \")\";"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":72}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Represents a event task as a special case of task. A \u003ccode\u003eevent\u003c/code\u003e object has three"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name, due time and done-status. e.g., \u003ccode\u003ego to school, 2020-01-01 19:00, false\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class Event extends Task{"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    protected LocalDateTime at;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, String at) {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d stringToDatetime(at);"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task in String type."},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the event task."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, String at, boolean status){"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        super(description,status);"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d stringToDatetime(at);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for event object"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the event task."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * @param at The deadline time of the event task in LocalDateTime type."},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the event task."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public Event(String description, LocalDateTime at, boolean status){"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        super(description,status);"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        this.at \u003d at;"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    private LocalDateTime stringToDatetime(String at){"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return LocalDateTime.parse(at,DF1);"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    private String datetimeToString(LocalDateTime at){"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        return DF2.format(at);"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     * Get the event time as a LocalDateTime object."},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     * @return the the event time as a LocalDateTime object."},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    public LocalDateTime getAt(){"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        return at;"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     * Get the task name for a event object."},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type, name and event time."},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        return \"[E]\" + super.getTaskName() + \" (at: \" + datetimeToString(at) + \")\";"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":77}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * Represents a task. A \u003ccode\u003etask\u003c/code\u003e object has two"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name and done-status."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * And it will be the super class for deadline, event and todo."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class Task {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    protected String taskName;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    protected final static DateTimeFormatter DF1 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    protected final static DateTimeFormatter DF2 \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * Default Constructor for Task object"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * that has no name and done-status as undone."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public Task(){"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        taskName \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d false;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Task object"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskName The name of the task."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public Task(String taskName){"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d false;"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for Deadline object"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"     * @param taskName The name of the task."},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the task."},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    public Task(String taskName, boolean status){"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        isDone \u003d status;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s status icon."},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns a tick if the task is done, otherwise a cross."},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    public String getStatusIcon() {"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s status."},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the task\u0027s done-status, if done then true, otherwise false."},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    public boolean getStatus(){"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        return isDone;"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s name."},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the name of the task as a string."},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    public String getTaskName(){"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        return this.taskName;"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for task object\u0027s name in specific format."},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"     * @return returns the name of the task as a string in a specific format."},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    public String toString(){"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        return this.taskName;"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"     * Set the task as done."},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"    public void markAsDone(){"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        this.isDone \u003d true;"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":91}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.LinkedList;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * Represents a task list. A \u003ccode\u003etask list\u003c/code\u003e object stores"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * the information of all tasks in the program. It has two"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task list stored in the linked list and the number of the tasks."},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    private LinkedList\u003cTask\u003e Tasks;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    private int numOfTasks;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Default Constructor for TaskList object"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * that has an empty LinkedList that can store Task object"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * and the number of tasks as 0."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public TaskList(){"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        Tasks \u003d new LinkedList\u003cTask\u003e();"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks \u003d 0;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for TaskList object\u0027s current number of tasks."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * @return the number of tasks in the TaskList object."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public int getNumOfTasks(){"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        return numOfTasks;"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"     * Getter for TaskList object\u0027s List of the current tasks."},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * @return LinkedList of current tasks."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public LinkedList\u003cTask\u003e getTasks(){"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        return Tasks;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"     * Setter for adding task to a TaskList object."},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"     * @param task the task you want to add."},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    public void addTasks(Task task){"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        Tasks.add(task);"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks++;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"     * Setter for deleting a task to a TaskList object."},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"     * @param task the task you want to delete."},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public void delete(Task task){"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        int taskIndex \u003d Tasks.indexOf(task);"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        Tasks.remove(taskIndex);"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        numOfTasks -\u003d 1;"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":69}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Todo task as a special case of task. A \u003ccode\u003eToDo\u003c/code\u003e object has two"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * fields, which are the task name and done-status. e.g., \u003ccode\u003ego to school, false\u003c/code\u003e"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class ToDo extends Task{"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ToDo object"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the todo task."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    public ToDo(String description) {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * Constructor for ToDo object"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * @param description The name of the todo task."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * @param status The done-status of the todo task."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public ToDo(String description, boolean status){"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        super(description,status);"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * Get the task name for a todo object."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * @return A String object that represent the task name, including information"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * about the task type and task name."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        return \"[T]\" + super.getTaskName();"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":39}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * Represents a UI for the duke program. A \u003ccode\u003eUi\u003c/code\u003e object corresponds to"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * a UI for the program e.g., \u003ccode\u003eterminal\u003c/code\u003e"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"     * Returns the user input at the terminal as a String to the program."},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"     * @param keyboard A scanner that will take the user input."},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"     * @return message The user input will be transformed into a String named message."},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public String readCommand(Scanner keyboard){"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        String message \u003d new String();"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"****************** User Message *****************\");"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        if (keyboard.hasNextLine()) {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"            message \u003d keyboard.nextLine();"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        return message;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     * Print out the welcome message when the program starts."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public void welcome(){"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        display(\"Hello! I am Duke!\\nWhat can I do for you?\");"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     * Take the message from the program and then transfer into the designed UI format."},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * @param botMessage The string that the robot (program) wants to show."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public void display(String botMessage){"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"**************** Chatbot Message ****************\");"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(botMessage);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":42}},{"path":"src/main/java/duke/user/User.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package duke.user;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"public class User {"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"    public String inputMessage(Scanner keyboard){"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"        String message \u003d new String();"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"****************** User Message *****************\");"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        if (keyboard.hasNextLine()) {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"            message \u003d keyboard.nextLine();"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"        System.out.println(\"*************************************************\");"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        return message;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":"deadline return book /by 2020-01-01 19:00"},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"event project meeting /at 2020-02-12 17:00"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"deadline return book"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"event project meeting"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"delete 1"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"delete 4"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"list"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"blah"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"bye"}],"authorContributionMap":{"skinnychenpi":15}}]
