[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    testImplementation("},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u0027junit:junit:4.12\u0027,"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    )"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    mainClassName \u003d \"Duke.Duke\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":5,"-":44}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"T | 1 | read a book"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":"E | 1 | project meeting | Jan 26 2021 4:00pm"},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"D | 0 | assignment 1 | Jan 30 2021"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"T | 1 | take a shower"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"D | 1 | semester feedback | Nov 27 2020"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"E | 1 | VNC night | Feb 1 2021 8:30pm"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"D | 0 | return book | Feb 2 2021"}],"authorContributionMap":{"vuminhhieunus2019":7}},{"path":"src/main/java/Duke/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Command;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An enum containing all available commands for Duke."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    LIST(\"list\"), BYE(\"bye\"),"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    DONE(\"done\"), DELETE(\"delete\"), FIND(\"find\"),"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    EVENT(\"event\"), DEADLINE(\"deadline\"), TODO(\"todo\");"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Command e-num constructor has 1 parameter: The string representation for the command."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param action A string that is associated with the command."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String action;"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    Command(String action) {"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.action \u003d action;"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the action related to the command."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The action related to the command."},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getAction() {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        return this.action;"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":28}},{"path":"src/main/java/Duke/Constant/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Constant;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class containing all the constants used for this application."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Constants {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String GREETING \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        + \"What can I do for you?\";"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String BYE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"                                    + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"                                    + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"                                    + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"                                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String START \u003d \"Hello from\\n\" + LOGO;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String INVALID_DATETIME_FORMAT \u003d \"Invalid format for date and time.\" + \"\\n\""},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"                                                        + \"Your date (and time) should have format yyyy-mm-dd (HH-MM)\""},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"                                                        + \"For example: 2019-10-15 or 2019-10-15 1800\";"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String MARK_DONE_TASK \u003d \"Nice! I\u0027ve marked this task as done:\\n  \";"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String DELETE_TASK_SUCCESS \u003d \"Noted. I\u0027ve removed this task: \\n\";"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String ADD_TASK_SUCCESS \u003d \"Got it. I\u0027ve added this task: \\n\";"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String EMPTY_TASK_LIST \u003d \"There is no task in your list.\";"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String START_LISTING \u003d \"Here are the tasks in your list:\";"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String FIND_SUCCESS \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String FIND_FAIL \u003d \"There are no matching tasks\";"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":27}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyTaskException;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidTask;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.NoSuchCommandException;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidIndex;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Command.Command;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Constant.Constants;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Helper.Storage;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Helper.TaskList;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Helper.Ui;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.*;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Task;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.Scanner;"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":" * The main driver class for this application"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Scanner sc;"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Ui ui;"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final TaskList taskList;"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Duke class constructor has 1 parameter: a path to the destination for reading and writing data."},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param path the destination for reading and writing data."},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Duke(String path){"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.storage \u003d new Storage(path);"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.taskList \u003d new TaskList(storage.readDataFromFile());"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Main method for running this application."},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param args Command line arguments."},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"        Duke duke \u003d new Duke(Constants.FILE_PATH);"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"        duke.run();"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"    private void run() {"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(Constants.START);"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        ui.printResponse(Constants.GREETING);"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"        while (sc.hasNextLine()){"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"            String command \u003d sc.nextLine().trim();"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (command.equalsIgnoreCase(Command.BYE.getAction())){"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"                ui.printResponse(Constants.BYE);"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"                break;"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.equalsIgnoreCase(Command.LIST.getAction())){"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"                ui.printAllTask(taskList.getList());"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.equalsIgnoreCase(Command.DONE.getAction()) ||"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"                    command.equalsIgnoreCase(Command.DELETE.getAction())){"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"                try {"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"                    throw new InvalidIndex(command, taskList.getList().size());"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (InvalidIndex e){"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(e.getMessage());"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.toLowerCase().startsWith(Command.DONE.getAction())){"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"                try{"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"                    int doneIndex \u003d Integer.parseInt(command.substring(5));"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"                    String result \u003d taskList.finishTask(doneIndex);"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(result);"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (NumberFormatException | InvalidIndex e){"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"                    System.out.println(e.getMessage());"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.toLowerCase().startsWith(Command.DELETE.getAction())){"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"                try{"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"                    int deleteIndex \u003d Integer.parseInt(command.substring(7));"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"                    String result \u003d taskList.deleteTask(deleteIndex);"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(result);"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (NumberFormatException | InvalidIndex e){"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(e.getMessage());"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.equalsIgnoreCase(Command.FIND.getAction())){"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"                try {"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"                    throw new EmptyFindContent();"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (EmptyFindContent e) {"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(e.getMessage());"},{"lineNumber":89,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.toLowerCase().startsWith(Command.FIND.getAction())){"},{"lineNumber":91,"author":{"gitId":"vuminhhieunus2019"},"content":"                String keyword \u003d command.substring(5);"},{"lineNumber":92,"author":{"gitId":"vuminhhieunus2019"},"content":"                ArrayList\u003cTask\u003e filter \u003d taskList.findTask(keyword);"},{"lineNumber":93,"author":{"gitId":"vuminhhieunus2019"},"content":"                ui.printMatchedTask(filter);"},{"lineNumber":94,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"vuminhhieunus2019"},"content":"            else {"},{"lineNumber":96,"author":{"gitId":"vuminhhieunus2019"},"content":"                try {"},{"lineNumber":97,"author":{"gitId":"vuminhhieunus2019"},"content":"                    String status \u003d taskList.addTask(command);"},{"lineNumber":98,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(status);"},{"lineNumber":99,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (NoSuchCommandException | EmptyTaskException | InvalidTask e){"},{"lineNumber":100,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(e.getMessage());"},{"lineNumber":101,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":102,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"vuminhhieunus2019"},"content":"            //update the file"},{"lineNumber":104,"author":{"gitId":"vuminhhieunus2019"},"content":"            storage.writeDataToFile(taskList.getList());"},{"lineNumber":105,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":104,"-":3}},{"path":"src/main/java/Duke/Exception/EmptyFindContent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"public class EmptyFindContent extends Exception{"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"Find command must follow by a keyword!\";"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":8}},{"path":"src/main/java/Duke/Exception/EmptyTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception for Event, Deadline and Todo task with no description."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class EmptyTaskException extends Exception{"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    String type;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The constructor for this Exception has 1 parameter: the type of the command (event, deadline or todo)."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param type Type of the command (event, deadline or todo)"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    public EmptyTaskException(String type) {"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d type;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering a task with no description."},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"☹ OOPS!!! The description of a \" + type + \" cannot be empty.\";"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":25}},{"path":"src/main/java/Duke/Exception/InvalidIndex.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception for handling invalid index (negative or out of bound) for done and delete command."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class InvalidIndex extends IndexOutOfBoundsException{"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    String type;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    int listSize;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * This exception constructor has 2 parameters: the type of the command (done or delete) and the number of tasks in the list."},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param type The type of the command (done or delete)."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param listSize The number of tasks in the list."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    public InvalidIndex(String type, int listSize) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d type;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.listSize \u003d listSize;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering an invalid index."},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        return type + \" command should be followed by a number between 1 and \" + listSize + \".\";"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":28}},{"path":"src/main/java/Duke/Exception/InvalidTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception that handle a command for Deadline command without the word \"/by\" and Event command without the word \"/at\"."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class InvalidTask extends Exception{"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    String type;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The constructor for this Exception has 1 parameter: the type of the command (event or deadline)."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param type Type of the command (event or deadline)."},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    public InvalidTask(String type) {"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d type;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering a deadline or event without the signature word."},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"Invalid command for \" + type + \"! Try again\";"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":25}},{"path":"src/main/java/Duke/Exception/NoSuchCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception that handle commands that are not available in the command list."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class NoSuchCommandException extends Exception{"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering a command that is not in the command list."},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":16}},{"path":"src/main/java/Duke/Helper/DateTimeProcessor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":" * A helper class that converted a time string to a more meaningful version."},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"public class DateTimeProcessor {"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String fullTimeString;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The constructor of DateTimeProcessor class has 1 parameter: The string containing the date (and time) data that needs to be converted."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param fullTimeString A string containing the date (and time) data."},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    public DateTimeProcessor(String fullTimeString) {"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.fullTimeString \u003d fullTimeString;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    private String processTime(String time){"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"        try{"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (time.isEmpty()) return \"\";"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"            else if (time.length() !\u003d 3 \u0026\u0026 time.length() !\u003d 4) return null;"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"            int timeInt \u003d Integer.parseInt(time);"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (timeInt \u003c 0) {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"            int hour \u003d timeInt / 100;"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"            int minute \u003d timeInt % 100;"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (hour \u003d\u003d 24){"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (minute \u003d\u003d 0){"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"                    return \"12:00am\";"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"                } else {"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"                    return null;"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (hour \u003e 24 || minute \u003e 59){"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"                String type;"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (hour \u003e\u003d 12) type \u003d \"pm\";"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"                else type \u003d \"am\";"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"                hour \u003d hour % 12;"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (hour \u003d\u003d 0) hour \u003d 12;"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"                String padding \u003d (minute \u003c 10) ? \"0\" : \"\";"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"                return hour + \":\" + padding + minute + type;"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"            return null;"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"    private String processDate(String date){"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        try{"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"            LocalDate localDate \u003d LocalDate.parse(date);"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"            return localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (Exception e){"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"            return null;"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"    private String[] processInput(){"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"            String date \u003d \"\";"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"            String time \u003d \"\";"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"            String[] info \u003d fullTimeString.trim().split(\" \");"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (String s : info){"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (date.isEmpty()) date \u003d s;"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"                else {"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"                    time \u003d s;"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"            return new String[]{date, time};"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (Exception e){"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"            return null;"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Get a meaningful version of date and time string of the input, for example: Jan 5 2021 or May 15 2020 2:30pm."},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A meaningful version of date and time string of the input."},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getFullDateTime(){"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] array \u003d processInput();"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (array \u003d\u003d null) return \"Invalid format for date and time.\";"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"        String date \u003d processDate(array[0]);"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"        String time \u003d processTime(array[1]);"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (date \u003d\u003d null || time \u003d\u003d null) return \"Invalid format for date and time.\";"},{"lineNumber":89,"author":{"gitId":"vuminhhieunus2019"},"content":"        return (time.isEmpty()) ? date : date + \" \" + time;"},{"lineNumber":90,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":91}},{"path":"src/main/java/Duke/Helper/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.*;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.*;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class deals with making sense of the user command."},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Deadline;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Event;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Todo;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyTaskException;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidTask;"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Parser {"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Parses the input string into a ToDo command so that it can be added to the task list."},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command A string that needed to be parsed to a Todo instance"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A Todo command corresponding to the input"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws EmptyTaskException A Todo command with no description."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Todo parseTodo(String command) throws EmptyTaskException {"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"        String description \u003d command.substring(5);"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (description.isEmpty()){"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new EmptyTaskException(\"todo\");"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"        return new Todo(description);"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Parses the input string into a Deadline command so that it can be added to the task list."},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command A string that needed to be parsed to a Deadline instance"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A Deadline command corresponding to the input or null if the date and time format in the string is wrong."},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws InvalidTask The input string does not contain the word \"/by\", which at a signature in a deadline command."},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws EmptyTaskException A Deadline command with no description."},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Deadline parseDeadline(String command) throws InvalidTask, EmptyTaskException {"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"        String content \u003d command.substring(9);"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (content.isEmpty()){"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new EmptyTaskException(\"deadline\");"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        int byIndex \u003d content.indexOf(\"/by\");"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (byIndex \u003d\u003d -1){"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new InvalidTask(\"deadline\");"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"            String description \u003d content.substring(0, byIndex - 1);"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"            String by \u003d content.substring(byIndex + 4);"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"            DateTimeProcessor processor \u003d new DateTimeProcessor(by);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"            String time \u003d processor.getFullDateTime();"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (time.equals(\"Invalid format for date and time.\")){"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"                return new Deadline(description, time);"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Parses the input string into an Event command so that it can be added to the task list."},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command A string that needed to be parsed to an Event instance"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return An Event command corresponding to the input or null if the date and time format in the string is wrong."},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws InvalidTask The input string does not contain the word \"/at\", which at a signature in an event command."},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws EmptyTaskException An Event command with no description."},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Event parseEvent(String command) throws EmptyTaskException, InvalidTask {"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"        String content \u003d command.substring(6);"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (content.isEmpty()){"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new EmptyTaskException(\"event\");"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"        int atIndex \u003d content.indexOf(\"/at\");"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (atIndex \u003d\u003d -1){"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new InvalidTask(\"event\");"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"            String description \u003d content.substring(0, atIndex - 1);"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"            String at \u003d content.substring(atIndex + 4);"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"            DateTimeProcessor processor \u003d new DateTimeProcessor(at);"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"            String time \u003d processor.getFullDateTime();"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (time.equals(\"Invalid format for date and time.\")) {"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"                return new Event(description, time);"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":87}},{"path":"src/main/java/Duke/Helper/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Deadline;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Event;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Task;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Todo;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class handles tasks on saving tasks to file and loading tasks from file."},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String path;"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     * This class constructor has 1 parameter: a string path to the destination file for reading and writing the data."},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param path The destination file for reading and writing the data."},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Storage(String path) {"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.path \u003d path;"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Loads the data from the file when the application starts running."},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A list containing all the tasks stored in the file."},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ArrayList\u003cTask\u003e readDataFromFile(){"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"            File f \u003d new File(path);"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"            while (sc.hasNextLine()){"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"                String currLine \u003d sc.nextLine();"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"                String[] information \u003d currLine.split(\"\\\\|\");"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"                switch (information[0].charAt(0)) {"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"                    case \u0027T\u0027: {"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"                        Task newTask \u003d new Todo(information[2]);"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"                        if (information[1].trim().equals(\"1\")) newTask.markAsDone();"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"                        tasks.add(newTask);"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"                        break;"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"                    }"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"                    case \u0027D\u0027: {"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"                        Task newTask \u003d new Deadline(information[2], information[3]);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"                        if (information[1].trim().equals(\"1\")) newTask.markAsDone();"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"                        tasks.add(newTask);"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"                        break;"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"                    }"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"                    case \u0027E\u0027: {"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"                        Task newTask \u003d new Event(information[2], information[3]);"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"                        if (information[1].trim().equals(\"1\")) newTask.markAsDone();"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"                        tasks.add(newTask);"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"                        break;"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"                    }"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"            return tasks;"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(\"File not found \" + e.getMessage());"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Saves the data to the file after every update (adding or deleting a task)"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param list A list containing all the tasks that needs to be saved."},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void writeDataToFile(ArrayList\u003cTask\u003e list){"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"            File f \u003d new File(path);"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"            FileWriter fw \u003d new FileWriter(f);"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (Task task : list){"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"                String content \u003d task.getType().trim() + \" | \" + task.getStatusNumber() + \" | \" +"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"                        task.getDescription().trim() + task.getTime().trim();"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"                fw.write(content + \u0027\\n\u0027);"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"            fw.close();"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(\"Unable to write to file \" + e.getMessage());"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":88}},{"path":"src/main/java/Duke/Helper/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyTaskException;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidIndex;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidTask;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.NoSuchCommandException;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Deadline;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Event;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Task;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Todo;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Command.Command;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Constant.Constants;"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":" * A wrapper class that contains all available tasks."},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"public class TaskList {"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final ArrayList\u003cTask\u003e list;"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Parser parser;"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"     * This class constructor has 1 parameter: a list containing all available tasks."},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param list A list of all available tasks."},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.list \u003d list;"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Returns a list containing all available tasks."},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A list containing all available tasks."},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"        return list;"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Marks a task in the list, which is specified by an index (1-based), as done."},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param index A number between 1 and the number of tasks in the list."},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The status of this command whether it succeeds or fails."},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String finishTask(int index){"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"        try{"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"          Task task \u003d list.get(index - 1);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"          task.markAsDone();"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"          return Constants.MARK_DONE_TASK + task.toString();"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new InvalidIndex(\"Done\", list.size());"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Deletes a task from the list, which is specified by an index (1-based)."},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param index A number between 1 and the number of tasks in the list."},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The status of the deletion whether it succeeds or fails and update the number of tasks in the list"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"     *          after a successful deletion."},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String deleteTask(int index){"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"        try{"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"            Task task \u003d list.remove(index - 1);"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"            return Constants.DELETE_TASK_SUCCESS +"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"                    task.toString() + \"\\n\" +"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"                    \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new InvalidIndex(\"Delete\", list.size());"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Adds a new task to the list and the command must be a Deadline, Event or Todo."},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command A string that contain the information about the task that needs to be added."},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The status of this command it succeeds or fails and update the number of tasks in the list."},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws NoSuchCommandException The command is not of type Deadline, Event or Todo."},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws EmptyTaskException A task with no description."},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws InvalidTask A Deadline or Event command without its signature word (\"/by\" and \"/at\" respectively)."},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String addTask(String command) throws NoSuchCommandException, EmptyTaskException, InvalidTask {"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (command.equalsIgnoreCase(Command.TODO.getAction()) ||"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"                command.equalsIgnoreCase(Command.DEADLINE.getAction()) ||"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"                command.equalsIgnoreCase(Command.EVENT.getAction())){"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new EmptyTaskException(command);"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.TODO.getAction() + \" \")){"},{"lineNumber":89,"author":{"gitId":"vuminhhieunus2019"},"content":"            Todo task \u003d parser.parseTodo(command);"},{"lineNumber":90,"author":{"gitId":"vuminhhieunus2019"},"content":"            list.add(task);"},{"lineNumber":91,"author":{"gitId":"vuminhhieunus2019"},"content":"            return Constants.ADD_TASK_SUCCESS +"},{"lineNumber":92,"author":{"gitId":"vuminhhieunus2019"},"content":"                    \"  \" + task +\"\\n\" +"},{"lineNumber":93,"author":{"gitId":"vuminhhieunus2019"},"content":"                    \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":94,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.DEADLINE.getAction() + \" \")){"},{"lineNumber":95,"author":{"gitId":"vuminhhieunus2019"},"content":"            Deadline task \u003d parser.parseDeadline(command);"},{"lineNumber":96,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (task \u003d\u003d null){"},{"lineNumber":97,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.INVALID_DATETIME_FORMAT;"},{"lineNumber":98,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":99,"author":{"gitId":"vuminhhieunus2019"},"content":"                list.add(task);"},{"lineNumber":100,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.ADD_TASK_SUCCESS +"},{"lineNumber":101,"author":{"gitId":"vuminhhieunus2019"},"content":"                        \"  \" + task +\"\\n\" +"},{"lineNumber":102,"author":{"gitId":"vuminhhieunus2019"},"content":"                        \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":103,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.EVENT.getAction() + \" \")){"},{"lineNumber":105,"author":{"gitId":"vuminhhieunus2019"},"content":"            Event task \u003d parser.parseEvent(command);"},{"lineNumber":106,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (task \u003d\u003d null){"},{"lineNumber":107,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.INVALID_DATETIME_FORMAT;"},{"lineNumber":108,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":109,"author":{"gitId":"vuminhhieunus2019"},"content":"                list.add(task);"},{"lineNumber":110,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.ADD_TASK_SUCCESS +"},{"lineNumber":111,"author":{"gitId":"vuminhhieunus2019"},"content":"                        \"  \" + task +\"\\n\" +"},{"lineNumber":112,"author":{"gitId":"vuminhhieunus2019"},"content":"                        \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":113,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":115,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new NoSuchCommandException();"},{"lineNumber":116,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":119,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ArrayList\u003cTask\u003e findTask(String keyword){"},{"lineNumber":120,"author":{"gitId":"vuminhhieunus2019"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (Task task : list){"},{"lineNumber":122,"author":{"gitId":"vuminhhieunus2019"},"content":"            String description \u003d task.getDescription();"},{"lineNumber":123,"author":{"gitId":"vuminhhieunus2019"},"content":"            String time \u003d task.getTime();"},{"lineNumber":124,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (description.contains(keyword) || time.contains(keyword)){"},{"lineNumber":125,"author":{"gitId":"vuminhhieunus2019"},"content":"                result.add(task);"},{"lineNumber":126,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":127,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"vuminhhieunus2019"},"content":"        return result;"},{"lineNumber":129,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":130}},{"path":"src/main/java/Duke/Helper/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Task;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Constant.Constants;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class handles interactions with the user."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String LINES \u003d \"____________________________________________________________\";"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Formats the response that will be printed out to the users."},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param response A string that needed to be formatted before printing out."},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void printResponse(String response) {"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(response);"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println();"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Lists all available tasks in the database."},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param list A list containing all the current tasks"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void printAllTask(ArrayList\u003cTask\u003e list){"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (list.isEmpty()){"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(Constants.EMPTY_TASK_LIST);"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(Constants.START_LISTING);"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"                Task task \u003d list.get(i);"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"                System.out.println((i + 1) + \". \" + task);"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println();"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void printMatchedTask(ArrayList\u003cTask\u003e list){"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (list.isEmpty()){"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(Constants.FIND_FAIL);"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(Constants.FIND_SUCCESS);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"                Task task \u003d list.get(i);"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"                System.out.println((i + 1) + \". \" + task);"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println();"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":59}},{"path":"src/main/java/Duke/Task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * A deadline is a task that need to be done before a specific date/time."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected String by;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Deadline class constructor has 2 parameters: the description about a specific deadline and the time that the deadline needs to be done."},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param description The description about the deadline."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param by The time that the deadline needs to be done."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.by \u003d by;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d \"D\";"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the time that the deadline needs to be done."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The time that the deadline needs to be done."},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getTime() {"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \" | \" + by;"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the string representation for this Deadline object."},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The string representation for this object."},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.trim() + \")\";"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":38}},{"path":"src/main/java/Duke/Task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An event is a task that start at a specific time and ends at a specific time"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Event extends Task{"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected String at;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Deadline class constructor has 2 parameters: the description about a specific deadline and the time that the event occurs."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param description The description about the event."},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param at The time that the event occurs."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Event(String description, String at) {"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.at \u003d at;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d \"E\";"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the time that the event occurs."},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The time that the event occurs."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getTime() {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \" | \" + at;"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the string representation for this Event object."},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The string representation for this object."},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at.trim() + \")\";"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":37}},{"path":"src/main/java/Duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class that contains all the information about 1 specific task."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected String description, type;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Task class constructor has 1 parameter: the description about a specific task."},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param description The description about the task."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Task(String description) {"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the status of the task, whether it has been done or not."},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A tick symbol if done, X symbol otherwise."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the description of the task."},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The description of the task."},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getDescription() {"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"        return description;"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the status of the task, whether it has been done or not. This method is used for writing tasks into file."},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return 1 if done, 0 otherwise."},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"    public int getStatusNumber(){"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"        return (isDone) ? 1 : 0;"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the type of the task, whether it is a Deadline, Event or Todo."},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The type of the task."},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getType() {"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"        return type;"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the time associated with the task."},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The time associated with the task."},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getTime(){"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"\";"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Changes the status of a task from not done to done."},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void markAsDone(){"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.isDone \u003d true;"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the string representation for this Task object."},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The string representation for this object."},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":75}},{"path":"src/main/java/Duke/Task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * A Todo is a task without any date/time attached to it."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Todo extends Task{"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Todo class constructor has 1 parameter: the description about a specific task."},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param description The description about the task."},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Todo(String description) {"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d \"T\";"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the string representation for this Todo object."},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The string representation for this object."},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":24}},{"path":"src/test/java/Duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void dummyTest(){"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":12}},{"path":"src/test/java/Duke/Helper/DateTimeProcessorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"public class DateTimeProcessorTest {"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void DateTimeTestOutput(){"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input \u003d new String[]{\"2020-02-15 1800\", \"2021-01-05\", \"2000-01-01 2400\","},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        \"2019-12-19\", \"2015-09-11 2359\", \"2021-02-01 000\", \"1975-04-30 830\"};"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] expectedOutput \u003d new String[]{\"Feb 15 2020 6:00pm\", \"Jan 5 2021\", \"Jan 1 2000 12:00am\","},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"                                                \"Dec 19 2019\", \"Sep 11 2015 11:59pm\", \"Feb 1 2021 12:00am\", \"Apr 30 1975 8:30am\"};"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"            DateTimeProcessor processor \u003d new DateTimeProcessor(input[i]);"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"            String output \u003d processor.getFullDateTime();"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output, expectedOutput[i]);"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void DateTimeTestError(){"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input \u003d new String[]{\"\", \"20-01-2020\", \"2020-15-14\", \"2020-01-38\", \"2019-01-08 2517\", \"2014\", \"2021-01-01 1262\","},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        \"1995-04-08 -3615\", \"2004-05-09 abc\", \"abc xyz\", \"2020-04-081500\"};"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (String time : input) {"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"            DateTimeProcessor processor \u003d new DateTimeProcessor(time);"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"            String output \u003d processor.getFullDateTime();"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output, \"Invalid format for date and time.\");"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":32}},{"path":"src/test/java/Duke/Helper/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyTaskException;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidTask;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Deadline;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Event;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Todo;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"public class ParserTest {"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void testParserTodo() throws EmptyTaskException {"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input \u003d new String[]{\"todo brush the teeth\", \"todo read book\", \"todo return book\"};"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        Todo[] expectedOutput \u003d new Todo[]{new Todo(\"brush the teeth\"), new Todo(\"read book\"),"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"                                            new Todo(\"return book\")};"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"            Parser parser \u003d new Parser();"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"            Todo output \u003d parser.parseTodo(input[i]);"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"            Todo expected \u003d expectedOutput[i];"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output.toString(), expected.toString());"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void testParserDeadline() throws EmptyTaskException, InvalidTask {"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input  \u003d new String[]{\"deadline ip week 3 /by 2021-01-28 2359\", \"deadline assignment 1 /by 2021-02-01\","},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        \"deadline math homework /by 2021-03-05\"};"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"        Deadline[] expectedOutput \u003d new Deadline[]{new Deadline(\"ip week 3\", \"Jan 28 2021 11:59pm\"),"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"                                                    new Deadline(\"assignment 1\", \"Feb 1 2021\"),"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"                                                    new Deadline(\"math homework\", \"Mar 5 2021\")};"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"            Parser parser \u003d new Parser();"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"            Deadline output \u003d parser.parseDeadline(input[i]);"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"            Deadline expected \u003d expectedOutput[i];"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output.toString(), expected.toString());"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void testParserEvent() throws EmptyTaskException, InvalidTask {"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input  \u003d new String[]{\"event project meeting /at 2021-01-28 2359\", \"event VNC night /at 2021-02-01\","},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        \"event night cycling /at 2021-03-05\"};"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        Event[] expectedOutput \u003d new Event[]{new Event(\"project meeting\", \"Jan 28 2021 11:59pm\"),"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"                new Event(\"VNC night\", \"Feb 1 2021\"),"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"                new Event(\"night cycling\", \"Mar 5 2021\")};"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"            Parser parser \u003d new Parser();"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"            Event output \u003d parser.parseEvent(input[i]);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"            Event expected \u003d expectedOutput[i];"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output.toString(), expected.toString());"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":55}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"todo sweep the floor"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":"deadline having lunch /by Sunday 2pm"},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"event team project meeting /at Monday 2-4pm"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"todo sleep early"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"list"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"done"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"invalid command"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"list"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"deadline study for the test /by 27 April 2021"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"delete 10"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"deadline cook a meal"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"delete 3"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"bye"}],"authorContributionMap":{"vuminhhieunus2019":15}}]
