[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    testImplementation("},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u0027junit:junit:4.12\u0027,"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    )"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"    mainClassName \u003d \"Duke.Duke\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"    enableAssertions \u003d true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":20,"-":44}},{"path":"data/Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"T | 0 | borrow book"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":"T | 1 | eat"},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"E | 1 | meeting|      May 1 2020"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"E | 0 | lunar new year| Feb 12 2021"}],"authorContributionMap":{"vuminhhieunus2019":4}},{"path":"src/main/java/Duke/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Command;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An enum containing all available commands for Duke."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    LIST(\"list\"), BYE(\"bye\"),"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    DONE(\"done\"), DELETE(\"delete\"), FIND(\"find\"),"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    EVENT(\"event\"), DEADLINE(\"deadline\"), TODO(\"todo\"),"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    STATISTICS(\"stat\");"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Command e-num constructor has 1 parameter: The string representation for the command."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param action A string that is associated with the command."},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String action;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    Command(String action) {"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.action \u003d action;"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the action related to the command."},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The action related to the command."},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getAction() {"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"        return this.action;"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":29}},{"path":"src/main/java/Duke/Constant/Constants.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Constant;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class containing all the constants used for this application."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Constants {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String ADD_TASK_SUCCESS \u003d \"Got it. I\u0027ve added this task: \\n\";"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String BYE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String DELETE_TASK_SUCCESS \u003d \"Noted. I\u0027ve removed this task: \\n\";"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String EMPTY_TASK_LIST \u003d \"There is no task in your list.\";"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String FIND_SUCCESS \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String FIND_FAIL \u003d \"There are no matching tasks\";"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String GREETING \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        + \"What can I do for you?\";"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String MARK_DONE_TASK \u003d \"Nice! I\u0027ve marked this task as done:\\n  \";"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String START_LISTING \u003d \"Here are the tasks in your list:\";"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String INVALID_DATETIME_FORMAT \u003d \"Invalid format for date and time.\" + \"\\n\""},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"            + \"Your date (and time) should have format yyyy-mm-dd (HH-MM)\" + \"\\n\""},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"            + \"For example: 2019-10-15 or 2019-10-15 1800\";"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"                                    + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"                                    + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"                                    + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"                                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String START \u003d \"Hello from\\n\" + LOGO;"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":27}},{"path":"src/main/java/Duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"public class DialogBox extends HBox {"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Label dialog;"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    private ImageView displayPicture;"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"            fxmlLoader.load();"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        dialog.setText(text);"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        displayPicture.setImage(img);"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    private void flip() {"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        Collections.reverse(tmp);"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"        return new DialogBox(text, img);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"        db.flip();"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"        return db;"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":58}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Command.Command;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Constant.Constants;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyFindContent;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyTaskException;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidIndex;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidTask;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.NoSuchCommandException;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Helper.Storage;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Helper.TaskList;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Helper.Ui;"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Task;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":" * The main driver class for this application"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Scanner sc;"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Ui ui;"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Storage storage;"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final TaskList taskList;"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Empty constructor for Duke class"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Duke() {"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.storage \u003d new Storage(Constants.FILE_PATH);"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.taskList \u003d new TaskList(storage.readDataFromFile());"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Duke class constructor has 1 parameter: a path to the destination for reading and writing data."},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param path the destination for reading and writing data."},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Duke(String path) {"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.storage \u003d new Storage(path);"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.taskList \u003d new TaskList(storage.readDataFromFile());"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Main method for running this application."},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param args Command line arguments."},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        Duke duke \u003d new Duke(Constants.FILE_PATH);"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"        duke.run();"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the response, use for Duke GUI."},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command The type of command."},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The output shows to the user screen."},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getResponse(String command) {"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (command.equalsIgnoreCase(Command.LIST.getAction())) {"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"            ArrayList\u003cTask\u003e list \u003d taskList.getList();"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (list.isEmpty()) {"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.EMPTY_TASK_LIST;"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"            StringBuilder output \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"            output.append(Constants.START_LISTING).append(\u0027\\n\u0027);"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(i + 1).append(\". \").append(list.get(i)).append(\u0027\\n\u0027);"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"            return output.toString();"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.equalsIgnoreCase(Command.STATISTICS.getAction())) {"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"            ArrayList\u003cTask\u003e list \u003d taskList.getList();"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (list.isEmpty()) {"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.EMPTY_TASK_LIST;"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"                int[][] stats \u003d taskList.statistics();"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"                return ui.stats(stats);"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.equalsIgnoreCase(Command.DONE.getAction())"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"                || command.equalsIgnoreCase(Command.DELETE.getAction())) {"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"            try {"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"                throw new InvalidIndex(command, taskList.getList().size());"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"            } catch (InvalidIndex e) {"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"                return e.getMessage();"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.DONE.getAction())) {"},{"lineNumber":90,"author":{"gitId":"vuminhhieunus2019"},"content":"            try {"},{"lineNumber":91,"author":{"gitId":"vuminhhieunus2019"},"content":"                int doneIndex \u003d Integer.parseInt(command.substring(5));"},{"lineNumber":92,"author":{"gitId":"vuminhhieunus2019"},"content":"                return taskList.finishTask(doneIndex);"},{"lineNumber":93,"author":{"gitId":"vuminhhieunus2019"},"content":"            } catch (NumberFormatException | InvalidIndex e) {"},{"lineNumber":94,"author":{"gitId":"vuminhhieunus2019"},"content":"                return e.getMessage();"},{"lineNumber":95,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.DELETE.getAction())) {"},{"lineNumber":97,"author":{"gitId":"vuminhhieunus2019"},"content":"            try {"},{"lineNumber":98,"author":{"gitId":"vuminhhieunus2019"},"content":"                int deleteIndex \u003d Integer.parseInt(command.substring(7));"},{"lineNumber":99,"author":{"gitId":"vuminhhieunus2019"},"content":"                return taskList.deleteTask(deleteIndex);"},{"lineNumber":100,"author":{"gitId":"vuminhhieunus2019"},"content":"            } catch (NumberFormatException | InvalidIndex e) {"},{"lineNumber":101,"author":{"gitId":"vuminhhieunus2019"},"content":"                return e.getMessage();"},{"lineNumber":102,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.equalsIgnoreCase(Command.FIND.getAction())) {"},{"lineNumber":104,"author":{"gitId":"vuminhhieunus2019"},"content":"            try {"},{"lineNumber":105,"author":{"gitId":"vuminhhieunus2019"},"content":"                throw new EmptyFindContent();"},{"lineNumber":106,"author":{"gitId":"vuminhhieunus2019"},"content":"            } catch (EmptyFindContent e) {"},{"lineNumber":107,"author":{"gitId":"vuminhhieunus2019"},"content":"                return e.getMessage();"},{"lineNumber":108,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.FIND.getAction())) {"},{"lineNumber":110,"author":{"gitId":"vuminhhieunus2019"},"content":"            String[] keyword \u003d command.substring(5).split(\" \");"},{"lineNumber":111,"author":{"gitId":"vuminhhieunus2019"},"content":"            ArrayList\u003cTask\u003e filter \u003d taskList.findTask(keyword);"},{"lineNumber":112,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (filter.isEmpty()) {"},{"lineNumber":113,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.FIND_FAIL;"},{"lineNumber":114,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":115,"author":{"gitId":"vuminhhieunus2019"},"content":"                StringBuilder output \u003d new StringBuilder();"},{"lineNumber":116,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(Constants.FIND_SUCCESS).append(\u0027\\n\u0027);"},{"lineNumber":117,"author":{"gitId":"vuminhhieunus2019"},"content":"                for (int i \u003d 0; i \u003c filter.size(); i++) {"},{"lineNumber":118,"author":{"gitId":"vuminhhieunus2019"},"content":"                    output.append(i + 1).append(\". \").append(filter.get(i)).append(\u0027\\n\u0027);"},{"lineNumber":119,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":120,"author":{"gitId":"vuminhhieunus2019"},"content":"                return output.toString();"},{"lineNumber":121,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":123,"author":{"gitId":"vuminhhieunus2019"},"content":"            try {"},{"lineNumber":124,"author":{"gitId":"vuminhhieunus2019"},"content":"                String status \u003d taskList.addTask(command);"},{"lineNumber":125,"author":{"gitId":"vuminhhieunus2019"},"content":"                storage.writeDataToFile(taskList.getList());"},{"lineNumber":126,"author":{"gitId":"vuminhhieunus2019"},"content":"                return status;"},{"lineNumber":127,"author":{"gitId":"vuminhhieunus2019"},"content":"            } catch (NoSuchCommandException | EmptyTaskException | InvalidTask e) {"},{"lineNumber":128,"author":{"gitId":"vuminhhieunus2019"},"content":"                return e.getMessage();"},{"lineNumber":129,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":133,"author":{"gitId":"vuminhhieunus2019"},"content":"    private void run() {"},{"lineNumber":134,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(Constants.START);"},{"lineNumber":135,"author":{"gitId":"vuminhhieunus2019"},"content":"        ui.printResponse(Constants.GREETING);"},{"lineNumber":136,"author":{"gitId":"vuminhhieunus2019"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":137,"author":{"gitId":"vuminhhieunus2019"},"content":"            String command \u003d sc.nextLine().trim();"},{"lineNumber":138,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (command.equalsIgnoreCase(Command.BYE.getAction())) {"},{"lineNumber":139,"author":{"gitId":"vuminhhieunus2019"},"content":"                ui.printResponse(Constants.BYE);"},{"lineNumber":140,"author":{"gitId":"vuminhhieunus2019"},"content":"                break;"},{"lineNumber":141,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.equalsIgnoreCase(Command.LIST.getAction())) {"},{"lineNumber":142,"author":{"gitId":"vuminhhieunus2019"},"content":"                ui.printAllTask(taskList.getList());"},{"lineNumber":143,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.equalsIgnoreCase(Command.STATISTICS.getAction())) {"},{"lineNumber":144,"author":{"gitId":"vuminhhieunus2019"},"content":"                ArrayList\u003cTask\u003e list \u003d taskList.getList();"},{"lineNumber":145,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (list.isEmpty()) {"},{"lineNumber":146,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(Constants.EMPTY_TASK_LIST);"},{"lineNumber":147,"author":{"gitId":"vuminhhieunus2019"},"content":"                } else {"},{"lineNumber":148,"author":{"gitId":"vuminhhieunus2019"},"content":"                    int[][] stats \u003d taskList.statistics();"},{"lineNumber":149,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(ui.stats(stats));"},{"lineNumber":150,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":151,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.equalsIgnoreCase(Command.DONE.getAction())"},{"lineNumber":152,"author":{"gitId":"vuminhhieunus2019"},"content":"                    || command.equalsIgnoreCase(Command.DELETE.getAction())) {"},{"lineNumber":153,"author":{"gitId":"vuminhhieunus2019"},"content":"                try {"},{"lineNumber":154,"author":{"gitId":"vuminhhieunus2019"},"content":"                    throw new InvalidIndex(command, taskList.getList().size());"},{"lineNumber":155,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (InvalidIndex e) {"},{"lineNumber":156,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(e.getMessage());"},{"lineNumber":157,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":158,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.toLowerCase().startsWith(Command.DONE.getAction())) {"},{"lineNumber":159,"author":{"gitId":"vuminhhieunus2019"},"content":"                try {"},{"lineNumber":160,"author":{"gitId":"vuminhhieunus2019"},"content":"                    int doneIndex \u003d Integer.parseInt(command.substring(5));"},{"lineNumber":161,"author":{"gitId":"vuminhhieunus2019"},"content":"                    String result \u003d taskList.finishTask(doneIndex);"},{"lineNumber":162,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(result);"},{"lineNumber":163,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (NumberFormatException | InvalidIndex e) {"},{"lineNumber":164,"author":{"gitId":"vuminhhieunus2019"},"content":"                    System.out.println(e.getMessage());"},{"lineNumber":165,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":166,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.toLowerCase().startsWith(Command.DELETE.getAction())) {"},{"lineNumber":167,"author":{"gitId":"vuminhhieunus2019"},"content":"                try {"},{"lineNumber":168,"author":{"gitId":"vuminhhieunus2019"},"content":"                    int deleteIndex \u003d Integer.parseInt(command.substring(7));"},{"lineNumber":169,"author":{"gitId":"vuminhhieunus2019"},"content":"                    String result \u003d taskList.deleteTask(deleteIndex);"},{"lineNumber":170,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(result);"},{"lineNumber":171,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (NumberFormatException | InvalidIndex e) {"},{"lineNumber":172,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(e.getMessage());"},{"lineNumber":173,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":174,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.equalsIgnoreCase(Command.FIND.getAction())) {"},{"lineNumber":175,"author":{"gitId":"vuminhhieunus2019"},"content":"                try {"},{"lineNumber":176,"author":{"gitId":"vuminhhieunus2019"},"content":"                    throw new EmptyFindContent();"},{"lineNumber":177,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (EmptyFindContent e) {"},{"lineNumber":178,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(e.getMessage());"},{"lineNumber":179,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":180,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (command.toLowerCase().startsWith(Command.FIND.getAction())) {"},{"lineNumber":181,"author":{"gitId":"vuminhhieunus2019"},"content":"                String[] keyword \u003d command.substring(5).split(\" \");"},{"lineNumber":182,"author":{"gitId":"vuminhhieunus2019"},"content":"                ArrayList\u003cTask\u003e filter \u003d taskList.findTask(keyword);"},{"lineNumber":183,"author":{"gitId":"vuminhhieunus2019"},"content":"                ui.printMatchedTask(filter);"},{"lineNumber":184,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":185,"author":{"gitId":"vuminhhieunus2019"},"content":"                try {"},{"lineNumber":186,"author":{"gitId":"vuminhhieunus2019"},"content":"                    String status \u003d taskList.addTask(command);"},{"lineNumber":187,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(status);"},{"lineNumber":188,"author":{"gitId":"vuminhhieunus2019"},"content":"                } catch (NoSuchCommandException | EmptyTaskException | InvalidTask e) {"},{"lineNumber":189,"author":{"gitId":"vuminhhieunus2019"},"content":"                    ui.printResponse(e.getMessage());"},{"lineNumber":190,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":191,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":192,"author":{"gitId":"vuminhhieunus2019"},"content":"            //update the file"},{"lineNumber":193,"author":{"gitId":"vuminhhieunus2019"},"content":"            storage.writeDataToFile(taskList.getList());"},{"lineNumber":194,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":193,"-":3}},{"path":"src/main/java/Duke/Exception/EmptyFindContent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception for Find command without the content."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class EmptyFindContent extends Exception {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering a find command with no content."},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"Find command must follow by a keyword!\";"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":15}},{"path":"src/main/java/Duke/Exception/EmptyTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception for Event, Deadline and Todo task with no description."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class EmptyTaskException extends Exception {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String type;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The constructor for this Exception has 1 parameter: the type of the command (event, deadline or todo)."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param type Type of the command (event, deadline or todo)"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    public EmptyTaskException(String type) {"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d type;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering a task with no description."},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"☹ OOPS!!! The description of a \" + type + \" cannot be empty.\";"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":25}},{"path":"src/main/java/Duke/Exception/InvalidIndex.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception for handling invalid index (negative or out of bound) for done and delete command."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class InvalidIndex extends IndexOutOfBoundsException {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String type;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final int listSize;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * This exception constructor has 2 parameters: the type of the command (done or delete) and the number of tasks in the list."},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param type The type of the command (done or delete)."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param listSize The number of tasks in the list."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    public InvalidIndex(String type, int listSize) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d type;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.listSize \u003d listSize;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering an invalid index."},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        return type + \" command should be followed by a number between 1 and \" + listSize + \".\";"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":28}},{"path":"src/main/java/Duke/Exception/InvalidTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception that handle a command for Deadline command without the word \"/by\" and Event command without the word \"/at\"."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class InvalidTask extends Exception {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String type;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The constructor for this Exception has 1 parameter: the type of the command (event or deadline)."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param type Type of the command (event or deadline)."},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    public InvalidTask(String type) {"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d type;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering a deadline or event without the signature word."},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"Invalid command for \" + type + \"! Try again\";"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":25}},{"path":"src/main/java/Duke/Exception/NoSuchCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Exception;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An exception that handle commands that are not available in the command list."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class NoSuchCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the message that user sees when entering a command that is not in the command list."},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A message to the user."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getMessage() {"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":16}},{"path":"src/main/java/Duke/Helper/DateTimeProcessor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":" * A helper class that converted a time string to a more meaningful version."},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"public class DateTimeProcessor {"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String fullTimeString;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The constructor of DateTimeProcessor class has 1 parameter:"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The string containing the date (and time) data that needs to be converted."},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param fullTimeString A string containing the date (and time) data."},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    public DateTimeProcessor(String fullTimeString) {"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.fullTimeString \u003d fullTimeString;"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    private String processTime(String time) {"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (time.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"                return \"\";"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (time.length() !\u003d 3 \u0026\u0026 time.length() !\u003d 4) {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"            int timeInt \u003d Integer.parseInt(time);"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (timeInt \u003c 0) {"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"            int hour \u003d timeInt / 100;"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"            int minute \u003d timeInt % 100;"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (hour \u003d\u003d 24) {"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (minute \u003d\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"                    return \"12:00am\";"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"                } else {"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"                    return null;"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (hour \u003e 24 || minute \u003e 59) {"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"                String type;"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (hour \u003e\u003d 12) {"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"                    type \u003d \"pm\";"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"                } else {"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"                    type \u003d \"am\";"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"                hour \u003d hour % 12;"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (hour \u003d\u003d 0) {"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"                    hour \u003d 12;"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"                String padding \u003d (minute \u003c 10) ? \"0\" : \"\";"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"                return hour + \":\" + padding + minute + type;"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"            return null;"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"    private String processDate(String date) {"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"            LocalDate localDate \u003d LocalDate.parse(date);"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"            return localDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (Exception e) {"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"            return null;"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"    private String[] processInput() {"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"            String date \u003d \"\";"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"            String time \u003d \"\";"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"            String[] info \u003d fullTimeString.trim().split(\" \");"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (String s : info) {"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (date.isEmpty()) {"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"                    date \u003d s;"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"                } else {"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"                    time \u003d s;"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"                    break;"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"            return new String[]{date, time};"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (Exception e) {"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"            return null;"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":89,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Get a meaningful version of date and time string of the input, for example: Jan 5 2021 or May 15 2020 2:30pm."},{"lineNumber":91,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A meaningful version of date and time string of the input."},{"lineNumber":92,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getFullDateTime() {"},{"lineNumber":94,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] array \u003d processInput();"},{"lineNumber":95,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (array \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitId":"vuminhhieunus2019"},"content":"            return \"Invalid format for date and time.\";"},{"lineNumber":97,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"vuminhhieunus2019"},"content":"        String date \u003d processDate(array[0]);"},{"lineNumber":99,"author":{"gitId":"vuminhhieunus2019"},"content":"        String time \u003d processTime(array[1]);"},{"lineNumber":100,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (date \u003d\u003d null || time \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitId":"vuminhhieunus2019"},"content":"            return \"Invalid format for date and time.\";"},{"lineNumber":102,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"vuminhhieunus2019"},"content":"        return (time.isEmpty()) ? date : date + \" \" + time;"},{"lineNumber":104,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":105}},{"path":"src/main/java/Duke/Helper/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyTaskException;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidTask;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Deadline;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Event;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Todo;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class deals with making sense of the user command."},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Parses the input string into a ToDo command so that it can be added to the task list."},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command A string that needed to be parsed to a Todo instance"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A Todo command corresponding to the input"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws EmptyTaskException A Todo command with no description."},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Todo parseTodo(String command) throws EmptyTaskException {"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"        String description \u003d command.substring(5);"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (description.isEmpty()) {"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new EmptyTaskException(\"todo\");"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"        return new Todo(description);"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Parses the input string into a Deadline command so that it can be added to the task list."},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command A string that needed to be parsed to a Deadline instance"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A Deadline command corresponding to the input or null if the date and time format in the string is wrong."},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws InvalidTask The input string does not contain the word \"/by\", which at a signature in a deadline command."},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws EmptyTaskException A Deadline command with no description."},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Deadline parseDeadline(String command) throws InvalidTask, EmptyTaskException {"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        String content \u003d command.substring(9);"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (content.isEmpty()) {"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new EmptyTaskException(\"deadline\");"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"        int byIndex \u003d content.indexOf(\"/by\");"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (byIndex \u003d\u003d -1) {"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new InvalidTask(\"deadline\");"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"            String description \u003d content.substring(0, byIndex - 1);"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"            String by \u003d content.substring(byIndex + 4);"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"            DateTimeProcessor processor \u003d new DateTimeProcessor(by);"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"            String time \u003d processor.getFullDateTime();"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (time.equals(\"Invalid format for date and time.\")) {"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"                return new Deadline(description, time);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Parses the input string into an Event command so that it can be added to the task list."},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command A string that needed to be parsed to an Event instance"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return An Event command corresponding to the input or null if the date and time format in the string is wrong."},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws InvalidTask The input string does not contain the word \"/at\", which at a signature in an event command."},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws EmptyTaskException An Event command with no description."},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Event parseEvent(String command) throws EmptyTaskException, InvalidTask {"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"        String content \u003d command.substring(6);"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (content.isEmpty()) {"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new EmptyTaskException(\"event\");"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"        int atIndex \u003d content.indexOf(\"/at\");"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (atIndex \u003d\u003d -1) {"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new InvalidTask(\"event\");"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"            String description \u003d content.substring(0, atIndex - 1);"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"            String at \u003d content.substring(atIndex + 4);"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"            DateTimeProcessor processor \u003d new DateTimeProcessor(at);"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"            String time \u003d processor.getFullDateTime();"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (time.equals(\"Invalid format for date and time.\")) {"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"                return null;"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"                return new Event(description, time);"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":82}},{"path":"src/main/java/Duke/Helper/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Deadline;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Event;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Task;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Todo;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class handles tasks on saving tasks to file and loading tasks from file."},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final String path;"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * This class constructor has 1 parameter: a string path to the destination file for reading and writing the data."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param path The destination file for reading and writing the data."},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Storage(String path) {"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.path \u003d path;"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Loads the data from the file when the application starts running."},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A list containing all the tasks stored in the file."},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ArrayList\u003cTask\u003e readDataFromFile() {"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"            File f \u003d new File(path);"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"                String currLine \u003d sc.nextLine();"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"                //System.out.println(currLine);"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"                String[] information \u003d currLine.split(\"\\\\|\");"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (information[0].charAt(0) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"                    Task newTask \u003d new Todo(information[2]);"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"                    if (information[1].trim().equals(\"1\")) {"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"                        newTask.markAsDone();"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"                    }"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"                    tasks.add(newTask);"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"                } else if (information[0].charAt(0) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"                    Task newTask \u003d new Deadline(information[2], information[3]);"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"                    if (information[1].trim().equals(\"1\")) {"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"                        newTask.markAsDone();"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"                    }"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"                    tasks.add(newTask);"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"                } else if (information[0].charAt(0) \u003d\u003d \u0027E\u0027) {"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"                    Task newTask \u003d new Event(information[2], information[3]);"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"                    if (information[1].trim().equals(\"1\")) {"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"                        newTask.markAsDone();"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"                    }"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"                    tasks.add(newTask);"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"                    break;"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"            return tasks;"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(\"File not found \" + e.getMessage());"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Saves the data to the file after every update (adding or deleting a task)"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param list A list containing all the tasks that needs to be saved."},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void writeDataToFile(ArrayList\u003cTask\u003e list) {"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"            File f \u003d new File(path);"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"            FileWriter fw \u003d new FileWriter(f);"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (Task task : list) {"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"                String content \u003d task.getType().trim() + \" | \" + task.getStatusNumber() + \" | \""},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"                        + task.getDescription().trim() + task.getTime().trim();"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"                fw.write(content + \u0027\\n\u0027);"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"            fw.close();"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(\"Unable to write to file \" + e.getMessage());"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":88}},{"path":"src/main/java/Duke/Helper/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Command.Command;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Constant.Constants;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyTaskException;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidIndex;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidTask;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.NoSuchCommandException;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Deadline;"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Event;"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Task;"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Todo;"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":" * A wrapper class that contains all available tasks."},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"public class TaskList {"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final ArrayList\u003cTask\u003e list;"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    private final Parser parser;"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     * This class constructor has 1 parameter: a list containing all available tasks."},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param list A list of all available tasks."},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.list \u003d list;"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Returns a list containing all available tasks."},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A list containing all available tasks."},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"        return list;"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Marks a task in the list, which is specified by an index (1-based), as done."},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param index A number between 1 and the number of tasks in the list."},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The status of this command whether it succeeds or fails."},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String finishTask(int index) {"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"            Task task \u003d list.get(index - 1);"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"            task.markAsDone();"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"            return Constants.MARK_DONE_TASK + task.toString();"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new InvalidIndex(\"Done\", list.size());"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Deletes a task from the list, which is specified by an index (1-based)."},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param index A number between 1 and the number of tasks in the list."},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The status of the deletion whether it succeeds or fails and update the number of tasks in the list"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"     *          after a successful deletion."},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String deleteTask(int index) {"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"            Task task \u003d list.remove(index - 1);"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"            return Constants.DELETE_TASK_SUCCESS"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"                    + task.toString() + \"\\n\""},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"                    + \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new InvalidIndex(\"Delete\", list.size());"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Adds a new task to the list and the command must be a Deadline, Event or Todo."},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param command A string that contain the information about the task that needs to be added."},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The status of this command it succeeds or fails and update the number of tasks in the list."},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws NoSuchCommandException The command is not of type Deadline, Event or Todo."},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws EmptyTaskException A task with no description."},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @throws InvalidTask A Deadline or Event command without its signature word (\"/by\" and \"/at\" respectively)."},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String addTask(String command) throws NoSuchCommandException, EmptyTaskException, InvalidTask {"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (command.equalsIgnoreCase(Command.TODO.getAction())"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"                || command.equalsIgnoreCase(Command.DEADLINE.getAction())"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"                || command.equalsIgnoreCase(Command.EVENT.getAction())) {"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new EmptyTaskException(command);"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.TODO.getAction() + \" \")) {"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"            Todo task \u003d parser.parseTodo(command);"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"            list.add(task);"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"            return Constants.ADD_TASK_SUCCESS"},{"lineNumber":89,"author":{"gitId":"vuminhhieunus2019"},"content":"                    + \"  \" + task + \"\\n\""},{"lineNumber":90,"author":{"gitId":"vuminhhieunus2019"},"content":"                    + \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":91,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.DEADLINE.getAction() + \" \")) {"},{"lineNumber":92,"author":{"gitId":"vuminhhieunus2019"},"content":"            Deadline task \u003d parser.parseDeadline(command);"},{"lineNumber":93,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (task \u003d\u003d null) {"},{"lineNumber":94,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.INVALID_DATETIME_FORMAT;"},{"lineNumber":95,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":96,"author":{"gitId":"vuminhhieunus2019"},"content":"                list.add(task);"},{"lineNumber":97,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.ADD_TASK_SUCCESS"},{"lineNumber":98,"author":{"gitId":"vuminhhieunus2019"},"content":"                        + \"  \" + task + \"\\n\""},{"lineNumber":99,"author":{"gitId":"vuminhhieunus2019"},"content":"                        + \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":100,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else if (command.toLowerCase().startsWith(Command.EVENT.getAction() + \" \")) {"},{"lineNumber":102,"author":{"gitId":"vuminhhieunus2019"},"content":"            Event task \u003d parser.parseEvent(command);"},{"lineNumber":103,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (task \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.INVALID_DATETIME_FORMAT;"},{"lineNumber":105,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":106,"author":{"gitId":"vuminhhieunus2019"},"content":"                list.add(task);"},{"lineNumber":107,"author":{"gitId":"vuminhhieunus2019"},"content":"                return Constants.ADD_TASK_SUCCESS"},{"lineNumber":108,"author":{"gitId":"vuminhhieunus2019"},"content":"                        + \"  \" + task + \"\\n\""},{"lineNumber":109,"author":{"gitId":"vuminhhieunus2019"},"content":"                        + \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":110,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"vuminhhieunus2019"},"content":"            throw new NoSuchCommandException();"},{"lineNumber":113,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":116,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Finds all the tasks that contains the keyword."},{"lineNumber":118,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param keywords A list of words that need to find."},{"lineNumber":119,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A list of tasks containing the keyword."},{"lineNumber":120,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"vuminhhieunus2019"},"content":"    public ArrayList\u003cTask\u003e findTask(String... keywords) {"},{"lineNumber":122,"author":{"gitId":"vuminhhieunus2019"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":123,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (String keyword : keywords) {"},{"lineNumber":124,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (Task task : list) {"},{"lineNumber":125,"author":{"gitId":"vuminhhieunus2019"},"content":"                String description \u003d task.getDescription();"},{"lineNumber":126,"author":{"gitId":"vuminhhieunus2019"},"content":"                String time \u003d task.getTime();"},{"lineNumber":127,"author":{"gitId":"vuminhhieunus2019"},"content":"                if (description.contains(keyword) || time.contains(keyword)) {"},{"lineNumber":128,"author":{"gitId":"vuminhhieunus2019"},"content":"                    result.add(task);"},{"lineNumber":129,"author":{"gitId":"vuminhhieunus2019"},"content":"                }"},{"lineNumber":130,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"vuminhhieunus2019"},"content":"        return result;"},{"lineNumber":133,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":135,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Statistics about the items: number of tasks for each type and number of done and not done task within that type."},{"lineNumber":137,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return a 3x2 matrix represent the statistics."},{"lineNumber":138,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"vuminhhieunus2019"},"content":"    public int[][] statistics() {"},{"lineNumber":140,"author":{"gitId":"vuminhhieunus2019"},"content":"        int[][] result \u003d new int[3][2]; //td: first row, deadline: second row, event: third row; done: second col, not done: first col"},{"lineNumber":141,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (Task task : list) {"},{"lineNumber":142,"author":{"gitId":"vuminhhieunus2019"},"content":"            int row \u003d -1;"},{"lineNumber":143,"author":{"gitId":"vuminhhieunus2019"},"content":"            int col \u003d task.getStatusNumber();"},{"lineNumber":144,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (task.getType().equals(\"T\")) {"},{"lineNumber":145,"author":{"gitId":"vuminhhieunus2019"},"content":"                row \u003d 0;"},{"lineNumber":146,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (task.getType().equals(\"D\")) {"},{"lineNumber":147,"author":{"gitId":"vuminhhieunus2019"},"content":"                row \u003d 1;"},{"lineNumber":148,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else if (task.getType().equals(\"E\")) {"},{"lineNumber":149,"author":{"gitId":"vuminhhieunus2019"},"content":"                row \u003d 2;"},{"lineNumber":150,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"vuminhhieunus2019"},"content":"            result[row][col] +\u003d 1;"},{"lineNumber":152,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"vuminhhieunus2019"},"content":"        return result;"},{"lineNumber":154,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":155}},{"path":"src/main/java/Duke/Helper/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Constant.Constants;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Task;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class handles interactions with the user."},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static final String LINES \u003d \"____________________________________________________________\";"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Formats the response that will be printed out to the users."},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param response A string that needed to be formatted before printing out."},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void printResponse(String response) {"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(response);"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println();"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Lists all available tasks in the database."},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param list A list containing all the current tasks"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void printAllTask(ArrayList\u003cTask\u003e list) {"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (list.isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(Constants.EMPTY_TASK_LIST);"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(Constants.START_LISTING);"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"                Task task \u003d list.get(i);"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"                System.out.println((i + 1) + \". \" + task);"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println();"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Prints all the matched tasks for find command."},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param list List of tasks that match the keyword."},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void printMatchedTask(ArrayList\u003cTask\u003e list) {"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (list.isEmpty()) {"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(Constants.FIND_FAIL);"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"            System.out.println(Constants.FIND_SUCCESS);"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"                Task task \u003d list.get(i);"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"                System.out.println((i + 1) + \". \" + task);"},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println(LINES);"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"        System.out.println();"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Returns the string containing the statistics about the tasks in the list."},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param stat The statistics about the tasks in the list."},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A string version that is printed out for the user."},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String stats(int[][] stat) {"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitId":"vuminhhieunus2019"},"content":"        int todo \u003d stat[0][0] + stat[0][1];"},{"lineNumber":71,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (todo \u003e 0) {"},{"lineNumber":72,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (todo \u003d\u003d 1) {"},{"lineNumber":73,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"There is 1 todo task in the list\").append(\u0027\\n\u0027);"},{"lineNumber":74,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"There are \").append(todo).append(\" todo tasks in the list\").append(\u0027\\n\u0027);"},{"lineNumber":76,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (stat[0][0] \u003e 0) {"},{"lineNumber":78,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"    \").append(stat[0][0]).append(\" not done todo task\")"},{"lineNumber":79,"author":{"gitId":"vuminhhieunus2019"},"content":"                        .append(stat[0][0] \u003d\u003d 1 ? \"\" : \"s\").append(\u0027\\n\u0027);"},{"lineNumber":80,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (stat[0][1] \u003e 0) {"},{"lineNumber":82,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"    \").append(stat[0][1]).append(\" done todo task\")"},{"lineNumber":83,"author":{"gitId":"vuminhhieunus2019"},"content":"                        .append(stat[0][1] \u003d\u003d 1 ? \"\" : \"s\").append(\u0027\\n\u0027);"},{"lineNumber":84,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"vuminhhieunus2019"},"content":"        int deadline \u003d stat[1][0] + stat[1][1];"},{"lineNumber":87,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (deadline \u003e 0) {"},{"lineNumber":88,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (deadline \u003d\u003d 1) {"},{"lineNumber":89,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"There is 1 deadline in the list\").append(\u0027\\n\u0027);"},{"lineNumber":90,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":91,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"There are \").append(todo).append(\" deadlines in the list\").append(\u0027\\n\u0027);"},{"lineNumber":92,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (stat[1][0] \u003e 0) {"},{"lineNumber":94,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"    \").append(stat[1][0]).append(\" not done deadline\")"},{"lineNumber":95,"author":{"gitId":"vuminhhieunus2019"},"content":"                        .append(stat[1][0] \u003d\u003d 1 ? \"\" : \"s\").append(\u0027\\n\u0027);"},{"lineNumber":96,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (stat[1][1] \u003e 0) {"},{"lineNumber":98,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"    \").append(stat[1][1]).append(\" done deadline\")"},{"lineNumber":99,"author":{"gitId":"vuminhhieunus2019"},"content":"                        .append(stat[1][1] \u003d\u003d 1 ? \"\" : \"s\").append(\u0027\\n\u0027);"},{"lineNumber":100,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"vuminhhieunus2019"},"content":"        int event \u003d stat[2][0] + stat[2][1];"},{"lineNumber":103,"author":{"gitId":"vuminhhieunus2019"},"content":"        if (event \u003e 0) {"},{"lineNumber":104,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (event \u003d\u003d 1) {"},{"lineNumber":105,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"There is 1 event in the list\").append(\u0027\\n\u0027);"},{"lineNumber":106,"author":{"gitId":"vuminhhieunus2019"},"content":"            } else {"},{"lineNumber":107,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"There are \").append(todo).append(\" events in the list\").append(\u0027\\n\u0027);"},{"lineNumber":108,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (stat[2][0] \u003e 0) {"},{"lineNumber":110,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"    \").append(stat[2][0]).append(\" not done event\")"},{"lineNumber":111,"author":{"gitId":"vuminhhieunus2019"},"content":"                        .append(stat[2][0] \u003d\u003d 1 ? \"\" : \"s\").append(\u0027\\n\u0027);"},{"lineNumber":112,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"vuminhhieunus2019"},"content":"            if (stat[2][1] \u003e 0) {"},{"lineNumber":114,"author":{"gitId":"vuminhhieunus2019"},"content":"                output.append(\"    \").append(stat[2][1]).append(\" done event\")"},{"lineNumber":115,"author":{"gitId":"vuminhhieunus2019"},"content":"                        .append(stat[2][1] \u003d\u003d 1 ? \"\" : \"s\");"},{"lineNumber":116,"author":{"gitId":"vuminhhieunus2019"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"vuminhhieunus2019"},"content":"        return output.toString();"},{"lineNumber":119,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":120}},{"path":"src/main/java/Duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":12}},{"path":"src/main/java/Duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Constant.Constants;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":" * Main class for this application using GUI."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Duke duke \u003d new Duke(Constants.FILE_PATH);"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":33}},{"path":"src/main/java/Duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"    private void handleUserInput() {"},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"        );"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"        userInput.clear();"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":52}},{"path":"src/main/java/Duke/Task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * A deadline is a task that need to be done before a specific date/time."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected String by;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Deadline class constructor has 2 parameters:"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * the description about a specific deadline and the time that the deadline needs to be done."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param description The description about the deadline."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param by The time that the deadline needs to be done."},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.by \u003d by;"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d \"D\";"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the time that the deadline needs to be done."},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The time that the deadline needs to be done."},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getTime() {"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \" | \" + by;"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the string representation for this Deadline object."},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The string representation for this object."},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.trim() + \")\";"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":39}},{"path":"src/main/java/Duke/Task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * An event is a task that start at a specific time and ends at a specific time"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected String at;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Deadline class constructor has 2 parameters:"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"     * the description about a specific deadline and the time that the event occurs."},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param description The description about the event."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param at The time that the event occurs."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Event(String description, String at) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.at \u003d at;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d \"E\";"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the time that the event occurs."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The time that the event occurs."},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getTime() {"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \" | \" + at;"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the string representation for this Event object."},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The string representation for this object."},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at.trim() + \")\";"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":38}},{"path":"src/main/java/Duke/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * A class that contains all the information about 1 specific task."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected String type;"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Task class constructor has 1 parameter: the description about a specific task."},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param description The description about the task."},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the status of the task, whether it has been done or not."},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return A tick symbol if done, X symbol otherwise."},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the description of the task."},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The description of the task."},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getDescription() {"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"        return description;"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the status of the task, whether it has been done or not. This method is used for writing tasks into file."},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return 1 if done, 0 otherwise."},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"    public int getStatusNumber() {"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"        return (isDone) ? 1 : 0;"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the type of the task, whether it is a Deadline, Event or Todo."},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The type of the task."},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getType() {"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"        return type;"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the time associated with the task."},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The time associated with the task."},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String getTime() {"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"\";"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Changes the status of a task from not done to done."},{"lineNumber":57,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void markAsDone() {"},{"lineNumber":59,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.isDone \u003d true;"},{"lineNumber":60,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the string representation for this Task object."},{"lineNumber":63,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The string representation for this object."},{"lineNumber":64,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":68,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":69}},{"path":"src/main/java/Duke/Task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Task;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":" * A Todo is a task without any date/time attached to it."},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":" */"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"     * The Todo class constructor has 1 parameter: the description about a specific task."},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @param description The description about the task."},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    public Todo(String description) {"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"        this.type \u003d \"T\";"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"     * Gets the string representation for this Todo object."},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"     * @return The string representation for this object."},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":24}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.image.*?\u003e"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background: #fffff0;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-background-radius: 50px;\" /\u003e"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"vuminhhieunus2019":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c?import javafx.scene.text.*?\u003e"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background: #d4f3ef;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"Duke.MainWindow\"\u003e"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003cchildren\u003e"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textAlignment\u003d\"CENTER\" textOverrun\u003d\"CLIP\"\u003e"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"         \u003cfont\u003e"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003cFont size\u003d\"15.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003ccontent\u003e"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"355.0\" style\u003d\"-fx-background: #fffff0;\" /\u003e"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"            \u003c/content\u003e"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"vuminhhieunus2019":20}},{"path":"src/test/java/Duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void dummyTest(){"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":12}},{"path":"src/test/java/Duke/Helper/DateTimeProcessorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"public class DateTimeProcessorTest {"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void DateTimeTestOutput(){"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input \u003d new String[]{\"2020-02-15 1800\", \"2021-01-05\", \"2000-01-01 2400\","},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        \"2019-12-19\", \"2015-09-11 2359\", \"2021-02-01 000\", \"1975-04-30 830\"};"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] expectedOutput \u003d new String[]{\"Feb 15 2020 6:00pm\", \"Jan 5 2021\", \"Jan 1 2000 12:00am\","},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"                                                \"Dec 19 2019\", \"Sep 11 2015 11:59pm\", \"Feb 1 2021 12:00am\", \"Apr 30 1975 8:30am\"};"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"            DateTimeProcessor processor \u003d new DateTimeProcessor(input[i]);"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"            String output \u003d processor.getFullDateTime();"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output, expectedOutput[i]);"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void DateTimeTestError(){"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input \u003d new String[]{\"\", \"20-01-2020\", \"2020-15-14\", \"2020-01-38\", \"2019-01-08 2517\", \"2014\", \"2021-01-01 1262\","},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        \"1995-04-08 -3615\", \"2004-05-09 abc\", \"abc xyz\", \"2020-04-081500\"};"},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (String time : input) {"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"            DateTimeProcessor processor \u003d new DateTimeProcessor(time);"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"            String output \u003d processor.getFullDateTime();"},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output, \"Invalid format for date and time.\");"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":32}},{"path":"src/test/java/Duke/Helper/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"package Duke.Helper;"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.EmptyTaskException;"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Exception.InvalidTask;"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Deadline;"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Event;"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"import Duke.Task.Todo;"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"public class ParserTest {"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void testParserTodo() throws EmptyTaskException {"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input \u003d new String[]{\"todo brush the teeth\", \"todo read book\", \"todo return book\"};"},{"lineNumber":16,"author":{"gitId":"vuminhhieunus2019"},"content":"        Todo[] expectedOutput \u003d new Todo[]{new Todo(\"brush the teeth\"), new Todo(\"read book\"),"},{"lineNumber":17,"author":{"gitId":"vuminhhieunus2019"},"content":"                                            new Todo(\"return book\")};"},{"lineNumber":18,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":19,"author":{"gitId":"vuminhhieunus2019"},"content":"            Parser parser \u003d new Parser();"},{"lineNumber":20,"author":{"gitId":"vuminhhieunus2019"},"content":"            Todo output \u003d parser.parseTodo(input[i]);"},{"lineNumber":21,"author":{"gitId":"vuminhhieunus2019"},"content":"            Todo expected \u003d expectedOutput[i];"},{"lineNumber":22,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output.toString(), expected.toString());"},{"lineNumber":23,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":26,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void testParserDeadline() throws EmptyTaskException, InvalidTask {"},{"lineNumber":28,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input  \u003d new String[]{\"deadline ip week 3 /by 2021-01-28 2359\", \"deadline assignment 1 /by 2021-02-01\","},{"lineNumber":29,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        \"deadline math homework /by 2021-03-05\"};"},{"lineNumber":30,"author":{"gitId":"vuminhhieunus2019"},"content":"        Deadline[] expectedOutput \u003d new Deadline[]{new Deadline(\"ip week 3\", \"Jan 28 2021 11:59pm\"),"},{"lineNumber":31,"author":{"gitId":"vuminhhieunus2019"},"content":"                                                    new Deadline(\"assignment 1\", \"Feb 1 2021\"),"},{"lineNumber":32,"author":{"gitId":"vuminhhieunus2019"},"content":"                                                    new Deadline(\"math homework\", \"Mar 5 2021\")};"},{"lineNumber":33,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":34,"author":{"gitId":"vuminhhieunus2019"},"content":"            Parser parser \u003d new Parser();"},{"lineNumber":35,"author":{"gitId":"vuminhhieunus2019"},"content":"            Deadline output \u003d parser.parseDeadline(input[i]);"},{"lineNumber":36,"author":{"gitId":"vuminhhieunus2019"},"content":"            Deadline expected \u003d expectedOutput[i];"},{"lineNumber":37,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output.toString(), expected.toString());"},{"lineNumber":38,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"vuminhhieunus2019"},"content":""},{"lineNumber":41,"author":{"gitId":"vuminhhieunus2019"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"vuminhhieunus2019"},"content":"    public void testParserEvent() throws EmptyTaskException, InvalidTask {"},{"lineNumber":43,"author":{"gitId":"vuminhhieunus2019"},"content":"        String[] input  \u003d new String[]{\"event project meeting /at 2021-01-28 2359\", \"event VNC night /at 2021-02-01\","},{"lineNumber":44,"author":{"gitId":"vuminhhieunus2019"},"content":"                                        \"event night cycling /at 2021-03-05\"};"},{"lineNumber":45,"author":{"gitId":"vuminhhieunus2019"},"content":"        Event[] expectedOutput \u003d new Event[]{new Event(\"project meeting\", \"Jan 28 2021 11:59pm\"),"},{"lineNumber":46,"author":{"gitId":"vuminhhieunus2019"},"content":"                new Event(\"VNC night\", \"Feb 1 2021\"),"},{"lineNumber":47,"author":{"gitId":"vuminhhieunus2019"},"content":"                new Event(\"night cycling\", \"Mar 5 2021\")};"},{"lineNumber":48,"author":{"gitId":"vuminhhieunus2019"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":49,"author":{"gitId":"vuminhhieunus2019"},"content":"            Parser parser \u003d new Parser();"},{"lineNumber":50,"author":{"gitId":"vuminhhieunus2019"},"content":"            Event output \u003d parser.parseEvent(input[i]);"},{"lineNumber":51,"author":{"gitId":"vuminhhieunus2019"},"content":"            Event expected \u003d expectedOutput[i];"},{"lineNumber":52,"author":{"gitId":"vuminhhieunus2019"},"content":"            assertEquals(output.toString(), expected.toString());"},{"lineNumber":53,"author":{"gitId":"vuminhhieunus2019"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"vuminhhieunus2019"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"vuminhhieunus2019"},"content":"}"}],"authorContributionMap":{"vuminhhieunus2019":55}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"vuminhhieunus2019"},"content":"todo sweep the floor"},{"lineNumber":2,"author":{"gitId":"vuminhhieunus2019"},"content":"deadline having lunch /by Sunday 2pm"},{"lineNumber":3,"author":{"gitId":"vuminhhieunus2019"},"content":"event team project meeting /at Monday 2-4pm"},{"lineNumber":4,"author":{"gitId":"vuminhhieunus2019"},"content":"todo sleep early"},{"lineNumber":5,"author":{"gitId":"vuminhhieunus2019"},"content":"list"},{"lineNumber":6,"author":{"gitId":"vuminhhieunus2019"},"content":"done"},{"lineNumber":7,"author":{"gitId":"vuminhhieunus2019"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"vuminhhieunus2019"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"vuminhhieunus2019"},"content":"invalid command"},{"lineNumber":10,"author":{"gitId":"vuminhhieunus2019"},"content":"list"},{"lineNumber":11,"author":{"gitId":"vuminhhieunus2019"},"content":"deadline study for the test /by 27 April 2021"},{"lineNumber":12,"author":{"gitId":"vuminhhieunus2019"},"content":"delete 10"},{"lineNumber":13,"author":{"gitId":"vuminhhieunus2019"},"content":"deadline cook a meal"},{"lineNumber":14,"author":{"gitId":"vuminhhieunus2019"},"content":"delete 3"},{"lineNumber":15,"author":{"gitId":"vuminhhieunus2019"},"content":"bye"}],"authorContributionMap":{"vuminhhieunus2019":15}}]
