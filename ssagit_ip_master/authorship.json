[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"# Task List Helper"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"![UI preview](https://github.com/ssagit/ip/blob/master/src/main/resources/images/magic.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"A helper for managing tasks. This is a project built from SEEDU\u0027s Duke project template."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"## Prerequisite: JDK 11"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"Just download the JAR file and run it anywhere on your computer! \u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"Note: Creates a textFile for storing tasks at ./data/taskList.txt (. is where the JAR file is)"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"### Main Features"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"1) Add task: divided into 3 types of tasks"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"   1. Todo Task"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"   2. Event Task"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"   3. Deadline Task"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"2) Delete task"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"3) List All Tasks"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"4) Mark tasks as completed or not"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"5) Find a task based on its name (will look for partial matches)"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"### Additional Features"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"1) Prevent adding a duplicated task"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"## User Guide"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"Check out the user guide at https://ssagit.github.io/ip/"}],"authorContributionMap":{"-":4,"ssagit":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"repositories {"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    mavenCentral()"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"dependencies {"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"    archiveBaseName \u003d \"launcher\""},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"javafx {"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"    version \u003d \"11\""},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"checkstyle {"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"run{"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"    standardInput \u003d System.in"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":68}},{"path":"data/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"deadline | done | return book  | 3/06/2021 1550"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"deadline | not done | return book  | 15/06/2021 1550"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"todo | not done | 1"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"todo | not done | 2"}],"authorContributionMap":{"ssagit":4}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":":init"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":":end"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":":omega"}],"authorContributionMap":{"ssagit":103}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"import java.io.IOException;"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"import java.util.Collections;"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a Label"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":" * containing text from the speaker. The variables of this Object is specified in the .fxml file in the resource folder."},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"public class DialogBox extends HBox {"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    private Label dialog;"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    private ImageView displayPicture;"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"     * Constructor"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"     * @param text Text to display on screen."},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"     * @param img Image to display on screen, user currently manually sets the image in MainWindow.java."},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"            fxmlLoader.load();"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        } catch (IOException e) {"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"        BackgroundFill bgf \u003d new BackgroundFill("},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"                Color.CORNSILK,"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"                new CornerRadii(10),"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"                null"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"        );"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"        final Circle clip \u003d new Circle(50, 50, 50);"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"        dialog.setText(text);"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"        dialog.setBackground(new Background(bgf));"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"        displayPicture.setImage(img);"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"    private void flip() {"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"        Collections.reverse(tmp);"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"     * Show user side input (right side of window)."},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"     * @param text Text to display on screen."},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"     * @param img User image to display on screen, user currently manually sets the image in MainWindow.java."},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"     * @return"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"        return new DialogBox(text, img);"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"     * Show duke side output (left side of window)."},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"     * @param text Text to display on screen."},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"     * @param img Duke image to display on screen, user currently manually sets the image in MainWindow.java."},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"     * @return"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"        db.flip();"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"        return db;"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":90}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import duke.datevalidator.DateValidator;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import duke.datevalidator.DateValidatorLocalDate;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.parser.Tuple2;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import duke.ui.ConsoleUI;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"import java.util.Locale;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":" * Chatbot Duke created from the Duke Project Template, a greenfield Java Project."},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/you.jpg\"));"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.jpg\"));"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    private int taskIterator;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    private DateTimeFormatter dateFormatter;"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    private DateValidator validator;"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    private ConsoleUI ui;"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    private Parser parser;"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    private Task[] tasks;"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    private Storage storage;"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"     * Default constructor to be passed to Main, which will output based on the methods called by Duke."},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    public Duke() {"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"        dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\", Locale.ENGLISH);"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"        validator \u003d new DateValidatorLocalDate(dateFormatter);"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"        ui \u003d new ConsoleUI(System.in);"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"        parser \u003d new Parser(ui, validator);"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"        tasks \u003d new Task[100];"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"        storage \u003d new Storage(\"./data/taskList.txt\");"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        taskIterator \u003d storage.readTaskListToArray(tasks, validator);"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"     * Outputs the correct results given user input."},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"     * @param input User input."},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"     * @return Output in string after processing by Duke."},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"    public String getResponse(String input) {"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"        if (input.equals(\"intro\")) {"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"            return ui.introduction();"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"            Tuple2 results \u003d parser.parseInput(input, tasks, taskIterator);"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"            taskIterator \u003d (int) results.getInteger();"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"            storage.writeTasks(tasks);"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"            return (String) results.getString();"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"-":2,"ssagit":58}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"     * Initialize objects used by the controller MainWindow."},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"     * @param stage JavaFX Stage Object."},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    public void start(Stage stage) {"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"            stage.setTitle(\"Task List Helper\");"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"            scene.setFill(Color.SANDYBROWN);"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"            stage.setScene(scene);"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"            stage.show();"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":38}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":" * The variables of this Object is specified in the .fxml file in the resource folder."},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    private VBox dialogContainer;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    private TextField userInput;"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    private String byeChecker \u003d \"-----------------------------------\\n\""},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"            + \"Bye. No more inputs will be accepted, please close the program!\\n\""},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"            + \"Hope to see you again soon :)\""},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"            + \"\\n-----------------------------------\\n\";"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"    private Duke duke;"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/you.jpg\"));"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.jpg\"));"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"     * Initialize MainWindow."},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"    public void initialize() {"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"        BackgroundFill bgfBisque \u003d new BackgroundFill("},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"                Color.BISQUE,"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"                new CornerRadii(10),"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"                null"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"        );"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"        userInput.setBackground(new Background(bgfBisque));"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"     * Passes the Duke class so its methods can be used by MainWindow."},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"     * @param d The initialized Duke object."},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"        duke \u003d d;"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"        String response \u003d duke.getResponse(\"intro\");"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"        );"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"     * If user inputs \"bye\", no more inputs will be accepted."},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"    private void handleUserInput() {"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"        if (response.equals(byeChecker)) {"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"            userInput.setEditable(false);"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"            userInput.setVisible(false);"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"            userInput.setDisable(true);"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"            sendButton.setVisible(false);"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"            sendButton.setDisable(true);"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"        );"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"        userInput.clear();"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":88}},{"path":"src/main/java/duke/changelog.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"restore branch-Level-9 (from Level-9)"}],"authorContributionMap":{"ssagit":1}},{"path":"src/main/java/duke/data/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"event | done | project meeting  | 2/12/2019 1800"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"event | not done | project meeting  | 2/12/2019 1700"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"todo | not done | 1"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"todo | not done | 4"}],"authorContributionMap":{"ssagit":4}},{"path":"src/main/java/duke/data/taskListBackup.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"todo | not done | a"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"todo | not done | b"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"todo | not done | c"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"deadline | not done | return book  | 2/12/2019 1800"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"deadline | not done | return book  | 2/12/2019 1800"}],"authorContributionMap":{"ssagit":5}},{"path":"src/main/java/duke/data/testCmd.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"event project meeting /at 2/12/2019 1800"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"deadline return book /by 3/06/2021 1550"}],"authorContributionMap":{"ssagit":2}},{"path":"src/main/java/duke/datevalidator/DateValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.datevalidator;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":" * Interface to validate String date input"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"public interface DateValidator {"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"    boolean isValid(String dateStr);"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":8}},{"path":"src/main/java/duke/datevalidator/DateValidatorLocalDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.datevalidator;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"public class DateValidatorLocalDate implements DateValidator {"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    private DateTimeFormatter dateFormatter;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * DateValidatorLocalDate Constructor."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     * @param df {@code dateFormatter} object"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    public DateValidatorLocalDate(DateTimeFormatter df) {"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"        dateFormatter \u003d df;"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"     * Checks if date given is valid, in the following order:"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"     * date - time - locale;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"     * If all 3 fails, return with invalid, otherwise return results."},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    public boolean isValid(String dateStr) {"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"        LocalDateTime ldt \u003d null;"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"            ldt \u003d LocalDateTime.parse(dateStr, this.dateFormatter);"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"            String result \u003d ldt.format(dateFormatter);"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"            return result.equals(dateStr);"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"                LocalDate ld \u003d LocalDate.parse(dateStr, dateFormatter);"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"                String result \u003d ld.format(dateFormatter);"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"                return result.equals(dateStr);"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"            } catch (DateTimeParseException exp) {"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"                try {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"                    LocalTime lt \u003d LocalTime.parse(dateStr, dateFormatter);"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"                    String result \u003d lt.format(dateFormatter);"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"                    return result.equals(dateStr);"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"                } catch (DateTimeParseException e2) {"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"                    // Debugging purposes"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"                    e2.printStackTrace();"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"        return false;"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":""}],"authorContributionMap":{"ssagit":54}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import duke.datevalidator.DateValidator;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.DeadlineTask;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.EventTask;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import duke.ui.ConsoleUI;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import java.text.ParseException;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":" * Parser for user input and spits output if input is valid."},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":" * If input invalid, spits error messages."},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"public class Parser {"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    private ConsoleUI ui;"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"    private boolean isBye;"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    private DateValidator validator;"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"     * Constructor of the Parser."},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"     * @param ui        Handler for user interface."},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"     * @param validator Valid date format for tasks."},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    public Parser(ConsoleUI ui, DateValidator validator) {"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        this.ui \u003d ui;"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"        this.isBye \u003d false;"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        this.validator \u003d validator;"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"     * Exception class for missing todoTask descriptor."},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"    static class MissingTodoDescriptorException extends Exception {"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"        public MissingTodoDescriptorException(String errorMessage) {"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"            super(errorMessage);"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"     * Exception class for unknown input parameters."},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"    static class UnknownInputParamException extends Exception {"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"        public UnknownInputParamException(String errorMessage) {"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"            super(errorMessage);"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs \"bye\"."},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"     * @return Tuple object that contains the input parameters."},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"    public Tuple2 byeCase(int taskIterator) {"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"        this.isBye \u003d true;"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"        return new Tuple2(taskIterator, ui.bye());"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs \"list\"."},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"     * @param tasks        Array of available user tasks."},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"     * @return Tuple object that contains the input parameters."},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"    public Tuple2 listCase(int taskIterator, Task[] tasks) {"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"        return new Tuple2(taskIterator, ui.list(tasks));"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs \"done\"."},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator        Number of tasks user has, used by Duke."},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"     * @param tasks               Array of available user tasks."},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"     * @param completedTaskNumber The task number that is now \u0027done\u0027."},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"     * @return Tuple object that contains the input parameters."},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"    public Tuple2 doneCase(int taskIterator, Task[] tasks, String completedTaskNumber) {"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"        int taskNum \u003d Integer.parseInt(completedTaskNumber) - 1;"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"        tasks[taskNum].markDone();"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"        return new Tuple2(taskIterator, ui.markDone(tasks[taskNum].toFormattedString()));"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs \"_todo_\"."},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"     * @param tasks        Array of available user tasks."},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":"     * @param input        Entirety of user input."},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"     * @return Message telling user task has been added."},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":"    public Tuple2 todoCase(int taskIterator, Task[] tasks, String input) {"},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":"        String[] taskCommands \u003d input.split(\"/\", 2);"},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"        String[] firstHalf \u003d taskCommands[0].split(\" \", 2);"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":"            if (firstHalf.length \u003d\u003d 1) {"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"                throw new Parser.MissingTodoDescriptorException(\"------------------------------------\\n\""},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"                        + \":( OOPS!!! The description of a todo cannot be empty\\n\""},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"                        + \"------------------------------------\");"},{"lineNumber":104,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"ssagit"},"content":"        } catch (Parser.MissingTodoDescriptorException e) {"},{"lineNumber":106,"author":{"gitId":"ssagit"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":107,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":109,"author":{"gitId":"ssagit"},"content":"        Task testTask \u003d new Task(firstHalf[1], false); // create todoTask"},{"lineNumber":110,"author":{"gitId":"ssagit"},"content":"        return checkDuplicateTodoTask(taskIterator, tasks, testTask);"},{"lineNumber":111,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":113,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs \"event\"."},{"lineNumber":115,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":117,"author":{"gitId":"ssagit"},"content":"     * @param tasks        Array of available user tasks."},{"lineNumber":118,"author":{"gitId":"ssagit"},"content":"     * @param input        Entirety of user input."},{"lineNumber":119,"author":{"gitId":"ssagit"},"content":"     * @return Message telling user task has been added."},{"lineNumber":120,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"ssagit"},"content":"    public Tuple2 eventCase(int taskIterator, Task[] tasks, String input) {"},{"lineNumber":122,"author":{"gitId":"ssagit"},"content":"        String[] taskCommands \u003d input.split(\"/\", 2);"},{"lineNumber":123,"author":{"gitId":"ssagit"},"content":"        String[] firstHalf \u003d taskCommands[0].split(\" \", 2);"},{"lineNumber":124,"author":{"gitId":"ssagit"},"content":"        String[] secondHalf \u003d taskCommands[1].split(\" \", 2);"},{"lineNumber":125,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":126,"author":{"gitId":"ssagit"},"content":"        if (!validator.isValid(secondHalf[1])) {"},{"lineNumber":127,"author":{"gitId":"ssagit"},"content":"            return new Tuple2(taskIterator, \"Invalid date format for timed Task\");"},{"lineNumber":128,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":130,"author":{"gitId":"ssagit"},"content":"        Date date \u003d new Date();"},{"lineNumber":131,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"ssagit"},"content":"            date \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(secondHalf[1]);"},{"lineNumber":133,"author":{"gitId":"ssagit"},"content":"        } catch (ParseException e) {"},{"lineNumber":134,"author":{"gitId":"ssagit"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":135,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"ssagit"},"content":"        EventTask testTask \u003d new EventTask(firstHalf[1], false, secondHalf[1].trim(), date);"},{"lineNumber":137,"author":{"gitId":"ssagit"},"content":"        return checkDuplicateEventTask(taskIterator, tasks, testTask);"},{"lineNumber":138,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":140,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs \"deadline\"."},{"lineNumber":142,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":144,"author":{"gitId":"ssagit"},"content":"     * @param tasks        Array of available user tasks."},{"lineNumber":145,"author":{"gitId":"ssagit"},"content":"     * @param input        Entirety of user input."},{"lineNumber":146,"author":{"gitId":"ssagit"},"content":"     * @return Message telling user task has been added."},{"lineNumber":147,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"ssagit"},"content":"    public Tuple2 deadlineCase(int taskIterator, Task[] tasks, String input) {"},{"lineNumber":149,"author":{"gitId":"ssagit"},"content":"        String[] taskCommands \u003d input.split(\"/\", 2);"},{"lineNumber":150,"author":{"gitId":"ssagit"},"content":"        String[] firstHalf \u003d taskCommands[0].split(\" \", 2);"},{"lineNumber":151,"author":{"gitId":"ssagit"},"content":"        String[] secondHalf \u003d taskCommands[1].split(\" \", 2);"},{"lineNumber":152,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":153,"author":{"gitId":"ssagit"},"content":"        if (!validator.isValid(secondHalf[1])) {"},{"lineNumber":154,"author":{"gitId":"ssagit"},"content":"            return new Tuple2(taskIterator, \"Invalid date format for timed Task\");"},{"lineNumber":155,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":157,"author":{"gitId":"ssagit"},"content":"        Date date \u003d new Date();"},{"lineNumber":158,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":159,"author":{"gitId":"ssagit"},"content":"            date \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(secondHalf[1]);"},{"lineNumber":160,"author":{"gitId":"ssagit"},"content":"        } catch (ParseException e) {"},{"lineNumber":161,"author":{"gitId":"ssagit"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":162,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"ssagit"},"content":"        DeadlineTask testTask \u003d new DeadlineTask(firstHalf[1], false, secondHalf[1].trim(), date);"},{"lineNumber":164,"author":{"gitId":"ssagit"},"content":"        return checkDuplicateDeadlineTask(taskIterator, tasks, testTask);"},{"lineNumber":165,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":167,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"ssagit"},"content":"     * Checks if the task you want to add is a duplicate. Do not add if its a duplicate."},{"lineNumber":169,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":171,"author":{"gitId":"ssagit"},"content":"     * @param tasks        Array of available user tasks."},{"lineNumber":172,"author":{"gitId":"ssagit"},"content":"     * @param testTask     Added task."},{"lineNumber":173,"author":{"gitId":"ssagit"},"content":"     * @return Appropriate Tuple2 object depending on if input was duplicate or not."},{"lineNumber":174,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"ssagit"},"content":"    public Tuple2 checkDuplicateTodoTask(int taskIterator, Task[] tasks, Task testTask) {"},{"lineNumber":176,"author":{"gitId":"ssagit"},"content":"        assert testTask !\u003d null : \"Task input must not be null.\\n\";"},{"lineNumber":177,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":178,"author":{"gitId":"ssagit"},"content":"        boolean hasFoundDuplicateTask \u003d false;"},{"lineNumber":179,"author":{"gitId":"ssagit"},"content":"        for (Task otherTask : tasks) {"},{"lineNumber":180,"author":{"gitId":"ssagit"},"content":"            if (otherTask \u003d\u003d null) {"},{"lineNumber":181,"author":{"gitId":"ssagit"},"content":"                continue;"},{"lineNumber":182,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":184,"author":{"gitId":"ssagit"},"content":"            if (testTask.equals(otherTask)) {"},{"lineNumber":185,"author":{"gitId":"ssagit"},"content":"                hasFoundDuplicateTask \u003d true;"},{"lineNumber":186,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":187,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"ssagit"},"content":"        if (hasFoundDuplicateTask) {"},{"lineNumber":190,"author":{"gitId":"ssagit"},"content":"            return new Tuple2(taskIterator, ui.formatBox(\"You are adding a duplicate task! Add task failed.\"));"},{"lineNumber":191,"author":{"gitId":"ssagit"},"content":"        } else {"},{"lineNumber":192,"author":{"gitId":"ssagit"},"content":"            tasks[taskIterator] \u003d testTask;"},{"lineNumber":193,"author":{"gitId":"ssagit"},"content":"            taskIterator \u003d taskIterator + 1;"},{"lineNumber":194,"author":{"gitId":"ssagit"},"content":"            return new Tuple2(taskIterator,"},{"lineNumber":195,"author":{"gitId":"ssagit"},"content":"                    ui.addTaskMessage(testTask.toFormattedString(), taskIterator));"},{"lineNumber":196,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":199,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":200,"author":{"gitId":"ssagit"},"content":"     * Checks if the task you want to add is a duplicate. Do not add if its a duplicate."},{"lineNumber":201,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":202,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":203,"author":{"gitId":"ssagit"},"content":"     * @param tasks        Array of available user tasks."},{"lineNumber":204,"author":{"gitId":"ssagit"},"content":"     * @param testTask     Added task."},{"lineNumber":205,"author":{"gitId":"ssagit"},"content":"     * @return Appropriate Tuple2 object depending on if input was duplicate or not."},{"lineNumber":206,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"ssagit"},"content":"    public Tuple2 checkDuplicateEventTask(int taskIterator, Task[] tasks, EventTask testTask) {"},{"lineNumber":208,"author":{"gitId":"ssagit"},"content":"        assert testTask !\u003d null : \"Task input must not be null.\\n\";"},{"lineNumber":209,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":210,"author":{"gitId":"ssagit"},"content":"        boolean hasFoundDuplicateTask \u003d false;"},{"lineNumber":211,"author":{"gitId":"ssagit"},"content":"        for (Task otherTask : tasks) {"},{"lineNumber":212,"author":{"gitId":"ssagit"},"content":"            if (otherTask \u003d\u003d null || !(otherTask instanceof EventTask)) {"},{"lineNumber":213,"author":{"gitId":"ssagit"},"content":"                continue;"},{"lineNumber":214,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":215,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":216,"author":{"gitId":"ssagit"},"content":"            if (testTask.equals(otherTask)) {"},{"lineNumber":217,"author":{"gitId":"ssagit"},"content":"                hasFoundDuplicateTask \u003d true;"},{"lineNumber":218,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":219,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":220,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"ssagit"},"content":"        if (hasFoundDuplicateTask) {"},{"lineNumber":222,"author":{"gitId":"ssagit"},"content":"            return new Tuple2(taskIterator, ui.formatBox(\"You are adding a duplicate Event task! Add task failed.\"));"},{"lineNumber":223,"author":{"gitId":"ssagit"},"content":"        } else {"},{"lineNumber":224,"author":{"gitId":"ssagit"},"content":"            tasks[taskIterator] \u003d testTask;"},{"lineNumber":225,"author":{"gitId":"ssagit"},"content":"            taskIterator \u003d taskIterator + 1;"},{"lineNumber":226,"author":{"gitId":"ssagit"},"content":"            return new Tuple2(taskIterator,"},{"lineNumber":227,"author":{"gitId":"ssagit"},"content":"                    ui.addTaskMessage(testTask.toFormattedString(), taskIterator));"},{"lineNumber":228,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":231,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":232,"author":{"gitId":"ssagit"},"content":"     * Checks if the task you want to add is a duplicate. Do not add if its a duplicate."},{"lineNumber":233,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":234,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":235,"author":{"gitId":"ssagit"},"content":"     * @param tasks        Array of available user tasks."},{"lineNumber":236,"author":{"gitId":"ssagit"},"content":"     * @param testTask     Added task."},{"lineNumber":237,"author":{"gitId":"ssagit"},"content":"     * @return Appropriate Tuple2 object depending on if input was duplicate or not."},{"lineNumber":238,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"ssagit"},"content":"    public Tuple2 checkDuplicateDeadlineTask(int taskIterator, Task[] tasks, DeadlineTask testTask) {"},{"lineNumber":240,"author":{"gitId":"ssagit"},"content":"        assert testTask !\u003d null : \"Task input must not be null.\\n\";"},{"lineNumber":241,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":242,"author":{"gitId":"ssagit"},"content":"        boolean hasFoundDuplicateTask \u003d false;"},{"lineNumber":243,"author":{"gitId":"ssagit"},"content":"        for (Task otherTask : tasks) {"},{"lineNumber":244,"author":{"gitId":"ssagit"},"content":"            if (otherTask \u003d\u003d null || !(otherTask instanceof DeadlineTask)) {"},{"lineNumber":245,"author":{"gitId":"ssagit"},"content":"                continue;"},{"lineNumber":246,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":247,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":248,"author":{"gitId":"ssagit"},"content":"            if (testTask.equals(otherTask)) {"},{"lineNumber":249,"author":{"gitId":"ssagit"},"content":"                hasFoundDuplicateTask \u003d true;"},{"lineNumber":250,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":251,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":252,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"ssagit"},"content":"        if (hasFoundDuplicateTask) {"},{"lineNumber":254,"author":{"gitId":"ssagit"},"content":"            return new Tuple2(taskIterator, ui.formatBox(\"You are adding a duplicate deadline task! Add task failed.\"));"},{"lineNumber":255,"author":{"gitId":"ssagit"},"content":"        } else {"},{"lineNumber":256,"author":{"gitId":"ssagit"},"content":"            tasks[taskIterator] \u003d testTask;"},{"lineNumber":257,"author":{"gitId":"ssagit"},"content":"            taskIterator \u003d taskIterator + 1;"},{"lineNumber":258,"author":{"gitId":"ssagit"},"content":"            return new Tuple2(taskIterator,"},{"lineNumber":259,"author":{"gitId":"ssagit"},"content":"                    ui.addTaskMessage(testTask.toFormattedString(), taskIterator));"},{"lineNumber":260,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":263,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs \"delete\"."},{"lineNumber":265,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":266,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator      Number of tasks user has, used by Duke."},{"lineNumber":267,"author":{"gitId":"ssagit"},"content":"     * @param tasks             Array of available user tasks."},{"lineNumber":268,"author":{"gitId":"ssagit"},"content":"     * @param deletedTaskNumber The task number that is now deleted."},{"lineNumber":269,"author":{"gitId":"ssagit"},"content":"     * @return Message to user telling them task is deleted, and how many tasks are left."},{"lineNumber":270,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":271,"author":{"gitId":"ssagit"},"content":"    public Tuple2 deleteCase(int taskIterator, Task[] tasks, String deletedTaskNumber) {"},{"lineNumber":272,"author":{"gitId":"ssagit"},"content":"        int removeIndex \u003d Integer.parseInt(deletedTaskNumber);"},{"lineNumber":273,"author":{"gitId":"ssagit"},"content":"        taskIterator \u003d taskIterator - 1; // reduce task count in list"},{"lineNumber":274,"author":{"gitId":"ssagit"},"content":"        Task removedTask \u003d tasks[removeIndex - 1];"},{"lineNumber":275,"author":{"gitId":"ssagit"},"content":"        for (int i \u003d removeIndex - 1; i \u003c tasks.length - 1; i++) {"},{"lineNumber":276,"author":{"gitId":"ssagit"},"content":"            tasks[i] \u003d tasks[i + 1];"},{"lineNumber":277,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":278,"author":{"gitId":"ssagit"},"content":"        return new Tuple2(taskIterator, ui.deleteTaskMessage(removedTask.toFormattedString(), taskIterator));"},{"lineNumber":279,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":281,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":282,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs \"find\""},{"lineNumber":283,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":284,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":285,"author":{"gitId":"ssagit"},"content":"     * @param tasks        Array of available user tasks."},{"lineNumber":286,"author":{"gitId":"ssagit"},"content":"     * @param toFind       String to find within tasks."},{"lineNumber":287,"author":{"gitId":"ssagit"},"content":"     * @return String of found tasks."},{"lineNumber":288,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":289,"author":{"gitId":"ssagit"},"content":"    public Tuple2 findCase(int taskIterator, Task[] tasks, String toFind) {"},{"lineNumber":290,"author":{"gitId":"ssagit"},"content":"        String output \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":291,"author":{"gitId":"ssagit"},"content":"        for (Task t : tasks) {"},{"lineNumber":292,"author":{"gitId":"ssagit"},"content":"            if (t \u003d\u003d null) {"},{"lineNumber":293,"author":{"gitId":"ssagit"},"content":"                continue;"},{"lineNumber":294,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":295,"author":{"gitId":"ssagit"},"content":"            if (t.getTaskName().contains(toFind)) {"},{"lineNumber":296,"author":{"gitId":"ssagit"},"content":"                output \u003d output + t.toFormattedString() + \"\\n\";"},{"lineNumber":297,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":298,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":299,"author":{"gitId":"ssagit"},"content":"        return new Tuple2(taskIterator, output);"},{"lineNumber":300,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":302,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":303,"author":{"gitId":"ssagit"},"content":"     * Output case when user inputs invalid inputs."},{"lineNumber":304,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Number of tasks user has, used by Duke."},{"lineNumber":305,"author":{"gitId":"ssagit"},"content":"     * @return Message to user telling them input is invalid."},{"lineNumber":306,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":307,"author":{"gitId":"ssagit"},"content":"    public Tuple2 invalidCase(int taskIterator) {"},{"lineNumber":308,"author":{"gitId":"ssagit"},"content":"        return new Tuple2(taskIterator, \"You have entered an invalid input!\\n\""},{"lineNumber":309,"author":{"gitId":"ssagit"},"content":"                + \"Check the user guide at https://ssagit.github.io/ip/\");"},{"lineNumber":310,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":312,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":313,"author":{"gitId":"ssagit"},"content":"     * Parses lines of user input and outputs corresponding command."},{"lineNumber":314,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":315,"author":{"gitId":"ssagit"},"content":"     * @param tasks        List of tasks from file."},{"lineNumber":316,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Integer to count number of tasks at a time."},{"lineNumber":317,"author":{"gitId":"ssagit"},"content":"     * @return New number of tasks after any addition or deletion."},{"lineNumber":318,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":319,"author":{"gitId":"ssagit"},"content":"    public Tuple2\u003cInteger, String\u003e parseInput(String input, Task[] tasks, int taskIterator) {"},{"lineNumber":320,"author":{"gitId":"ssagit"},"content":"        assert input !\u003d null : \"input should not be null\";"},{"lineNumber":321,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":322,"author":{"gitId":"ssagit"},"content":"        String[] inputArr \u003d input.split(\" \", 2);"},{"lineNumber":323,"author":{"gitId":"ssagit"},"content":"        String command \u003d inputArr[0];"},{"lineNumber":324,"author":{"gitId":"ssagit"},"content":"        Tuple2 results \u003d new Tuple2();"},{"lineNumber":325,"author":{"gitId":"ssagit"},"content":"        results.setInteger(taskIterator);"},{"lineNumber":326,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":327,"author":{"gitId":"ssagit"},"content":"        switch (command) {"},{"lineNumber":328,"author":{"gitId":"ssagit"},"content":"        case \"bye\":"},{"lineNumber":329,"author":{"gitId":"ssagit"},"content":"            results \u003d byeCase(taskIterator);"},{"lineNumber":330,"author":{"gitId":"ssagit"},"content":"            break;"},{"lineNumber":331,"author":{"gitId":"ssagit"},"content":"        case \"list\":"},{"lineNumber":332,"author":{"gitId":"ssagit"},"content":"            results \u003d listCase(taskIterator, tasks);"},{"lineNumber":333,"author":{"gitId":"ssagit"},"content":"            break;"},{"lineNumber":334,"author":{"gitId":"ssagit"},"content":"        case \"done\":"},{"lineNumber":335,"author":{"gitId":"ssagit"},"content":"            results \u003d doneCase(taskIterator, tasks, inputArr[1]);"},{"lineNumber":336,"author":{"gitId":"ssagit"},"content":"            break;"},{"lineNumber":337,"author":{"gitId":"ssagit"},"content":"        case \"todo\":"},{"lineNumber":338,"author":{"gitId":"ssagit"},"content":"            results \u003d todoCase(taskIterator, tasks, input);"},{"lineNumber":339,"author":{"gitId":"ssagit"},"content":"            break;"},{"lineNumber":340,"author":{"gitId":"ssagit"},"content":"        case \"event\":"},{"lineNumber":341,"author":{"gitId":"ssagit"},"content":"            results \u003d eventCase(taskIterator, tasks, input);"},{"lineNumber":342,"author":{"gitId":"ssagit"},"content":"            break;"},{"lineNumber":343,"author":{"gitId":"ssagit"},"content":"        case \"deadline\":"},{"lineNumber":344,"author":{"gitId":"ssagit"},"content":"            results \u003d deadlineCase(taskIterator, tasks, input);"},{"lineNumber":345,"author":{"gitId":"ssagit"},"content":"            break;"},{"lineNumber":346,"author":{"gitId":"ssagit"},"content":"        case \"delete\":"},{"lineNumber":347,"author":{"gitId":"ssagit"},"content":"            results \u003d deleteCase(taskIterator, tasks, inputArr[1]);"},{"lineNumber":348,"author":{"gitId":"ssagit"},"content":"            break;"},{"lineNumber":349,"author":{"gitId":"ssagit"},"content":"        case \"find\":"},{"lineNumber":350,"author":{"gitId":"ssagit"},"content":"            results \u003d findCase(taskIterator, tasks, inputArr[1]);"},{"lineNumber":351,"author":{"gitId":"ssagit"},"content":"            break;"},{"lineNumber":352,"author":{"gitId":"ssagit"},"content":"        default:"},{"lineNumber":353,"author":{"gitId":"ssagit"},"content":"            results \u003d invalidCase(taskIterator);"},{"lineNumber":354,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":355,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":356,"author":{"gitId":"ssagit"},"content":"        return results;"},{"lineNumber":357,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":358,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":358}},{"path":"src/main/java/duke/parser/Tuple2.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":" * Object used to let methods return 2 separate types."},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" * @param \u003cInteger\u003e Returned Integer."},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" * @param \u003cString\u003e Returned String."},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"public class Tuple2 \u003cInteger, String\u003e {"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    private Integer integer;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    private String str;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * Default constructor."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"    public Tuple2() {"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"     * Overloaded constructor."},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"     * @param integer Returned Integer."},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"     * @param str Returned String."},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    public Tuple2 (Integer integer, String str) {"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"        this.integer \u003d integer;"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        this.str \u003d str;"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    public Integer getInteger() {"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        return this.integer;"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    public String getString() {"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        return this.str;"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    public void setInteger(Integer integer) {"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"        this.integer \u003d integer;"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"    public void setStr(String str) {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        this.str \u003d str;"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":43}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import duke.datevalidator.DateValidator;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.DeadlineTask;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.EventTask;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import java.nio.charset.Charset;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"import java.text.ParseException;"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    private Path relativePath;"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    private Path absolutePath;"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    private File taskText;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"     * Constructor, creates a file of the searched file if it doesn\u0027t exist."},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"     * Afterwards, create a {@code FileWriter} which is used to write to the file."},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"     * @param relativePath relative path of file to be searched for."},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    public Storage (String relativePath) {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        this.relativePath \u003d Paths.get(relativePath);"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        this.absolutePath \u003d this.relativePath.toAbsolutePath();"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"        new File(\"./data/\").mkdirs(); // Create directory if it doesn\u0027t exist"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"        taskText \u003d new File(String.valueOf(this.absolutePath));"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"            if (!taskText.exists()) {"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"                System.out.println(\"new file created\");"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"                taskText.createNewFile(); // Create file if it doesn\u0027t exist"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"IOException has occurred\");"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     * Load a _TODO_ task from the disc."},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"     * @param taskName Name of the task."},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"     * @param isDone Whether or not task is done."},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"     * @return The loaded task."},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"    public Task createTodoTask(String taskName, boolean isDone) {"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"        return new Task(taskName, isDone);"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"     * Load an EVENT task from the disk."},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"     * @param validator Validator to check if date input is appropriate."},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"     * @param strArr User input, only strArr[3] is used here to get user date input."},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"     * @param taskName Name of the task."},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"     * @param isDone Whether or not task is done."},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"     * @return The loaded task."},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"    public Task createEventTask(DateValidator validator, String[] strArr, String taskName, boolean isDone) {"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"        if (!validator.isValid(strArr[3].trim())) {"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"Invalid date format for timed Task\");"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"            return null;"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"            Date eventDate \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(strArr[3].trim());"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"            return new EventTask(taskName, isDone, strArr[3].trim(), eventDate);"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"        } catch (ParseException e) {"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"ParseException has occurred\");"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"        return null;"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"     * Load a DEADLINE task from the disk."},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"     * @param validator Validator to check if date input is appropriate."},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"     * @param strArr User input, only strArr[3] is used here to get user date input."},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"     * @param taskName Name of the task."},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"     * @param isDone Whether or not task is done."},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"     * @return The loaded task."},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"    public Task createDeadlineTask(DateValidator validator, String[] strArr, String taskName, boolean isDone) {"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":"        if (!validator.isValid(strArr[3].trim())) {"},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"Invalid date format for timed Task\");"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"            return null;"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"            Date eventDate \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(strArr[3].trim());"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"            return new DeadlineTask(taskName, isDone, strArr[3].trim(), eventDate);"},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":"        } catch (ParseException e) {"},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"ParseException has occurred\");"},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":"        return null;"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"ssagit"},"content":"     * Reads a file into the program and parses each line into a Task and puts it into taskArr."},{"lineNumber":105,"author":{"gitId":"ssagit"},"content":"     * @param taskArr array of Task objects."},{"lineNumber":106,"author":{"gitId":"ssagit"},"content":"     * @return number of tasks currently available in list (1 index)."},{"lineNumber":107,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"ssagit"},"content":"    public int readTaskListToArray(Task[] taskArr, DateValidator validator) {"},{"lineNumber":109,"author":{"gitId":"ssagit"},"content":"        int taskIterator \u003d 0;"},{"lineNumber":110,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"ssagit"},"content":"            List\u003cString\u003e list \u003d Files.readAllLines(Paths.get(absolutePath.toString()), Charset.defaultCharset());"},{"lineNumber":112,"author":{"gitId":"ssagit"},"content":"            String[] taskListStr \u003d list.toArray(new String[list.size()]);"},{"lineNumber":113,"author":{"gitId":"ssagit"},"content":"            for (String str : taskListStr) {"},{"lineNumber":114,"author":{"gitId":"ssagit"},"content":"                String[] strArr \u003d str.split(\" \\\\| \");"},{"lineNumber":115,"author":{"gitId":"ssagit"},"content":"                String taskType \u003d strArr[0];"},{"lineNumber":116,"author":{"gitId":"ssagit"},"content":"                String isDoneStr \u003d strArr[1];"},{"lineNumber":117,"author":{"gitId":"ssagit"},"content":"                String taskName \u003d strArr[2];"},{"lineNumber":118,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":119,"author":{"gitId":"ssagit"},"content":"                if (taskType.equals(\"todo\")) {"},{"lineNumber":120,"author":{"gitId":"ssagit"},"content":"                    taskArr[taskIterator] \u003d createTodoTask(taskName, isDoneStr.equals(\"done\"));"},{"lineNumber":121,"author":{"gitId":"ssagit"},"content":"                } else if (taskType.equals(\"event\")) {"},{"lineNumber":122,"author":{"gitId":"ssagit"},"content":"                    taskArr[taskIterator] \u003d createEventTask(validator, strArr, taskName, isDoneStr.equals(\"done\"));"},{"lineNumber":123,"author":{"gitId":"ssagit"},"content":"                } else if (taskType.equals(\"deadline\")) {"},{"lineNumber":124,"author":{"gitId":"ssagit"},"content":"                    taskArr[taskIterator] \u003d createDeadlineTask(validator, strArr, taskName, isDoneStr.equals(\"done\"));"},{"lineNumber":125,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":126,"author":{"gitId":"ssagit"},"content":"                taskIterator++;"},{"lineNumber":127,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"ssagit"},"content":"            return taskIterator;"},{"lineNumber":129,"author":{"gitId":"ssagit"},"content":"        } catch (IOException e) {"},{"lineNumber":130,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"IOException has occurred\");"},{"lineNumber":131,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":132,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"ssagit"},"content":"        return taskIterator;"},{"lineNumber":134,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":136,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"ssagit"},"content":"     * Writes all tasks from an array of {@code Task} objects to file output."},{"lineNumber":138,"author":{"gitId":"ssagit"},"content":"     * @param taskArr Array of {@code Task} objects."},{"lineNumber":139,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"ssagit"},"content":"    public void writeTasks(Task[] taskArr) {"},{"lineNumber":141,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":142,"author":{"gitId":"ssagit"},"content":"            FileWriter fw \u003d new FileWriter(absolutePath.toString());"},{"lineNumber":143,"author":{"gitId":"ssagit"},"content":"            for (Task t : taskArr) {"},{"lineNumber":144,"author":{"gitId":"ssagit"},"content":"                if (t \u003d\u003d null) {"},{"lineNumber":145,"author":{"gitId":"ssagit"},"content":"                    continue;"},{"lineNumber":146,"author":{"gitId":"ssagit"},"content":"                } else {"},{"lineNumber":147,"author":{"gitId":"ssagit"},"content":"                    fw.write(t.toOutputFileString() + \"\\n\");"},{"lineNumber":148,"author":{"gitId":"ssagit"},"content":"                    fw.flush();"},{"lineNumber":149,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":150,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"ssagit"},"content":"            fw.close();"},{"lineNumber":152,"author":{"gitId":"ssagit"},"content":"        } catch (IOException e) {"},{"lineNumber":153,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"IOException has occurred\");"},{"lineNumber":154,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":155,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":157}},{"path":"src/main/java/duke/taskclass/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import java.util.Date;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" * Represent a task for deadlines"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    private String inputDate;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    private Date deadline;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * Constructor for DeadlineTask."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     * @param taskName  Name of task."},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"     * @param isDone    Is task complete?"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"     * @param inputDate The deadline of the Task in String format."},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"     * @param deadline  The deadline of the Task in Date format."},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    public DeadlineTask(String taskName, boolean isDone, String inputDate, Date deadline) {"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        super(taskName, isDone);"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"        this.inputDate \u003d inputDate;"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"     * Returns a formatted string of the state of the task"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        if (this.getIsDone()) {"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"            return \"deadline | done | \" + this.getTaskName() + \" | \" + deadline.toString();"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"        return \"deadline | not done | \" + this.getTaskName() + \" | \" + deadline.toString();"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"     * Used when adding tasks"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"     * @return More human readable toString()"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"    public String toFormattedString() {"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        if (this.getIsDone()) {"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"            return \"[D][X] \" + this.getTaskName() + \" (by: \" + deadline.toString() + \")\";"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"        return \"[D][ ] \" + this.getTaskName() + \" (by: \" + deadline.toString() + \")\";"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"     * Used when outputting to file, date format will be parsable when file is fed in again"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"     * @return String format viable for use by FileWriter"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"    public String toOutputFileString() {"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"        if (this.getIsDone()) {"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"            return \"deadline | done | \" + this.getTaskName() + \" | \" + inputDate;"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"        return \"deadline | not done | \" + this.getTaskName() + \" | \" + inputDate;"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"     * {@inheritDoc}"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"        final DeadlineTask task \u003d (DeadlineTask) other;"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"        if (task \u003d\u003d this) {"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"            return true;"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"        if (this.getTaskName().equals(task.getTaskName())) {"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"            if (this.deadline.compareTo(task.deadline) \u003d\u003d 0) {"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"                return true;"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"        return false;"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"     * {@inheritDoc}"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"    public int hashCode() {"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"        int hash \u003d 3;"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"        hash \u003d 53 * hash + (this.getTaskName() !\u003d null ? this.getTaskName().hashCode() : 0);"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"        hash \u003d 53 * hash + (this.deadline !\u003d null ? this.deadline.hashCode() : 0);"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"        return hash;"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":88}},{"path":"src/main/java/duke/taskclass/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"import java.util.Date;"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" * Represent a task for events"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"public class EventTask extends Task {"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"    private String inputDate;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    private Date deadline;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"     * Constructor for EventTask."},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * @param taskName Name of task."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     * @param isDone Is task complete?"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     * @param inputDate The date of the event in String format."},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"     * @param deadline The date of the event in Date format."},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    public EventTask(String taskName, boolean isDone, String inputDate, Date deadline) {"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"        super(taskName, isDone);"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"        this.inputDate \u003d inputDate;"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"     * Returns a formatted string of the state of the task"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"        if (this.getIsDone()) {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"            return \"event | done | \" + this.getTaskName() + \" | \" + deadline.toString();"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        return \"event | not done | \" + this.getTaskName() + \" | \" + deadline.toString();"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"     * Used when adding tasks"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"     * @return More human readable toString()"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"    public String toFormattedString() {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        if (this.getIsDone()) {"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"            return \"[E][X] \" + this.getTaskName() + \" (at: \" + deadline.toString() + \")\";"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"        return \"[E][ ] \" + this.getTaskName() + \" (at: \" + deadline.toString() + \")\";"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     * Used when outputting to file, date format will be parsable when file is fed in again"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"     * @return String format viable for use by FileWriter"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"    public String toOutputFileString() {"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"        if (this.getIsDone()) {"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"            return \"event | done | \" + this.getTaskName() + \" | \" + inputDate;"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"        return \"event | not done | \" + this.getTaskName() + \" | \" + inputDate;"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"     * {@inheritDoc}"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"        final EventTask task \u003d (EventTask) other;"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"        if (task \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"        if (this.getTaskName().equals(task.getTaskName())) {"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"            if (this.deadline.compareTo(task.deadline) \u003d\u003d 0) {"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"                return true;"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"        return false;"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"     * {@inheritDoc}"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"    public int hashCode() {"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"        int hash \u003d 3;"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"        hash \u003d 53 * hash + (this.getTaskName() !\u003d null ? this.getTaskName().hashCode() : 0);"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"        hash \u003d 53 * hash + (this.deadline !\u003d null ? this.deadline.hashCode() : 0);"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"        return hash;"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":85}},{"path":"src/main/java/duke/taskclass/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":" * Task class, since every task is a \u0027todoTask\u0027 currently, todoTask"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" * uses this as a default class"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    private String taskName;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    private boolean isDone;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * Task class constructor"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"    public Task(String taskName, boolean isDone) {"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    public boolean getIsDone() {"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        return this.isDone;"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    public String getTaskName() {"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        return this.taskName;"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"     * Function to mark a task as completed"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"    public void markDone() {"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        this.isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"     * Returns a formatted string of the state of the task"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"            return \"todo | done | \" + taskName;"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"        return \"todo | not done | \" + taskName;"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"     * Used when adding tasks"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"     * @return More human readable toString()"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"    public String toFormattedString() {"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"            return \"[T][X] \" + taskName;"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"        return \"[T][ ] \" + taskName;"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"     * Used when outputting to file, date format will be parsable when file is fed in again"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"     * @return String format viable for use by FileWriter"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"    public String toOutputFileString() {"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"        return this.toString();"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"     * {@inheritDoc}"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"        final Task task \u003d (Task) other;"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"        if (task \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"        if (this.taskName.equals(task.taskName)) {"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"            return true;"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"        return false;"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"     * {@inheritDoc}"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"    public int hashCode() {"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"        int hash \u003d 3;"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"        hash \u003d 53 * hash + (this.taskName !\u003d null ? this.taskName.hashCode() : 0);"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"        return hash;"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":88}},{"path":"src/main/java/duke/taskclass/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"public enum TaskType {"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"    DEADLINE,"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"    EVENT"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":7}},{"path":"src/main/java/duke/ui/ConsoleUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import java.io.InputStream;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":" * Handler for all UI displays of Duke.java"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"public class ConsoleUI {"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    private final Scanner in;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     * Constructor"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"     * @param in system.in is expected here"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"    public ConsoleUI(InputStream in) {"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"     * Duke introduces itself"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    public String introduction() {"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"        String introduction \u003d \"Hi, I\u0027m Duke!\\nWhat can I do for you?\";"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"        return formatBox(introduction);"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"     * Duke says bye"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    public String bye() {"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"        return this.formatBox(\"Bye. No more inputs will be accepted, please close the program!\\n\""},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"                + \"Hope to see you again soon :)\");"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"     * Duke speaks in chat boxes"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"     * @param str input string within chat boxes"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"    public String formatBox(String str) {"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"        return \"-----------------------------------\\n\""},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"                + str + \"\\n-----------------------------------\\n\";"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"     * Message shown on UI when a task is marked as done"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"     * @param doneTask returns a message in String and Task.toString()"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"    public String markDone(String doneTask) {"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"        return this.formatBox(\"Nice! I\u0027ve marked this task as done:\\n\" + doneTask);"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"     * Formatter for addTaskMessage and deleteTaskMessage"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"    public String changeTaskMessage(String headerMessage, String changedTask, int numTask) {"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"        String formattedInput \u003d headerMessage;"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"        formattedInput \u003d formattedInput.concat(changedTask).concat(\"\\n\");"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"        formattedInput \u003d formattedInput.concat(\"Now you have \" + numTask + \" tasks in the list.\");"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"        return this.formatBox(formattedInput);"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"     * Message shown on UI when a new task is added"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"     * Uses changeTaskMessage() to format text"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"     * @param addedTask Task.toString() of the added task"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"     * @param numTask   the number of tasks currently in list of tasks"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"    public String addTaskMessage(String addedTask, int numTask) {"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"        String formattedInput \u003d \"Got it. I\u0027ve added this task:\\n  \";"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"        return this.changeTaskMessage(formattedInput, addedTask, numTask);"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"     * Message shown on UI when a task is deleted"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"     * Uses changeTaskMessage() to format text"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"     * @param deletedTask Task.toString() of the deleted task"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"     * @param numTask     the number of tasks currently in list of tasks"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"    public String deleteTaskMessage(String deletedTask, int numTask) {"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"        String formattedInput \u003d \"Got it. I\u0027ve removed this task:\\n  \";"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":"        return this.changeTaskMessage(formattedInput, deletedTask, numTask);"},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":"     * Prints the tasks in the array of tasks"},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"     * @param taskArr array of Task objects"},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":"    public String list(Task[] taskArr) {"},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"        int taskNum \u003d 1;"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":"        String output \u003d \"++++++++++++++++++++++++++++++++++++\\n\""},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":"                + \"Here are the tasks in your list: \\n\""},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"                + \"TaskNum \u003e TaskType | isDone | taskName | time (if any)\\n\";"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"        for (Task t : taskArr) {"},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"            if (t \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":105,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"ssagit"},"content":"            output \u003d output + taskNum + \" \u003e \";"},{"lineNumber":107,"author":{"gitId":"ssagit"},"content":"            output \u003d output + t.toString() + \"\\n\";"},{"lineNumber":108,"author":{"gitId":"ssagit"},"content":"            taskNum++;"},{"lineNumber":109,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"ssagit"},"content":"        output \u003d output + \"++++++++++++++++++++++++++++++++++++\\n\";"},{"lineNumber":111,"author":{"gitId":"ssagit"},"content":"        return output;"},{"lineNumber":112,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":114,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"ssagit"},"content":"     * Reads the next line of input from sys.in"},{"lineNumber":116,"author":{"gitId":"ssagit"},"content":"     * Currently deprecated since javafx is used"},{"lineNumber":117,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"ssagit"},"content":"     * @return line of input in String"},{"lineNumber":119,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"ssagit"},"content":"    public String nextLine() {"},{"lineNumber":121,"author":{"gitId":"ssagit"},"content":"        return in.nextLine();"},{"lineNumber":122,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":123}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" HBox.Hgrow\u003d\"ALWAYS\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"ssagit":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\" \u003e"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\"/\u003e"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"ssagit":19}},{"path":"src/test/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.Duke;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"public class DukeTest {"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    public void dummyTest() {"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"        assertEquals(2, 2);"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":13}},{"path":"src/test/duke/Task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.Task;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.DisplayName;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"public class TaskTest {"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    private Task task;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    @BeforeEach"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"    public void setUp() throws Exception {"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"        task \u003d new Task(\"test\", false);"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Task should be marked as done after markDone() is complete\")"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    public void testMarkDone() {"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"        task.markDone();"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"        assertTrue(task.getIsDone());"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Task should return the correct string\")"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    public void testToString() {"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        assertEquals(\"todo | not done | test\", task.toString());"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Task should return the correct formatted string\")"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    public void testToFormattedString() {"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"        assertEquals(\"[T][ ] test\", task.toFormattedString());"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":37}},{"path":"src/test/duke/datevalidator/DateValidatorLocalDateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.datevalidator;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.DisplayName;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import java.util.Locale;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"public class DateValidatorLocalDateTest {"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    private DateValidatorLocalDate validator;"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    @BeforeEach"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    public void setUp() throws Exception {"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/d HHmm\", Locale.ENGLISH);"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"        validator \u003d new DateValidatorLocalDate(formatter);"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Dates without / as separators should not work\")"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    public void testWrongSeparator() {"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        assertFalse(validator.isValid(\"20210101 2359\"));"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Inputs without time should not work\")"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    public void testNoTime() {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        assertFalse(validator.isValid(\"2021/01/01\"));"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Correct inputs should work\")"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    public void testCorrectInput() {"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"        assertTrue(validator.isValid(\"2020/01/1 2359\"));"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"list"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"list"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"delete 1"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"list"}],"authorContributionMap":{"ssagit":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"javac  -cp ..\\src\\main\\java\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"ssagit":1}}]
