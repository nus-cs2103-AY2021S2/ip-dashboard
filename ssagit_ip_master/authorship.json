[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":46}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":":init"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":":end"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":":omega"}],"authorContributionMap":{"ssagit":103}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import java.util.Locale;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.datevalidator.DateValidator;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import duke.datevalidator.DateValidatorLocalDate;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import duke.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import duke.storage.Storage;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import duke.ui.ConsoleUI;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     * Chatbot Duke created from the Duke Project Template, a greenfield Java Project"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    public static void main() {"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\", Locale.ENGLISH);"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"        DateValidator validator \u003d new DateValidatorLocalDate(dateFormatter);"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"        ConsoleUI ui \u003d new ConsoleUI(System.in);"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        ui.introduction();"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"        Parser parser \u003d new Parser(ui, validator);"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"        Task[] tasks \u003d new Task[100];"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"        Storage storage \u003d new Storage(\"./src/main/java/duke/data/taskList.txt\");"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        int taskIterator \u003d storage.readTaskListToArray(tasks, validator);"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"        while (parser.getIsBye() \u003d\u003d false) {"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"            taskIterator \u003d parser.parseInput(tasks, taskIterator);"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"        storage.writeTasks(tasks);"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        ui.bye();"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"ssagit":31}},{"path":"src/main/java/duke/changelog.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"restore branch-Level-9 (from Level-9)"}],"authorContributionMap":{"ssagit":1}},{"path":"src/main/java/duke/data/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"deadline | not done | return book  | 2/12/2019 1800"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"deadline | not done | return book  | 2/12/2019 1800"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"todo | not done | 1"}],"authorContributionMap":{"ssagit":3}},{"path":"src/main/java/duke/data/taskListBackup.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"todo | not done | a"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"todo | not done | b"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"todo | not done | c"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"deadline | not done | return book  | 2/12/2019 1800"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"deadline | not done | return book  | 2/12/2019 1800"}],"authorContributionMap":{"ssagit":5}},{"path":"src/main/java/duke/datevalidator/DateValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.datevalidator;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":" * Interface to validate String date input"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"public interface DateValidator {"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"    boolean isValid(String dateStr);"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":8}},{"path":"src/main/java/duke/datevalidator/DateValidatorLocalDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.datevalidator;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"public class DateValidatorLocalDate implements DateValidator {"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    private DateTimeFormatter dateFormatter;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * DateValidatorLocalDate Constructor."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     * @param df {@code dateFormatter} object"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    public DateValidatorLocalDate(DateTimeFormatter df) {"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"        dateFormatter \u003d df;"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"     * Checks if date given is valid, in the following order:"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"     * date - time - locale;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"     * If all 3 fails, return with invalid, otherwise return results."},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    public boolean isValid(String dateStr) {"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"        LocalDateTime ldt \u003d null;"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"            ldt \u003d LocalDateTime.parse(dateStr, this.dateFormatter);"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"            String result \u003d ldt.format(dateFormatter);"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"            return result.equals(dateStr);"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"                LocalDate ld \u003d LocalDate.parse(dateStr, dateFormatter);"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"                String result \u003d ld.format(dateFormatter);"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"                return result.equals(dateStr);"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"            } catch (DateTimeParseException exp) {"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"                try {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"                    LocalTime lt \u003d LocalTime.parse(dateStr, dateFormatter);"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"                    String result \u003d lt.format(dateFormatter);"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"                    return result.equals(dateStr);"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"                } catch (DateTimeParseException e2) {"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"                    // Debugging purposes"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"                    e2.printStackTrace();"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"        return false;"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"}"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":""}],"authorContributionMap":{"ssagit":54}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import duke.datevalidator.DateValidator;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.DeadlineTask;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.EventTask;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import duke.ui.ConsoleUI;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import java.text.ParseException;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    ConsoleUI ui;"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"    boolean isBye;"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    DateValidator validator;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"     * Constructor of the Parser."},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"     * @param ui Handler for user interface."},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"     * @param validator Valid date format for tasks."},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    public Parser(ConsoleUI ui, DateValidator validator) {"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"        this.ui \u003d ui;"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        this.isBye \u003d false;"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"        this.validator \u003d validator;"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"     * Exception class for missing todoTask descriptor."},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    static class MissingTodoDescriptorException extends Exception {"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        public MissingTodoDescriptorException(String errorMessage) {"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"            super(errorMessage);"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"     * Exception class for unknown input parameters."},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"    static class UnknownInputParamException extends Exception {"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"        public UnknownInputParamException(String errorMessage) {"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"            super(errorMessage);"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"    public boolean getIsBye() {"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"        return this.isBye;"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"     * Parses lines of user input and outputs corresponding command."},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"     * @param tasks List of tasks from file."},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"     * @param taskIterator Integer to count number of tasks at a time."},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"     * @return New number of tasks after any addition or deletion."},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"    public Integer parseInput(Task[] tasks, int taskIterator) {"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"        String input \u003d ui.nextLine();"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"        String[] inputArr \u003d input.split(\" \", 2);"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"            switch (inputArr[0]) {"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"            case \"bye\":"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"                this.isBye \u003d true;"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"            case \"list\":"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"                ui.list(tasks);"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"                System.out.println(\"Num tasks: \" + taskIterator);"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"            case \"done\":"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"                int taskNum \u003d Integer.parseInt(inputArr[1]) - 1;"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"                tasks[taskNum].markDone();"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"                ui.markDone(tasks[taskNum].toFormattedString());"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"            case \"todo\":"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"            case \"event\":"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"            case \"deadline\":"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"                // add to list"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"                String[] inputArrTasks \u003d input.split(\"/\", 2);"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"                String[] firstHalf \u003d inputArrTasks[0].split(\" \", 2);"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"                if (inputArrTasks.length !\u003d 1) {"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"                    // create Deadline/Event"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"                    String[] secondHalf \u003d inputArrTasks[1].split(\" \", 2);"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"                    if (validator.isValid(secondHalf[1])) {"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"                        Date date \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(secondHalf[1]);"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"                        if (inputArr[0].equals(\"event\")) {"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"                            tasks[taskIterator] \u003d new EventTask(firstHalf[1], false, secondHalf[1].trim(), date);"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"                        } else if (inputArr[0].equals(\"deadline\")) {"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":"                            tasks[taskIterator] \u003d new DeadlineTask(firstHalf[1], false, secondHalf[1].trim(), date);"},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"                        }"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"                    } else {"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"                        System.out.println(\"Invalid date format for timed Task\");"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":"                    }"},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"                } else {"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"                    // create todoTask"},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":"                    if (firstHalf.length \u003d\u003d 1) {"},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":"                        throw new MissingTodoDescriptorException(\"------------------------------------\\n\""},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"                                + \":( OOPS!!! The description of a todo cannot be empty\\n\""},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":"                                + \"------------------------------------\");"},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":"                    } else {"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"                        tasks[taskIterator] \u003d new Task(firstHalf[1], false);"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"                    }"},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"ssagit"},"content":"                taskIterator \u003d taskIterator + 1;"},{"lineNumber":105,"author":{"gitId":"ssagit"},"content":"                ui.addTaskMessage(tasks[taskIterator - 1].toFormattedString(), taskIterator);"},{"lineNumber":106,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":107,"author":{"gitId":"ssagit"},"content":"            case \"delete\":"},{"lineNumber":108,"author":{"gitId":"ssagit"},"content":"                int removeIndex \u003d Integer.parseInt(inputArr[1]);"},{"lineNumber":109,"author":{"gitId":"ssagit"},"content":"                taskIterator \u003d taskIterator - 1; // reduce task count in list"},{"lineNumber":110,"author":{"gitId":"ssagit"},"content":"                ui.deleteTaskMessage(tasks[removeIndex - 1].toFormattedString(), taskIterator);"},{"lineNumber":111,"author":{"gitId":"ssagit"},"content":"                // actually delete the task and move all other tasks forward"},{"lineNumber":112,"author":{"gitId":"ssagit"},"content":"                for (int i \u003d removeIndex - 1; i \u003c tasks.length - 1; i++) {"},{"lineNumber":113,"author":{"gitId":"ssagit"},"content":"                    tasks[i] \u003d tasks[i + 1];"},{"lineNumber":114,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":115,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":116,"author":{"gitId":"ssagit"},"content":"            case \"find\":"},{"lineNumber":117,"author":{"gitId":"ssagit"},"content":"                String toFind \u003d inputArr[1];"},{"lineNumber":118,"author":{"gitId":"ssagit"},"content":"                String output \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":119,"author":{"gitId":"ssagit"},"content":"                for (Task t : tasks) {"},{"lineNumber":120,"author":{"gitId":"ssagit"},"content":"                    if (t !\u003d null) {"},{"lineNumber":121,"author":{"gitId":"ssagit"},"content":"                        if (t.getTaskName().contains(toFind)) {"},{"lineNumber":122,"author":{"gitId":"ssagit"},"content":"                            output \u003d output + t.toFormattedString() + \"\\n\";"},{"lineNumber":123,"author":{"gitId":"ssagit"},"content":"                        }"},{"lineNumber":124,"author":{"gitId":"ssagit"},"content":"                    }"},{"lineNumber":125,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":126,"author":{"gitId":"ssagit"},"content":"                ui.formatBox(output);"},{"lineNumber":127,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":128,"author":{"gitId":"ssagit"},"content":"            default:"},{"lineNumber":129,"author":{"gitId":"ssagit"},"content":"                throw new UnknownInputParamException(\"------------------------------------\\n\""},{"lineNumber":130,"author":{"gitId":"ssagit"},"content":"                        + \":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":131,"author":{"gitId":"ssagit"},"content":"                        + \"------------------------------------\");"},{"lineNumber":132,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"ssagit"},"content":"        } catch (MissingTodoDescriptorException e) {"},{"lineNumber":134,"author":{"gitId":"ssagit"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":135,"author":{"gitId":"ssagit"},"content":"        } catch (UnknownInputParamException e) {"},{"lineNumber":136,"author":{"gitId":"ssagit"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":137,"author":{"gitId":"ssagit"},"content":"        } catch (ParseException e) {"},{"lineNumber":138,"author":{"gitId":"ssagit"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":139,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":141,"author":{"gitId":"ssagit"},"content":"        return taskIterator;"},{"lineNumber":142,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":143}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import duke.datevalidator.DateValidator;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.DeadlineTask;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.EventTask;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import java.nio.charset.Charset;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"import java.text.ParseException;"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    Path relativePath;"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    Path absolutePath;"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    File taskText;"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"     * Constructor, creates a file of the searched file if it doesn\u0027t exist."},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"     * Afterwards, create a {@code FileWriter} which is used to write to the file."},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"     * @param relativePath relative path of file to be searched for."},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    public Storage (String relativePath) {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        this.relativePath \u003d Paths.get(relativePath);"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        absolutePath \u003d this.relativePath.toAbsolutePath();"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        taskText \u003d new File(absolutePath.toString());"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"            if (!taskText.exists()) {"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"                System.out.println(\"new file created\");"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"                taskText.createNewFile(); // creates the file if it doesn\u0027t exist"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"IOException has occurred\");"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"     * Reads a file into the program and parses each line into a Task and puts it into taskArr."},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     * @param taskArr array of Task objects."},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"     * @return number of tasks currently available in list (1 index)."},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"    public int readTaskListToArray(Task[] taskArr, DateValidator validator) {"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"        int taskIterator \u003d 0;"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"            List\u003cString\u003e list \u003d Files.readAllLines(Paths.get(relativePath.toString()), Charset.defaultCharset());"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"            String[] taskListStr \u003d list.toArray(new String[list.size()]);"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"            for (String str : taskListStr) {"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"                String[] strArr \u003d str.split(\" \\\\| \");"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"                String taskType \u003d strArr[0];"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"                String isDoneStr \u003d strArr[1];"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"                String taskName \u003d strArr[2];"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"                if (taskType.equals(\"todo\")) {"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"                    taskArr[taskIterator] \u003d new Task(taskName, isDoneStr.equals(\"done\"));"},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"                } else if (taskType.equals(\"event\")) {"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"                    if (validator.isValid(strArr[3].trim())) {"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"                        Date eventDate \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(strArr[3].trim());"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"                        taskArr[taskIterator] \u003d new EventTask(taskName,"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"                                isDoneStr.equals(\"done\"), strArr[3].trim(), eventDate);"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"                    } else {"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"                        System.out.println(\"Invalid date format for timed Task\");"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"                    }"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"                } else if (taskType.equals(\"deadline\")) {"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":"                    if (validator.isValid(strArr[3].trim())) {"},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"                        Date deadlineDate \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(strArr[3].trim());"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"                        taskArr[taskIterator] \u003d new DeadlineTask(taskName,"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"                                isDoneStr.equals(\"done\"), strArr[3].trim(), deadlineDate);"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"                    } else {"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"                        System.out.println(\"Invalid date format for timed Task\");"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"                    }"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"                taskIterator++;"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"            return taskIterator;"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"IOException has occurred\");"},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"        } catch (ParseException e) {"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"ParseException has occurred\");"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"        return taskIterator;"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"     * Writes all tasks from an array of {@code Task} objects to file output."},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":"     * @param taskArr Array of {@code Task} objects."},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"    public void writeTasks(Task[] taskArr) {"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":"            FileWriter fw \u003d new FileWriter(absolutePath.toString());"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"            for (Task t : taskArr) {"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"                if (t !\u003d null) {"},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"                    fw.write(t.toOutputFileString() + \"\\n\");"},{"lineNumber":104,"author":{"gitId":"ssagit"},"content":"                    fw.flush();"},{"lineNumber":105,"author":{"gitId":"ssagit"},"content":"                }"},{"lineNumber":106,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"ssagit"},"content":"            fw.close();"},{"lineNumber":108,"author":{"gitId":"ssagit"},"content":"        } catch (IOException e) {"},{"lineNumber":109,"author":{"gitId":"ssagit"},"content":"            System.out.println(\"IOException has occurred\");"},{"lineNumber":110,"author":{"gitId":"ssagit"},"content":"            e.printStackTrace();"},{"lineNumber":111,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":113}},{"path":"src/main/java/duke/taskclass/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"import java.util.Date;"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" * Represent a task for deadlines"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"    String inputDate;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    Date deadline;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"     * Constructor for DeadlineTask."},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * @param taskName Name of task."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     * @param isDone Is task complete?"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     * @param inputDate The deadline of the Task in String format."},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"     * @param deadline The deadline of the Task in Date format."},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    public DeadlineTask(String taskName, boolean isDone, String inputDate, Date deadline) {"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"        super(taskName, isDone);"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"        this.inputDate \u003d inputDate;"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"     * Returns a formatted string of the state of the task"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"            return \"deadline | done | \" + taskName + \" | \" + deadline.toString();"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        return \"deadline | not done | \" + taskName + \" | \" + deadline.toString();"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"     * Used when adding tasks"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"     * @return More human readable toString()"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"    public String toFormattedString() {"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"            return \"[D][X] \" + taskName + \" (by: \" + deadline.toString() + \")\";"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        return \"[D][ ] \" + taskName + \" (by: \" + deadline.toString() + \")\";"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"     * Used when outputting to file, date format will be parsable when file is fed in again"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     * @return String format viable for use by FileWriter"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"    public String toOutputFileString() {"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"            return \"deadline | done | \" + taskName + \" | \" + inputDate;"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"        return \"deadline | not done | \" + taskName + \" | \" + inputDate;"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":56}},{"path":"src/main/java/duke/taskclass/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"import java.util.Date;"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" * Represent a task for events"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"public class EventTask extends Task {"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"    String inputDate;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    Date deadline;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"     * Constructor for EventTask."},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * @param taskName Name of task."},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     * @param isDone Is task complete?"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     * @param inputDate The date of the event in String format."},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"     * @param deadline The date of the event in Date format."},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    public EventTask(String taskName, boolean isDone, String inputDate, Date deadline) {"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"        super(taskName, isDone);"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"        this.inputDate \u003d inputDate;"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"     * Returns a formatted string of the state of the task"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"            return \"event | done | \" + taskName + \" | \" + deadline.toString();"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        return \"event | not done | \" + taskName + \" | \" + deadline.toString();"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"     * Used when adding tasks"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"     * @return More human readable toString()"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"    public String toFormattedString() {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"            return \"[E][X] \" + taskName + \" (at: \" + deadline.toString() + \")\";"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"        return \"[E][ ] \" + taskName + \" (at: \" + deadline.toString() + \")\";"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     * Used when outputting to file, date format will be parsable when file is fed in again"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"     * @return String format viable for use by FileWriter"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"    public String toOutputFileString() {"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"            return \"event | done | \" + taskName + \" | \" + inputDate;"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"        return \"event | not done | \" + taskName + \" | \" + inputDate;"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":57}},{"path":"src/main/java/duke/taskclass/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":" * Task class, since every task is a \u0027todoTask\u0027 currently, todoTask"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":" * uses this as a default class"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    String taskName;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    boolean isDone;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"     * Task class constructor"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"    public Task(String taskName, boolean isDone) {"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    public boolean getIsDone() {"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"        return this.isDone;"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    public String getTaskName() {"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        return this.taskName;"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"     * Function to mark a task as completed"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"    public void markDone() {"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        this.isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"     * Returns a formatted string of the state of the task"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"            return \"todo | done | \" + taskName;"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"        return \"todo | not done | \" + taskName;"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"     * Used when adding tasks"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"     * @return More human readable toString()"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"    public String toFormattedString() {"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"        if (isDone) {"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"            return \"[T][X] \" + taskName;"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"        return \"[T][ ] \" + taskName;"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"     * Used when outputting to file, date format will be parsable when file is fed in again"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"     * @return String format viable for use by FileWriter"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"    public String toOutputFileString() {"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"        return this.toString();"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":63}},{"path":"src/main/java/duke/taskclass/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.taskclass;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"public enum TaskType {"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"    DEADLINE,"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"    EVENT"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":7}},{"path":"src/main/java/duke/ui/ConsoleUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import java.io.InputStream;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":" * Handler for all UI displays of Duke.java"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"public class ConsoleUI {"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    private final Scanner in;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"     * Constructor"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"     * @param in system.in is expected here"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"    public ConsoleUI(InputStream in) {"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"     * Duke introduces itself"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    public void introduction() {"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"        String introduction \u003d \"I\u0027m Duke!\\nWhat can I do for ya?\\n\";"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"        formatBox(introduction);"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"     * Duke says bye"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"ssagit"},"content":"    public void bye() {"},{"lineNumber":41,"author":{"gitId":"ssagit"},"content":"        this.formatBox(\"Bye. Hope to see you again soon!\");"},{"lineNumber":42,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":44,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ssagit"},"content":"     * Duke speaks in chat boxes"},{"lineNumber":46,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"ssagit"},"content":"     * @param str input string within chat boxes"},{"lineNumber":48,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"ssagit"},"content":"    public void formatBox(String str) {"},{"lineNumber":50,"author":{"gitId":"ssagit"},"content":"        System.out.println(\"------------------------------------\");"},{"lineNumber":51,"author":{"gitId":"ssagit"},"content":"        System.out.println(str);"},{"lineNumber":52,"author":{"gitId":"ssagit"},"content":"        System.out.println(\"------------------------------------\");"},{"lineNumber":53,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":55,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"ssagit"},"content":"     * Message shown on UI when a task is marked as done"},{"lineNumber":57,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"ssagit"},"content":"     * @param doneTask returns a message in String and Task.toString()"},{"lineNumber":59,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ssagit"},"content":"    public void markDone(String doneTask) {"},{"lineNumber":61,"author":{"gitId":"ssagit"},"content":"        this.formatBox(\"Nice! I\u0027ve marked this task as done:\\n\" + doneTask);"},{"lineNumber":62,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":64,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"ssagit"},"content":"     * Formatter for addTaskMessage and deleteTaskMessage"},{"lineNumber":66,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"ssagit"},"content":"    public void changeTaskMessage(String headerMessage, String changedTask, int numTask) {"},{"lineNumber":68,"author":{"gitId":"ssagit"},"content":"        String formattedInput \u003d headerMessage;"},{"lineNumber":69,"author":{"gitId":"ssagit"},"content":"        formattedInput \u003d formattedInput.concat(changedTask).concat(\"\\n\");"},{"lineNumber":70,"author":{"gitId":"ssagit"},"content":"        formattedInput \u003d formattedInput.concat(\"Now you have \" + numTask + \" tasks in the list.\");"},{"lineNumber":71,"author":{"gitId":"ssagit"},"content":"        this.formatBox(formattedInput);"},{"lineNumber":72,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":74,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"ssagit"},"content":"     * Message shown on UI when a new task is added"},{"lineNumber":76,"author":{"gitId":"ssagit"},"content":"     * Uses changeTaskMessage() to format text"},{"lineNumber":77,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"ssagit"},"content":"     * @param addedTask Task.toString() of the added task"},{"lineNumber":79,"author":{"gitId":"ssagit"},"content":"     * @param numTask   the number of tasks currently in list of tasks"},{"lineNumber":80,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"ssagit"},"content":"    public void addTaskMessage(String addedTask, int numTask) {"},{"lineNumber":82,"author":{"gitId":"ssagit"},"content":"        String formattedInput \u003d \"Got it. I\u0027ve added this task:\\n  \";"},{"lineNumber":83,"author":{"gitId":"ssagit"},"content":"        this.changeTaskMessage(formattedInput, addedTask, numTask);"},{"lineNumber":84,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":86,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"ssagit"},"content":"     * Message shown on UI when a task is deleted"},{"lineNumber":88,"author":{"gitId":"ssagit"},"content":"     * Uses changeTaskMessage() to format text"},{"lineNumber":89,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"ssagit"},"content":"     * @param deletedTask Task.toString() of the deleted task"},{"lineNumber":91,"author":{"gitId":"ssagit"},"content":"     * @param numTask     the number of tasks currently in list of tasks"},{"lineNumber":92,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"ssagit"},"content":"    public void deleteTaskMessage(String deletedTask, int numTask) {"},{"lineNumber":94,"author":{"gitId":"ssagit"},"content":"        String formattedInput \u003d \"Got it. I\u0027ve removed this task:\\n  \";"},{"lineNumber":95,"author":{"gitId":"ssagit"},"content":"        this.changeTaskMessage(formattedInput, deletedTask, numTask);"},{"lineNumber":96,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":98,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"ssagit"},"content":"     * Prints the tasks in the array of tasks"},{"lineNumber":100,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"ssagit"},"content":"     * @param taskArr array of Task objects"},{"lineNumber":102,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"ssagit"},"content":"    public void list(Task[] taskArr) {"},{"lineNumber":104,"author":{"gitId":"ssagit"},"content":"        System.out.println(\"+++++++++++++++++++++++++++++++++++++\");"},{"lineNumber":105,"author":{"gitId":"ssagit"},"content":"        System.out.println(\"Here are the tasks in your list: \");"},{"lineNumber":106,"author":{"gitId":"ssagit"},"content":"        System.out.println(\"TaskType | isDone | taskName | time (if any)\");"},{"lineNumber":107,"author":{"gitId":"ssagit"},"content":"        for (Task t : taskArr) {"},{"lineNumber":108,"author":{"gitId":"ssagit"},"content":"            if (t \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"ssagit"},"content":"                break;"},{"lineNumber":110,"author":{"gitId":"ssagit"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"ssagit"},"content":"            System.out.println(t.toString());"},{"lineNumber":112,"author":{"gitId":"ssagit"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"ssagit"},"content":"        System.out.println(\"+++++++++++++++++++++++++++++++++++++\");"},{"lineNumber":114,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":116,"author":{"gitId":"ssagit"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"ssagit"},"content":"     * Reads the next line of input from sys.in"},{"lineNumber":118,"author":{"gitId":"ssagit"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"ssagit"},"content":"     * @return line of input in String"},{"lineNumber":120,"author":{"gitId":"ssagit"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"ssagit"},"content":"    public String nextLine() {"},{"lineNumber":122,"author":{"gitId":"ssagit"},"content":"        return in.nextLine();"},{"lineNumber":123,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":124}},{"path":"src/test/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.Duke;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"public class DukeTest {"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"    public void dummyTest() {"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"        assertEquals(2, 2);"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":13}},{"path":"src/test/duke/Task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.Task;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.DisplayName;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"import duke.taskclass.Task;"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"public class TaskTest {"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":"    private Task task;"},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    @BeforeEach"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":"    public void setUp() throws Exception {"},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"        task \u003d new Task(\"test\", false);"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Task should be marked as done after markDone() is complete\")"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":"    public void testMarkDone() {"},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"        task.markDone();"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"        assertTrue(task.getIsDone());"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Task should return the correct string\")"},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    public void testToString() {"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"        assertEquals(\"todo | not done | test\", task.toString());"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Task should return the correct formatted string\")"},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    public void testToFormattedString() {"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"        assertEquals(\"[T][ ] test\", task.toFormattedString());"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":37}},{"path":"src/test/duke/datevalidator/DateValidatorLocalDateTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"package duke.datevalidator;"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.DisplayName;"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"import java.util.Locale;"},{"lineNumber":9,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"ssagit"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":12,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":13,"author":{"gitId":"ssagit"},"content":"public class DateValidatorLocalDateTest {"},{"lineNumber":14,"author":{"gitId":"ssagit"},"content":"    private DateValidatorLocalDate validator;"},{"lineNumber":15,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":16,"author":{"gitId":"ssagit"},"content":"    @BeforeEach"},{"lineNumber":17,"author":{"gitId":"ssagit"},"content":"    public void setUp() throws Exception {"},{"lineNumber":18,"author":{"gitId":"ssagit"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/d HHmm\", Locale.ENGLISH);"},{"lineNumber":19,"author":{"gitId":"ssagit"},"content":"        validator \u003d new DateValidatorLocalDate(formatter);"},{"lineNumber":20,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":22,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Dates without / as separators should not work\")"},{"lineNumber":24,"author":{"gitId":"ssagit"},"content":"    public void testWrongSeparator() {"},{"lineNumber":25,"author":{"gitId":"ssagit"},"content":"        assertFalse(validator.isValid(\"20210101 2359\"));"},{"lineNumber":26,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":28,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Inputs without time should not work\")"},{"lineNumber":30,"author":{"gitId":"ssagit"},"content":"    public void testNoTime() {"},{"lineNumber":31,"author":{"gitId":"ssagit"},"content":"        assertFalse(validator.isValid(\"2021/01/01\"));"},{"lineNumber":32,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"ssagit"},"content":""},{"lineNumber":34,"author":{"gitId":"ssagit"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"ssagit"},"content":"    @DisplayName(\"Correct inputs should work\")"},{"lineNumber":36,"author":{"gitId":"ssagit"},"content":"    public void testCorrectInput() {"},{"lineNumber":37,"author":{"gitId":"ssagit"},"content":"        assertTrue(validator.isValid(\"2020/01/1 2359\"));"},{"lineNumber":38,"author":{"gitId":"ssagit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ssagit"},"content":"}"}],"authorContributionMap":{"ssagit":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ssagit"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"ssagit"},"content":"list"},{"lineNumber":3,"author":{"gitId":"ssagit"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"ssagit"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"ssagit"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":6,"author":{"gitId":"ssagit"},"content":"list"},{"lineNumber":7,"author":{"gitId":"ssagit"},"content":"delete 1"},{"lineNumber":8,"author":{"gitId":"ssagit"},"content":"list"}],"authorContributionMap":{"ssagit":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"ssagit"},"content":"javac  -cp ..\\src\\main\\java\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"ssagit":1}}]
