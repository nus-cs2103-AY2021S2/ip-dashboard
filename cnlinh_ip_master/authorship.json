[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"cnlinh":2,"-":21}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.command.ExitCommand;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Parser;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import duke.exception.DukeException;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import duke.exception.UnknownCommandException;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import java.io.*;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    public Duke(String filePath) {"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"            ui.showLoadingError(e);"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    public void run() {"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        ui.showWelcome();"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        boolean isExit \u003d false;"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"        while (!isExit) {"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"                ui.showLine();"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"                storage.save(tasks);"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"                isExit \u003d (c instanceof ExitCommand) ? true : false;"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"            } catch (DukeException | UnknownCommandException | EmptyDescriptionException | IOException e) {"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"            } finally {"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"                ui.showLine();"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"    public static void main(String[] args) {"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        new Duke(\"data/duke.txt\").run();"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":53,"-":2}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"public class AddCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    private Task task;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * Creates an AddCommand which adds the associated task when executed."},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * @param task"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    public AddCommand(Task task) {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"        this.task \u003d task;"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"     * Adds the associated task to taskList."},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        taskList.getTasks().add(this.task);"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        ui.showAdd(this.task, taskList);"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":29}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage);"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":9}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    private int index;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * Creates a DeleteCommand which deletes the associated task with index when executed."},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * @param index"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"        this.index \u003d index;"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"     * Delete the associated task from taskList."},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        if (index \u003e taskList.getTasks().size() - 1 || index \u003c 0) {"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"            ui.showNotFound();"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"            return;"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        Task t \u003d taskList.getTasks().remove(index);"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"        ui.showDelete(t, taskList);"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":33}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    private int index;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * Creates a DoneCommand which marks the associated task with index as done when executed."},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * @param index"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    public DoneCommand(int index) {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"        this.index \u003d index;"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"     * Marks the associated task with index as done."},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        if (index \u003e taskList.getTasks().size() - 1 || index \u003c 0) {"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"            ui.showNotFound();"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"            return;"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        Task t \u003d taskList.getTasks().get(index);"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"        t.markAsDone();"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        ui.showDone(t);"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":34}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"public class ExitCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"     * Exits the program."},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"        ui.showBye();"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"        System.exit(0);"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":18}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    private String keyword;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        for (Task t : taskList.getTasks()) {"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"            if (t.getName().contains(this.keyword)) {"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"                tasks.add(t);"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        ui.showFound(tasks);"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":26}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"     * Lists out all the tasks in taskList."},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"        ui.showList(taskList);"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":17}},{"path":"src/main/java/duke/component/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.exception.UnknownCommandException;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.exception.WrongFormatException;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import duke.task.ToDo;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import duke.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import duke.task.Event;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * Parses command and generate task accordingly."},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     * @param command"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"     * @return"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"     * @throws UnknownCommandException"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    public static Command parse(String command) throws UnknownCommandException, EmptyDescriptionException, WrongFormatException {"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"        String[] parameters \u003d command.split(\" \");"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        switch (parameters[0]) {"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        case \"bye\": {"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"            return new ExitCommand();"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        case \"list\": {"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"            return new ListCommand();"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        case \"done\": {"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"            if (command.length() \u003c\u003d 5) {"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"                throw new WrongFormatException();"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"            return new DoneCommand(Integer.parseInt(parameters[1]) - 1);"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        case \"delete\": {"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"            if (command.length() \u003c\u003d 7) {"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"                throw new WrongFormatException();"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"            return new DeleteCommand(Integer.parseInt(parameters[1]) - 1);"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"        case \"todo\": {"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"            if (command.trim().length() \u003c\u003d 4) {"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"                throw new EmptyDescriptionException(\"todo\");"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"            ToDo td \u003d new ToDo(command.substring(5, command.length()));"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"            return new AddCommand(td);"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        case \"deadline\": {"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"            int slash \u003d command.indexOf(\"/by\");"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"            if (slash \u003d\u003d -1) {"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"                throw new WrongFormatException();"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"            else if (slash \u003c\u003d 10 || parameters.length \u003c\u003d 2) {"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"                throw new EmptyDescriptionException(\"deadline\");"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"            String name \u003d command.substring(9, slash - 1);"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"            String date \u003d command.substring(slash + 4, command.length());"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"            Deadline dl \u003d new Deadline(name, date);"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"            return new AddCommand(dl);"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        case \"event\": {"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"            int slash \u003d command.indexOf(\"/at\");"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"            if (slash \u003d\u003d -1) {"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"                throw new WrongFormatException();"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"            else if (slash \u003c\u003d 7 || parameters.length \u003c\u003d 2) {"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"                throw new EmptyDescriptionException(\"event\");"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"            String name \u003d command.substring(6, slash - 1);"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"            String date \u003d command.substring(slash + 4, command.length());"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"            Event e \u003d new Event(name, date);"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"            return new AddCommand(e);"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"        case \"find\": {"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"            if (command.length() \u003c\u003d 5) {"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"                throw new WrongFormatException();"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"            String keyWord \u003d command.substring(5, command.length());"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"            return new FindCommand(keyWord);"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"        default: {"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"            throw new UnknownCommandException();"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":89}},{"path":"src/main/java/duke/component/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import java.io.*;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    private String filePath;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     * Creates a Storage with specified filePath."},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"     * @param filePath"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public Storage(String filePath) {"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * Loads lines from the specified filePath."},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * @return"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     * @throws IOException"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    public String[] load() throws IOException {"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        BufferedReader br \u003d null;"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"            FileReader fr \u003d new FileReader(this.filePath);"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"            br \u003d new BufferedReader(fr);"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"            String line;"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"                lines.add(line);"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        } finally {"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"            if (br !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"                br.close();"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"        return lines.toArray(new String[lines.size()]);"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"     * Writes lines into the specified filePath."},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"     * @param tl"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"     * @throws IOException"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"    public void save(TaskList tl) throws IOException {"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        BufferedWriter bw \u003d null;"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"            bw \u003d new BufferedWriter(fw);"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"            for (Task t : tl.getTasks()) {"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"                String line \u003d \"\";"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"                String isDone \u003d t.getIsDone() ? \"1\" : \"0\";"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"                if (t instanceof ToDo) {"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"                    line \u003d \"T|\" + isDone + \"|\" + t.getName();"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"                } else if (t instanceof Deadline) {"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"                    Deadline dl \u003d (Deadline) t;"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"                    line \u003d \"D|\" + isDone + \"|\" + dl.getName() + \"|\" + dl.getSaveBy();"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"                } else if (t instanceof Event) {"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"                    Event e \u003d (Event) t;"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"                    line \u003d \"D|\" + isDone + \"|\" + e.getName() + \"|\" + e.getSaveAt();"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"                bw.write(line);"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"                bw.newLine();"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"        } finally {"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"            if (bw !\u003d null) {"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"                bw.close();"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":76}},{"path":"src/main/java/duke/component/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.exception.WrongFormatException;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.task.ToDo;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * Creates an empty TaskList."},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * Creates a TaskList with tasks loaded from a string array."},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @param lines"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    public TaskList(String[] lines) throws WrongFormatException {"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        for (String line : lines) {"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"            String[] parameters \u003d line.split(\"\\\\|\");"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"            Task t;"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"            switch (parameters[0]) {"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"            case \"T\": {"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"                t \u003d new ToDo(parameters[2]);"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"                break;"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"            case \"D\": {"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"                t \u003d new Deadline(parameters[2], parameters[3]);"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"            case \"E\": {"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"                t \u003d new Event(parameters[2], parameters[3]);"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"                break;"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"            default: {"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"                throw new WrongFormatException();"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"            if (parameters[1].equals(\"1\")) {"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"                t.markAsDone();"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"            tasks.add(t);"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"     * Gets the list of tasks."},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"     * @return"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        return this.tasks;"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":61}},{"path":"src/main/java/duke/component/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * Reads user\u0027s input command."},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * @return"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    public String readCommand() {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"        return sc.nextLine();"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * Prints welcome message."},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    public void showWelcome() {"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        System.out.println(LINE);"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        System.out.println(LINE);"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"     * Prints bye message."},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    public void showBye() {"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"     * Prints done message."},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"     * @param t"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"    public void showDone(Task t) {"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        System.out.println(t);"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"     * Prints delete message."},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"     * @param t"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"     * @param tl"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"    public void showDelete(Task t, TaskList tl) {"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        System.out.println(t);"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Now you have \" + tl.getTasks().size() + \" tasks in the list.\");"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"     * Prints add message."},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"     * @param t"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"     * @param tl"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"    public void showAdd(Task t, TaskList tl) {"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        System.out.println(t);"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Now you have \" + tl.getTasks().size() + \" tasks in the list.\");"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"     * Prints a line."},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"    public void showLine() {"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"        System.out.println(LINE);"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"    public void showNotFound() {"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Task not found!\");"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"    public void showFound(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"            System.out.println(i + \".\" + tasks.get(i - 1).toString());"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"     * Prints all the task in the taskList."},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"     * @param tl"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"    public void showList(TaskList tl) {"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tl.getTasks();"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"            System.out.println(i + \".\" + tasks.get(i - 1).toString());"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"     * Prints loading error message."},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"cnlinh"},"content":"    public void showLoadingError(Exception e) {"},{"lineNumber":102,"author":{"gitId":"cnlinh"},"content":"        System.out.println(e.getMessage());"},{"lineNumber":103,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"     * Prints error message."},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"     * @param msg"},{"lineNumber":108,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"cnlinh"},"content":"    public void showError(String msg) {"},{"lineNumber":110,"author":{"gitId":"cnlinh"},"content":"        System.out.println(msg);"},{"lineNumber":111,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":112}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new DukeException."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     * @param msg"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    public DukeException(String msg) {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"        super(msg);"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":11}},{"path":"src/main/java/duke/exception/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class EmptyDescriptionException extends Exception {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new EmptyDescriptionException."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     * @param msg"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    public EmptyDescriptionException(String msg) {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"        super(\"OOPS!!! The description of a(n) \" + msg + \" cannot be empty.\");"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":11}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class UnknownCommandException extends Exception {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new UnknownCommandException."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    public UnknownCommandException() {"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":10}},{"path":"src/main/java/duke/exception/WrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class WrongFormatException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new WrongFormatException."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    public WrongFormatException() {"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"        super(\"OOPS!!! The description format is wrong\");"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":10}},{"path":"src/main/java/duke/junit/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.junit;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.component.Parser;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import duke.command.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import duke.command.ListCommand;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import duke.command.AddCommand;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import duke.task.ToDo;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import duke.task.Deadline;"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import duke.task.Event;"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"public class ParserTest {"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    public void parse_validCommand_success() throws Exception {"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"        assertEquals(new ExitCommand(), Parser.parse(\"bye\"));"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"        assertEquals(new ListCommand(), Parser.parse(\"list\"));"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"        assertEquals(new DoneCommand(0), Parser.parse(\"done 1\"));"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        assertEquals(new DeleteCommand(0), Parser.parse(\"delete 1\"));"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        assertEquals(new AddCommand(new ToDo(\"buy book\")), Parser.parse(\"todo buy book\"));"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        assertEquals(new AddCommand(new Deadline(\"return book\", \"2020-06-07\")), Parser.parse(\"deadline return book \""},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"                + \"/by 2020-06-07\"));"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        assertEquals(new AddCommand(new Event(\"library meetup\", \"2020-08-27\")), Parser.parse(\"deadline return book \""},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"                + \"/at 2020-08-27\"));"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    public void parse_emptyTodo_exceptionThrown() {"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"            assertEquals(null, Parser.parse(\"todo\"));"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"            fail(); // the test should not reach this line"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        } catch (Exception e) {"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"            assertEquals(\"OOPS!!! The description of a(n) todo cannot be empty.\", e.getMessage());"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    public void parse_emptyDeadline_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"            assertEquals(null, Parser.parse(\"deadline /by\"));"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"            fail(); // the test should not reach this line"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        } catch (Exception e) {"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"            assertEquals(\"OOPS!!! The description of a(n) deadline cannot be empty.\", e.getMessage());"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    public void parse_emptyEvent_exceptionThrown() {"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"            assertEquals(null, Parser.parse(\"event /at\"));"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"            fail(); // the test should not reach this line"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"        } catch (Exception e) {"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"            assertEquals(\"OOPS!!! The description of a(n) event cannot be empty.\", e.getMessage());"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":60}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    private LocalDate by;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    public Deadline(String name, String by) {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"        super(name);"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"        this.by \u003d LocalDate.parse(by);"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    public String getDisplayBy() {"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(Task.DATE_DISPLAY_FORMAT));"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public String getSaveBy() {"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(Event.DATE_SAVE_FORMAT));"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDisplayBy() + \")\";"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":26}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    private LocalDate at;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    public Event(String name, String at) {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"        super(name);"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"        this.at \u003d LocalDate.parse(at);"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    public String getDisplayAt() {"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"        return this.at.format(DateTimeFormatter.ofPattern(Event.DATE_DISPLAY_FORMAT));"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public String getSaveAt() {"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        return this.at.format(DateTimeFormatter.ofPattern(Event.DATE_SAVE_FORMAT));"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.getDisplayAt() + \")\";"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":26}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    protected static String DATE_DISPLAY_FORMAT \u003d \"MMM d yyyy\";"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"    protected static String DATE_SAVE_FORMAT \u003d \"yyyy-MM-dd\";"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"    private String name;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    private boolean isDone;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    public Task(String name) {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"        this.name \u003d name;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"        this.isDone \u003d false;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    public String getName() {"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"        return this.name;"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public String getStatusIcon() {"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    public boolean getIsDone() {"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        return this.isDone;"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public void markAsDone() {"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        this.isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.name;"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":34}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    public ToDo(String name) {"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"        super(name);"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"list"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"list"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"delete 2"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"delete 1"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"list"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"deadline /by"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"deadline buy book"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"bye"}],"authorContributionMap":{"cnlinh":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"cnlinh":1,"-":20}}]
