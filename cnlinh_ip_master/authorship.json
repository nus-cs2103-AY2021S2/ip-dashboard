[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"cnlinh":1,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    implementation group: \u0027org.apache.commons\u0027, name: \u0027commons-text\u0027, version: \u00271.9\u0027"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"    enableAssertions \u003d true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":19,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"![Duke Screenshot](./Ui.png)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"Duke is a personal chatbot that helps you manage your tasks. He can track your Todos, Events, and Deadlines. He comes in the form of a simple GUI with CLI."},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"## Quick Start"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"1. Ensure you have Java 11 or above installed on your Computer."},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"2. Download the latest `ip.jar` [here](https://github.com/cnlinh/ip/releases)."},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"3. Double-click the file to start the app. The GUI should launch in a few seconds."},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"4. Type a command into the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e or click \u003ckbd\u003eSend\u003c/kbd\u003e to execute it."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"### Format of this guide"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"- User input is prefixed with `$`."},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"- Required parts are surrounded by angle brackets `\u003c\u003e`."},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"- The brackets are not part of the actual commands."},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"### Features"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"Duke can support 3 types of tasks: Todos, Deadlines and Events. You can create, read or delete these tasks, or mark them as done. If the list gets too long, Duke can also help you search for tasks."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"#### `list` \u0026mdash; List Tasks"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"Lists all the Tasks you have asked Duke to remind you."},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"$ list"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"#### `find` \u0026mdash; Find Tasks"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"Searches for Tasks with descriptions containing the key word. Duke can find it even if you make some minor typos."},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"$ find \u003ckey_word\u003e"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"#### `done` \u0026mdash; Mark a Task as done"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"Marks a Task at the specified index as done. The task index is as shown in `list` command."},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"$ done \u003ctask_index\u003e"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"#### `delete` \u0026mdash; Remove a Task"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"Deletes a Task at the specified index. The task index is as shown in `list` command."},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"$ delete \u003ctask_index\u003e"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"#### `todo` \u0026mdash; Add a Todo"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"Adds a Todo task."},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"$ todo \u003cdescription\u003e"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"#### `deadline` \u0026mdash; Add a Deadline"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"Adds a Deadline task by a certain time. The time input should be of the format `yyyy-mm-dd`, e.g. `2021-02-20`."},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"$ deadline \u003cdescription\u003e /by \u003ctime: yyyy-mm-dd\u003e"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"#### `event` \u0026mdash; Add an Event"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"Adds an Event task at a certain time. The time input should be of the format `yyyy-mm-dd`, e.g. `2021-02-20`."},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"$ event \u003cdescription\u003e /at \u003ctime: yyyy-mm-dd\u003e"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"#### `bye` \u0026mdash; Exit Duke"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"Exits the application. Duke will remember all the tasks you have given him the next time you launch the application."},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"$ bye"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"```"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"## Acknowledgements"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"- GUI from [JavaFX](https://openjfx.io)"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"- Unit Testing from [JUnit5](https://github.com/junit-team/junit5)"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"- Commons Text from [Apache](https://commons.apache.org/proper/commons-text/)"}],"authorContributionMap":{"cnlinh":60,"-":11}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Parser;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import duke.exception.UnknownCommandException;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import duke.exception.WrongFormatException;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * Creates a new default Duke instance."},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    public Duke() {"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"     * Creates a new Duke instance."},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"     * @param filePath file path"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    public Duke(String filePath) {"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"            e.printStackTrace();"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"     * Returns DukeResponse based on user input."},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"     * @param input"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"     * @return DukeResponse"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"    public DukeResponse getResponse(String input) {"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        Command c;"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"            c \u003d Parser.parse(input);"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"        } catch (UnknownCommandException | EmptyDescriptionException | WrongFormatException e) {"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"            return new DukeResponse(e.getMessage());"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"        DukeResponse response \u003d c.execute(tasks, ui, storage);"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"            storage.save(tasks);"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"        } catch (IOException e) {"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"            return new DukeResponse(e.getMessage());"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"        return response;"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":67,"-":2}},{"path":"src/main/java/duke/DukeResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"//@@author stein414-reused"},{"lineNumber":4,"author":{"gitId":"-"},"content":"//DukeResponse abstraction adapted from https://github.com/stein414/ip"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class DukeResponse {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    private String response;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private boolean isExit;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     * Creates a new DukeResponse instance with the specified response."},{"lineNumber":11,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * @param response"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public DukeResponse(String response) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.response \u003d response;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.isExit \u003d false;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a new DukeResponse instance with the specified response and isExit flag."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param response"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public DukeResponse(String response, boolean isExit) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.response \u003d response;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Gets the response."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @return response"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public String getResponse() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return response;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns whether the response is exit."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return isExit"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean getIsExit() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return isExit;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":2,"-":44}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.controller.MainWindow;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":" */"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    private final Duke DUKE \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(DUKE);"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":33}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.DukeResponse;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"public class AddCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    private Task task;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * Creates an AddCommand which adds the associated task when executed."},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * @param task"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public AddCommand(Task task) {"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"        this.task \u003d task;"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * Adds the associated task to taskList."},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     * @return DukeResponse"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    public DukeResponse execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        taskList.getTasks().add(this.task);"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        return new DukeResponse(ui.showAdd(this.task, taskList));"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.DukeResponse;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"     * Executes the command"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * @return DukeResponse"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public abstract DukeResponse execute(TaskList taskList, Ui ui, Storage storage);"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":17}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.DukeResponse;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    private int index;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * Creates a DeleteCommand which deletes the associated task with index when executed."},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * @param index"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"        this.index \u003d index;"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * Delete the associated task from taskList."},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     * @return DukeResponse"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    public DukeResponse execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        if (index \u003e taskList.getTasks().size() - 1 || index \u003c 0) {"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"            return new DukeResponse(ui.showNotFound());"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d taskList.getTasks().size() - 1 : \"index should be in valid range\";"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        Task t \u003d taskList.getTasks().remove(index);"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        return new DukeResponse(ui.showDelete(t, taskList));"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":35}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.DukeResponse;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"public class DoneCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    private int index;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * Creates a DoneCommand which marks the associated task with index as done when executed."},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * @param index"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public DoneCommand(int index) {"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"        this.index \u003d index;"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * Marks the associated task with index as done."},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     * @return DukeResponse"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    public DukeResponse execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        if (index \u003e taskList.getTasks().size() - 1 || index \u003c 0) {"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"            return new DukeResponse(ui.showNotFound());"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d taskList.getTasks().size() - 1 : \"index should be in valid range\";"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        Task t \u003d taskList.getTasks().get(index);"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        t.markAsDone();"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"        return new DukeResponse(ui.showDone(t));"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":36}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.DukeResponse;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"     * Exits the program."},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * @return DukeResponse"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    public DukeResponse execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"        return new DukeResponse(ui.showBye(), true);"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":19}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.DukeResponse;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import org.apache.commons.text.similarity.LevenshteinDistance;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    private String keyword;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"     * Creates a new FindCommand."},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"     * @param keyword"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * Executes the command."},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"     * @return DukeResponse"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    public DukeResponse execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        LevenshteinDistance ld \u003d new LevenshteinDistance();"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        for (Task t : taskList.getTasks()) {"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"            String[] words \u003d t.getName().split(\" \");"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"            for (String word : words) {"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"                if (ld.apply(word, this.keyword) \u003c 2) {"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"                    tasks.add(t);"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"                    break;"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"        return new DukeResponse(ui.showFound(tasks));"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":44}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.DukeResponse;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.component.Storage;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.TaskList;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"     * Lists out all the tasks in taskList."},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * @param taskList"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     * @param ui"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"     * @param storage"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     * @return DukeResponse"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    public DukeResponse execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"        return new DukeResponse(ui.showList(taskList));"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":20}},{"path":"src/main/java/duke/component/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import duke.exception.EmptyDescriptionException;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import duke.exception.UnknownCommandException;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import duke.exception.WrongFormatException;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import duke.task.ToDo;"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"public class Parser {"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"     * Parses command and generate task accordingly."},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"     * @param command"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * @return the corresponding Command"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * @throws UnknownCommandException"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public static Command parse(String command)"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"            throws UnknownCommandException, EmptyDescriptionException, WrongFormatException {"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        String[] parameters \u003d command.split(\" \");"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        switch (parameters[0]) {"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        case \"bye\": {"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"            return new ExitCommand();"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        case \"list\": {"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"            return new ListCommand();"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        case \"done\": {"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"            return parseDone(command);"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        case \"delete\": {"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"            return parseDelete(command);"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"        case \"todo\": {"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"            return parseToDo(command);"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"        case \"deadline\": {"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"            return parseDeadline(command);"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        case \"event\": {"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"            return parseEvent(command);"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"        case \"find\": {"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"            return parseFind(command);"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        default: {"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"            throw new UnknownCommandException();"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"     * Creates a new AddCommand for Deadline."},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"     * @param command"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":"     * @return corresponding AddCommand"},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"    public static AddCommand parseDeadline(String command) throws WrongFormatException, EmptyDescriptionException {"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"        int slash \u003d command.indexOf(\"/by\");"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        if (slash \u003d\u003d -1) {"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"            throw new WrongFormatException();"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"        } else if (slash \u003c\u003d 10 || command.split(\" \").length \u003c\u003d 2) {"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"            throw new EmptyDescriptionException(\"deadline\");"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"        String name \u003d command.substring(9, slash - 1);"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":"        String date \u003d command.substring(slash + 4);"},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"        Deadline dl \u003d new Deadline(name, date);"},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"        return new AddCommand(dl);"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"     * Creates a new AddCommand for Event."},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"     * @param command"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"     * @return corresponding AddCommand"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"    public static AddCommand parseEvent(String command) throws WrongFormatException, EmptyDescriptionException {"},{"lineNumber":89,"author":{"gitId":"cnlinh"},"content":"        int slash \u003d command.indexOf(\"/at\");"},{"lineNumber":90,"author":{"gitId":"cnlinh"},"content":"        if (slash \u003d\u003d -1) {"},{"lineNumber":91,"author":{"gitId":"cnlinh"},"content":"            throw new WrongFormatException();"},{"lineNumber":92,"author":{"gitId":"cnlinh"},"content":"        } else if (slash \u003c\u003d 7 || command.split(\" \").length \u003c\u003d 2) {"},{"lineNumber":93,"author":{"gitId":"cnlinh"},"content":"            throw new EmptyDescriptionException(\"event\");"},{"lineNumber":94,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"cnlinh"},"content":"        String name \u003d command.substring(6, slash - 1);"},{"lineNumber":96,"author":{"gitId":"cnlinh"},"content":"        String date \u003d command.substring(slash + 4);"},{"lineNumber":97,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":98,"author":{"gitId":"cnlinh"},"content":"        Event e \u003d new Event(name, date);"},{"lineNumber":99,"author":{"gitId":"cnlinh"},"content":"        return new AddCommand(e);"},{"lineNumber":100,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":102,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"cnlinh"},"content":"     * Parses ToDo command."},{"lineNumber":104,"author":{"gitId":"cnlinh"},"content":"     * @param command"},{"lineNumber":105,"author":{"gitId":"cnlinh"},"content":"     * @return AddCommand"},{"lineNumber":106,"author":{"gitId":"cnlinh"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":107,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"cnlinh"},"content":"    public static AddCommand parseToDo(String command) throws EmptyDescriptionException {"},{"lineNumber":109,"author":{"gitId":"cnlinh"},"content":"        if (command.trim().length() \u003c\u003d 4) {"},{"lineNumber":110,"author":{"gitId":"cnlinh"},"content":"            throw new EmptyDescriptionException(\"todo\");"},{"lineNumber":111,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"cnlinh"},"content":"        ToDo td \u003d new ToDo(command.substring(5));"},{"lineNumber":113,"author":{"gitId":"cnlinh"},"content":"        return new AddCommand(td);"},{"lineNumber":114,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":116,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"cnlinh"},"content":"     * Parses Delete command."},{"lineNumber":118,"author":{"gitId":"cnlinh"},"content":"     * @param command"},{"lineNumber":119,"author":{"gitId":"cnlinh"},"content":"     * @return DeleteCommand"},{"lineNumber":120,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":121,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"cnlinh"},"content":"    public static DeleteCommand parseDelete(String command) throws WrongFormatException {"},{"lineNumber":123,"author":{"gitId":"cnlinh"},"content":"        if (command.length() \u003c\u003d 7) {"},{"lineNumber":124,"author":{"gitId":"cnlinh"},"content":"            throw new WrongFormatException();"},{"lineNumber":125,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"cnlinh"},"content":"        return new DeleteCommand(Integer.parseInt(command.split(\" \")[1]) - 1);"},{"lineNumber":127,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":129,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"cnlinh"},"content":"     * Parses Done command."},{"lineNumber":131,"author":{"gitId":"cnlinh"},"content":"     * @param command"},{"lineNumber":132,"author":{"gitId":"cnlinh"},"content":"     * @return DoneCommand"},{"lineNumber":133,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":134,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"cnlinh"},"content":"    public static DoneCommand parseDone(String command) throws WrongFormatException {"},{"lineNumber":136,"author":{"gitId":"cnlinh"},"content":"        if (command.length() \u003c\u003d 5) {"},{"lineNumber":137,"author":{"gitId":"cnlinh"},"content":"            throw new WrongFormatException();"},{"lineNumber":138,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"cnlinh"},"content":"        return new DoneCommand(Integer.parseInt(command.split(\" \")[1]) - 1);"},{"lineNumber":140,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":142,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"cnlinh"},"content":"     * Parses Find command."},{"lineNumber":144,"author":{"gitId":"cnlinh"},"content":"     * @param command"},{"lineNumber":145,"author":{"gitId":"cnlinh"},"content":"     * @return FindCommand"},{"lineNumber":146,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":147,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"cnlinh"},"content":"    public static FindCommand parseFind(String command) throws WrongFormatException {"},{"lineNumber":149,"author":{"gitId":"cnlinh"},"content":"        if (command.length() \u003c\u003d 5) {"},{"lineNumber":150,"author":{"gitId":"cnlinh"},"content":"            throw new WrongFormatException();"},{"lineNumber":151,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"cnlinh"},"content":"        String keyWord \u003d command.substring(5);"},{"lineNumber":153,"author":{"gitId":"cnlinh"},"content":"        return new FindCommand(keyWord);"},{"lineNumber":154,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":155}},{"path":"src/main/java/duke/component/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.task.ToDo;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import java.io.*;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    //@@author stein414-reused"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //DukeResponse abstraction adapted from https://github.com/stein414/ip"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String WORKING_PATH \u003d System.getProperty(\"user.dir\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String DEFAULT_PATH \u003d java.nio.file.Paths.get(WORKING_PATH, \"duke.txt\").toString();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private File dataFile;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a Storage with default path."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Storage() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this(DEFAULT_PATH);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a Storage with specified path."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param filePath"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Storage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.dataFile \u003d new File(filePath);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Loads lines from the specified filePath."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return string array of input"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public String[] load() throws IOException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        dataFile.createNewFile();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        BufferedReader br \u003d null;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            FileReader fr \u003d new FileReader(dataFile.getAbsolutePath());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            br \u003d new BufferedReader(fr);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            String line;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                lines.add(line);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } finally {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            if (br !\u003d null) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                br.close();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return lines.toArray(new String[lines.size()]);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Writes lines into the specified filePath."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param tl"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws IOException"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void save(TaskList tl) throws IOException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        dataFile.createNewFile();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        BufferedWriter bw \u003d null;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            FileWriter fw \u003d new FileWriter(dataFile.getAbsolutePath());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            bw \u003d new BufferedWriter(fw);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            for (Task t : tl.getTasks()) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                String line \u003d \"\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                String isDone \u003d t.getIsDone() ? \"1\" : \"0\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                if (t instanceof ToDo) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                    line \u003d \"T|\" + isDone + \"|\" + t.getName();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                } else if (t instanceof Deadline) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                    Deadline dl \u003d (Deadline) t;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                    line \u003d \"D|\" + isDone + \"|\" + dl.getName() + \"|\" + dl.getSaveBy();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                } else if (t instanceof Event) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    Event e \u003d (Event) t;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                    line \u003d \"D|\" + isDone + \"|\" + e.getName() + \"|\" + e.getSaveAt();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                bw.write(line);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                bw.newLine();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        } finally {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (bw !\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                bw.close();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":11,"-":81}},{"path":"src/main/java/duke/component/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.exception.WrongFormatException;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"     * Creates an empty TaskList."},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     * Creates a TaskList with tasks loaded from a string array."},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * @param lines"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * @throws WrongFormatException"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public TaskList(String[] lines) throws WrongFormatException {"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"        for (String line : lines) {"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"            String[] parameters \u003d line.split(\"\\\\|\");"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"            Task t;"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"            switch (parameters[0]) {"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"            case \"T\": {"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"                t \u003d new ToDo(parameters[2]);"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"                break;"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"            case \"D\": {"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"                t \u003d new Deadline(parameters[2], parameters[3]);"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"                break;"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"            case \"E\": {"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"                t \u003d new Event(parameters[2], parameters[3]);"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"            default: {"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"                throw new WrongFormatException();"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"            if (parameters[1].equals(\"1\")) {"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"                t.markAsDone();"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"            tasks.add(t);"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"     * Gets the list of tasks."},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"     * @return"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"        return this.tasks;"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":62}},{"path":"src/main/java/duke/component/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"     * Prints welcome message."},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"    public String showWelcome() {"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"        return \"Hello! I\u0027m Duke \\n What can I do for you?\";"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"     * Prints bye message."},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public String showBye() {"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * Prints done message."},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * @param t"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public String showDone(Task t) {"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        return \"Nice! I\u0027ve marked this task as done: \\n\""},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"                + t.toString();"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"     * Prints delete message."},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"     * @param t"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"     * @param tl"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    public String showDelete(Task t, TaskList tl) {"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        return \"Noted. I\u0027ve removed this task: \\n\""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"                + t.toString() + \"\\n\""},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"                + \"Now you have \""},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"                + tl.getTasks().size()"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"                + \" tasks in the list.\";"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"     * Prints add message."},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"     * @param t"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"     * @param tl"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    public String showAdd(Task t, TaskList tl) {"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"        return \"Got it. I\u0027ve added this task: \\n\""},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"                + t.toString() + \"\\n\""},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"                + \"Now you have \""},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"                + tl.getTasks().size()"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"                + \" tasks in the list.\";"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"     * Prints not found message."},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    public String showNotFound() {"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"        return \"Task not found!\";"},{"lineNumber":62,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":64,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"cnlinh"},"content":"     * Prints found tasks."},{"lineNumber":66,"author":{"gitId":"cnlinh"},"content":"     * @param tasks"},{"lineNumber":67,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"cnlinh"},"content":"    public String showFound(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":69,"author":{"gitId":"cnlinh"},"content":"        String result \u003d \"Here are the matching tasks in your list: \\n\";"},{"lineNumber":70,"author":{"gitId":"cnlinh"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":71,"author":{"gitId":"cnlinh"},"content":"            result +\u003d i + \".\" + tasks.get(i - 1).toString() + \"\\n\";"},{"lineNumber":72,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"cnlinh"},"content":"        return result;"},{"lineNumber":74,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":76,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"cnlinh"},"content":"     * Prints all the task in the taskList."},{"lineNumber":78,"author":{"gitId":"cnlinh"},"content":"     * @param tl"},{"lineNumber":79,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"cnlinh"},"content":"    public String showList(TaskList tl) {"},{"lineNumber":81,"author":{"gitId":"cnlinh"},"content":"        String result \u003d \"Here are the tasks in your list: \\n\";"},{"lineNumber":82,"author":{"gitId":"cnlinh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tl.getTasks();"},{"lineNumber":83,"author":{"gitId":"cnlinh"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":84,"author":{"gitId":"cnlinh"},"content":"            result +\u003d i + \".\" + tasks.get(i - 1).toString() + \"\\n\";"},{"lineNumber":85,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"cnlinh"},"content":"        return result;"},{"lineNumber":87,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":88}},{"path":"src/main/java/duke/controller/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":" */"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":61}},{"path":"src/main/java/duke/controller/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.DukeResponse;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.component.Ui;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":" */"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    private VBox dialogContainer;"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    private TextField userInput;"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    private Button sendButton;"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    private Duke duke;"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    private final Image USER_IMAGE \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"    private final Image DUKE_IMAGE \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    private final long EXIT_DELAY_MILLI \u003d 2000;"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    public void initialize() {"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(new Ui().showWelcome(), DUKE_IMAGE));"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"        duke \u003d d;"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"    private void handleUserInput() {"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        DukeResponse response \u003d duke.getResponse(input);"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"                DialogBox.getUserDialog(input, USER_IMAGE),"},{"lineNumber":58,"author":{"gitId":"cnlinh"},"content":"                DialogBox.getDukeDialog(response.getResponse(), DUKE_IMAGE)"},{"lineNumber":59,"author":{"gitId":"cnlinh"},"content":"        );"},{"lineNumber":60,"author":{"gitId":"cnlinh"},"content":"        userInput.clear();"},{"lineNumber":61,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        //@@author stein414-reused"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        //Solution adapted from https://github.com/stein414/ip"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (response.getIsExit()) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            CompletableFuture.delayedExecutor(EXIT_DELAY_MILLI, TimeUnit.MILLISECONDS)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    .execute(() -\u003e Platform.exit());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cnlinh":61,"-":8}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new DukeException."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     * @param msg"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    public DukeException(String msg) {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"        super(msg);"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":11}},{"path":"src/main/java/duke/exception/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class EmptyDescriptionException extends Exception {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new EmptyDescriptionException."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     * @param msg"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    public EmptyDescriptionException(String msg) {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"        super(\"OOPS!!! The description of a(n) \" + msg + \" cannot be empty.\");"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":11}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class UnknownCommandException extends Exception {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new UnknownCommandException."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    public UnknownCommandException() {"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":10}},{"path":"src/main/java/duke/exception/WrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class WrongFormatException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new WrongFormatException."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    public WrongFormatException() {"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"        super(\"OOPS!!! The description format is wrong\");"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":10}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    private LocalDate by;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"     * Creates a new Deadline."},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"     * @param name"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * @param by"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    public Deadline(String name, String by) {"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"        super(name);"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"        this.by \u003d LocalDate.parse(by);"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"     * Returns date in displayed format."},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * @return String"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    public String getDisplayBy() {"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(Task.DATE_DISPLAY_FORMAT));"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"     * Returns date in saved format."},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"     * @return String"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    public String getSaveBy() {"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(Event.DATE_SAVE_FORMAT));"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDisplayBy() + \")\";"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":39}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    private LocalDate at;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"     * Creates a new Event."},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"     * @param name"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     * @param at"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"    public Event(String name, String at) {"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"        super(name);"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"        this.at \u003d LocalDate.parse(at);"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"     * Returns date in displayed format."},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"     * @return String"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"    public String getDisplayAt() {"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        return this.at.format(DateTimeFormatter.ofPattern(Event.DATE_DISPLAY_FORMAT));"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"     * Returns date in saved format."},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"     * @return String"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"    public String getSaveAt() {"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"        return this.at.format(DateTimeFormatter.ofPattern(Event.DATE_SAVE_FORMAT));"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.getDisplayAt() + \")\";"},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":39}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    protected static final String DATE_DISPLAY_FORMAT \u003d \"MMM d yyyy\";"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"    protected static final String DATE_SAVE_FORMAT \u003d \"yyyy-MM-dd\";"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"    private String name;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"    private boolean isDone;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"     * Creates a new Task."},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"     * @param name"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    public Task(String name) {"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"        this.name \u003d name;"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    public String getName() {"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        return this.name;"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"     * Returns tick or X symbols."},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"     * @return"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    public String getStatusIcon() {"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"    public boolean getIsDone() {"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"        return this.isDone;"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"    public void markAsDone() {"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        this.isDone \u003d true;"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.name;"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":42}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"     * Creates a new ToDo."},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"     * @param name"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"    public ToDo(String name) {"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"        super(name);"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":16}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"cnlinh":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controller.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"cnlinh":19}},{"path":"src/test/java/duke/component/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"package duke.component;"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"import duke.command.DoneCommand;"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"import duke.command.FindCommand;"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"import duke.command.ListCommand;"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"public class ParserTest {"},{"lineNumber":16,"author":{"gitId":"cnlinh"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"cnlinh"},"content":"    public void parse_validCommand_success() throws Exception {"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"},{"lineNumber":19,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Parser.parse(\"list\") instanceof ListCommand);"},{"lineNumber":20,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Parser.parse(\"done 1\") instanceof DoneCommand);"},{"lineNumber":21,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"},{"lineNumber":22,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Parser.parse(\"todo buy book\") instanceof AddCommand);"},{"lineNumber":23,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Parser.parse(\"deadline return book /by 2020-06-07\") instanceof AddCommand);"},{"lineNumber":24,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Parser.parse(\"event library meetup /at 2020-08-27\") instanceof AddCommand);"},{"lineNumber":25,"author":{"gitId":"cnlinh"},"content":"        assertTrue(Parser.parse(\"find book\") instanceof FindCommand);"},{"lineNumber":26,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":28,"author":{"gitId":"cnlinh"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"cnlinh"},"content":"    public void parse_emptyTodo_exceptionThrown() {"},{"lineNumber":30,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"cnlinh"},"content":"            assertEquals(null, Parser.parse(\"todo\"));"},{"lineNumber":32,"author":{"gitId":"cnlinh"},"content":"            fail(); // the test should not reach this line"},{"lineNumber":33,"author":{"gitId":"cnlinh"},"content":"        } catch (Exception e) {"},{"lineNumber":34,"author":{"gitId":"cnlinh"},"content":"            assertEquals(\"OOPS!!! The description of a(n) todo cannot be empty.\", e.getMessage());"},{"lineNumber":35,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":38,"author":{"gitId":"cnlinh"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"cnlinh"},"content":"    public void parse_emptyDeadline_exceptionThrown() {"},{"lineNumber":40,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"cnlinh"},"content":"            assertEquals(null, Parser.parse(\"deadline /by\"));"},{"lineNumber":42,"author":{"gitId":"cnlinh"},"content":"            fail(); // the test should not reach this line"},{"lineNumber":43,"author":{"gitId":"cnlinh"},"content":"        } catch (Exception e) {"},{"lineNumber":44,"author":{"gitId":"cnlinh"},"content":"            assertEquals(\"OOPS!!! The description of a(n) deadline cannot be empty.\", e.getMessage());"},{"lineNumber":45,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"cnlinh"},"content":""},{"lineNumber":48,"author":{"gitId":"cnlinh"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"cnlinh"},"content":"    public void parse_emptyEvent_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"cnlinh"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"cnlinh"},"content":"            assertEquals(null, Parser.parse(\"event /at\"));"},{"lineNumber":52,"author":{"gitId":"cnlinh"},"content":"            fail(); // the test should not reach this line"},{"lineNumber":53,"author":{"gitId":"cnlinh"},"content":"        } catch (Exception e) {"},{"lineNumber":54,"author":{"gitId":"cnlinh"},"content":"            assertEquals(\"OOPS!!! The description of a(n) event cannot be empty.\", e.getMessage());"},{"lineNumber":55,"author":{"gitId":"cnlinh"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"cnlinh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"cnlinh"},"content":"}"}],"authorContributionMap":{"cnlinh":57}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"cnlinh"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"cnlinh"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"cnlinh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"cnlinh"},"content":"list"},{"lineNumber":5,"author":{"gitId":"cnlinh"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"cnlinh"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"cnlinh"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"cnlinh"},"content":"list"},{"lineNumber":9,"author":{"gitId":"cnlinh"},"content":"delete 2"},{"lineNumber":10,"author":{"gitId":"cnlinh"},"content":"delete 1"},{"lineNumber":11,"author":{"gitId":"cnlinh"},"content":"list"},{"lineNumber":12,"author":{"gitId":"cnlinh"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"cnlinh"},"content":"deadline /by"},{"lineNumber":14,"author":{"gitId":"cnlinh"},"content":"deadline buy book"},{"lineNumber":15,"author":{"gitId":"cnlinh"},"content":"bye"}],"authorContributionMap":{"cnlinh":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"cnlinh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"cnlinh":1,"-":20}}]
