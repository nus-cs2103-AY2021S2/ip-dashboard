[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Represents an deadline task."},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"D\";"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating deadline task."},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"     * @param input Description of the task and its due date."},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"     * Due date should be indicated after \"/by\"."},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"     * @return A deadline task."},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If due date is missing."},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    public static Deadline createDeadline(String input) throws DukeInputException {"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        String[] details \u003d input.split(\" /by \");"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        if (!input.contains(\"/by\") || details.length \u003d\u003d 1) {"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Due date is missing!\");"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        LocalDate date;"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        "},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"            date \u003d LocalDate.parse(details[1]);"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Wrong date format! Please use YYYY-MM-DD\");"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        return new Deadline(details[0], date);"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    private Deadline(String description, LocalDate date) {"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    private Deadline(boolean isDone, String description, LocalDate date) {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s (by: %s)\","},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"                TYPE,"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"                super.toString(),"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"                date.format(DateTimeFormatter.ofPattern(\"d MMM\")));"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"                description,"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"                date.toString());"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"    protected static Deadline importData(String[] args) {"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        return new Deadline(isDone, args[2], LocalDate.parse(args[3]));"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":74}},{"path":"src/main/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import static org.junit.Assert.assertThrows;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"public class DeadlineTest {"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"    "},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    public void createDeadlineTest() {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"\"));"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a\"));"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a /by\"));"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a /by 1\"));"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a 2011-01-01\"));"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a/by2011-01-01\"));"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":16}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":" * Duke is a task manager."},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Currently supports these functionalities:"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" * bye "},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Close Duke"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" * list"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - List out all task"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":" * done [number]"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Mark selected task as done"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":" * todo [description]"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Add a todo task"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":" * deadline [description] /by [due date]"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Add a deadline task with a due date (YYYY-MM-DD)"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":" * event [description] /at [date]"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Add a event task with a date (YYYY-MM-DD)"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":" * delete [number]"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Delete a task"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":" * save"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - save checklist to \"data/dukeData.txt\""},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":" * load"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Load previously saved checklist"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":" * help"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Display list of commands"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":" * search [keyword/date]"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - Display all task containing the following keyword."},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e  - If keyword is in a valid date format(YYYY-MM-DD), display all task on that date."},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    private Storage storage;"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    private TaskList tasks;"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    private Ui ui;"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    public Duke(String filePath) {"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        ui \u003d new Ui();"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        "},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            tasks \u003d new TaskList(storage.loadTaskList());"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        } catch (DukeException e) {"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        Duke duke \u003d new Duke(\"data/dukeData.txt\");"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        duke.start();"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     * Starts the Duke bot."},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    public void start() {"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        ui.greetings();"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        for (;;) {"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"            String input \u003d ui.readInput();"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"                Parser.parseInput(input);"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"            } catch (DukeInputException e) {"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"                ui.displayError(e);"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"                continue;"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"            String[] s \u003d input.split(\" \", 2);"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"            String command \u003d s[0];"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"            String args \u003d s.length \u003d\u003d 2 ? s[1] : \"\";"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"                switch(command) { "},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"                case \"bye\": "},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"                    ui.exit(); "},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"                    return;"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"                case \"list\": "},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"                    ui.displayList(tasks.listOutTask());"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"                    break; "},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"                case \"done\":"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"                    completeTask(args);"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"                case \"todo\":"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"                    addTask(Todo.createTodo(args));"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"                case \"deadline\":"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"                    addTask(Deadline.createDeadline(args));"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"                case \"event\":"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"                    addTask(Event.createEvent(args));"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"                case \"delete\":"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"                    deleteTask(args);"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"                case \"save\":"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"                    storage.saveTaskList(tasks.toList());"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"                    ui.saved();"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"                case \"load\":"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"                    tasks \u003d new TaskList(storage.loadTaskList());"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"                    ui.loaded();"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"                case \"help\":"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"                    ui.help();"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"                case \"search\":"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"                    ui.displayList(tasks.search(args));"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"                    break;"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"                } "},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"            } catch (DukeException e) {"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"                ui.displayError(e);"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"    private void completeTask(String num) throws DukeInputException {"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"        int taskNum \u003d Integer.parseInt(num);"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"        Task t \u003d tasks.completeTask(taskNum - 1);"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"        ui.completeTask(t.toString());"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"    private void addTask(Task t) {"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"        tasks.addTask(t);"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"        ui.addTask(t.toString(), tasks.size());"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"    private void deleteTask(String num) throws DukeInputException {"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"        int taskNum \u003d Integer.parseInt(num);"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"        Task t \u003d tasks.deleteTask(taskNum - 1);"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"        ui.deleteTask(t.toString(), tasks.size());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"garyljj":139,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":" * Thrown when errors occur in Duke."},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"    public DukeException(String msg) {"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"        super(\"☹ OOPS!!! \" + msg);"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":8}},{"path":"src/main/java/DukeInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":" * Thrown when errors occurs due to input."},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"public class DukeInputException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"    public DukeInputException(String msg) {"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"        super(msg);"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":8}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Represents an Event task."},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"E\";"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating Event task."},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"     * @param input Description of the task and its date."},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"     * Date should be indicated after \"/at\"."},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"     * @return An Event task."},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If date is missing or wrong format."},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    public static Event createEvent(String input) throws DukeInputException {"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        String[] details \u003d input.split(\" /at \");"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        if (!input.contains(\"/at\") || details.length \u003d\u003d 1) {"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please include a date for the event!\");"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        LocalDate date;"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        "},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"            date \u003d LocalDate.parse(details[1]);"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Wrong date format! Please use YYYY-MM-DD\");"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        return new Event(details[0], date);"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    private Event(String description, LocalDate date) {"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    private Event(boolean isDone, String description, LocalDate date) {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s (at: %s)\","},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"                TYPE,"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"                super.toString(),"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"                date.format(DateTimeFormatter.ofPattern(\"d MMM\")));"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"                description,"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"                date.toString());"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"    protected static Event importData(String[] args) {"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        return new Event(isDone, args[2], LocalDate.parse(args[3]));"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":74}},{"path":"src/main/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import static org.junit.Assert.assertThrows;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"public class EventTest {"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"    "},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    public void createEventTest() {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"\"));"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a\"));"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a /at\"));"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a /at 1\"));"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a 2011-01-01\"));"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a/at2011-01-01\"));"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":16}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" * Parser checks for invalid input."},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class Parser {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"     * Checks if input from user is valid."},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"     * \u003cp\u003e"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"     * Only accepts valid commands, followed by valid parameters."},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"     * @param input Input from user."},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If input is invalid."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    public static void parseInput(String input) throws DukeInputException {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        String[] s \u003d input.split(\" \", 2);"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        String command \u003d s[0];"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        String args \u003d s.length \u003d\u003d 2 ? s[1] : \"\";"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        switch(command) { "},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        case \"bye\": "},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"            break; "},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        case \"list\": "},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        case \"done\":"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"            checkValidDone(args);"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        case \"todo\":"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"            checkValidTodo(args);"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        case \"deadline\":"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"            checkValidDeadline(args);"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        case \"event\":"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"            checkValidEvent(args);"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        case \"delete\":"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"            checkValidDelete(args);"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        case \"save\":"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        case \"load\":"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        case \"help\":"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        case \"search\":"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"            checkValidSearch(args);"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        default: "},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        } "},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"     * Checks if input from text file is valid."},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     * @param input Line from saved file."},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If input is invalid."},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    public static void checkImportFormat(String input) throws DukeInputException {"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        String[] s \u003d input.split(\";\",3);"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        if (s.length \u003d\u003d 3 \u0026\u0026 (s[1].equals(\"0\") || s[1].equals(\"1\"))) {"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"            String[] args \u003d s[2].split(\";\", 2);"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"            switch (s[0]) {"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"            case \"T\":"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"                checkValidTodo(args[0]);"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"            case \"D\":"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"                checkValidDeadline(String.join(\" /by \", args));"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"            case \"E\":"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"                checkValidDeadline(String.join(\" /at \", args));"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"            default:"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException(\"Not a valid Task type\");"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Incorrect format\");"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDate(String s) throws DukeInputException {"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"            LocalDate date \u003d LocalDate.parse(s);"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException("},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"                String.format(\"\\\"%s\\\" is a wrong date format! Please use YYYY-MM-DD format.\", s));"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"    private static void checkValidTodo(String s) throws DukeInputException {"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"        if (s.length() \u003d\u003d 0) {"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please include a description of the Todo!\");"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDeadline(String s) throws DukeInputException {"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"        String[] args \u003d s.split(\" /by \");"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"        if (args.length \u003c 2) {"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Description and duedate should be separated by \\\"/by\\\"\");"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        } else if (args.length \u003e 2) {"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please do not use \\\"/by\\\" multiple times!\");"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"            checkValidDate(args[1]);"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"    private static void checkValidEvent(String s) throws DukeInputException {"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"        String[] args \u003d s.split(\" /at \");"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"        if (args.length \u003c 2) {"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Description and date should separated by \\\"/at\\\"\");"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"        } else if (args.length \u003e 2) {"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please do not use \\\"/at\\\" multiple times!\");"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"            checkValidDate(args[1]);"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDone(String s) throws DukeInputException {"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"        if (s.length() \u003d\u003d 0) {"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please input a task number!\");"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"                int taskNum \u003d Integer.parseInt(s);"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException("},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"                        String.format(\"\\\"%s\\\" is not a valid number!\", s));"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDelete(String s) throws DukeInputException {"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"        if (s.length() \u003d\u003d 0) {"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please input a task number!\");"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"                int taskNum \u003d Integer.parseInt(s);"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException("},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"                        String.format(\"\\\"%s\\\" is not a valid number!\", s));"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"    private static void checkValidSearch(String s) throws DukeInputException {"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"        if (s.length() \u003d\u003d 0) {"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Enter a keyword to search!\");"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":157}},{"path":"src/main/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import static org.junit.Assert.assertThrows;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"    "},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    public void parseInputTest() {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"\"));"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"a\"));"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"a \"));"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"todo\"));"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline\"));"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline /by \"));"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline /by t /by a\"));"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event\"));"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event /at \"));"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event /at a /at b\"));"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done\"));"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done a\"));"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done 1a2\"));"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done     1\"));"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        "},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete\"));"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete a\"));"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete 1a2\"));"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete    1\"));"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    public void checkImportFormatTest() {"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"Z;1;a;2011-01-01\"));"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;3;;2011-01-01\"));"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;201-01-01\"));"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;2011-01-01;\"));"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;2011-01-01;b\"));"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;\"));"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;;2011-01-01\"));"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\";D;1;a;;2011-01-01\"));"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"a\"));"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"\"));"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":47}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"import java.io.FileWriter;"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":" * Storage to save tasklist to a text file."},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" * Default path is \"data/dukeData.txt\"."},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    private File file;"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    private static final String DEFAULT_PATH \u003d \"data/dukeData.txt\";"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"     * Create storage with default path \"data/dukeData.txt\"."},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    public Storage() {"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        file \u003d new File(DEFAULT_PATH);"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     * Create storage with custom path."},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    public Storage(String path) {"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        file \u003d new File(path);"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"     * Save tasklist to a text file."},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"     * @param taskList Current tasklist."},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"     * @throws DukeException If the file is invalid or cannot be open for any reason."},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    public void saveTaskList(List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        if (!file.getParentFile().exists()) {"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"            file.getParentFile().mkdir();"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        FileWriter fw;"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"            fw \u003d new FileWriter(file);"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"            for (Task t : taskList) {"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"                fw.write(String.join(\";\", t.exportData()) + \"\\n\");"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            fw.close();"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        } catch (IOException e) {"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"            throw new DukeException(\"Please delete \\\"data/dukeData.txt\\\" file and run this command again!\");"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     * Reads and returns tasklist from a text file."},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"     * @return List of tasks"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    public List\u003cTask\u003e loadTaskList() throws DukeException {"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        Scanner sc;"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"            sc \u003d new Scanner(file);"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"            throw new DukeException(\"No save found!\");"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"                Parser.checkImportFormat(input);"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"            } catch (DukeInputException e) {"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"                throw new DukeException(\"File incorrect format. Unable to load\");"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"            String[] s \u003d input.split(\";\");"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"            "},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"            switch (s[0]) {"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"            case \"T\":"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"                lst.add(Todo.importData(s));"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"            case \"D\":"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"                lst.add(Deadline.importData(s));"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"            case \"E\":"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"                lst.add(Event.importData(s));"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"        return lst;"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":98}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" * Represents a Task."},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" * Includes description of the task and an indicator of whether it is completed."},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    protected LocalDate date;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    public Task(String description) {"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        this.date \u003d null;"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    public Task(String description, LocalDate date) {"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     * Set task as completed."},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    public void completed() {"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        isDone \u003d true;"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    private String getStatus() {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        return isDone ? \"X\" : \" \";"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     * Returns description of task."},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     * @return Description of task."},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    public String getDescription() {"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        return description;"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s] %s\", getStatus(), description);"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"    protected abstract List\u003cString\u003e exportData();"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":53}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Wrapper class for tasklist."},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    private List\u003cTask\u003e lst;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"     * Creates empty tasklist."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     * Fills tasklist with contents of the given list."},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     * @param lst List of tasks."},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    public TaskList(List\u003cTask\u003e lst) {"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        this.lst \u003d new ArrayList\u003c\u003e(lst);"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     * Adds task to the tasklist."},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    public void addTask(Task t) {"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        lst.add(t);"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"     * Deletes task from the tasklist."},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     * @param i Index of task to be deleted."},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     * @return Task that has been deleted."},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If the given index is out of range."},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    public Task deleteTask(int i) throws DukeInputException {"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        Task t;"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"            t \u003d lst.get(i);"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"            lst.remove(i);"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(String.format(\"\\\"%d\\\" is an invalid number!\", i));"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        return t;"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"     * Marks task in tasklist as completed."},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"     * @param i Index of task that has been completed."},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"     * @return Task that has been completed."},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If the given index is out of range."},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    public Task completeTask(int i) throws DukeInputException {"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        Task t;"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"            t \u003d lst.get(i);"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(String.format(\"\\\"%d\\\" is an invalid number!\", i));"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        t.completed();"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        return t;"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"     * Convert tasks to a numbered list of strings."},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks."},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"    public List\u003cString\u003e listOutTask() {"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e stringlst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        int counter \u003d 1;"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        for (Task t : lst) {"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"            stringlst.add(String.format(\"%d. %s\", counter++, t.toString()));"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        "},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        return stringlst;"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"     * Returns size of tasklist."},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"     * @return Size of tasklist."},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"    public int size() {"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        return lst.size();"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks."},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"     * @return List of tasks."},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"    public List\u003cTask\u003e toList() {"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"        return new ArrayList\u003c\u003e(lst);"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks on the given date."},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"     * @param d Date of task."},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks with the following date."},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"    public List\u003cString\u003e searchByDate(LocalDate d) {"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"            if (d.equals(lst.get(i).date)) {"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"                results.add(String.format(\"%d. %s\", i + 1, lst.get(i).toString()));"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"        return results;"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks with the given keyword."},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"     * @param keyword Keyword to search."},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks containing the given keyword."},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"    public List\u003cString\u003e search(String keyword) {"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"            LocalDate date \u003d LocalDate.parse(keyword);"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"            return searchByDate(date);"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"            List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"            for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"                if (lst.get(i).getDescription().contains(keyword)) {"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"                    results.add(String.format(\"%d. %s\", i + 1, lst.get(i).toString()));"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"                }"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"    "},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"            return results;"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":143}},{"path":"src/main/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import static org.junit.Assert.assertThrows;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class TaskListTest {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    "},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    TaskList lst \u003d new TaskList();"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    public void deleteTaskTest() throws DukeException {"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Todo.createTodo(\"test\");"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        lst.addTask(t);"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        assertEquals(t, lst.deleteTask(0));"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(0));"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(-1));"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(100));"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    public void completeTaskTest() {"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.completeTask(0));"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.completeTask(-1));"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.completeTask(100));"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    public void listOutTaskTest() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"a\"));"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"b\"));"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e expected \u003d List.of(\"1. [T][ ] a\", \"2. [T][ ] b\");"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        assertEquals(expected.get(0), lst.listOutTask().get(0));"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        assertEquals(expected.get(1), lst.listOutTask().get(1));"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":41}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Represents a Todo task."},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"T\";"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating Todo task."},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"     * @param description Description of the task"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"     * @return A todo task"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException if description is empty"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    public static Todo createTodo(String description) throws DukeInputException {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        if (description.length() \u003d\u003d 0) {"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException(\"The description of Todo cannot be empty.\");"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        return new Todo(description);"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    private Todo(String description) {"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    private Todo(boolean isDone, String description) {"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        super(description);"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    "},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s\", TYPE, super.toString());"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"                description);"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    protected static Todo importData(String[] args) {"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        return new Todo(isDone, args[2]);"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":54}},{"path":"src/main/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import static org.junit.Assert.assertThrows;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"public class TodoTest {"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"    "},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    public void createTodoTest() {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Todo.createTodo(\"\"));"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":11}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" * Ui interacts with users to receive input and display output."},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"   "},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    private static final String BORDER_LINE \u003d \"\\t____________________________________________________________\";"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    private Scanner sc;"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    public Ui() {"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     * Reads input from user."},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     * @return String input."},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    public String readInput() {"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        return sc.nextLine();"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    private void echo(List\u003cString\u003e msgs) {"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        for (String s : msgs) {"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"            System.out.println(\"\\t  \" + s);"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    private void echoSingle(String msg) {"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        System.out.println(\"\\t  \" + msg);"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    private void echoBorder(List\u003cString\u003e msgs) {"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        System.out.println(BORDER_LINE);"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        echo(msgs);"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        System.out.println(BORDER_LINE);"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        System.out.println();"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    private void echoSingleBorder(String msg) {"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        System.out.println(BORDER_LINE);"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        echoSingle(msg);"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        System.out.println(BORDER_LINE);"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        System.out.println();"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     * Displays greeting messages when Duke starts."},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    public void greetings() {"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        System.out.println(LOGO);"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        echoBorder(List.of(\"Hello! I\u0027m Duke\","},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"                \"What can I do for you?\","},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"                \"Enter \\\"help\\\" to see list of commands.\"));"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     * Lists out commands and their functions."},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"    public void help() {"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        echoBorder(List.of(\"List of commands:\","},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"                \"bye\","},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"                \"- Close Duke\","},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"                \"list\","},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"                \"  - List out all task\","},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"                \"done [number]\","},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"                \"  - Mark selected task as done\","},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"                \"todo [description]\","},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"                \"  - Add a todo task\","},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"                \"deadline [description] /by [due date]\","},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"                \"  - Add a deadline task with a due date (YYYY-MM-DD)\","},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"                \"event [description] /at [date]\","},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"                \"  - Add a event task with a date (YYYY-MM-DD)\","},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"                \"delete [number]\","},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"                \"  - Delete a task\","},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"                \"save\","},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"                \"  - save checklist to \\\"data/dukeData.txt\\\"\","},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"                \"load\","},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"                \"  - Load previously saved checklist\","},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"                \"help\","},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"                \"  - Display list of commands\","},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"                \"search [keyword]\","},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"                \"  - Display all task containing the following keyword.\","},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"                \"  - If keyword is in a valid date format(YYYY-MM-DD), display all task on that date.\"));"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"     * Displays error messages."},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"     * @param e Error to be displayed."},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    public void displayError(DukeException e) {"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        echoSingleBorder(e.getMessage());"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"     * Displays goodbye message."},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"    public void exit() {"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"        echoSingleBorder(\"Bye. Hope to see you again soon!\");"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"     * Displays list contents."},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"     * @param lst List to be displayed."},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"    public void displayList(List\u003cString\u003e lst) {"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        if (lst.size() \u003d\u003d 0) {"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"            echoSingleBorder(\"No task found!\");"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"            System.out.println(BORDER_LINE);"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"            echoSingle(\"Here are the tasks in your list:\");"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"            echo(lst);"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"            System.out.println(BORDER_LINE);"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"            System.out.println();"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"     * Displays message after task is marked as done."},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"     * @param task Task  marked as done."},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"    public void completeTask(String task) {"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"        echoBorder(List.of(\"Nice! I\u0027ve marked this task as done:\", task));"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"     * Displays added task and the current number of task in the TaskList."},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"     * @param task Task added to TaskList."},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"     * @param size Current size of TaskList."},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"    public void addTask(String task, int size) {"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"        echoBorder(List.of(\"Got it. I\u0027ve added this task:\","},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"                task,"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"                \"Now you have \" + size + \" tasks in the list.\"));"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"     * Displays deleted task and the current number of task in the TaskList."},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"     * @param task Task deleted from TaskList."},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"     * @param size Current size of TaskList."},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"    public void deleteTask(String task, int size) {"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"        echoBorder(List.of(\"Noted. I\u0027ve removed this task:\","},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"                task,"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"                \"Now you have \" + size + \" tasks in the list.\"));"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"     * Displays messages after TaskList has been saved."},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"    public void saved() {"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"        echoSingleBorder(\"TaskList have been saved!\");"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"     * Displays messages after TaskList has been loaded."},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"    public void loaded() {"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"        echoSingleBorder(\"TaskList loaded successfully!\");"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":167}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"deadline return book /by 2021-06-06"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"event project meeting /at 2021-08-06"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"list"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"deadline return book /by 2021-01-24"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"event project meeting /at 2021-01-25"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"delete 5"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"invalidtest"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"deadline"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"event"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"done 100"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"load"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"save"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"load"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"help"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"search 2021-01-24"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"search book"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"bye"}],"authorContributionMap":{"garyljj":23}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"if exist .\\data\\dukeData.txt del .\\data\\dukeData.txt"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\DukeException.java ..\\src\\main\\java\\DukeInputException.java ..\\src\\main\\java\\Task.java ..\\src\\main\\java\\Todo.java ..\\src\\main\\java\\Deadline.java ..\\src\\main\\java\\Event.java ..\\src\\main\\java\\Parser.java ..\\src\\main\\java\\Ui.java ..\\src\\main\\java\\Storage.java ..\\src\\main\\java\\TaskList.java ..\\src\\main\\java\\Duke.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"garyljj":2,"-":20}}]
