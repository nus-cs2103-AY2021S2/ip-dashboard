[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"garyljj":17,"-":44}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":" * containing text from the speaker."},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"public class DialogBox extends HBox {"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    private Label dialog;"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    private ImageView displayPicture;"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.load();"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"            e.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        // dialog.setTextFill(Color.BLACK);"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        dialog.setBackground(new Background(new BackgroundFill(Color.WHITE, new CornerRadii(5.0), Insets.EMPTY)));"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        Circle c \u003d new Circle(32, 32, 32);"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        displayPicture.setClip(c);"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        dialog.setText(text);"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        displayPicture.setImage(img);"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    private void flip() {"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        Collections.reverse(tmp);"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     * Returns a DialogBox with a text message and an image display that represents the user."},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     * @param text Message in the dialog box."},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * @param img Image in the dialog box."},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     * @return Dialog box"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        return new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"     * Returns a flipped DialogBox with a text message and an image display that represents the bot."},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     * @param text Message in the dialog box."},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     * @param img Image in the dialog box."},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     * @return Dialog box"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        db.flip();"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        return db;"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":85}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import duke.util.Deadline;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import duke.util.DukeException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import duke.util.DukeInputException;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import duke.util.Event;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import duke.util.Parser;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import duke.util.Storage;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import duke.util.Task;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import duke.util.TaskList;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import duke.util.Todo;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import duke.util.Ui;"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":" * Duke is a task manager."},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":" * Currently supports these functionalities:"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003ebye"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Prompt user to save tasklist. Then closes Duke."},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003elist"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - List out all task"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003edone [number]"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Mark selected task as done"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003etodo [description]"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Add a todo task"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003edeadline [description] /by [due date]"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Add a deadline task with a due date (YYYY-MM-DD)"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003eevent [description] /at [date]"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Add a event task with a date (YYYY-MM-DD)"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003edelete [number]"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Delete a task"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003esave"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - save checklist to \"data/dukeData.txt\""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003eload"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Load previously saved checklist"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003ehelp"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Display list of commands"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003esearch [keyword/date]"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Display all task containing the following keyword."},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - If keyword is in a valid date format(YYYY-MM-DD), display all task on that date."},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    private Storage storage;"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"    private TaskList tasks;"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    private Ui ui;"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    private boolean isWaitingSaveFileResponse \u003d false;"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    private boolean isWaitingDeleteTaskResponse \u003d false;"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"    private int taskToBeDeleted;"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     * Constructor to create Duke object."},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"     * @param filePath File path to save tasklist."},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    public Duke(String filePath) {"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        ui \u003d new Ui();"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"            tasks \u003d new TaskList(storage.loadTaskList());"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        } catch (DukeException e) {"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"     * Processes user input and provides response."},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"     * @param input User input."},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"     * @return Duke response."},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    public String getResponse(String input) {"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        if (isWaitingSaveFileResponse) {"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"            return confirmSave(input);"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        if (isWaitingDeleteTaskResponse) {"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"            return confirmDelete(input);"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"            Parser.parseInput(input);"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        } catch (DukeInputException e) {"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"        String[] s \u003d input.split(\" \", 2);"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        String command \u003d s[0];"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        String args \u003d s.length \u003d\u003d 2 ? s[1] : \"\";"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"            switch (command) {"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"            case \"bye\":"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"                isWaitingSaveFileResponse \u003d true;"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"                return ui.saveFilePrompt();"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"            case \"list\":"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"                return ui.displayList(tasks.listOutTask());"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"            case \"done\":"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"                return completeTask(args);"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"            case \"todo\":"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"                return addTask(Todo.createTodo(args));"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"            case \"deadline\":"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"                return addTask(Deadline.createDeadline(args));"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"            case \"event\":"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"                return addTask(Event.createEvent(args));"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"            case \"delete\":"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"                taskToBeDeleted \u003d Integer.parseInt(args);"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"                isWaitingDeleteTaskResponse \u003d true;"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"                return ui.deleteTaskPrompt();"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"            case \"save\":"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"                storage.saveTaskList(tasks.getList());"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"                return ui.displaySaveMessage();"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"            case \"load\":"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"                tasks \u003d new TaskList(storage.loadTaskList());"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"                return ui.displayLoadMessage();"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"            case \"help\":"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"                return ui.help();"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"            case \"search\":"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"                return ui.displayList(tasks.search(args));"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"            default:"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"                // Should never reach here unless parser missed an invalid input."},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"                assert false : \"Parser missed an invalid input\";"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"        } catch (DukeException e) {"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"        throw new RuntimeException(\"ERROR in Duke\u0027s getResponse method\"); // Should never reach here;"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"    private String completeTask(String num) throws DukeInputException {"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"        int taskNum \u003d Integer.parseInt(num);"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"        Task t \u003d tasks.completeTask(taskNum - 1);"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"        return ui.completeTask(t.toString());"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"    private String addTask(Task t) {"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"        tasks.addTask(t);"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"        return ui.addTask(t.toString(), tasks.size());"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"    private String confirmDelete(String s) {"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"            Parser.parseYesNo(s);"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"        } catch (DukeInputException e) {"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"        isWaitingDeleteTaskResponse \u003d false;"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"        if (s.equals(\"y\")) {"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"            Task t;"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"                t \u003d tasks.deleteTask(taskToBeDeleted - 1);"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"            } catch (DukeInputException e) {"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"                return ui.displayError(e);"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"            return ui.deleteTask(t.toString(), tasks.size());"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"            return ui.abortDelete();"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"    private String confirmSave(String s) {"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"            Parser.parseYesNo(s);"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"        } catch (DukeInputException e) {"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"        isWaitingSaveFileResponse \u003d false;"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"        if (s.equals(\"y\")) {"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"                storage.saveTaskList(tasks.getList());"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"            } catch (DukeException e) {"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":"                return ui.displayError(e);"},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"        return \"shutdownConfirm\";"},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":183,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"garyljj"},"content":"     * Returns TaskList."},{"lineNumber":185,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"garyljj"},"content":"     * @return TaskList."},{"lineNumber":187,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"garyljj"},"content":"    protected ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":189,"author":{"gitId":"garyljj"},"content":"        return tasks.getList();"},{"lineNumber":190,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":192,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"garyljj"},"content":"     * Returns Duke\u0027s greeting messages."},{"lineNumber":194,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":195,"author":{"gitId":"garyljj"},"content":"     * @return Greeting messages."},{"lineNumber":196,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"garyljj"},"content":"    public String displayGreetings() {"},{"lineNumber":198,"author":{"gitId":"garyljj"},"content":"        return ui.displayGreetings();"},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"garyljj":198,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    private Duke duke \u003d new Duke(\"data/dukeData.txt\");"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     * The main entry point for the GUI."},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"     * Creates the scene, duke and display greetings."},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     * @param stage Window on which scene is set."},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    public void start(Stage stage) {"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"            SplitPane sp \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"            Scene scene \u003d new Scene(sp);"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"            stage.setScene(scene);"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showGreetings();"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"            stage.show();"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":39}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import duke.util.Task;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import javafx.util.Callback;"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"public class MainWindow extends SplitPane {"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    private VBox dialogContainer;"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    private TextField userInput;"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    private ListView\u003cTask\u003e listView;"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    private Duke duke;"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     * Initialize GUI properties."},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    public void initialize() {"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        listView.setCellFactory(new Callback\u003cListView\u003cTask\u003e, ListCell\u003cTask\u003e\u003e() {"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"            @Override"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"            public ListCell\u003cTask\u003e call(ListView\u003cTask\u003e list) {"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"                return new ListCell\u003c\u003e() {"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"                    @Override protected void updateItem(Task item, boolean empty) {"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"                        super.updateItem(item, empty);"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"                        setText(item \u003d\u003d null ? \"\" : (this.getIndex() + 1) + \". \" + item.toString());"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"                    }"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"                };"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        });"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"     * Initialise duke and add tasklist to listView."},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     * @param d Duke object."},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        duke \u003d d;"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        listView.setItems(duke.getTaskList());"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * Display greeting message on GUI."},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"    public void showGreetings() {"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"            DialogBox.getDukeDialog(duke.displayGreetings(), dukeImage)"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        );"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"    private void handleUserInput() {"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"        String input \u003d userInput.getText().strip();"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        if (input.isEmpty()) {"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"            return;"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"            DialogBox.getUserDialog(input, userImage),"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"            DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"        );"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        userInput.clear();"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"        if (response.equals(\"shutdownConfirm\")) {"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"            Platform.exit();"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":98}},{"path":"src/main/java/duke/util/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" * Represents an deadline task."},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"D\";"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    private Deadline(String description, LocalDate date) {"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    private Deadline(String description, LocalDate date, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating deadline task."},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     * @param input Description of the task and its due date."},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     *     Due date should be indicated after \"/by\"."},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     * @return A deadline task."},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If due date is missing."},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    public static Deadline createDeadline(String input) throws DukeInputException {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        String[] details \u003d input.split(\" /by \");"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        if (!input.contains(\"/by\") || details.length \u003d\u003d 1) {"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Due date is missing!\");"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        LocalDate date;"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"            date \u003d LocalDate.parse(details[1]);"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Wrong date format! Please use YYYY-MM-DD\");"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        return new Deadline(details[0], date);"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"     * Returns String in the form \"[Type] task\"."},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"     * @return String representation of Deadline."},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s (by: %s)\","},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"                TYPE,"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"                super.toString(),"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"                date.format(DateTimeFormatter.ofPattern(\"d MMM\")));"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * @return List of Deadline details."},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"                description,"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"                date.toString());"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"     * @param args Deadline details."},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"     * @return Deadline object."},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"    protected static Deadline importData(String[] args) {"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        return new Deadline(args[2], LocalDate.parse(args[3]), isDone);"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"     * Returns a new Deadline task marked as done."},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"     * @return A Deadline object."},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"    public Deadline markDone() {"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"        return new Deadline(description, date, true);"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":96}},{"path":"src/main/java/duke/util/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Thrown when errors occur in Duke."},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    public DukeException(String msg) {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"        super(\"OOPS!!! \" + msg);"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":10}},{"path":"src/main/java/duke/util/DukeInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Thrown when errors occurs due to input."},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"public class DukeInputException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    public DukeInputException(String msg) {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"        super(msg);"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":10}},{"path":"src/main/java/duke/util/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" * Represents an Event task."},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"E\";"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    private Event(String description, LocalDate date) {"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    private Event(String description, LocalDate date, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating Event task."},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     * @param input Description of the task and its date."},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     *     Date should be indicated after \"/at\"."},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     * @return An Event task."},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If date is missing or wrong format."},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    public static Event createEvent(String input) throws DukeInputException {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        String[] details \u003d input.split(\" /at \");"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        if (!input.contains(\"/at\") || details.length \u003d\u003d 1) {"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please include a date for the event!\");"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        LocalDate date;"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"            date \u003d LocalDate.parse(details[1]);"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Wrong date format! Please use YYYY-MM-DD\");"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        return new Event(details[0], date);"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"     * Returns String in the form \"[Type] task\"."},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"     * @return String representation of Event."},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s (at: %s)\","},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"                TYPE,"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"                super.toString(),"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"                date.format(DateTimeFormatter.ofPattern(\"d MMM\")));"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * @return List of Event details."},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"                description,"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"                date.toString());"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"     * @param args Event details."},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"     * @return Event object."},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"    protected static Event importData(String[] args) {"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        return new Event(args[2], LocalDate.parse(args[3]), isDone);"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"     * Returns a new Event task marked as done."},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"     * @return An Event object."},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"    public Event markDone() {"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"        return new Event(description, date, true);"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":96}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Parser checks for invalid input."},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"     * Checks if input from user is valid."},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"     * \u003cbr\u003eOnly accepts valid commands, followed by valid parameters."},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     * @param input Input from user."},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If input is invalid."},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    public static void parseInput(String input) throws DukeInputException {"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        String[] s \u003d input.split(\" \", 2);"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        String command \u003d s[0];"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        String args \u003d s.length \u003d\u003d 2 ? s[1] : \"\";"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        switch (command) {"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        case \"bye\":"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        case \"list\":"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        case \"done\":"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"            checkValidDone(args);"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        case \"todo\":"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"            checkValidTodo(args);"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        case \"deadline\":"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            checkValidDeadline(args);"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        case \"event\":"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"            checkValidEvent(args);"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        case \"delete\":"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"            checkValidDelete(args);"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        case \"save\":"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        case \"load\":"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        case \"help\":"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        case \"search\":"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            checkValidSearch(args);"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        default:"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     * Checks if input from text file is valid."},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"     * @param input Line from saved file."},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If input is invalid."},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"    public static void checkImportFormat(String input) throws DukeInputException {"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        String[] s \u003d input.split(\";\", 3);"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        if (s.length \u003d\u003d 3 \u0026\u0026 (s[1].equals(\"0\") || s[1].equals(\"1\"))) {"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"            String[] args \u003d s[2].split(\";\", 2);"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"            switch (s[0]) {"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"            case \"T\":"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"                checkValidTodo(args[0]);"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"            case \"D\":"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"                checkValidDeadline(String.join(\" /by \", args));"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"            case \"E\":"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"                checkValidDeadline(String.join(\" /at \", args));"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"            default:"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException(\"Not a valid Task type\");"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Incorrect format\");"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDate(String s) throws DukeInputException {"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"            LocalDate.parse(s);"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException("},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"                String.format(\"\\\"%s\\\" is a wrong date format! Please use YYYY-MM-DD format.\", s));"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"    private static void checkValidTodo(String s) throws DukeInputException {"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"        if (s.length() \u003d\u003d 0) {"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please include a description of the Todo!\");"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDeadline(String s) throws DukeInputException {"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"        String[] args \u003d s.split(\" /by \");"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"        if (args.length \u003c 2) {"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Description and duedate should be separated by \\\"/by\\\"\");"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"        } else if (args.length \u003e 2) {"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please do not use \\\"/by\\\" multiple times!\");"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"            checkValidDate(args[1]);"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"    private static void checkValidEvent(String s) throws DukeInputException {"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"        String[] args \u003d s.split(\" /at \");"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"        if (args.length \u003c 2) {"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Description and date should separated by \\\"/at\\\"\");"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"        } else if (args.length \u003e 2) {"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please do not use \\\"/at\\\" multiple times!\");"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"            checkValidDate(args[1]);"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDone(String s) throws DukeInputException {"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"        if (s.length() \u003d\u003d 0) {"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please input a task number!\");"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"                Integer.parseInt(s);"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException("},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"                        String.format(\"\\\"%s\\\" is not a valid number!\", s));"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDelete(String s) throws DukeInputException {"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"        if (s.length() \u003d\u003d 0) {"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please input a task number!\");"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"                Integer.parseInt(s);"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException("},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"                        String.format(\"\\\"%s\\\" is not a valid number!\", s));"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"    private static void checkValidSearch(String s) throws DukeInputException {"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"        if (s.length() \u003d\u003d 0) {"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Enter a keyword to search!\");"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"     * Checks if input is either a \"y\" (yes) or \"n\" (no)."},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"     * @param s Input from user."},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If input is neither a \"y\" or \"n\"."},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"    public static void parseYesNo(String s) throws DukeInputException {"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"        if (!(s.equals(\"y\") || s.equals(\"n\"))) {"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Invalid input! Please key in either \\\"y\\\" or \\\"n\\\"\");"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":172}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":" * Storage to save tasklist to a text file."},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" * Default path is \"data/dukeData.txt\"."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    private static final String DEFAULT_PATH \u003d \"data/dukeData.txt\";"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    private File file;"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     * Create storage with default path \"data/dukeData.txt\"."},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    public Storage() {"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        file \u003d new File(DEFAULT_PATH);"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     * Create storage with custom path."},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * @param path Path of file."},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    public Storage(String path) {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        file \u003d new File(path);"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     * Save tasklist to a text file."},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     * @param taskList Current tasklist."},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     * @throws DukeException If the file is invalid or cannot be open for any reason."},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    public void saveTaskList(List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        if (!file.getParentFile().exists()) {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"            file.getParentFile().mkdir();"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        FileWriter fw;"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"            fw \u003d new FileWriter(file);"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            for (Task t : taskList) {"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"                fw.write(String.join(\";\", t.exportData()) + \"\\n\");"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"            fw.close();"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        } catch (IOException e) {"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"            throw new DukeException(\"Please delete \\\"data/dukeData.txt\\\" file and run this command again!\");"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     * Reads and returns tasklist from a text file."},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * @return List of tasks"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"    public List\u003cTask\u003e loadTaskList() throws DukeException {"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        Scanner sc;"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"            sc \u003d new Scanner(file);"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"            throw new DukeException(\"No save found!\");"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"                Parser.checkImportFormat(input);"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"            } catch (DukeInputException e) {"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"                throw new DukeException(\"File incorrect format. Unable to load\");"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"            String[] s \u003d input.split(\";\");"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"            switch (s[0]) {"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"            case \"T\":"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"                lst.add(Todo.importData(s));"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"            case \"D\":"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"                lst.add(Deadline.importData(s));"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"            case \"E\":"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"                lst.add(Event.importData(s));"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"                break;"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"            default:"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"                // Should never reach here unless parser missed an invalid input."},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"                assert false : \"Parser missed an invalid input\";"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"        return lst;"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":106}},{"path":"src/main/java/duke/util/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Represents a Task."},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Includes description of the task and an indicator of whether it is completed."},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"public abstract class Task {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    protected String description;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    protected LocalDate date;"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"     * Constructor to create a Task with a description."},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"     * @param description Description of the task."},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    public Task(String description) {"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        this.date \u003d null;"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     * Constructor to create a Task with a description and a date."},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     * @param description Description of the task."},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * @param date Date of the task."},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    public Task(String description, LocalDate date) {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        this.description \u003d description;"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d false;"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        this.date \u003d date;"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     * Returns a new task marked as done."},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    public abstract Task markDone();"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    private String getStatus() {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        return isDone ? \"X\" : \" \";"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"     * Returns description of task."},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"     * @return Description of task."},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"    public String getDescription() {"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        return description;"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"     * Returns String in the form \"[status] description\"."},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     * @return String representation of Task."},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s] %s\", getStatus(), description);"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     * @return List of task details."},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    protected abstract List\u003cString\u003e exportData();"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":72}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":" * Wrapper class for tasklist."},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    private ObservableList\u003cTask\u003e lst;"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"     * Creates empty tasklist."},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        lst \u003d FXCollections.observableArrayList();"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     * Fills tasklist with contents of the given list."},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     * @param lst List of tasks."},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    public TaskList(List\u003cTask\u003e lst) {"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        this.lst \u003d FXCollections.observableArrayList(lst);"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"     * Adds task to the tasklist."},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    public void addTask(Task t) {"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        lst.add(t);"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"     * Deletes task from the tasklist."},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"     * @param i Index of task to be deleted."},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"     * @return Task that has been deleted."},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If the given index is out of range."},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    public Task deleteTask(int i) throws DukeInputException {"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        Task t;"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            t \u003d lst.get(i);"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            lst.remove(i);"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(String.format(\"\\\"%d\\\" is an invalid number!\", i - 1));"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        return t;"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"     * Marks task in tasklist as completed."},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     * @param i Index of task that has been completed."},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     * @return Task that has been completed."},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If the given index is out of range."},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    public Task completeTask(int i) throws DukeInputException {"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        Task t;"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"            t \u003d lst.get(i);"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(String.format(\"\\\"%d\\\" is an invalid number!\", i - 1));"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        Task completedTask \u003d t.markDone();"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        lst.set(i, completedTask);"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        return completedTask;"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"     * Convert tasks to a numbered list of strings."},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks."},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"    public List\u003cString\u003e listOutTask() {"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e stringlst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        int counter \u003d 1;"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"        for (Task t : lst) {"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"            stringlst.add(String.format(\"%d. %s\", counter++, t.toString()));"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"        return stringlst;"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"     * Returns size of tasklist."},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"     * @return Size of tasklist."},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"    public int size() {"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"        return lst.size();"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks."},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"     * @return List of tasks."},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"    public ObservableList\u003cTask\u003e getList() {"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        return lst;"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks on the given date."},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"     * @param d Date of task."},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks with the following date."},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"    private List\u003cString\u003e searchByDate(LocalDate d) {"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"            if (d.equals(lst.get(i).date)) {"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"                results.add(String.format(\"%d. %s\", i + 1, lst.get(i).toString()));"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"        return results;"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks with the given keyword."},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"     * \u003cbr\u003eIf keyword is in a valid LocalDate format (YYYY-MM-DD), search by date, else search by keyword."},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"     * @param keyword Keyword to search."},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks containing the given keyword."},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"    public List\u003cString\u003e search(String keyword) {"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"            LocalDate date \u003d LocalDate.parse(keyword);"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"            return searchByDate(date);"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"            List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"            for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"                if (lst.get(i).getDescription().contains(keyword)) {"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"                    results.add(String.format(\"%d. %s\", i + 1, lst.get(i).toString()));"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"                }"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"            return results;"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":158}},{"path":"src/main/java/duke/util/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" * Represents a Todo task."},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"T\";"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    private Todo(String description) {"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    private Todo(String description, boolean isDone) {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating Todo task."},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"     * @param description Description of the task"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     * @return A todo task"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException if description is empty"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    public static Todo createTodo(String description) throws DukeInputException {"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        if (description.length() \u003d\u003d 0) {"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"The description of Todo cannot be empty.\");"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        return new Todo(description);"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"     * Returns String in the form \"[Type] task\"."},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     * @return String representation of Todo."},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s\", TYPE, super.toString());"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"     * @return List of Todo details."},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"                description);"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     * @param args Todo details."},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"     * @return Todo object."},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    protected static Todo importData(String[] args) {"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        return new Todo(args[2], isDone);"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     * Returns a new Todo task marked as done."},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"     * @return A Todo object."},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"    public Todo markDone() {"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"        return new Todo(description, true);"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":77}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" * Ui interacts with users to receive input and display output."},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    private String echo(String... msgs) {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        String msg \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        for (String s : msgs) {"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"            msg +\u003d s + \"\\n\";"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        return msg;"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     * Returns greeting messages when Duke starts."},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     * @return Greeting message."},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    public String displayGreetings() {"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        return echo(\"Hello! I\u0027m Duke\","},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"                \"What can I do for you?\","},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"                \"Enter \\\"help\\\" to see list of commands.\");"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * Lists out commands and their functions."},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     * @return Help message."},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    public String help() {"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        return echo(\"List of commands:\","},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"                \"bye\","},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"                \"- Close Duke\","},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"                \"list\","},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"                \"  - List out all task\","},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"                \"done [number]\","},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"                \"  - Mark selected task as done\","},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"                \"todo [description]\","},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"                \"  - Add a todo task\","},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"                \"deadline [description] /by [due date]\","},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"                \"  - Add a deadline task with a due date (YYYY-MM-DD)\","},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"                \"event [description] /at [date]\","},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"                \"  - Add a event task with a date (YYYY-MM-DD)\","},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"                \"delete [number]\","},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"                \"  - Delete a task\","},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"                \"save\","},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"                \"  - save checklist to \\\"data/dukeData.txt\\\"\","},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"                \"load\","},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"                \"  - Load previously saved checklist\","},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"                \"help\","},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"                \"  - Display list of commands\","},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"                \"search [keyword]\","},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"                \"  - Display all task containing the following keyword.\","},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"                \"  - If keyword is in a valid date format(YYYY-MM-DD), display all task on that date.\");"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     * Returns error messages."},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     * @param e Error to be displayed."},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     * @return Error message."},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    public String displayError(DukeException e) {"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        return e.getMessage();"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"     * Returns goodbye message."},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"     * @return Goodbye message."},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"    public String exit() {"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     * Returns list contents."},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"     * @param lst List to be displayed."},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"     * @return Content of list."},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    public String displayList(List\u003cString\u003e lst) {"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        if (lst.size() \u003d\u003d 0) {"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"            return \"No task found!\";"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"            return \"Here are the tasks in your list:\\n\" + echo(lst.toArray(new String[0]));"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"     * Returns message after task is marked as done."},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"     * @param task Task marked as done."},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"     * @return Task done message."},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"    public String completeTask(String task) {"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"        return echo(\"Nice! I\u0027ve marked this task as done:\", task);"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"     * Returns added task and the current number of task in the TaskList."},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"     * @param task Task added to TaskList."},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"     * @param size Current size of TaskList."},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"     * @return Add task message."},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"    public String addTask(String task, int size) {"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"        return echo(\"Got it. I\u0027ve added this task:\","},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"                task,"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"                \"Now you have \" + size + \" tasks in the list.\");"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"     * Returns deleted task and the current number of task in the TaskList."},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"     * @param task Task deleted from TaskList."},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"     * @param size Current size of TaskList."},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"     * @return Delete task message."},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"    public String deleteTask(String task, int size) {"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"        return echo(\"Noted. I\u0027ve removed this task:\","},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"                task,"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"                \"Now you have \" + size + \" tasks in the list.\");"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"     * Returns messages after TaskList has been saved."},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"     * @return TaskList saved message."},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"    public String displaySaveMessage() {"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"        return \"TaskList have been saved!\";"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"     * Returns messages after TaskList has been loaded."},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"     * @return TaskList loaded message."},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"    public String displayLoadMessage() {"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"        return \"TaskList loaded successfully!\";"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"     * Prompts user to save file."},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"     * @return Save file message."},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"    public String saveFilePrompt() {"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"        return \"Do you want to save the current tasklist? y/n\";"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"     * Confirms if user want to delete this task."},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"     * @return Delete task confirmation message."},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"    public String deleteTaskPrompt() {"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"        return \"Are you sure you want to delete this task? y/n\";"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"     * Returns delete aborted message."},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"     * @return Cancel delete task message."},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"    public String abortDelete() {"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"        return \"Deletion cancelled.\";"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":174}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.effect.DropShadow?\u003e"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"275.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"         \u003ceffect\u003e"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"            \u003cDropShadow blurType\u003d\"ONE_PASS_BOX\" color\u003d\"#0000004d\" height\u003d\"1.0\" offsetX\u003d\"1.0\" offsetY\u003d\"1.0\" radius\u003d\"0.0\" width\u003d\"0.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"         \u003c/effect\u003e\u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"64.0\" fitWidth\u003d\"64.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"  \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"  \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"  \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"garyljj":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"\u003cSplitPane dividerPositions\u003d\"0.3\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"   \u003citems\u003e"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"      \u003cListView fx:id\u003d\"listView\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"      \u003cAnchorPane\u003e"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        \u003cchildren\u003e"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"          \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"          \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"          \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"498.4\" prefWidth\u003d\"386.4\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"            \u003ccontent\u003e"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"              \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"            \u003c/content\u003e"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"          \u003c/ScrollPane\u003e"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        \u003c/children\u003e"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"      \u003c/AnchorPane\u003e"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"   \u003c/items\u003e"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"\u003c/SplitPane\u003e"}],"authorContributionMap":{"garyljj":26}},{"path":"src/test/java/duke/util/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    public void createDeadlineTest() throws DukeInputException {"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"\"));"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a\"));"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a /by\"));"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a /by 1\"));"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a 2011-01-01\"));"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Deadline.createDeadline(\"a/by2011-01-01\"));"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Deadline.createDeadline(\"testing /by 2011-01-01\");"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][ ] testing (by: 1 Jan)\", t.toString());"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        t \u003d t.markDone();"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][X] testing (by: 1 Jan)\", t.toString());"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":24}},{"path":"src/test/java/duke/util/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class EventTest {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    public void createEventTest() throws DukeInputException {"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"\"));"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a\"));"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a /at\"));"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a /at 1\"));"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a 2011-01-01\"));"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Event.createEvent(\"a/at2011-01-01\"));"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Event.createEvent(\"testing /at 2011-01-01\");"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[E][ ] testing (at: 1 Jan)\", t.toString());"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        t \u003d t.markDone();"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[E][X] testing (at: 1 Jan)\", t.toString());"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":24}},{"path":"src/test/java/duke/util/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    public void parseInputTest() {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"\"));"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"a\"));"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"a \"));"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"todo\"));"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline\"));"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline /by \"));"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline /by t /by a\"));"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event\"));"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event /at \"));"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event /at a /at b\"));"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done\"));"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done a\"));"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done 1a2\"));"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done     1\"));"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete\"));"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete a\"));"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete 1a2\"));"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete    1\"));"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"search\"));"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    public void checkImportFormatTest() {"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"Z;1;a;2011-01-01\"));"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;3;;2011-01-01\"));"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;201-01-01\"));"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;2011-01-01;\"));"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;2011-01-01;b\"));"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;\"));"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"D;1;a;;2011-01-01\"));"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\";D;1;a;;2011-01-01\"));"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"a\"));"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.checkImportFormat(\"\"));"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"    public void parseYesNoTest() {"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseYesNo(\"\"));"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseYesNo(\"a\"));"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":57}},{"path":"src/test/java/duke/util/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class TaskListTest {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    private TaskList lst;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    public void deleteTaskTest() throws DukeException {"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Todo.createTodo(\"test\");"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        lst.addTask(t);"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        assertEquals(t, lst.deleteTask(0));"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(0));"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(-1));"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(100));"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    public void completeTaskTest() {"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.completeTask(0));"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.completeTask(-1));"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.completeTask(100));"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    public void listOutTaskTest() throws DukeException {"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"a\"));"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"b\"));"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"1. [T][ ] a\", lst.listOutTask().get(0));"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"2. [T][ ] b\", lst.listOutTask().get(1));"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    public void searchTest() throws DukeInputException {"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"a\"));"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"b\"));"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Deadline.createDeadline(\"a /by 2011-01-01\"));"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Deadline.createDeadline(\"b /by 2011-02-02\"));"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"1. [T][ ] a\", lst.search(\"a\").get(0));"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"3. [D][ ] a (by: 1 Jan)\", lst.search(\"a\").get(1));"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"3. [D][ ] a (by: 1 Jan)\", lst.search(\"2011-01-01\").get(0));"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"4. [D][ ] b (by: 2 Feb)\", lst.search(\"2011-02-02\").get(0));"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        assertEquals(0, lst.search(\"test\").size());"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":60}},{"path":"src/test/java/duke/util/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class TodoTest {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    public void createTodoTest() throws DukeInputException {"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e Todo.createTodo(\"\"));"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Todo.createTodo(\"testing\");"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][ ] testing\", t.toString());"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        t \u003d t.markDone();"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][X] testing\", t.toString());"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"deadline return book /by 2021-06-06"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"event project meeting /at 2021-08-06"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"list"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"deadline return book /by 2021-01-24"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"event project meeting /at 2021-01-25"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"delete 5"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"y"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"invalidtest"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"todo"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"deadline"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"event"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"done 100"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"load"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"save"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"load"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"help"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"search 2021-01-24"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"search book"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"bye"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"no"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"n"}],"authorContributionMap":{"garyljj":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"if exist .\\data\\dukeData.txt del .\\data\\dukeData.txt"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"del .\\data\\dukeData.txt"}],"authorContributionMap":{"garyljj":5,"-":19}}]
