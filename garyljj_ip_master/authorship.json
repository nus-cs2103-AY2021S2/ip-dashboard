[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"## User Guide"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"More info in the User Guide [here](https://garyljj.github.io/ip/)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"## Acknowledgements"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [JUnit5](https://github.com/junit-team/junit5)"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"* Profile images: Icon made by [Freepik](https://www.freepik.com) from [www.flaticon.com](https://www.flaticon.com/)"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"* Background image: Background vector created by renata.s - [www.freepik.com](https://www.freepik.com)"}],"authorContributionMap":{"garyljj":7,"-":6}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    // enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"garyljj":18,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"* Table of Contents"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"{:toc}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"## Quick start"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"1. Download the latest `Duke.jar` [here](https://github.com/garyljj/ip/releases)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your Duke."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"1. Double-click the file to start the app. A GUI similar to the example below should appear in a few seconds.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"Note: the example below contains some [sample data](#sample-data-sample).\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"![Ui](./Ui.png)"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"1. Type the command in the command box and press Enter to execute it.\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"Some examples to start off:"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"   * Typing `help` will list out all available commands."},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"   * Typing `sample` will fill Duke with some sample data."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"**Notes about the command format:**\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"* Words in `UPPER_CASE` are parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"  e.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo buy eggs`."},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"* Items in square brackets `[]` are optional.\u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"  e.g `done INDEX [INDEX...]` can be used as `done 1` or as `done 1 2`."},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"  e.g. `[INDEX...]` can be used as ` ` (i.e. 0 times), `1`, `1 2 3` etc."},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"* Items in curly bracket `{}`​ are mutually exclusive.\u003cbr\u003e"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"  e.g. `search {KEYWORD | DATE}` can only be used as either `search KEYWORD` or `search DATE`."},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"### Viewing help `help`"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"Format: `help`"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"Shows all available commands."},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"### Adding tasks `todo`, `deadline`, `event`"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"Format: `todo DESCRIPTION`, `deadline DESCRIPTION /by DATE`, `event DESCRIPTION /at DATE`"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"Adds a task to the tasklist.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"Current supports 3 types of tasks:"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"1. `todo`"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"   * A todo task is simply a task with a description."},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"1. `deadline`"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"   * A deadline task has a description and a due date."},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"   * `DATE` must be in the valid format `YYYY-MM-DD`."},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"1. `event`"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"   * An event task has a description and a date."},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"   * `DATE` must be in the valid format `YYYY-MM-DD`."},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"Examples:"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"* `todo buy eggs`"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"* `deadline do math homework /by 2021-01-01`"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"* `event meeting with friends /at 2021-01-01`"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"### Listing all tasks `list`"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"Format: `list`"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"Shows a list of all tasks."},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"### Deleting tasks `delete`, `clear`"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"Format: `delete INDEX [INDEX...]`, `clear`"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"There are 2 ways to delete tasks:"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"1. `delete`"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"   * Deletes the task at the given `INDEX`."},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"   * `INDEX` must be a valid number."},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"   * You can delete multiple tasks by listing out the indexes eg. `delete 1 2 3`."},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"2. `clear`"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"   * Clears all tasks."},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"A prompt for delete confirmation will be given."},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"### Completing tasks `done`"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"Format: `done INDEX [INDEX...]`"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"After completing a tasks, you can mark it as done.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"Incomplete tasks are marked with `[ ]`\u003cbr\u003e"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"Completed tasks are marked with `[X]`."},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"### Task priority `highpriority`, `lowpriority` "},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"Format: `highpriority INDEX`, `lowpriorty INDEX`"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"Set a task to high or low priorty"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"* Newly added tasks are set to low priority by default."},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"* High priority tasks appear as yellow in the [listviewer](#listviewer)."},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"* High priority tasks will have an extra label \"IMPT!\""},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"* High priority tasks will be pushed to top of tasklist upon [sort](#sorting-tasklist-sort)."},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"### Exiting the program `bye`"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"Format: `bye`"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"Exits the program."},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"A prompt to save current tasklist will be given."},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"### Saving tasklist `save`"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"Format: `save`"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"Saves the current tasklist into `[JAR file location]/data/dukeData.txt`."},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"### Loading tasklist `load`"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"Format: `load`"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"Load a previously saved tasklist from `[JAR file location]/data/dukeData.txt`.\u003cbr\u003e"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"Duke will automatically load data from this location on startup, if it is available.\u003cbr\u003e"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"**Warning**: If this file is edited into an invalid format, Duke will start up with an empty tasklist."},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"### Sorting tasklist `sort`"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"Format: `sort`"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"Sorts the tasklist with the following order:"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"1. High priority task"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"1. Incomplete task"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"1. Todo task"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"1. Task with eariler date"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"1. Lexicographically"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"### Sample data `sample`"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"Format: `sample`"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"Fills Duke with sample data for new users to get a feel of the task manager.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"**Warning**: Calling `sample` will overwrite any current tasks in the tasklist."},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"### Searching for tasks by name or date `search`"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"Format: `search {KEYWORD | DATE}`"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"Shows a list of tasks which matches the keyword or falls on the given date."},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"1. Search by `KEYWORD`"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"   * It is case-insensitive. eg. `book` will match `Book`."},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"   * It can match partially. eg. `return b` will match `Return Book`."},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"2. Search by `DATE`"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"   * `DATE` must be in the valid format `YYYY-MM-DD`."},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"   * All deadline tasks due on the given `DATE` will be matched."},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"   * All event tasks happening on the given `DATE` will be matched."},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"Examples:"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"* `search book`"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"* `search 2021-01-01`"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"### Listviewer"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"Has a convenient list display on the left of the gui."},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"* Contains all tasks and their index number."},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"* High priority task are in yellow."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"### Keyboard shortcuts"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"1. `ESC` key"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"  * Clears input."},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"1. `UP`, `DOWN` arrow keys"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"  * Scroll through input history."},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"## Command summary"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"Action | Format, Examples"},{"lineNumber":183,"author":{"gitId":"garyljj"},"content":"-|-"},{"lineNumber":184,"author":{"gitId":"garyljj"},"content":"**bye** | `bye`"},{"lineNumber":185,"author":{"gitId":"garyljj"},"content":"**clear** | `clear`"},{"lineNumber":186,"author":{"gitId":"garyljj"},"content":"**deadline** | `deadline DESCRIPTION /by DATE`\u003cbr\u003eeg. `deadline do math homework /by 2021-01-01`"},{"lineNumber":187,"author":{"gitId":"garyljj"},"content":"**delete** | `delete INDEX [INDEX...]`\u003cbr\u003eeg. `delete 1`, `delete 1 2 3`"},{"lineNumber":188,"author":{"gitId":"garyljj"},"content":"**done** | `help`"},{"lineNumber":189,"author":{"gitId":"garyljj"},"content":"**event** | `event DESCRIPTION /at DATE`\u003cbr\u003eeg. `event meeting with friends /at 2021-01-01`"},{"lineNumber":190,"author":{"gitId":"garyljj"},"content":"**help** | `help`"},{"lineNumber":191,"author":{"gitId":"garyljj"},"content":"**highpriority** | `highpriority INDEX`\u003cbr\u003eeg. `highpriority 1`"},{"lineNumber":192,"author":{"gitId":"garyljj"},"content":"**list** | `list`"},{"lineNumber":193,"author":{"gitId":"garyljj"},"content":"**load** | `load`"},{"lineNumber":194,"author":{"gitId":"garyljj"},"content":"**lowpriority** | `lowpriority INDEX`\u003cbr\u003eeg. `lowpriority 1`"},{"lineNumber":195,"author":{"gitId":"garyljj"},"content":"**sample** | `sample`"},{"lineNumber":196,"author":{"gitId":"garyljj"},"content":"**save** | `save`"},{"lineNumber":197,"author":{"gitId":"garyljj"},"content":"**search** | `search {KEYWORD | DATE}`\u003cbr\u003eeg. `search abc`, `search 2021-01-01`"},{"lineNumber":198,"author":{"gitId":"garyljj"},"content":"**sort** | `sort`"},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"**todo** | `todo DESCRIPTION`\u003cbr\u003eeg. `todo read book`"}],"authorContributionMap":{"garyljj":181,"-":18}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"import duke.gui.Main;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class Launcher {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":11}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import duke.util.Command;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import duke.util.Deadline;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import duke.util.DukeException;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import duke.util.DukeInputException;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import duke.util.Event;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import duke.util.Pair;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import duke.util.Parser;"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import duke.util.SampleData;"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import duke.util.Storage;"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import duke.util.Task;"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import duke.util.TaskList;"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import duke.util.Todo;"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import duke.util.Ui;"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":" * Duke is a task manager."},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":" * Currently supports these functionalities:"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003ebye"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Prompt user to save tasklist. Then closes Duke."},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003eclear"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Clear all current tasks and start a new tasklist"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003edeadline DESCRIPTION /by DATE"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Add a deadline task with a due date (YYYY-MM-DD)"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003edelete INT [INT...]"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Delete one or more tasks eg. (delete 1 2 3)"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003edone INT [INT...]"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Mark one or more tasks as done eg. (done 1 2 3)"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003eevent DESCRIPTION /at DATE"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Add an event task with a date (YYYY-MM-DD)"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003ehelp"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Display list of commands"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003ehighpriority INDEX"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Set this task as high priority"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003elist"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - List out all tasks"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003eload"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Load tasklist from saved file"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003elowpriority INDEX"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Set this task as low priority"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003esample"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Load some sample data"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003esave"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - save tasklist to \"data/dukeData.txt\""},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003esearch {KEYWORD | DATE}"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Display all task containing the following keyword."},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - If keyword is in a valid date format(YYYY-MM-DD), display all task on that date."},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003esort"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Order tasklist in the following priority"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e    1. High Priority task"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e    2. Incomplete task"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e    3. Todo task"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e    4. Eariler date"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e    5. Lexicographically\";"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003etodo DESCRIPTION"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e  - Add a todo task"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    private Storage storage;"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"    private TaskList tasks;"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    private Ui ui;"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    private boolean isWaitingSaveFileResponse \u003d false;"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"    private boolean isWaitingDeleteTaskResponse \u003d false;"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    private boolean isWaitingDeleteAllResponse \u003d false;"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"    private int[] indexOfTasksToBeDeleted;"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"     * Constructor to create Duke object."},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     * @param filePath Path to saved file."},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"    public Duke(String filePath) {"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        ui \u003d new Ui();"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"            tasks.load(storage.loadTaskList());"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"        } catch (DukeException e) {"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"            // Save file missing/invalid so no file loaded"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"     * Processes user input and provides response."},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"     * @param input User input."},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"     * @return Duke response."},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    public String getResponse(String input) {"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"        if (isWaitingSaveFileResponse) {"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"            return confirmSave(input);"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"        if (isWaitingDeleteTaskResponse) {"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"            return confirmDelete(input);"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        if (isWaitingDeleteAllResponse) {"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"            return confirmClear(input);"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"            return processCommand(Parser.parseInput(input));"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        } catch (DukeInputException e) {"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"     * Returns TaskList."},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"     * @return TaskList."},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"    public TaskList getTaskList() {"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"        return tasks;"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"     * Returns Duke\u0027s greeting messages."},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"     * @return Greeting messages."},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"    public String displayGreetings() {"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"        return ui.displayGreetings();"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"    private String processCommand(Pair\u003cCommand, String\u003e instruction) {"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"        Command command \u003d instruction.getFirst();"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"        String args \u003d instruction.getSecond();"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"        if (args.equals(\"-h\")) {"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"            return command.getHelp();"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"            switch(command) {"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"            case BYE:"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"                return exit();"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"            case CLEAR:"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"                return clearAllTasks();"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"            case DEADLINE:"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"                return addTask(Deadline.createDeadline(args));"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"            case DELETE:"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"                return deleteTask(args);"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"            case DONE:"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"                return completeTask(args);"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"            case EVENT:"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"                return addTask(Event.createEvent(args));"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"            case HELP:"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"                return displayHelp();"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"            case HIGHPRIORITY:"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"                return setHighPriority(args);"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"            case LIST:"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"                return listOutTask();"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"            case LOAD:"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"                return load();"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"            case LOWPRIORITY:"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"                return setLowPriority(args);"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"            case SAMPLE:"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"                return loadSampleData();"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"            case SAVE:"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"                return save();"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"            case SEARCH:"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"                return search(args);"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"            case SORT:"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"                return sort();"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"            case TODO:"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":"                return addTask(Todo.createTodo(args));"},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"            default:"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"                // Should never reach here"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"                assert false : \"Missed out command in processCommand()\";"},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"                return \"\";"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"garyljj"},"content":"        } catch (DukeException e) {"},{"lineNumber":184,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":185,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":188,"author":{"gitId":"garyljj"},"content":"    private String completeTask(String num) throws DukeInputException {"},{"lineNumber":189,"author":{"gitId":"garyljj"},"content":"        // -1 to convert input to zero based"},{"lineNumber":190,"author":{"gitId":"garyljj"},"content":"        int[] tasksNum \u003d Arrays.stream(num.split(\" \"))"},{"lineNumber":191,"author":{"gitId":"garyljj"},"content":"                .mapToInt(x -\u003e Integer.parseInt(x) - 1)"},{"lineNumber":192,"author":{"gitId":"garyljj"},"content":"                .toArray();"},{"lineNumber":193,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":194,"author":{"gitId":"garyljj"},"content":"        String[] completedTasks \u003d tasks.completeTask(tasksNum);"},{"lineNumber":195,"author":{"gitId":"garyljj"},"content":"        return ui.displayCompletedTask(completedTasks);"},{"lineNumber":196,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":198,"author":{"gitId":"garyljj"},"content":"    private String addTask(Task task) {"},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"        tasks.addTask(task);"},{"lineNumber":200,"author":{"gitId":"garyljj"},"content":"        return ui.displayAddedTask(task.toString(), tasks.size());"},{"lineNumber":201,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":203,"author":{"gitId":"garyljj"},"content":"    private String deleteTask(String num) {"},{"lineNumber":204,"author":{"gitId":"garyljj"},"content":"        // -1 to convert input to zero based"},{"lineNumber":205,"author":{"gitId":"garyljj"},"content":"        indexOfTasksToBeDeleted \u003d Arrays.stream(num.split(\" \"))"},{"lineNumber":206,"author":{"gitId":"garyljj"},"content":"                .mapToInt(x -\u003e Integer.parseInt(x) - 1)"},{"lineNumber":207,"author":{"gitId":"garyljj"},"content":"                .toArray();"},{"lineNumber":208,"author":{"gitId":"garyljj"},"content":"        isWaitingDeleteTaskResponse \u003d true;"},{"lineNumber":209,"author":{"gitId":"garyljj"},"content":"        return ui.displayDeleteTaskPrompt(indexOfTasksToBeDeleted.length);"},{"lineNumber":210,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":212,"author":{"gitId":"garyljj"},"content":"    private String load() throws DukeException {"},{"lineNumber":213,"author":{"gitId":"garyljj"},"content":"        tasks.load(storage.loadTaskList());"},{"lineNumber":214,"author":{"gitId":"garyljj"},"content":"        return ui.displayLoadMessage();"},{"lineNumber":215,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":217,"author":{"gitId":"garyljj"},"content":"    private String save() throws DukeException {"},{"lineNumber":218,"author":{"gitId":"garyljj"},"content":"        storage.saveTaskList(tasks.getList());"},{"lineNumber":219,"author":{"gitId":"garyljj"},"content":"        return ui.displaySaveMessage();"},{"lineNumber":220,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":222,"author":{"gitId":"garyljj"},"content":"    private String exit() {"},{"lineNumber":223,"author":{"gitId":"garyljj"},"content":"        isWaitingSaveFileResponse \u003d true;"},{"lineNumber":224,"author":{"gitId":"garyljj"},"content":"        return ui.displaySaveFilePrompt();"},{"lineNumber":225,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":227,"author":{"gitId":"garyljj"},"content":"    private String listOutTask() {"},{"lineNumber":228,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e lst \u003d tasks.listOutTask();"},{"lineNumber":229,"author":{"gitId":"garyljj"},"content":"        return ui.displayList(lst);"},{"lineNumber":230,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":232,"author":{"gitId":"garyljj"},"content":"    private String displayHelp() {"},{"lineNumber":233,"author":{"gitId":"garyljj"},"content":"        return ui.displayHelp();"},{"lineNumber":234,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":236,"author":{"gitId":"garyljj"},"content":"    private String search(String args) {"},{"lineNumber":237,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e results \u003d tasks.search(args);"},{"lineNumber":238,"author":{"gitId":"garyljj"},"content":"        return ui.displayList(results);"},{"lineNumber":239,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":241,"author":{"gitId":"garyljj"},"content":"    private String sort() {"},{"lineNumber":242,"author":{"gitId":"garyljj"},"content":"        tasks.sort();"},{"lineNumber":243,"author":{"gitId":"garyljj"},"content":"        return ui.displaySortMessage();"},{"lineNumber":244,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":246,"author":{"gitId":"garyljj"},"content":"    private String setHighPriority(String num) throws DukeInputException {"},{"lineNumber":247,"author":{"gitId":"garyljj"},"content":"        // -1 to convert input to zero based"},{"lineNumber":248,"author":{"gitId":"garyljj"},"content":"        int taskNum \u003d Integer.parseInt(num) - 1;"},{"lineNumber":249,"author":{"gitId":"garyljj"},"content":"        String task \u003d tasks.setPriority(true, taskNum);"},{"lineNumber":250,"author":{"gitId":"garyljj"},"content":"        return ui.displaySetPriority(true, task);"},{"lineNumber":251,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":253,"author":{"gitId":"garyljj"},"content":"    private String setLowPriority(String num) throws DukeInputException {"},{"lineNumber":254,"author":{"gitId":"garyljj"},"content":"        // -1 to convert input to zero based"},{"lineNumber":255,"author":{"gitId":"garyljj"},"content":"        int taskNum \u003d Integer.parseInt(num) - 1;"},{"lineNumber":256,"author":{"gitId":"garyljj"},"content":"        String task \u003d tasks.setPriority(false, taskNum);"},{"lineNumber":257,"author":{"gitId":"garyljj"},"content":"        return ui.displaySetPriority(false, task);"},{"lineNumber":258,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":260,"author":{"gitId":"garyljj"},"content":"    private String loadSampleData() {"},{"lineNumber":261,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":262,"author":{"gitId":"garyljj"},"content":"            tasks.load(SampleData.loadSampleData());"},{"lineNumber":263,"author":{"gitId":"garyljj"},"content":"        } catch (DukeInputException e) {"},{"lineNumber":264,"author":{"gitId":"garyljj"},"content":"            // Should not reach here."},{"lineNumber":265,"author":{"gitId":"garyljj"},"content":"            assert false : \"Fix creation of task in SampleData.loadSampleData()\";"},{"lineNumber":266,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":268,"author":{"gitId":"garyljj"},"content":"        return ui.displayLoadSampleMessage();"},{"lineNumber":269,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":270,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":271,"author":{"gitId":"garyljj"},"content":"    private String clearAllTasks() {"},{"lineNumber":272,"author":{"gitId":"garyljj"},"content":"        isWaitingDeleteAllResponse \u003d true;"},{"lineNumber":273,"author":{"gitId":"garyljj"},"content":"        return ui.displayDeleteAllPrompt();"},{"lineNumber":274,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":276,"author":{"gitId":"garyljj"},"content":"    private String confirmDelete(String input) {"},{"lineNumber":277,"author":{"gitId":"garyljj"},"content":"        boolean isApproved;"},{"lineNumber":278,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":279,"author":{"gitId":"garyljj"},"content":"            isApproved \u003d Parser.parseYesNo(input);"},{"lineNumber":280,"author":{"gitId":"garyljj"},"content":"        } catch (DukeInputException e) {"},{"lineNumber":281,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":282,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":283,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":284,"author":{"gitId":"garyljj"},"content":"        isWaitingDeleteTaskResponse \u003d false;"},{"lineNumber":285,"author":{"gitId":"garyljj"},"content":"        if (isApproved) {"},{"lineNumber":286,"author":{"gitId":"garyljj"},"content":"            String[] deletedTasks;"},{"lineNumber":287,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":288,"author":{"gitId":"garyljj"},"content":"                deletedTasks \u003d tasks.deleteTask(indexOfTasksToBeDeleted);"},{"lineNumber":289,"author":{"gitId":"garyljj"},"content":"            } catch (DukeInputException e) {"},{"lineNumber":290,"author":{"gitId":"garyljj"},"content":"                return ui.displayError(e);"},{"lineNumber":291,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":292,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":293,"author":{"gitId":"garyljj"},"content":"            return ui.displayDeletedTask(deletedTasks, tasks.size());"},{"lineNumber":294,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":295,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":296,"author":{"gitId":"garyljj"},"content":"            return ui.displayDeleteAborted();"},{"lineNumber":297,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":300,"author":{"gitId":"garyljj"},"content":"    private String confirmClear(String input) {"},{"lineNumber":301,"author":{"gitId":"garyljj"},"content":"        boolean isApproved;"},{"lineNumber":302,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":303,"author":{"gitId":"garyljj"},"content":"            isApproved \u003d Parser.parseYesNo(input);"},{"lineNumber":304,"author":{"gitId":"garyljj"},"content":"        } catch (DukeInputException e) {"},{"lineNumber":305,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":306,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":307,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":308,"author":{"gitId":"garyljj"},"content":"        isWaitingDeleteAllResponse \u003d false;"},{"lineNumber":309,"author":{"gitId":"garyljj"},"content":"        if (isApproved) {"},{"lineNumber":310,"author":{"gitId":"garyljj"},"content":"            tasks.clear();"},{"lineNumber":311,"author":{"gitId":"garyljj"},"content":"            return ui.displayTasksClearedMessage();"},{"lineNumber":312,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":313,"author":{"gitId":"garyljj"},"content":"            return ui.displayDeleteAborted();"},{"lineNumber":314,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":317,"author":{"gitId":"garyljj"},"content":"    private String confirmSave(String input) {"},{"lineNumber":318,"author":{"gitId":"garyljj"},"content":"        boolean isApproved;"},{"lineNumber":319,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":320,"author":{"gitId":"garyljj"},"content":"            isApproved \u003d Parser.parseYesNo(input);"},{"lineNumber":321,"author":{"gitId":"garyljj"},"content":"        } catch (DukeInputException e) {"},{"lineNumber":322,"author":{"gitId":"garyljj"},"content":"            return ui.displayError(e);"},{"lineNumber":323,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":324,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":325,"author":{"gitId":"garyljj"},"content":"        isWaitingSaveFileResponse \u003d false;"},{"lineNumber":326,"author":{"gitId":"garyljj"},"content":"        if (isApproved) {"},{"lineNumber":327,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":328,"author":{"gitId":"garyljj"},"content":"                storage.saveTaskList(tasks.getList());"},{"lineNumber":329,"author":{"gitId":"garyljj"},"content":"            } catch (DukeException e) {"},{"lineNumber":330,"author":{"gitId":"garyljj"},"content":"                return ui.displayError(e);"},{"lineNumber":331,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":332,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"garyljj"},"content":"        return \"shutdownConfirm\";"},{"lineNumber":334,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"garyljj":333,"-":2}},{"path":"src/main/java/duke/gui/CustomListCell.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import duke.util.Task;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Customized list cell for the listview."},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Index for tasks and yellow color for high priority tasks."},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"public class CustomListCell extends ListCell\u003cTask\u003e {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    protected void updateItem(Task item, boolean empty) {"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        super.updateItem(item, empty);"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        if (empty) {"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"            setText(\"\");"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"            setStyle(\"-fx-background-color:rgb(130, 130, 130);\");"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"            setText((getIndex() + 1) + \". \" + item);"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"            setStyle(String.format(\"-fx-text-fill:%s;-fx-background-color:%s;\","},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"                    item.isHighPriority() ? \"yellow \" : \"white\","},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"                    getIndex() % 2 \u003d\u003d 0 ? \"rgb(140, 140, 140)\" : \"rgb(130, 130, 130)\"));"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":25}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":" * containing text from the speaker."},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"public class DialogBox extends HBox {"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    private Label dialog;"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    private ImageView displayPicture;"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.load();"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"            e.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        Circle c \u003d new Circle(32, 32, 32);"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        displayPicture.setClip(c);"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        displayPicture.setImage(img);"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        dialog.setText(text);"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        dialog.setBackground(new Background("},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"                new BackgroundFill(Color.rgb(240, 255, 220), new CornerRadii(7.0), Insets.EMPTY)));"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    private void flip() {"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        Collections.reverse(tmp);"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"     * Returns a DialogBox with a green text message and an image display that represents the user."},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     * @param text Message in the dialog box."},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * @param img Image in the dialog box."},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     * @return Dialog box"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        return new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"     * Returns a flipped DialogBox with a gray text message and an image display that represents the bot."},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     * @param text Message in the dialog box."},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     * @param img Image in the dialog box."},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     * @return Dialog box"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        db.dialog.setBackground(new Background("},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"                new BackgroundFill(Color.rgb(250, 250, 250), new CornerRadii(7.0), Insets.EMPTY)));"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        db.flip();"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        return db;"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":87}},{"path":"src/main/java/duke/gui/History.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * History records and retrieves user\u0027s GUI input history."},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"public class History {"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    private List\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    private int current \u003d 0;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"     * Add new input to history if it is different from the previous input."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"     * @param s User input."},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    public void add(String s) {"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        if (lst.isEmpty() || isDifferentFromLast(s)) {"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"            lst.add(s);"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        current \u003d lst.size();"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    private boolean isDifferentFromLast(String s) {"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        return !s.equals(lst.get(lst.size() - 1));"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     * Retrieve the previous input in history."},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"     * @return Input from history."},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    public String getPrevious() {"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        if (lst.isEmpty()) {"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"            return \"\";"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        } else if (current \u003d\u003d 0) {"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"            return lst.get(current);"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"            return lst.get(--current);"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"     * Retrieve the next input in history."},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"     * @return Input from history."},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    public String getNext() {"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        if (lst.isEmpty()) {"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            return \"\";"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        } else if (current \u003d\u003d lst.size()) {"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"            return \"\";"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        } else if (current \u003d\u003d lst.size() - 1) {"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"            current++;"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"            return \"\";"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"            return lst.get(++current);"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":62}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    private Duke duke \u003d new Duke(\"data/dukeData.txt\");"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     * The main entry point for the GUI."},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     * Creates the scene, duke and display greetings."},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"     * @param stage Window on which scene is set."},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    public void start(Stage stage) {"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"            SplitPane sp \u003d fxmlLoader.load();"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"            Scene scene \u003d new Scene(sp);"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"            stage.getIcons().add(new Image(Main.class.getResourceAsStream(\"/images/Icon.png\")));"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"            stage.setScene(scene);"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showGreetings();"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"            stage.show();"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"            e.printStackTrace();"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":44}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import duke.util.Task;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"public class MainWindow extends SplitPane {"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    private VBox dialogContainer;"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    private TextField userInput;"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    private ListView\u003cTask\u003e listView;"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    private Duke duke;"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    private History history \u003d new History();"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    //Icon made by Freepik from www.flaticon.com"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     * Initialize GUI properties."},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    public void initialize() {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        userInput.setOnKeyPressed(e -\u003e handleUserKey(e.getCode()));"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        listView.setCellFactory(list -\u003e new CustomListCell());"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"     * Initialise duke and add tasklist to listView."},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"     * @param d Duke object."},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        duke \u003d d;"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        listView.setItems(duke.getTaskList().getList());"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     * Display greeting message on GUI."},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    public void showGreetings() {"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"                DialogBox.getDukeDialog(duke.displayGreetings(), dukeImage));"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"    private void handleUserInput() {"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        String input \u003d userInput.getText().strip();"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"        if (input.isEmpty()) {"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"            return;"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        history.add(input);"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"                DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        userInput.clear();"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        if (response.equals(\"shutdownConfirm\")) {"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"            Platform.exit();"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"    private void handleUserKey(KeyCode key) {"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"        switch(key) {"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"        case UP:"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"            userInput.setText(history.getPrevious());"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"            userInput.end();"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        case DOWN:"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"            userInput.setText(history.getNext());"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"            userInput.end();"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"        case ESCAPE:"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"            userInput.clear();"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"        default:"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":109}},{"path":"src/main/java/duke/util/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Enum for all available commands of duke."},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    BYE,"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    CLEAR,"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    DEADLINE,"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    DELETE,"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    DONE,"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    EVENT,"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    HELP,"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    HIGHPRIORITY,"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    LIST,"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    LOAD,"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    LOWPRIORITY,"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    SAMPLE,"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    SAVE,"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    SEARCH,"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    SORT,"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"    TODO;"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     * Returns format and more info for each command."},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     * @return Format and more info for each command."},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    public String getHelp() {"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        switch(this) {"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        case BYE:"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"            return \"bye\\n\\t- Close Duke\";"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        case CLEAR:"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"            return \"clear\\n\\t- Clear all current tasks and start a new tasklist\";"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        case DEADLINE:"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"            return \"deadline DESCRIPTION /by DATE\\n\\t- Add a deadline task with a due date (YYYY-MM-DD)\";"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        case DELETE:"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"            return \"delete INDEX [INDEX...]\\n\\t- Delete one or more tasks\\n\\t- eg. (delete 1 2 3)\";"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        case DONE:"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"            return \"done INDEX [INDEX...]\\n\\t- Mark one or more tasks as done\\n\\t- eg. (done 1 2 3)\";"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        case EVENT:"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"            return \"event DESCRIPTION /at DATE\\n\\t- Add an event task with a date (YYYY-MM-DD)\";"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        case HELP:"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"            return \"help\\n\\t- Display list of commands\";"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        case HIGHPRIORITY:"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"            return \"highpriority INDEX\\n\\t- Set this task as high priority\";"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        case LIST:"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"            return \"list\\n\\t- List out all task\";"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        case LOAD:"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"            return \"load\\n\\t- Load tasklist from saved file\";"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        case LOWPRIORITY:"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"            return \"lowpriority INDEX\\n\\t- Set this task as low priority\";"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        case SAMPLE:"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"            return \"sample\\n\\t- Load some sample data\\n\\t- use \\\"clear\\\" command to clear all data\";"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        case SAVE:"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"            return \"save\\n\\t- save tasklist to \\\"data/dukeData.txt\\\"\";"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        case SEARCH:"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"            return \"search {KEYWORD | DATE}\\n\\t\""},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"                    + \"- Display all task containing the following keyword.\\n\\t\""},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"                    + \"- If the keyword is in a valid date format(YYYY-MM-DD), display all task on that date.\";"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        case SORT:"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"            return \"sort\\n\\t- Order tasklist in the following priority\\n\\t\""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"                    + \"1. High Priority task\\n\\t2. Incomplete task\\n\\t\""},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"                    + \"3. Todo task\\n\\t4. Eariler date\\n\\t5. Lexicographically\";"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        case TODO:"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"            return \"todo DESCRIPTION\\n\\t- Add a todo task\";"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        default:"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"            assert false;"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"            return \"\";"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":72}},{"path":"src/main/java/duke/util/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Represents a deadline task."},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003eA deadline task has a description and a date when it is due."},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"D\";"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    private Deadline(String description, LocalDate date) {"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    private Deadline(String description, LocalDate date, boolean isDone, boolean isHighPriority) {"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        this.isHighPriority \u003d isHighPriority;"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating deadline task."},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     * @param input Description of the task and its due date."},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     *     Due date should be indicated after \"/by\"."},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * @return A deadline task."},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    public static Deadline createDeadline(String input) {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        String[] details \u003d input.split(\" /by \");"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        LocalDate date \u003d LocalDate.parse(details[1]);"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        return new Deadline(details[0], date);"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     * Returns String in the form \"[TYPE] task\"."},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"     * @return String representation of Deadline."},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s (by: %s)\","},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"                TYPE,"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"                super.toString(),"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"                date.format(DateTimeFormatter.ofPattern(\"d MMM\")));"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     * @return List of Deadline details."},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"                isHighPriority ? \"1\" : \"0\","},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"                description,"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"                date.toString());"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     * @param args Deadline details."},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     * @return Deadline object."},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    protected static Deadline importData(String[] args) {"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        assert args[1].equals(\"1\") || args[1].equals(\"0\") : \"Parser.checkImportFormat() missed an invalid input\";"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        assert args[2].equals(\"1\") || args[2].equals(\"0\") : \"Parser.checkImportFormat() missed an invalid input\";"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        boolean isHighPriority \u003d args[2].equals(\"1\");"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        return new Deadline(args[3], LocalDate.parse(args[4]), isDone, isHighPriority);"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     * Returns a new Deadline task marked as done."},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"     * @return A Deadline object."},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    public Deadline markDone() {"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        return new Deadline(description, date, true, isHighPriority);"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"     * Returns the Deadline as high priority;"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"     * @return High priority Deadline."},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"    public Deadline setHighPriority() {"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"        return new Deadline(description, date, isDone, true);"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"     * Returns the Deadline as low priority;"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"     * @return low priority Deadline."},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"    public Deadline setLowPriority() {"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        return new Deadline(description, date, isDone, false);"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":109}},{"path":"src/main/java/duke/util/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Thrown when errors occur in Duke."},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    public DukeException(String msg) {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"        super(\"OOPS!!! \" + msg);"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":10}},{"path":"src/main/java/duke/util/DukeInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Thrown when errors occurs due to input."},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"public class DukeInputException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    public DukeInputException(String msg) {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"        super(msg);"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":10}},{"path":"src/main/java/duke/util/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Represents an Event task."},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003eAn event task contains a description and a date when the event is occuring."},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"E\";"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    private Event(String description, LocalDate date) {"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    private Event(String description, LocalDate date, boolean isDone, boolean isHighPriority) {"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        super(description, date);"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        this.isHighPriority \u003d isHighPriority;"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating Event task."},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     * @param input Description of the task and its date."},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     *     Date should be indicated after \"/at\"."},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * @return An Event task."},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    public static Event createEvent(String input) {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        String[] details \u003d input.split(\" /at \");"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        LocalDate date \u003d LocalDate.parse(details[1]);"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        return new Event(details[0], date);"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     * Returns String in the form \"[TYPE] task\"."},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"     * @return String representation of Event."},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s (at: %s)\","},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"                TYPE,"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"                super.toString(),"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"                date.format(DateTimeFormatter.ofPattern(\"d MMM\")));"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     * @return List of Event details."},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"                isHighPriority ? \"1\" : \"0\","},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"                description,"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"                date.toString());"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     * @param args Event details."},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     * @return Event object."},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    protected static Event importData(String[] args) {"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        assert args[1].equals(\"1\") || args[1].equals(\"0\") : \"Parser.checkImportFormat() missed an invalid input\";"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        assert args[2].equals(\"1\") || args[2].equals(\"0\") : \"Parser.checkImportFormat() missed an invalid input\";"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        boolean isHighPriority \u003d args[2].equals(\"1\");"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        return new Event(args[3], LocalDate.parse(args[4]), isDone, isHighPriority);"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     * Returns a new Event task marked as done."},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"     * @return An Event object."},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    public Event markDone() {"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        return new Event(description, date, true, isHighPriority);"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"     * Returns the Event as high priority;"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"     * @return High priority Event."},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"    public Event setHighPriority() {"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"        return new Event(description, date, isDone, true);"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"     * Returns the Event as low priority;"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"     * @return low priority Event."},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"    public Event setLowPriority() {"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        return new Event(description, date, isDone, false);"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":109}},{"path":"src/main/java/duke/util/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":" * Stores two different items together."},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"public class Pair\u003cT, U\u003e {"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"    private T t;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    private U u;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"     * Creates a Pair with 2 items."},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"     * @param t First item."},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"     * @param u Second item."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    public Pair(T t, U u) {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        this.t \u003d t;"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        this.u \u003d u;"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     * Returns first item."},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"     * @return First item."},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"    public T getFirst() {"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        return t;"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     * Returns second item."},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"     * @return Second item."},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    public U getSecond() {"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        return u;"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":38}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * Parser ensures that only valid inputs are accepted."},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"     * Checks if input from user is valid and returns a pair of command and arugments."},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"     * \u003cbr\u003eOnly accepts valid commands, followed by valid parameters."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"     * @param input Input from user."},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"     * @return Pair of command and the arguments."},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If input is invalid."},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    public static Pair\u003cCommand, String\u003e parseInput(String input) throws DukeInputException {"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        // Do not allow \";\" because save file uses semicolon as a delimiter."},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        if (input.contains(\";\")) {"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Sorry! Semicolons \\\";\\\" are not allowed as input!\");"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        String[] s \u003d input.split(\" \", 2);"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        Command command \u003d getCommand(s[0]);"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        String args \u003d s.length \u003d\u003d 2 ? s[1] : \"\";"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        checkValidArguments(command, args);"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        return new Pair\u003c\u003e(command, args);"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     * Checks if input from text file is valid and creates the task."},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     * @param input Import statement from saved file."},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     * @return Imported task."},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If input is invalid."},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    public static Task parseImport(String input) throws DukeInputException {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        // Import statments must have at least 4 \";\""},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        String[] args \u003d input.split(\";\", 4);"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        if (args.length !\u003d 4) {"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Wrong number of arguments\");"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        if (isNotValidBinary(args[1])) {"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"isDone column should be 0 or 1\");"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        if (isNotValidBinary(args[2])) {"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Priority column should be 0 or 1\");"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        // Deadline and Event will have an additional \";\""},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        String[] s \u003d args[3].split(\";\", 2);"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        switch (args[0]) {"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        case \"T\":"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"            checkValidTodo(s[0]);"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"            return Todo.importData(input.split(\";\"));"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        case \"D\":"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"            checkValidDeadline(String.join(\" /by \", s));"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"            return Deadline.importData(input.split(\";\"));"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        case \"E\":"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"            checkValidEvent(String.join(\" /at \", s));"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"            return Event.importData(input.split(\";\"));"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        default:"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Not a valid Task type\");"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     * Checks if input is either a \"y\" (yes) or \"n\" (no)."},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     * @param input Input from user."},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"     * @return True if input is \"y\", false if input is \"n\"."},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If input is neither a \"y\" or \"n\"."},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"    public static boolean parseYesNo(String input) throws DukeInputException {"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        if (!(input.equals(\"y\") || input.equals(\"n\"))) {"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Invalid input! Please key in either \\\"y\\\" or \\\"n\\\"\");"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"        return input.equals(\"y\");"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"    private static Command getCommand(String input) throws DukeInputException {"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"            return Command.valueOf(input.toUpperCase());"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    private static void checkValidArguments(Command cmd, String args) throws DukeInputException {"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"        if (args.equals(\"-h\")) {"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"            return;"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"        switch(cmd) {"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"        case BYE:"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"            checkNoArgument(args);"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"        case CLEAR:"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"            checkNoArgument(args);"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"        case DEADLINE:"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"            checkValidDeadline(args);"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        case DELETE:"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"            checkValidDoneOrDelete(args);"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"        case DONE:"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"            checkValidDoneOrDelete(args);"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"        case EVENT:"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"            checkValidEvent(args);"},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"        case HELP:"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"            checkNoArgument(args);"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"        case HIGHPRIORITY:"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"            checkValidNumber(args);"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"        case LIST:"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"            checkNoArgument(args);"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"        case LOAD:"},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"            checkNoArgument(args);"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"        case LOWPRIORITY:"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"            checkValidNumber(args);"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"        case SAMPLE:"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"            checkNoArgument(args);"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"        case SAVE:"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"            checkNoArgument(args);"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"        case SEARCH:"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"            checkValidSearch(args);"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"        case SORT:"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"            checkNoArgument(args);"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"        case TODO:"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"            checkValidTodo(args);"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"        default:"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"            break;"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDate(String date) throws DukeInputException {"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"            LocalDate.parse(date);"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException("},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"                String.format(\"\\\"%s\\\" is a wrong date format! Please use YYYY-MM-DD format.\", date));"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"    private static void checkNoArgument(String args) throws DukeInputException {"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"        if (!args.isEmpty()) {"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(String.format(\"%s is not a valid argument!\", args));"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"    private static void checkValidTodo(String args) throws DukeInputException {"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"        if (args.isEmpty()) {"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please include a description of the Todo!\");"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDeadline(String s) throws DukeInputException {"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"        String[] args \u003d s.split(\" /by \");"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"        if (args.length \u003c 2) {"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Description and duedate should be separated by \\\"/by\\\"\");"},{"lineNumber":183,"author":{"gitId":"garyljj"},"content":"        } else if (args.length \u003e 2) {"},{"lineNumber":184,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please do not use \\\"/by\\\" multiple times!\");"},{"lineNumber":185,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":187,"author":{"gitId":"garyljj"},"content":"        checkValidDate(args[1]);"},{"lineNumber":188,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":190,"author":{"gitId":"garyljj"},"content":"    private static void checkValidEvent(String s) throws DukeInputException {"},{"lineNumber":191,"author":{"gitId":"garyljj"},"content":"        String[] args \u003d s.split(\" /at \");"},{"lineNumber":192,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":193,"author":{"gitId":"garyljj"},"content":"        if (args.length \u003c 2) {"},{"lineNumber":194,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Description and date should separated by \\\"/at\\\"\");"},{"lineNumber":195,"author":{"gitId":"garyljj"},"content":"        } else if (args.length \u003e 2) {"},{"lineNumber":196,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please do not use \\\"/at\\\" multiple times!\");"},{"lineNumber":197,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"        checkValidDate(args[1]);"},{"lineNumber":200,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":202,"author":{"gitId":"garyljj"},"content":"    private static void checkValidDoneOrDelete(String args) throws DukeInputException {"},{"lineNumber":203,"author":{"gitId":"garyljj"},"content":"        if (args.isEmpty()) {"},{"lineNumber":204,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Please input a task number!\");"},{"lineNumber":205,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":207,"author":{"gitId":"garyljj"},"content":"        String[] indexes \u003d args.split(\" \");"},{"lineNumber":208,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":209,"author":{"gitId":"garyljj"},"content":"        // Check each number is seperated by single space and is valid"},{"lineNumber":210,"author":{"gitId":"garyljj"},"content":"        for (String idx : indexes) {"},{"lineNumber":211,"author":{"gitId":"garyljj"},"content":"            if (idx.isEmpty()) {"},{"lineNumber":212,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException(\"Please leave only one space between numbers!\");"},{"lineNumber":213,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":214,"author":{"gitId":"garyljj"},"content":"            checkValidNumber(idx);"},{"lineNumber":215,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":217,"author":{"gitId":"garyljj"},"content":"        // Check for duplicate numbers"},{"lineNumber":218,"author":{"gitId":"garyljj"},"content":"        Arrays.sort(indexes);"},{"lineNumber":219,"author":{"gitId":"garyljj"},"content":"        for (int i \u003d 1; i \u003c indexes.length; i++) {"},{"lineNumber":220,"author":{"gitId":"garyljj"},"content":"            if (indexes[i].equals(indexes[i - 1])) {"},{"lineNumber":221,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException(\"Please do not input duplicate numbers!\");"},{"lineNumber":222,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":226,"author":{"gitId":"garyljj"},"content":"    private static void checkValidSearch(String args) throws DukeInputException {"},{"lineNumber":227,"author":{"gitId":"garyljj"},"content":"        if (args.isEmpty()) {"},{"lineNumber":228,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(\"Enter a keyword to search!\");"},{"lineNumber":229,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":232,"author":{"gitId":"garyljj"},"content":"    private static void checkValidNumber(String idx) throws DukeInputException {"},{"lineNumber":233,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":234,"author":{"gitId":"garyljj"},"content":"            Integer.parseInt(idx);"},{"lineNumber":235,"author":{"gitId":"garyljj"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":236,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(String.format(\"\\\"%s\\\" is not a valid number!\", idx));"},{"lineNumber":237,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":240,"author":{"gitId":"garyljj"},"content":"    private static boolean isNotValidBinary(String idx) {"},{"lineNumber":241,"author":{"gitId":"garyljj"},"content":"        return !(idx.equals(\"0\") || idx.equals(\"1\"));"},{"lineNumber":242,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":243}},{"path":"src/main/java/duke/util/SampleData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" * Provides sample data for duke."},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class SampleData {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"     * Returns a list of sample tasks."},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"     * @return List of sample tasks."},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If invalid creation of tasks."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    public static List\u003cTask\u003e loadSampleData() throws DukeInputException {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        return List.of("},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"                Todo.createTodo(\"apply for internship\"),"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"                Todo.createTodo(\"water plants\").setHighPriority(),"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"                Todo.createTodo(\"check email\").markDone(),"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"                Todo.createTodo(\"return bob $10\"),"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"                Todo.createTodo(\"buy eggs\").setHighPriority(),"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"                Todo.createTodo(\"clean fan\").markDone(),"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"                Deadline.createDeadline(\"return library book /by 2021-02-22\"),"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"                Deadline.createDeadline(\"assignment 1 /by 2021-02-22\").setHighPriority(),"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"                Deadline.createDeadline(\"ip level 10 /by 2021-02-05\").markDone(),"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"                Event.createEvent(\"sec school reunion! /at 2021-02-19\"),"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"                Event.createEvent(\"2103 finals /at 2021-04-24\"),"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"                Event.createEvent(\"lunch with mom /at 2021-02-20\").setHighPriority(),"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"                Event.createEvent(\"group meeting /at 2021-02-14\").markDone()"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        );"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":33}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":" * Storage to save tasklist to a text file."},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" * \u003cp\u003e"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" * Default path is \"data/dukeData.txt\"."},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    private static final String DEFAULT_PATH \u003d \"data/dukeData.txt\";"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    private File file;"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     * Create storage with default path \"data/dukeData.txt\"."},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    public Storage() {"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        file \u003d new File(DEFAULT_PATH);"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     * Create storage with custom path."},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"     * @param path Path of file."},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"    public Storage(String path) {"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        file \u003d new File(path);"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     * Save tasklist to a text file."},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     * @param taskList Current tasklist."},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"     * @throws DukeException If the file is invalid or cannot be open for any reason."},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    public void saveTaskList(List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        if (!file.getParentFile().exists()) {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"            file.getParentFile().mkdir();"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        FileWriter fw;"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"            fw \u003d new FileWriter(file);"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"            for (Task t : taskList) {"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"                fw.write(String.join(\";\", t.exportData()) + \"\\n\");"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"            fw.close();"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        } catch (IOException e) {"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"            throw new DukeException(\"Please delete \\\"data/dukeData.txt\\\" file and run this command again!\");"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"     * Reads and returns tasklist from a text file."},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * @return List of tasks"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     * @throws DukeException If file not found or incorrect format."},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    public List\u003cTask\u003e loadTaskList() throws DukeException {"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        Scanner sc;"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"            sc \u003d new Scanner(file);"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"            throw new DukeException(\"No save found!\");"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"            try {"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"                lst.add(Parser.parseImport(input));"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"            } catch (DukeInputException e) {"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"                throw new DukeException(\"File incorrect format. Unable to load\");"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        return lst;"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":91}},{"path":"src/main/java/duke/util/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * Represents a Task."},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e- Has a description"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e- Has an optional date"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e- Has an indicator of whether it is completed."},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003e- Has an indicator of its priority."},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"public abstract class Task implements Comparable\u003cTask\u003e {"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    protected String description;"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    protected LocalDate date;"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    protected boolean isDone;"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    protected boolean isHighPriority;"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"     * Constructor to create a Task with a description."},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     * @param description Description of the task."},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"    public Task(String description) {"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d false;"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        this.date \u003d null;"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"        this.isHighPriority \u003d false;"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     * Constructor to create a Task with a description and a date."},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"     * @param description Description of the task."},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"     * @param date Date of the task."},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"    public Task(String description, LocalDate date) {"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        this.description \u003d description;"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d false;"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        this.date \u003d date;"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        this.isHighPriority \u003d false;"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"     * Returns the task marked as done."},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"     * @return Done task."},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    public abstract Task markDone();"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"     * Returns the task as high priority;"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"     * @return High priority task."},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    public abstract Task setHighPriority();"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     * Returns the task as low priority;"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"     * @return Low priority task."},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    public abstract Task setLowPriority();"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     * @return List of task details."},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"    protected abstract List\u003cString\u003e exportData();"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"     * Returns description of task."},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"     * @return Description of task."},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"    public String getDescription() {"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"        return description;"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"     * Returns date of task."},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"     * @return Date of task."},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    public LocalDate getDate() {"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        return date;"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"     * Returns priority of task."},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"     * @return True if high priority else false."},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"    public boolean isHighPriority() {"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"        return isHighPriority;"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"     * Returns String in the form \"[status] description\"."},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"     * @return String representation of Task."},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s] %s%s\","},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"                getStatus(),"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"                isHighPriority ? \"IMPT! \" : \"\","},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"                description);"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"    private String getStatus() {"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"        return isDone ? \"X\" : \" \";"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"     * Compares 2 task."},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"     *     First, high priority task is smaller."},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"     *     Second, completed task is smaller."},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"     *     Third, absence of date (eg. todo) is smaller."},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"     *     Forth, eariler date is smaller"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"     *     Last, by description lexicographically."},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"     * @param other The task to be compared to."},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"     * @return -1 if this task is smaller, 0 if same, 1 if this task is bigger."},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"    public int compareTo(Task other) {"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"        return comparePriority(other);"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"    private int comparePriority(Task other) {"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"        if (!(isHighPriority ^ other.isHighPriority)) {"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"            return compareCompleted(other);"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"        } else if (isHighPriority) {"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"            return -1;"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"            return 1;"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"    private int compareCompleted(Task other) {"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"        if (!(isDone ^ other.isDone)) {"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"            return compareDateExist(other);"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"        } else if (isDone) {"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"            return 1;"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"            return -1;"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"    private int compareDateExist(Task other) {"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"        if (date \u003d\u003d null \u0026\u0026 other.date \u003d\u003d null) {"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"            return compareDescription(other);"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"        } else if (date \u003d\u003d null) {"},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"            return -1;"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"        } else if (other.date \u003d\u003d null) {"},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"            return 1;"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"            return compareDate(other);"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"    private int compareDate(Task other) {"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"        if (date.equals(other.date)) {"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"            return compareDescription(other);"},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"        return date.compareTo(other.date);"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"    private int compareDescription(Task other) {"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":"        return description.compareTo(other.description);"},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":175}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":" * Wrapper class for tasklist."},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"public class TaskList {"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    private ObservableList\u003cTask\u003e lst;"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"     * Creates empty tasklist."},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        lst \u003d FXCollections.observableArrayList();"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     * Fills tasklist with contents of the given list."},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     * @param tasks List of tasks."},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    public void load(List\u003cTask\u003e tasks) {"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        lst.clear();"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        lst.addAll(tasks);"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"     * Adds task to the tasklist."},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"     * @param task Task to be added."},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    public void addTask(Task task) {"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"        lst.add(task);"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"     * Delete tasks from the tasklist."},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"     * @param tasksNum Index of tasks to be deleted."},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"     * @return Tasks that has been deleted."},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If any of given index is out of range."},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"    public String[] deleteTask(int[] tasksNum) throws DukeInputException {"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        assert tasksNum.length !\u003d 0;"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        for (int i : tasksNum) {"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"            if (isInvalidIndex(i)) {"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"                // +1 to convert back to one-based."},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException(String.format(\"\\\"%d\\\" is an invalid number!\", i + 1));"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e deletedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        // Remove in descending index to avoid wrong deletion."},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        Arrays.sort(tasksNum);"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        for (int i \u003d tasksNum.length - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"            Task deletedTask \u003d lst.remove(tasksNum[i]);"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"            deletedTasks.add(deletedTask.toString());"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        return deletedTasks.toArray(String[]::new);"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    private boolean isInvalidIndex(int i) {"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"        return i \u003c 0 || i \u003e\u003d lst.size();"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     * Mark tasks in tasklist as completed."},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"     * @param tasksNum Index of tasks that has been completed."},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     * @return Tasks that has been completed."},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If any of the given index is out of range."},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"    public String[] completeTask(int[] tasksNum) throws DukeInputException {"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        assert tasksNum.length !\u003d 0;"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        for (int i : tasksNum) {"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"            if (isInvalidIndex(i)) {"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"                // +1 to convert back to one-based."},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"                throw new DukeInputException(String.format(\"\\\"%d\\\" is an invalid number!\", i + 1));"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e completedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"        for (int i : tasksNum) {"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"            Task completedTask \u003d lst.get(i).markDone();"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"            lst.set(i, completedTask);"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"            completedTasks.add(completedTask.toString());"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"        return completedTasks.toArray(String[]::new);"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"     * Convert tasks to a numbered list of strings."},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks."},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"    public List\u003cString\u003e listOutTask() {"},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e stringList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"        int counter \u003d 1;"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":"        for (Task task : lst) {"},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"            stringList.add(String.format(\"%d. %s\", counter++, task.toString()));"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"        return stringList;"},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"     * Returns size of tasklist."},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"     * @return Size of tasklist."},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"    public int size() {"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":"        return lst.size();"},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks."},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"     * @return List of tasks."},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":"    public ObservableList\u003cTask\u003e getList() {"},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"        return lst;"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"     * Sort tasklist by todo task first, and then by date."},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"    public void sort() {"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"        lst.sort(null);"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"     * Clears tasklist."},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"    public void clear() {"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"        lst.clear();"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks with the given keyword."},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"     * \u003cbr\u003eIf keyword is in a valid LocalDate format (YYYY-MM-DD), search by date, else search by keyword."},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"     * @param keyword Keyword to search."},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks containing the given keyword."},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"    public List\u003cString\u003e search(String keyword) {"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"            LocalDate date \u003d LocalDate.parse(keyword);"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"            return searchByDate(date);"},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"            // If keyword is not a valid date format, carry on with method."},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"            Task task \u003d lst.get(i);"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"            if (containsKeyword(task, keyword)) {"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"                results.add(String.format(\"%d. %s\", i + 1, lst.get(i)));"},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"        return results;"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"    private boolean containsKeyword(Task task, String keyword) {"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":"        return task.getDescription().toLowerCase().contains(keyword.toLowerCase());"},{"lineNumber":183,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":185,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"garyljj"},"content":"     * Returns list of tasks on the given date."},{"lineNumber":187,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"garyljj"},"content":"     * @param d Date of task."},{"lineNumber":189,"author":{"gitId":"garyljj"},"content":"     * @return List of numbered tasks with the following date."},{"lineNumber":190,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"garyljj"},"content":"    private List\u003cString\u003e searchByDate(LocalDate date) {"},{"lineNumber":192,"author":{"gitId":"garyljj"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":193,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":194,"author":{"gitId":"garyljj"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":195,"author":{"gitId":"garyljj"},"content":"            Task task \u003d lst.get(i);"},{"lineNumber":196,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":197,"author":{"gitId":"garyljj"},"content":"            if (isSameDate(task, date)) {"},{"lineNumber":198,"author":{"gitId":"garyljj"},"content":"                // +1 to convert back to one-based."},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"                results.add(String.format(\"%d. %s\", i + 1, lst.get(i)));"},{"lineNumber":200,"author":{"gitId":"garyljj"},"content":"            }"},{"lineNumber":201,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":203,"author":{"gitId":"garyljj"},"content":"        return results;"},{"lineNumber":204,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":206,"author":{"gitId":"garyljj"},"content":"    private boolean isSameDate(Task task, LocalDate date) {"},{"lineNumber":207,"author":{"gitId":"garyljj"},"content":"        return date.equals(task.getDate());"},{"lineNumber":208,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":210,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":211,"author":{"gitId":"garyljj"},"content":"     * Set the priority of a task."},{"lineNumber":212,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":213,"author":{"gitId":"garyljj"},"content":"     * @param isHigh Set to high if isHigh, else low."},{"lineNumber":214,"author":{"gitId":"garyljj"},"content":"     * @param taskNum Index of task."},{"lineNumber":215,"author":{"gitId":"garyljj"},"content":"     * @return Changed task."},{"lineNumber":216,"author":{"gitId":"garyljj"},"content":"     * @throws DukeInputException If given index is out of range."},{"lineNumber":217,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"garyljj"},"content":"    public String setPriority(boolean isHigh, int taskNum) throws DukeInputException {"},{"lineNumber":219,"author":{"gitId":"garyljj"},"content":"        if (isInvalidIndex(taskNum)) {"},{"lineNumber":220,"author":{"gitId":"garyljj"},"content":"            // +1 to convert back to one-based."},{"lineNumber":221,"author":{"gitId":"garyljj"},"content":"            throw new DukeInputException(String.format(\"\\\"%d\\\" is an invalid number!\", taskNum + 1));"},{"lineNumber":222,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":224,"author":{"gitId":"garyljj"},"content":"        Task task;"},{"lineNumber":225,"author":{"gitId":"garyljj"},"content":"        if (isHigh) {"},{"lineNumber":226,"author":{"gitId":"garyljj"},"content":"            task \u003d lst.get(taskNum).setHighPriority();"},{"lineNumber":227,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":228,"author":{"gitId":"garyljj"},"content":"            task \u003d lst.get(taskNum).setLowPriority();"},{"lineNumber":229,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":231,"author":{"gitId":"garyljj"},"content":"        lst.set(taskNum, task);"},{"lineNumber":232,"author":{"gitId":"garyljj"},"content":"        return task.toString();"},{"lineNumber":233,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":234}},{"path":"src/main/java/duke/util/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" * Represents a Todo task."},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" * \u003cbr\u003eA todo task has a description."},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"public class Todo extends Task {"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    private static final String TYPE \u003d \"T\";"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"    private Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    private Todo(String description, boolean isDone, boolean isHighPriority) {"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        this.isHighPriority \u003d isHighPriority;"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"     * Factory method for creating Todo task."},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"     * @param description Description of the task"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"     * @return A todo task"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    public static Todo createTodo(String description) {"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        return new Todo(description);"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"     * Returns String in the form \"[TYPE] task\"."},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"     * @return String representation of Todo."},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        return String.format(\"[%s]%s\", TYPE, super.toString());"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"     * Export data into a standardised format."},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"     * @return List of Todo details."},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"    protected List\u003cString\u003e exportData() {"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        return List.of(TYPE,"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"                isDone ? \"1\" : \"0\","},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"                isHighPriority ? \"1\" : \"0\","},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"                description);"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"     * Import data from standardised format."},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     * @param args Todo details."},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     * @return Todo object."},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"    protected static Todo importData(String[] args) {"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        assert args[1].equals(\"1\") || args[1].equals(\"0\") : \"Parser.parseImport() missed an invalid input\";"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        assert args[2].equals(\"1\") || args[2].equals(\"0\") : \"Parser.parseImport() missed an invalid input\";"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        boolean isHighPriority \u003d args[2].equals(\"1\");"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        return new Todo(args[3], isDone, isHighPriority);"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"     * Returns a new Todo task marked as done."},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"     * @return A Todo object."},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"    public Todo markDone() {"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"        return new Todo(description, true, isHighPriority);"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"     * Returns the Todo as high priority;"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"     * @return High priority Todo."},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"    public Todo setHighPriority() {"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"        return new Todo(description, isDone, true);"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"     * Returns the Todo as low priority;"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"     * @return low priority Todo."},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"    public Todo setLowPriority() {"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"        return new Todo(description, isDone, false);"},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":100}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":" * Ui interacts with users to receive input and display output."},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":" */"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    private String echo(String... msgs) {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        assert msgs.length !\u003d 0;"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        String msg \u003d msgs[0];"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        for (int i \u003d 1; i \u003c msgs.length; i++) {"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"            msg +\u003d \"\\n\" + msgs[i];"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        return msg;"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"     * Returns greeting messages when Duke starts."},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"     * @return Greeting message."},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    public String displayGreetings() {"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        return echo(\"Hello! I\u0027m Duke\","},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"                \"What can I do for you?\","},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"                \"Enter \\\"help\\\" to see list of commands.\");"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"     * Lists out commands."},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"     * @return List of all commands."},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"    public String displayHelp() {"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        return echo(\"Use \\\"command -h\\\" to find out more about the command!\\n\","},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"                \"List of commands:\","},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"                \"bye\","},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"                \"clear\","},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":"                \"deadline DESCRIPTION /by DATE\","},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"                \"delete INDEX [INDEX...]\","},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"                \"done INDEX [INDEX...]\","},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"                \"event DESCRIPTION /at DATE\","},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"                \"help\","},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"                \"highpriority INDEX\","},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"                \"list\","},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"                \"load\","},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"                \"lowpriority INDEX\","},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"                \"sample\","},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"                \"save\","},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"                \"search {KEYWORD | DATE}\","},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"                \"sort\","},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"                \"todo DESCRIPTION\");"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"     * Returns error messages."},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"     * @param e Error to be displayed."},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"     * @return Error message."},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"    public String displayError(DukeException e) {"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        return e.getMessage();"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"     * Returns goodbye message."},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"     * @return Goodbye message."},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"    public String displayExitMessage() {"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"     * Displays list of tasks."},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"     * @param lst List to be displayed."},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"     * @return List of tasks."},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"    public String displayList(List\u003cString\u003e lst) {"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        if (lst.isEmpty()) {"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"            return \"No task found!\";"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        } else {"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"            return \"Here are the tasks in your list:\\n\" + echo(lst.toArray(String[]::new));"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"     * Returns message after tasks are marked as done."},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":"     * @param tasks Tasks marked as done."},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"     * @return Tasks completed message."},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"    public String displayCompletedTask(String[] tasks) {"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"        return String.format(\"Nice! I\u0027ve marked %s as done:\\n%s\","},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":"                isSingleTask(tasks) ? \"this task\" : \"these tasks\","},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"                echo(tasks));"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"garyljj"},"content":"     * Returns added task and the current number of task in the TaskList."},{"lineNumber":104,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"garyljj"},"content":"     * @param task Task added to TaskList."},{"lineNumber":106,"author":{"gitId":"garyljj"},"content":"     * @param size Current size of TaskList."},{"lineNumber":107,"author":{"gitId":"garyljj"},"content":"     * @return Task added message."},{"lineNumber":108,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"garyljj"},"content":"    public String displayAddedTask(String task, int size) {"},{"lineNumber":110,"author":{"gitId":"garyljj"},"content":"        return echo(\"Got it. I\u0027ve added this task:\","},{"lineNumber":111,"author":{"gitId":"garyljj"},"content":"                task,"},{"lineNumber":112,"author":{"gitId":"garyljj"},"content":"                String.format(\"Now you have %d task%s in the list.\", size, isSingleTask(size) ? \"\" : \"s\"));"},{"lineNumber":113,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":115,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"garyljj"},"content":"     * Return deleted tasks and the current number of task in the TaskList."},{"lineNumber":117,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"garyljj"},"content":"     * @param tasks Tasks deleted from TaskList."},{"lineNumber":119,"author":{"gitId":"garyljj"},"content":"     * @param size Current size of TaskList."},{"lineNumber":120,"author":{"gitId":"garyljj"},"content":"     * @return Tasks deleted message."},{"lineNumber":121,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"garyljj"},"content":"    public String displayDeletedTask(String[] tasks, int size) {"},{"lineNumber":123,"author":{"gitId":"garyljj"},"content":"        return String.format(\"Noted. I\u0027ve removed %s:\\n\", isSingleTask(tasks) ? \"this task\" : \"these tasks\")"},{"lineNumber":124,"author":{"gitId":"garyljj"},"content":"                + echo(tasks) + \"\\n\""},{"lineNumber":125,"author":{"gitId":"garyljj"},"content":"                + String.format(\"Now you have %d task%s in the list.\", size, isSingleTask(size) ? \"\" : \"s\");"},{"lineNumber":126,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":128,"author":{"gitId":"garyljj"},"content":"    private boolean isSingleTask(String[] arr) {"},{"lineNumber":129,"author":{"gitId":"garyljj"},"content":"        return arr.length \u003d\u003d 1;"},{"lineNumber":130,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":132,"author":{"gitId":"garyljj"},"content":"    private boolean isSingleTask(int i) {"},{"lineNumber":133,"author":{"gitId":"garyljj"},"content":"        return i \u003d\u003d 1;"},{"lineNumber":134,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":136,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"garyljj"},"content":"     * Returns messages after TaskList has been saved."},{"lineNumber":138,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"garyljj"},"content":"     * @return TaskList saved message."},{"lineNumber":140,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"garyljj"},"content":"    public String displaySaveMessage() {"},{"lineNumber":142,"author":{"gitId":"garyljj"},"content":"        return \"TaskList have been saved!\";"},{"lineNumber":143,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":145,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"garyljj"},"content":"     * Returns messages after TaskList has been loaded."},{"lineNumber":147,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":148,"author":{"gitId":"garyljj"},"content":"     * @return TaskList loaded message."},{"lineNumber":149,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"garyljj"},"content":"    public String displayLoadMessage() {"},{"lineNumber":151,"author":{"gitId":"garyljj"},"content":"        return \"TaskList loaded successfully!\";"},{"lineNumber":152,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":154,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"garyljj"},"content":"     * Prompts user to save file."},{"lineNumber":156,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"garyljj"},"content":"     * @return Save file message."},{"lineNumber":158,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"garyljj"},"content":"    public String displaySaveFilePrompt() {"},{"lineNumber":160,"author":{"gitId":"garyljj"},"content":"        return \"Do you want to save the current tasklist? y/n\";"},{"lineNumber":161,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":163,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"garyljj"},"content":"     * Confirms if user want to delete these tasks."},{"lineNumber":165,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"garyljj"},"content":"     * @param numOfTasks Number of delete tasks."},{"lineNumber":167,"author":{"gitId":"garyljj"},"content":"     * @return Delete tasks confirmation message."},{"lineNumber":168,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"garyljj"},"content":"    public String displayDeleteTaskPrompt(int numOfTasks) {"},{"lineNumber":170,"author":{"gitId":"garyljj"},"content":"        return String.format(\"Are you sure you want to delete %s? y/n\","},{"lineNumber":171,"author":{"gitId":"garyljj"},"content":"                isSingleTask(numOfTasks) ? \"this task\" : \"these tasks\");"},{"lineNumber":172,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":174,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"garyljj"},"content":"     * Returns delete aborted message."},{"lineNumber":176,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"garyljj"},"content":"     * @return Cancel delete task message."},{"lineNumber":178,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"garyljj"},"content":"    public String displayDeleteAborted() {"},{"lineNumber":180,"author":{"gitId":"garyljj"},"content":"        return \"Deletion cancelled.\";"},{"lineNumber":181,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":183,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"garyljj"},"content":"     * Returns sort tasklist message."},{"lineNumber":185,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"garyljj"},"content":"     * @return Sort tasklist message."},{"lineNumber":187,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"garyljj"},"content":"    public String displaySortMessage() {"},{"lineNumber":189,"author":{"gitId":"garyljj"},"content":"        return \"TaskList have been sorted!\";"},{"lineNumber":190,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":192,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"garyljj"},"content":"     * Display change task priority message."},{"lineNumber":194,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":195,"author":{"gitId":"garyljj"},"content":"     * @param isHigh True if high priority, else false."},{"lineNumber":196,"author":{"gitId":"garyljj"},"content":"     * @param task Changed task."},{"lineNumber":197,"author":{"gitId":"garyljj"},"content":"     * @return Change task priority message."},{"lineNumber":198,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"garyljj"},"content":"    public String displaySetPriority(boolean isHigh, String task) {"},{"lineNumber":200,"author":{"gitId":"garyljj"},"content":"        return echo(String.format(\"Got it! I\u0027ve set this task as a %s PRIORITY\", isHigh ? \"HIGH\" : \"LOW\"), task);"},{"lineNumber":201,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":203,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":204,"author":{"gitId":"garyljj"},"content":"     * Displays sample data loaded message."},{"lineNumber":205,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":206,"author":{"gitId":"garyljj"},"content":"     * @return Sample data loaded message."},{"lineNumber":207,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"garyljj"},"content":"    public String displayLoadSampleMessage() {"},{"lineNumber":209,"author":{"gitId":"garyljj"},"content":"        return \"Sample data have been loaded!\";"},{"lineNumber":210,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":212,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"garyljj"},"content":"     * Prompt for confirmation to delete all tasks."},{"lineNumber":214,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":215,"author":{"gitId":"garyljj"},"content":"     * @return Delete all tasks prompt."},{"lineNumber":216,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"garyljj"},"content":"    public String displayDeleteAllPrompt() {"},{"lineNumber":218,"author":{"gitId":"garyljj"},"content":"        return \"This command will delete ALL tasks. Are you sure? y/n\";"},{"lineNumber":219,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":221,"author":{"gitId":"garyljj"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"garyljj"},"content":"     * Display clear all message."},{"lineNumber":223,"author":{"gitId":"garyljj"},"content":"     *"},{"lineNumber":224,"author":{"gitId":"garyljj"},"content":"     * @return Clear all message."},{"lineNumber":225,"author":{"gitId":"garyljj"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"garyljj"},"content":"    public String displayTasksClearedMessage() {"},{"lineNumber":227,"author":{"gitId":"garyljj"},"content":"        return \"All tasks cleared\";"},{"lineNumber":228,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":229}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.effect.DropShadow?\u003e"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"  \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"275.0\" style\u003d\"-fx-text-fill: black; -fx-label-padding: 4 4 4 4;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"         \u003ceffect\u003e"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"            \u003cDropShadow blurType\u003d\"ONE_PASS_BOX\" color\u003d\"#0000004c\" height\u003d\"1.0\" offsetX\u003d\"1.8\" offsetY\u003d\"1.8\" radius\u003d\"0.0\" width\u003d\"0.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"         \u003c/effect\u003e\u003c/Label\u003e"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"64.0\" fitWidth\u003d\"64.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"  \u003c/children\u003e"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"  \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"  \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"garyljj":21}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.layout.Pane?\u003e"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"\u003cSplitPane dividerPositions\u003d\"0.3\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"   \u003citems\u003e"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"      \u003cListView fx:id\u003d\"listView\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: rgb(130,130,130);\"/\u003e"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"      \u003cAnchorPane\u003e"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        \u003cchildren\u003e"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"          \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-color: rgb(145,145,145); -fx-text-fill: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" promptText\u003d\"Type here...\" /\u003e"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"          \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: rgb(130,130,130); -fx-text-fill: white;\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"            \u003c!-- Background vector created by renata.s - www.freepik.com --\u003e"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"            \u003cPane style\u003d\"-fx-background-image: url(\u0027/images/bg.png\u0027); -fx-background-size: cover;\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"          \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"498.4\" prefWidth\u003d\"386.4\" style\u003d\"-fx-background-color: transparent; -fx-background: transparent;\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"            \u003ccontent\u003e"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"              \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"            \u003c/content\u003e"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"          \u003c/ScrollPane\u003e"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        \u003c/children\u003e"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"      \u003c/AnchorPane\u003e"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"   \u003c/items\u003e"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"\u003c/SplitPane\u003e"}],"authorContributionMap":{"garyljj":29}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    private Duke d;"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    public void getResponseTest() {"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        d \u003d new Duke(\"data/testData.txt\");"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", d.getResponse(\"a\"));"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Got it. I\u0027ve added this task:\\n[T][ ] a\\nNow you have 1 task in the list.\","},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"                d.getResponse(\"todo a\"));"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Got it. I\u0027ve added this task:\\n[D][ ] b (by: 1 Jan)\\nNow you have 2 tasks in the list.\","},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"                d.getResponse(\"deadline b /by 2011-01-01\"));"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Got it. I\u0027ve added this task:\\n[E][ ] c (at: 1 Jan)\\nNow you have 3 tasks in the list.\","},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"                d.getResponse(\"event c /at 2011-01-01\"));"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n[T][X] a\", d.getResponse(\"done 1\"));"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Nice! I\u0027ve marked these tasks as done:\\n[T][X] a\\n[D][X] b (by: 1 Jan)\","},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"                d.getResponse(\"done 1 2\"));"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Are you sure you want to delete these tasks? y/n\", d.getResponse(\"delete 1 2 3\"));"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Deletion cancelled.\", d.getResponse(\"n\"));"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Here are the tasks in your list:\\n1. [T][X] a\\n2. [D][X] b (by: 1 Jan)\\n3. [E][ ] c (at: 1 Jan)\","},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"                d.getResponse(\"list\"));"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"TaskList have been sorted!\", d.getResponse(\"sort\"));"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Here are the tasks in your list:\\n1. [E][ ] c (at: 1 Jan)\\n2. [T][X] a\\n3. [D][X] b (by: 1 Jan)\","},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"                d.getResponse(\"list\"));"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Here are the tasks in your list:\\n1. [E][ ] c (at: 1 Jan)\\n3. [D][X] b (by: 1 Jan)\","},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"                d.getResponse(\"search 2011-01-01\"));"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Here are the tasks in your list:\\n2. [T][X] a\", d.getResponse(\"search a\"));"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"Do you want to save the current tasklist? y/n\", d.getResponse(\"bye\"));"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"shutdownConfirm\", d.getResponse(\"n\"));"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":38}},{"path":"src/test/java/duke/util/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    public void markDoneTest() throws DukeInputException {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Deadline.createDeadline(\"testing /by 2011-01-01\");"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][ ] testing (by: 1 Jan)\", t.toString());"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        t \u003d t.markDone();"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][X] testing (by: 1 Jan)\", t.toString());"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    public void setHighLowPriorityTest() throws DukeInputException {"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Deadline.createDeadline(\"testing /by 2011-01-01\");"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][ ] testing (by: 1 Jan)\", t.toString());"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        t \u003d t.setHighPriority();"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][ ] IMPT! testing (by: 1 Jan)\", t.toString());"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        t \u003d t.setLowPriority();"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][ ] testing (by: 1 Jan)\", t.toString());"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":28}},{"path":"src/test/java/duke/util/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    public void markDoneTest() throws DukeInputException {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Event.createEvent(\"testing /at 2011-01-01\");"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[E][ ] testing (at: 1 Jan)\", t.toString());"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        t \u003d t.markDone();"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[E][X] testing (at: 1 Jan)\", t.toString());"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    public void setHighLowPriorityTest() throws DukeInputException {"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Event.createEvent(\"testing /at 2011-01-01\");"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[E][ ] testing (at: 1 Jan)\", t.toString());"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        t \u003d t.setHighPriority();"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[E][ ] IMPT! testing (at: 1 Jan)\", t.toString());"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        t \u003d t.setLowPriority();"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[E][ ] testing (at: 1 Jan)\", t.toString());"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":28}},{"path":"src/test/java/duke/util/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"public class ParserTest {"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    public void parseInputTest() {"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"bye\"));"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"list\"));"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"done 1\"));"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"done 1 2\"));"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"done 1 2 3\"));"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"todo a\"));"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"deadline a /by 2011-01-01\"));"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"event a /at 2011-01-01\"));"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"delete 1\"));"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"delete 1 2\"));"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"delete 1 2 3\"));"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"save\"));"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"load\"));"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"help\"));"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"search a\"));"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseInput(\"sort\"));"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"\"));"},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"a\"));"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"a \"));"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"todo\"));"},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline\"));"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline /by \"));"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline /by 1\"));"},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline 2011-01-01\"));"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline/by2011-01-01\"));"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"deadline /by t /by a\"));"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event\"));"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event /at \"));"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event /at 1\"));"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event 2011-01-01\"));"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event/at2011-01-01\"));"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"event /at a /at b\"));"},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done\"));"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done 1 1\"));"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done 1  2\"));"},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done 1 2  3\"));"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done a\"));"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done 1a2\"));"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"done     1\"));"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete\"));"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete 1 1\"));"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete 1  2\"));"},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete 1 2  3\"));"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete a\"));"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete 1a2\"));"},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"delete    1\"));"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"search\"));"},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"bye a\"));"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"list a\"));"},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"save a\"));"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"load a\"));"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"help a\"));"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseInput(\"sort a\"));"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"    public void parseImportTest() {"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseImport(\"T;1;0;a\"));"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseImport(\"D;1;0;a;2011-01-01\"));"},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseImport(\"E;0;0;a;2011-01-01\"));"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"Z;1;0;a;2011-01-01\"));"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"D;3;0;;2011-01-01\"));"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"D;1;0;a;201-01-01\"));"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"D;1;0;a;2011-01-01;\"));"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"D;1;0;a;2011-01-01;b\"));"},{"lineNumber":86,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"D;1;0;a;\"));"},{"lineNumber":87,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"D;1;0;a;;2011-01-01\"));"},{"lineNumber":88,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\";D;1;0;a;;2011-01-01\"));"},{"lineNumber":89,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"D;1;2;a;2011-01-01\"));"},{"lineNumber":90,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"a\"));"},{"lineNumber":91,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseImport(\"\"));"},{"lineNumber":92,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":94,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"garyljj"},"content":"    public void parseYesNoTest() {"},{"lineNumber":96,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseYesNo(\"y\"));"},{"lineNumber":97,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e Parser.parseYesNo(\"n\"));"},{"lineNumber":98,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":99,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseYesNo(\"\"));"},{"lineNumber":100,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeInputException.class, () -\u003e Parser.parseYesNo(\"a\"));"},{"lineNumber":101,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":102}},{"path":"src/test/java/duke/util/SampleDataTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class SampleDataTest {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    public void loadSampleDataTest() {"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"        assertDoesNotThrow(() -\u003e SampleData.loadSampleData());"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":12}},{"path":"src/test/java/duke/util/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"public class TaskListTest {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"    private TaskList lst;"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    public void deleteTaskTest() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Todo.createTodo(\"test\");"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        lst.addTask(t);"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        lst.addTask(t);"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        lst.addTask(t);"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[[T][ ] test, [T][ ] test]\", Arrays.toString(lst.deleteTask(new int[]{0, 1})));"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[[T][ ] test]\", Arrays.toString(lst.deleteTask(new int[]{0})));"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(new int[]{0}));"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(new int[]{-1}));"},{"lineNumber":27,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.deleteTask(new int[]{100}));"},{"lineNumber":28,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":30,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"garyljj"},"content":"    public void completeTaskTest() throws DukeInputException {"},{"lineNumber":32,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":34,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Todo.createTodo(\"test\");"},{"lineNumber":35,"author":{"gitId":"garyljj"},"content":"        lst.addTask(t);"},{"lineNumber":36,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[[T][X] test]\", Arrays.toString(lst.completeTask(new int[]{0})));"},{"lineNumber":37,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":38,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.completeTask(new int[]{-1}));"},{"lineNumber":39,"author":{"gitId":"garyljj"},"content":"        assertThrows(DukeException.class, () -\u003e lst.completeTask(new int[]{100}));"},{"lineNumber":40,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":42,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"garyljj"},"content":"    public void listOutTaskTest() throws DukeException {"},{"lineNumber":44,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":45,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"a\"));"},{"lineNumber":46,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"b\"));"},{"lineNumber":47,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":48,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"1. [T][ ] a\", lst.listOutTask().get(0));"},{"lineNumber":49,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"2. [T][ ] b\", lst.listOutTask().get(1));"},{"lineNumber":50,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":52,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"garyljj"},"content":"    public void searchTest() throws DukeInputException {"},{"lineNumber":54,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":55,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"a\"));"},{"lineNumber":56,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"b\"));"},{"lineNumber":57,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Deadline.createDeadline(\"a /by 2011-01-01\"));"},{"lineNumber":58,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Deadline.createDeadline(\"b /by 2011-02-02\"));"},{"lineNumber":59,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":60,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"1. [T][ ] a\", lst.search(\"a\").get(0));"},{"lineNumber":61,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"3. [D][ ] a (by: 1 Jan)\", lst.search(\"a\").get(1));"},{"lineNumber":62,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":63,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"3. [D][ ] a (by: 1 Jan)\", lst.search(\"2011-01-01\").get(0));"},{"lineNumber":64,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"4. [D][ ] b (by: 2 Feb)\", lst.search(\"2011-02-02\").get(0));"},{"lineNumber":65,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":66,"author":{"gitId":"garyljj"},"content":"        assertEquals(0, lst.search(\"test\").size());"},{"lineNumber":67,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":69,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"garyljj"},"content":"    public void sortTest() throws DukeInputException {"},{"lineNumber":71,"author":{"gitId":"garyljj"},"content":"        lst \u003d new TaskList();"},{"lineNumber":72,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Deadline.createDeadline(\"c /by 2011-01-01\"));"},{"lineNumber":73,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Deadline.createDeadline(\"a /by 2011-01-01\"));"},{"lineNumber":74,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Event.createEvent(\"b /at 2011-02-02\"));"},{"lineNumber":75,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"a\"));"},{"lineNumber":76,"author":{"gitId":"garyljj"},"content":"        lst.addTask(Todo.createTodo(\"b\"));"},{"lineNumber":77,"author":{"gitId":"garyljj"},"content":"        lst.sort();"},{"lineNumber":78,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":79,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][ ] a\", lst.getList().get(0).toString());"},{"lineNumber":80,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][ ] b\", lst.getList().get(1).toString());"},{"lineNumber":81,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][ ] a (by: 1 Jan)\", lst.getList().get(2).toString());"},{"lineNumber":82,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[D][ ] c (by: 1 Jan)\", lst.getList().get(3).toString());"},{"lineNumber":83,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[E][ ] b (at: 2 Feb)\", lst.getList().get(4).toString());"},{"lineNumber":84,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":85}},{"path":"src/test/java/duke/util/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"public class TodoTest {"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"    public void markDoneTest() throws DukeInputException {"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Todo.createTodo(\"testing\");"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][ ] testing\", t.toString());"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"        t \u003d t.markDone();"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][X] testing\", t.toString());"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"    public void setHighLowPriorityTest() throws DukeInputException {"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"        Task t \u003d Todo.createTodo(\"testing\");"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][ ] testing\", t.toString());"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"        t \u003d t.setHighPriority();"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][ ] IMPT! testing\", t.toString());"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"        t \u003d t.setLowPriority();"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"        assertEquals(\"[T][ ] testing\", t.toString());"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"}"}],"authorContributionMap":{"garyljj":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"garyljj"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"garyljj"},"content":"deadline return book /by 2021-06-06"},{"lineNumber":3,"author":{"gitId":"garyljj"},"content":"event project meeting /at 2021-08-06"},{"lineNumber":4,"author":{"gitId":"garyljj"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"garyljj"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"garyljj"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"garyljj"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"list"},{"lineNumber":9,"author":{"gitId":"garyljj"},"content":"deadline return book /by 2021-01-24"},{"lineNumber":10,"author":{"gitId":"garyljj"},"content":"event project meeting /at 2021-01-25"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"delete 5"},{"lineNumber":12,"author":{"gitId":"garyljj"},"content":"y"},{"lineNumber":13,"author":{"gitId":"garyljj"},"content":"invalidtest"},{"lineNumber":14,"author":{"gitId":"garyljj"},"content":"todo"},{"lineNumber":15,"author":{"gitId":"garyljj"},"content":"deadline"},{"lineNumber":16,"author":{"gitId":"garyljj"},"content":"event"},{"lineNumber":17,"author":{"gitId":"garyljj"},"content":"done 100"},{"lineNumber":18,"author":{"gitId":"garyljj"},"content":"load"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"save"},{"lineNumber":20,"author":{"gitId":"garyljj"},"content":"load"},{"lineNumber":21,"author":{"gitId":"garyljj"},"content":"help"},{"lineNumber":22,"author":{"gitId":"garyljj"},"content":"search 2021-01-24"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":"search book"},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"bye"},{"lineNumber":25,"author":{"gitId":"garyljj"},"content":"no"},{"lineNumber":26,"author":{"gitId":"garyljj"},"content":"n"}],"authorContributionMap":{"garyljj":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"garyljj"},"content":"if exist .\\data\\dukeData.txt del .\\data\\dukeData.txt"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"garyljj"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"garyljj"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":23,"author":{"gitId":"garyljj"},"content":""},{"lineNumber":24,"author":{"gitId":"garyljj"},"content":"del .\\data\\dukeData.txt"}],"authorContributionMap":{"garyljj":5,"-":19}}]
