[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"repositories {"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"    mavenCentral()"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"}"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"dependencies {"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"}"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"    mainClassName \u003d \"Duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"    archiveBaseName \u003d \"Duke\""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"//"},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"//run{"},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"//    standardInput \u003d System.in"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"//}"}],"authorContributionMap":{"rajobasu":27,"-":40}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"#### Addition of Todo\u0027s, Events and Deadlines"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"Add a new task of either type todo (has no associated date), events or deadlines (both of which has an associated "},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"date with them)."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"##### Marking items as Done"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"After a certain task is done, just mark it as done!"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"##### Find using Keyword"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"Not sure where a particular event is? Just find using a keyword, and all task descriptions which has that word will "},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"be returned. "},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"# Usage"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"## Adding TODO"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"syntax: `todo \u003ctask description\u003e`"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"Adds a new task of type todo, has no explicit Date associated with it. "},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"`todo Help mom finish chores`"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"Expected outcome:"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"`- [T][X] Help mom finish chores`"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"### Adding EVENT"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"syntax: `event \u003ctask description\u003e /at \u003cDate: format : YYYY-MM-DD\u003e`"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":"Adds a new task of type event, has a Date associated with it."},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"Example of usage:"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"`event Go to Wedding /at 2020-03-29`"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"Expected outcome:"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"`- [E][X] Go to Wedding(at: 29 : March : 2020)`"},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":"## Adding DEADLINE"},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"syntax: `deadline \u003ctask description\u003e /by \u003cDate: format : YYYY-MM-DD\u003e`"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"Adds a new task of type deadline, has a Date associated with it."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":"`deadline finish homework /by 2020-03-29`"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":"`- [D][X] finish homework(by: 29 : March : 2020)`"},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":"## Mark As DONE"},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"syntax : `done \u003ctask no.\u003e`"},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"Marks a task as done. However, does not remove the task. "},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"Example of usage:"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":"`done 1`"},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"Expected outcome: "},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":"`- [T][tick] help mom finish chores`"},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"## List all tasks"},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":"syntax: `list`"},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":80,"author":{"gitId":"rajobasu"},"content":"List all tasks (whether done or not done)."},{"lineNumber":81,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":82,"author":{"gitId":"rajobasu"},"content":"Example of Usage :"},{"lineNumber":83,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":84,"author":{"gitId":"rajobasu"},"content":"`list`"},{"lineNumber":85,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":86,"author":{"gitId":"rajobasu"},"content":"Expected output :"},{"lineNumber":87,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":88,"author":{"gitId":"rajobasu"},"content":"`- [T][tick] help mom finish chores`   "},{"lineNumber":89,"author":{"gitId":"rajobasu"},"content":"`- [E][X] Go to Wedding(at: 29 : March : 2020)`  "},{"lineNumber":90,"author":{"gitId":"rajobasu"},"content":"`- [D][X] finish homework(by: 29 : March : 2020)`"},{"lineNumber":91,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":92,"author":{"gitId":"rajobasu"},"content":"## Find using Keyword"},{"lineNumber":93,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":94,"author":{"gitId":"rajobasu"},"content":"syntax : `find \u003cKeyword\u003e`"},{"lineNumber":95,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":96,"author":{"gitId":"rajobasu"},"content":"Find all tasks containing the keyword. However, task no. won\u0027t be the same."},{"lineNumber":97,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":98,"author":{"gitId":"rajobasu"},"content":"Example usage:"},{"lineNumber":99,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":100,"author":{"gitId":"rajobasu"},"content":"`find finish`"},{"lineNumber":101,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":102,"author":{"gitId":"rajobasu"},"content":"Expected output:"},{"lineNumber":103,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":104,"author":{"gitId":"rajobasu"},"content":"`- [T][tick] help mom finish chores`   "},{"lineNumber":105,"author":{"gitId":"rajobasu"},"content":"`- [D][X] finish homework(by: 29 : March : 2020)`    "},{"lineNumber":106,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":107,"author":{"gitId":"rajobasu"},"content":"## Delete "},{"lineNumber":108,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":109,"author":{"gitId":"rajobasu"},"content":"syntax : `delete \u003ctask no.\u003e`"},{"lineNumber":110,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":111,"author":{"gitId":"rajobasu"},"content":"Deletes the task at the given task no. "},{"lineNumber":112,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":113,"author":{"gitId":"rajobasu"},"content":"Example usage : "},{"lineNumber":114,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":115,"author":{"gitId":"rajobasu"},"content":"`delete 2`"},{"lineNumber":116,"author":{"gitId":"rajobasu"},"content":"`list` "},{"lineNumber":117,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":118,"author":{"gitId":"rajobasu"},"content":"Expected output : "},{"lineNumber":119,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":120,"author":{"gitId":"rajobasu"},"content":"`- [T][tick] help mom finish chores`   "},{"lineNumber":121,"author":{"gitId":"rajobasu"},"content":"`- [D][X] finish homework(by: 29 : March : 2020)`    "},{"lineNumber":122,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":123,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":124,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":125,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":126,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":127,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":128,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":129,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":130,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":131,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":132,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":133,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":134,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":135,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":136,"author":{"gitId":"rajobasu"},"content":""}],"authorContributionMap":{"rajobasu":120,"-":16}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":"import ui.DukeApplicationPage;"},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"    public static void main(String... args) {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"        Application.launch(DukeApplicationPage.class, args);"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        InputHandler inputHandler \u003d new InputHandler(tm);"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        IOManager ioManager \u003d new IOManager();"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        ioManager.setListener(inputHandler);"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"        ioManager.run();"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"        tm.save();*/"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"rajobasu":15,"-":9}},{"path":"src/main/java/core/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * Base class for all types of exceptions to be thrown inside Duke."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public class DukeException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"     * Creates a new exception without any error message."},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    public DukeException() {"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"     * Creates a new exception with an error message."},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"     * @param s - error message."},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    public DukeException(String s) {"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        super(s);"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":21}},{"path":"src/main/java/core/IOManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import java.io.*;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" * The main IOManager of the program, manages reading input and outputting."},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"public class IOManager {"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    private InputListener listener;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"    private InputStream is;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    private PrintWriter pw;"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"     * Creates a new IOManager using {@code System.in} and {@code System.out}."},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    public IOManager() {"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        this(System.in, System.out);"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"     * Creates a new IOManager using specified input and output streams."},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"     * @param is - input stream"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"     * @param ps - output stream"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    public IOManager(InputStream is, PrintStream ps) {"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"        this.is \u003d is;"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"        this.pw \u003d new PrintWriter(ps);"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"     * Sets a new {@code InputListener} instance to handle the input."},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"     * @param listener"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"    public void setListener(InputListener listener) {"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"        this.listener \u003d listener;"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"    private void preOutputFormatting() {"},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"        pw.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"    private void postOutputFormatting() {"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"        pw.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"     * The main input loop."},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"    public void run() {"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"        try (var br \u003d new BufferedReader(new InputStreamReader(this.is))) {"},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":"            while (true) {"},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":"                String s \u003d br.readLine();"},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":"                preOutputFormatting();"},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"                if (s.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":"                    // exit condition"},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":"                    pw.println(\"bye\");"},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":"                    break;"},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"                } else {"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":"                    String toPrint \u003d \"\";"},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"                    for(var x : InputType.values()) {"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"                        if(x.doesMatch(s)) {"},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"                            toPrint +\u003d listener.onNewInput(x, s);"},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"                            break;"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"                        }"},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"                    }"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"                    pw.println(toPrint);"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":"                }"},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":"                postOutputFormatting();"},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"                pw.flush();"},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":"        } catch (IOException e) {"},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":79}},{"path":"src/main/java/core/InputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":" * Instance of InputListener to handle all the input in the Duke class."},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"public class InputHandler implements InputListener {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    private final TaskManager taskManager;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"     * Creates a new InputHandler which uses the {@code TaskManager} to manage the {@code Task}s."},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"     * @param taskManager - taskmanager instance."},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"    public InputHandler(TaskManager taskManager) {"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        this.taskManager \u003d taskManager;"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    public String onNewInput(InputType type, String data) {"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"        return type.apply(this.taskManager, data);"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":26}},{"path":"src/main/java/core/InputListener.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * Functional Interface which only has a function to deal with new method."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public interface InputListener {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"     * Method to deal with any input."},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"     * @param type - type of input"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * @param data - the data for the task"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     * @return String denoting the response on the new input"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    String onNewInput(InputType type, String data);"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":14}},{"path":"src/main/java/core/InputType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import core.task.Event;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import core.task.Task;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import core.task.TaskAlreadyDoneException;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import core.task.TaskManager;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"import core.task.Todo;"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"import java.util.function.BiFunction;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":" * Enumerates the input types."},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"public enum InputType {"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    FIND(x -\u003e x.toLowerCase().trim().startsWith(\"find\"), (tm, data) -\u003e {"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        StringBuilder ret \u003d new StringBuilder(\"Matched items : \\n\");"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        var data2 \u003d data.substring(5);"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"        int cnt \u003d 1;"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"        Predicate\u003cTask\u003e partialSearchFunction \u003d task -\u003e task.contains(data2.trim());"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"        for (var x : tm.retrieveAllTasks().stream().filter(partialSearchFunction).toArray()) {"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"            ret.append(cnt++).append(\". \").append(x).append(\"\\n\");"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"        return ret.toString();"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"    DEADLINE(x -\u003e x.toLowerCase().startsWith(\"deadline\"), (tm, data) -\u003e {"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"        Task t \u003d new Deadline(data.substring(9));"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"        tm.addTask(t);"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"        return \"Added the Deadline : \" + t;"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"    DONE(x -\u003e x.toLowerCase().startsWith(\"done\"), (tm, data) -\u003e {"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"            int loc \u003d Integer.parseInt(data.substring(5)) - 1;"},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"            tm.doTaskByListId(loc);"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"            return \"The task has been set to done ! \\n - \" + tm.retrieveTaskByListId(loc);"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"        } catch (NumberFormatException e1) {"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"            return \"Not a valid index given !!\";"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"        } catch (IndexOutOfBoundsException | TaskAlreadyDoneException e) {"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"            return e.getMessage();"},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"    EVENT(x -\u003e x.toLowerCase().startsWith(\"event\"), (tm, data) -\u003e {"},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"        Task t \u003d new Event(data.substring(6));"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":"        tm.addTask(t);"},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"        return \"Added the Event : \" + t;"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":"    LIST(x -\u003e x.toLowerCase().startsWith(\"list\"), (tm, data) -\u003e {"},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":"        StringBuilder ret \u003d new StringBuilder();"},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"        int cnt \u003d 1;"},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":"        for (var x : tm.retrieveAllTasks()) {"},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":"            ret.append(cnt++).append(\". \").append(x).append(\"\\n\");"},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":"        return ret.toString();"},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"    TODO(x -\u003e x.toLowerCase().startsWith(\"todo\"), (tm, data) -\u003e {"},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"            Task t \u003d new Todo(data.substring(5));"},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"            tm.addTask(t);"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"            return \"Added the TODO : \" + t;"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":"            return e.getMessage();"},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"    DELETE(x -\u003e x.toLowerCase().startsWith(\"delete\"), (tm, data) -\u003e {"},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":"            int loc \u003d Integer.parseInt(data.substring(7)) - 1;"},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":"            Task x \u003d tm.retrieveTaskByListId(loc);"},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":"            tm.deleteTaskByListId(loc);"},{"lineNumber":80,"author":{"gitId":"rajobasu"},"content":"            return \"The task has been deleted ! \\n - \" + x;"},{"lineNumber":81,"author":{"gitId":"rajobasu"},"content":"        } catch (NumberFormatException e1) {"},{"lineNumber":82,"author":{"gitId":"rajobasu"},"content":"            return \"Not a valid index given !!\";"},{"lineNumber":83,"author":{"gitId":"rajobasu"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":84,"author":{"gitId":"rajobasu"},"content":"            return e.getMessage();"},{"lineNumber":85,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":87,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":88,"author":{"gitId":"rajobasu"},"content":"    UNKNOWN(x -\u003e true, (tm, data) -\u003e \"Unknown command!! I don\u0027t know what you mean\");"},{"lineNumber":89,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":90,"author":{"gitId":"rajobasu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":91,"author":{"gitId":"rajobasu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CLASS DETAILS STARTING HERE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":92,"author":{"gitId":"rajobasu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":93,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":94,"author":{"gitId":"rajobasu"},"content":"    private final Predicate\u003cString\u003e toMatch;"},{"lineNumber":95,"author":{"gitId":"rajobasu"},"content":"    private final BiFunction\u003cTaskManager, String, String\u003e func;"},{"lineNumber":96,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":97,"author":{"gitId":"rajobasu"},"content":"    InputType(Predicate\u003cString\u003e toMatch, BiFunction\u003cTaskManager, String, String\u003e func) {"},{"lineNumber":98,"author":{"gitId":"rajobasu"},"content":"        this.toMatch \u003d toMatch;"},{"lineNumber":99,"author":{"gitId":"rajobasu"},"content":"        this.func \u003d func;"},{"lineNumber":100,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":102,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"rajobasu"},"content":"     * Returns whether the given data is of this input type. Encapsulates input parsing."},{"lineNumber":104,"author":{"gitId":"rajobasu"},"content":"     * @param x - the given string"},{"lineNumber":105,"author":{"gitId":"rajobasu"},"content":"     * @return - whether it is of this {@code InputType}"},{"lineNumber":106,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"rajobasu"},"content":"    public boolean doesMatch(String x) {"},{"lineNumber":108,"author":{"gitId":"rajobasu"},"content":"        if (this.toMatch \u003d\u003d null || x \u003d\u003d null)"},{"lineNumber":109,"author":{"gitId":"rajobasu"},"content":"            return false;"},{"lineNumber":110,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":111,"author":{"gitId":"rajobasu"},"content":"        return toMatch.test(x);"},{"lineNumber":112,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":114,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"rajobasu"},"content":"     * Encapsulates the action associated with the particular {@code InputType}."},{"lineNumber":116,"author":{"gitId":"rajobasu"},"content":"     * @param tm - instance of {@code TaskManager}"},{"lineNumber":117,"author":{"gitId":"rajobasu"},"content":"     * @param data - data to act on"},{"lineNumber":118,"author":{"gitId":"rajobasu"},"content":"     * @return - the output of the action to be outputted."},{"lineNumber":119,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"rajobasu"},"content":"    public String apply(TaskManager tm, String data) {"},{"lineNumber":121,"author":{"gitId":"rajobasu"},"content":"        return func.apply(tm, data);"},{"lineNumber":122,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":123}},{"path":"src/main/java/core/TaskStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.Task;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":" * Interface having methods to facilitate storing of tasks."},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"public abstract class TaskStorage {"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"     * Saves the task list."},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"     * @param tm - the {@code TaskManager} to save."},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"     * @param fileLocation - the file location to save to."},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"     * @throws IOException - thrown if any IOException is encountered"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    public abstract void saveTaskList(ArrayList\u003cTask\u003e tm, Path fileLocation) throws IOException;"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"     * Retrieves the task list from the given {@code Path} location."},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"     * @param fileLocation - file location to load from"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"     * @return - the task list in the form of an {@code ArrayList\u003cTask\u003e}"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"     * @throws IOException - thrown if any IOException is encountered"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"    public abstract ArrayList\u003cTask\u003e retrieveTaskList(Path fileLocation) throws IOException;"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":28}},{"path":"src/main/java/core/TaskStorageFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.Task;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import java.io.FileInputStream;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import java.io.FileOutputStream;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"import java.io.InvalidClassException;"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"import java.io.ObjectInputStream;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"import java.io.ObjectOutputStream;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Files;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":" * Implementation of a {@code TaskStorage} in a file location."},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"public class"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"TaskStorageFile"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"        extends TaskStorage {"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"    public void saveTaskList(ArrayList\u003cTask\u003e tm, Path fileLocation) throws IOException {"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"        Files.createDirectories(fileLocation.getParent());"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"        try (var fWriter \u003d new FileOutputStream(fileLocation.toFile()); var oos \u003d new ObjectOutputStream((fWriter))) {"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"            oos.writeObject(tm);"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"    public ArrayList\u003cTask\u003e retrieveTaskList(Path fileLocation) throws IOException {"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"        if (!Files.isRegularFile(fileLocation)) {"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"        try (var fWriter \u003d new FileInputStream(fileLocation.toFile()); var ois \u003d new ObjectInputStream((fWriter))) {"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"                var x \u003d ois.readObject();"},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"                if (x instanceof ArrayList\u003c?\u003e) {"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"                    return (ArrayList\u003cTask\u003e) x;"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"                } else {"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"                    return new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"            } catch (ClassNotFoundException | InvalidClassException e) {"},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"                Files.deleteIfExists(fileLocation);"},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":"                return new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":51}},{"path":"src/main/java/core/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * Encapsulates a Deadline type Task."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public class Deadline extends TimedTask {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * Creates a new Deadline task with a description. Must contain \u0027/by\u0027 after which should be the event time."},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     * @param desc - description"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    public Deadline(String desc) {"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"        super(desc, \"/by\");"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + customFormat() + \")\";"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":21}},{"path":"src/main/java/core/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * Describes an Event."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public class Event extends TimedTask {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * Creates a new Event task with a description. Must contain \u0027/at\u0027 after which should be the event time."},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     * @param desc - the description"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    public Event(String desc) {"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"        super(desc, \"/at\");"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + customFormat() + \")\";"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":21}},{"path":"src/main/java/core/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import java.io.Serializable;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":" * A {@code Task} is the smallest entity and all items in the list are instances of {@code Task}."},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"public class Task implements Serializable {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    protected String taskDescription;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"    private final int taskUID;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    private static int UID_CURR;"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    static {"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"        UID_CURR \u003d 1;"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"    {"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        taskUID \u003d UID_CURR++;"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"     * Returns the Task unique identifier"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"     * @return - Task UID"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    public int getTaskUid() {"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"        return taskUID;"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"     * Constructs a Task using the description, and whether it is done or not."},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"     * @param desc - description"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"     * @param isDone - whether it is already done"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"    public Task(String desc, boolean isDone) {"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"        this.taskDescription \u003d desc;"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"     * Constructs a Task using the description."},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"     * @param desc - description"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"    public Task(String desc) {"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"        this(desc, false);"},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"     * Returns the status icon depending on whether the task has been done or not."},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"     * @return - status icon"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"    public String getStatusIcon() {"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"     * Sets the task as done."},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":"    public void setDone() {"},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":"        this.isDone \u003d true;"},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"     * Returns whether the task has already been done or not."},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"     * @return - whether the task has been done."},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"    public boolean isDone() {"},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"        return isDone;"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"     * Returns the task description."},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"     * @return - the description"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"    public String getTaskDescription() {"},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"        return taskDescription;"},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"rajobasu"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"rajobasu"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getTaskDescription();"},{"lineNumber":82,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":84,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"rajobasu"},"content":"     * Checks whether the given word is contained in the taskDescription."},{"lineNumber":86,"author":{"gitId":"rajobasu"},"content":"     * @param word - the given word to check"},{"lineNumber":87,"author":{"gitId":"rajobasu"},"content":"     * @return - true if the word is contained, false otherwise"},{"lineNumber":88,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"rajobasu"},"content":"    public boolean contains(String word) {"},{"lineNumber":90,"author":{"gitId":"rajobasu"},"content":"        return taskDescription.toLowerCase().contains(word.toLowerCase());"},{"lineNumber":91,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":93,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":93}},{"path":"src/main/java/core/task/TaskAlreadyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.DukeException;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":" * Thrown when the user tries to mark a {@code Task} as \u0027done\u0027 when it has already been marked as done."},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"public class TaskAlreadyDoneException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * Constructor for the class."},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    public TaskAlreadyDoneException() {"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"        super(\"Task has already been done!\");"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":16}},{"path":"src/main/java/core/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.TaskStorage;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import core.TaskStorageFile;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":" * Manages all the operations on the list of tasks, both active and done. Central class to manage tasks."},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"public class TaskManager {"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"    private ArrayList\u003cTask\u003e allTasks;"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    private Path savePath;"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"    private TaskStorage taskStorage;"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"     * Creates a new TaskManager, either from storage, or afresh."},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"     * @param loadFromStore - whether to load from store."},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"    public TaskManager(boolean loadFromStore) {"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"        taskStorage \u003d new TaskStorageFile();"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"        if(!loadFromStore) {"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"            allTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"            return;"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"        savePath \u003d Paths.get(\"data\", \"taskstore\");"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"            allTasks \u003d taskStorage.retrieveTaskList(savePath);"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"     * Creates a new TaskManager from storage. If storage is empty, then creates a new list."},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"    public TaskManager() {this(true);}"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"     * Adds a task."},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"     * @param task - task to be added."},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":"    public void addTask(Task task) {"},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"        allTasks.add(task);"},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"     * Returns the task corresponding to the list index given."},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":"     * @param id - list index"},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":"     * @return - corresponding Task"},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"    public Task retrieveTaskByListId(int id) {"},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":"        return allTasks.get(id);"},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":"     * Returns the task corresponding to the task UID given."},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"     * @param id - task UID"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"     * @return - corresponding Task"},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"    public Task retrieveTaskByTaskUid(int id) {"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"        for (var e : allTasks) {"},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"            if (e.getTaskUid() \u003d\u003d id) {"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"                return e;"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"        return null;"},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"     * Performs the task corresponding to the list index."},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":"     * @param id - list index"},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":"    public void doTaskByListId(int id) {"},{"lineNumber":80,"author":{"gitId":"rajobasu"},"content":"        var task \u003d retrieveTaskByListId(id);"},{"lineNumber":81,"author":{"gitId":"rajobasu"},"content":"        if (task.isDone()) {"},{"lineNumber":82,"author":{"gitId":"rajobasu"},"content":"            throw new TaskAlreadyDoneException();"},{"lineNumber":83,"author":{"gitId":"rajobasu"},"content":"        } else {"},{"lineNumber":84,"author":{"gitId":"rajobasu"},"content":"            task.setDone();"},{"lineNumber":85,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":88,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"rajobasu"},"content":"     * Performs the task corresponding to the task UID."},{"lineNumber":90,"author":{"gitId":"rajobasu"},"content":"     * @param id - Task UID"},{"lineNumber":91,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"rajobasu"},"content":"    public void doTaskByTaskUid(int id) {"},{"lineNumber":93,"author":{"gitId":"rajobasu"},"content":"        retrieveTaskByTaskUid(id).setDone();"},{"lineNumber":94,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":96,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"rajobasu"},"content":"     * Returns a list of all tasks."},{"lineNumber":98,"author":{"gitId":"rajobasu"},"content":"     * @return - list of tasks"},{"lineNumber":99,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"rajobasu"},"content":"    public List\u003cTask\u003e retrieveAllTasks() {"},{"lineNumber":101,"author":{"gitId":"rajobasu"},"content":"        return allTasks;"},{"lineNumber":102,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":104,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"rajobasu"},"content":"     * Deletes task corresponding to List index given."},{"lineNumber":106,"author":{"gitId":"rajobasu"},"content":"     * @param id - list index."},{"lineNumber":107,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"rajobasu"},"content":"    public void deleteTaskByListId(int id) {"},{"lineNumber":109,"author":{"gitId":"rajobasu"},"content":"        allTasks.remove(id);"},{"lineNumber":110,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":112,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"rajobasu"},"content":"     * Returns the {@code Path} where the storage is to be saved."},{"lineNumber":114,"author":{"gitId":"rajobasu"},"content":"     * @return - {@code Path}"},{"lineNumber":115,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"rajobasu"},"content":"    public Path getSavePath() {"},{"lineNumber":117,"author":{"gitId":"rajobasu"},"content":"        return savePath;"},{"lineNumber":118,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":120,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"rajobasu"},"content":"     * Sets the {@code Path} where everything is to be saved."},{"lineNumber":122,"author":{"gitId":"rajobasu"},"content":"     * @param savePath - {@code Path}"},{"lineNumber":123,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"rajobasu"},"content":"    public void setSavePath(Path savePath) {"},{"lineNumber":125,"author":{"gitId":"rajobasu"},"content":"        this.savePath \u003d savePath;"},{"lineNumber":126,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":128,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"rajobasu"},"content":"     * Gets the {@code TaskStorage} implementation."},{"lineNumber":130,"author":{"gitId":"rajobasu"},"content":"     * @return - {@code TaskStorage}"},{"lineNumber":131,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"rajobasu"},"content":"    public TaskStorage getTaskStorage() {"},{"lineNumber":133,"author":{"gitId":"rajobasu"},"content":"        return taskStorage;"},{"lineNumber":134,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":136,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"rajobasu"},"content":"     * Sets the {@code TaskStorage} implementation"},{"lineNumber":138,"author":{"gitId":"rajobasu"},"content":"     * @return - {@code TaskStorage} type."},{"lineNumber":139,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"rajobasu"},"content":"    public void setTaskStorage(TaskStorage taskStorage) {"},{"lineNumber":141,"author":{"gitId":"rajobasu"},"content":"        this.taskStorage \u003d taskStorage;"},{"lineNumber":142,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":144,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"rajobasu"},"content":"     * Reloads the task list from the given storage."},{"lineNumber":146,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"rajobasu"},"content":"    public void reloadTaskList() {"},{"lineNumber":148,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"rajobasu"},"content":"            allTasks \u003d taskStorage.retrieveTaskList(savePath);"},{"lineNumber":150,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":151,"author":{"gitId":"rajobasu"},"content":"        } catch (IOException e) {"},{"lineNumber":152,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":153,"author":{"gitId":"rajobasu"},"content":"        } catch (NullPointerException e){"},{"lineNumber":154,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":155,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":158,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"rajobasu"},"content":"     * Saves the tasklist to the assigned storage."},{"lineNumber":160,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"rajobasu"},"content":"    public void save() {"},{"lineNumber":162,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"rajobasu"},"content":"            taskStorage.saveTaskList(allTasks, savePath);"},{"lineNumber":164,"author":{"gitId":"rajobasu"},"content":"        } catch (IOException e) {"},{"lineNumber":165,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":166,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":169,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":169}},{"path":"src/main/java/core/task/TimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"public abstract class TimedTask extends Task{"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"    protected LocalDate time;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"    public TimedTask(String desc, String delimiter) {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"        super(desc);"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"        assert(desc.contains(delimiter));"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"        var parts \u003d desc.split(delimiter);"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"        this.taskDescription \u003d parts[0].trim();"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"        this.time \u003d LocalDate.parse(parts[1].trim());"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"    protected String customFormat() {"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"        return \"\" + time.getDayOfMonth() + \" : \" + time.getMonth() + \" : \" + time.getYear();"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":19}},{"path":"src/main/java/core/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * A {@code Task} of type Todo, that does not have any dates associated with it."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"     * Creates a {@code TodoTask} based on the description given."},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"     * @param desc - description."},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    public Todo(String desc) throws IllegalArgumentException {"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"        super(desc.trim());"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"        if(this.taskDescription.isEmpty()) {"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"            throw new IllegalArgumentException(\"Empty Description for task !!\");"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":23}},{"path":"src/main/java/ui/DukeApplicationPage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.InputHandler;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import core.InputListener;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import core.InputType;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import core.task.TaskManager;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"import javafx.event.EventHandler;"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.control.Button;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"import javafx.scene.text.Text;"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":" * This code has been taken and modified from the CS2103 book/guide provided."},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"public class DukeApplicationPage extends Application {"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"    private VBox dialogContainer;"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    private TextField userInput;"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"    private Scene scene;"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"    private InputListener inputListener;"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"    private Text textArea;"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"    public void start(Stage stage) {"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"        //Step 1. Formatting the window to look as expected."},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"        inputListener \u003d new InputHandler(tm);"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"        //..."},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"        //The container for the content of the chat to scroll."},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"        userInput \u003d new TextField();"},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":"        textArea \u003d new Text();"},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"        scrollPane.setContent(textArea);"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"        stage.setScene(scene);"},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":"        stage.show();"},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":"        //Step 2. Formatting the window to look as expected"},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":"        stage.setResizable(false);"},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":80,"author":{"gitId":"rajobasu"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":81,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":82,"author":{"gitId":"rajobasu"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":83,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":84,"author":{"gitId":"rajobasu"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":85,"author":{"gitId":"rajobasu"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":86,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":87,"author":{"gitId":"rajobasu"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);"},{"lineNumber":88,"author":{"gitId":"rajobasu"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":89,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":90,"author":{"gitId":"rajobasu"},"content":"        // more code to be added here later"},{"lineNumber":91,"author":{"gitId":"rajobasu"},"content":"        sendButton.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"},{"lineNumber":92,"author":{"gitId":"rajobasu"},"content":"            private StringBuilder text;"},{"lineNumber":93,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":94,"author":{"gitId":"rajobasu"},"content":"            @Override"},{"lineNumber":95,"author":{"gitId":"rajobasu"},"content":"            public void handle(MouseEvent event) {"},{"lineNumber":96,"author":{"gitId":"rajobasu"},"content":"                if (text \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitId":"rajobasu"},"content":"                    text \u003d new StringBuilder(\"\");"},{"lineNumber":98,"author":{"gitId":"rajobasu"},"content":"                }"},{"lineNumber":99,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":100,"author":{"gitId":"rajobasu"},"content":"                String data \u003d userInput.getText();"},{"lineNumber":101,"author":{"gitId":"rajobasu"},"content":"                text.append(\"[user] : \" + data + \"\\n\");"},{"lineNumber":102,"author":{"gitId":"rajobasu"},"content":"                String toPrint \u003d \"\";"},{"lineNumber":103,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":104,"author":{"gitId":"rajobasu"},"content":"                if (data.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":105,"author":{"gitId":"rajobasu"},"content":"                    tm.save();"},{"lineNumber":106,"author":{"gitId":"rajobasu"},"content":"                    System.exit(0);"},{"lineNumber":107,"author":{"gitId":"rajobasu"},"content":"                }"},{"lineNumber":108,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":109,"author":{"gitId":"rajobasu"},"content":"                for (var x : InputType.values()) {"},{"lineNumber":110,"author":{"gitId":"rajobasu"},"content":"                    if (x.doesMatch(data)) {"},{"lineNumber":111,"author":{"gitId":"rajobasu"},"content":"                        toPrint +\u003d inputListener.onNewInput(x, data);"},{"lineNumber":112,"author":{"gitId":"rajobasu"},"content":"                        break;"},{"lineNumber":113,"author":{"gitId":"rajobasu"},"content":"                    }"},{"lineNumber":114,"author":{"gitId":"rajobasu"},"content":"                }"},{"lineNumber":115,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":116,"author":{"gitId":"rajobasu"},"content":"                text.append(toPrint + \" \\n\");"},{"lineNumber":117,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":118,"author":{"gitId":"rajobasu"},"content":"                textArea.setText(text.toString());"},{"lineNumber":119,"author":{"gitId":"rajobasu"},"content":"                userInput.setText(\"\");"},{"lineNumber":120,"author":{"gitId":"rajobasu"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"rajobasu"},"content":"        });"},{"lineNumber":122,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":123,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":125,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":126,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":126}},{"path":"src/test/java/core/task/TaskManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"public class TaskManagerTest {"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    public void addTaskTest() {"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"        Task t1 \u003d new Todo(\"task1\");"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"        Task t2 \u003d new Deadline(\"task2 /by 2009-12-09\");"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        TaskManager tm \u003d new TaskManager(false);"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"        tm.addTask(t1);"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        tm.addTask(t2);"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        ArrayList\u003cTask\u003e t \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"        t.add(t1);"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"        t.add(t2);"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"        assertEquals(true, tm.retrieveAllTasks().equals(t));"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    public void savePathGetSetTest() {"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"        Path p \u003d Paths.get(\"data\");"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"        TaskManager tm \u003d new TaskManager(false);"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"        tm.setSavePath(p);"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"        assertEquals(p, tm.getSavePath());"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":32}},{"path":"src/test/java/core/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"class TaskTest{"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    public void containsTest() {"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"        Task t \u003d new Task(\"hello hello\");"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"        assertEquals(true, t.contains(\"hello\"));"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":13}},{"path":"src/test/java/core/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"public class TodoTest {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    public void dummyTest(){"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"        assertEquals(2, 2);"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"    public void todoStringTest() {"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        String y \u003d \"Some Task Todo\";"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"        Task x \u003d new Todo(y);"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        assertEquals(\"[T]\" + \"[\" + x.getStatusIcon() + \"] \" + y, x.toString());"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"task 1"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":"todo task 2"},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"deadline task 3 /by sunday"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"list"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"list"}],"authorContributionMap":{"rajobasu":6}}]
