[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"import core.IOManager;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":"import core.InputHandler;"},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":8,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"        InputHandler inputHandler \u003d new InputHandler(tm);"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        IOManager ioManager \u003d new IOManager();"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"        ioManager.setListener(inputHandler);"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        ioManager.run();"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        tm.save();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"rajobasu":11,"-":10}},{"path":"src/main/java/core/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * Base class for all types of exceptions to be thrown inside Duke."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public class DukeException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"     * Creates a new exception without any error message."},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    public DukeException() {"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"     * Creates a new exception with an error message."},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"     * @param s - error message."},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    public DukeException(String s) {"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        super(s);"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":21}},{"path":"src/main/java/core/IOManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import java.io.*;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" * The main IOManager of the program, manages reading input and outputting."},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"public class IOManager {"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    private InputListener listener;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"    private InputStream is;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    private PrintWriter pw;"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"     * Creates a new IOManager using {@code System.in} and {@code System.out}."},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    public IOManager() {"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        this(System.in, System.out);"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"     * Creates a new IOManager using specified input and output streams."},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"     * @param is - input stream"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"     * @param ps - output stream"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    public IOManager(InputStream is, PrintStream ps) {"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"        this.is \u003d is;"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"        this.pw \u003d new PrintWriter(ps);"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"     * Sets a new {@code InputListener} instance to handle the input."},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"     * @param listener"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"    public void setListener(InputListener listener) {"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"        this.listener \u003d listener;"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"    private void preOutputFormatting() {"},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"        pw.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"    private void postOutputFormatting() {"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"        pw.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"     * The main input loop."},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"    public void run() {"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"        try (var br \u003d new BufferedReader(new InputStreamReader(this.is))) {"},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":"            while (true) {"},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":"                String s \u003d br.readLine();"},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":"                preOutputFormatting();"},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"                if (s.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":"                    // exit condition"},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":"                    pw.println(\"bye\");"},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":"                    break;"},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"                } else {"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":"                    String toPrint \u003d \"\";"},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"                    for(var x : InputType.values()) {"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"                        if(x.doesMatch(s)) {"},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"                            toPrint +\u003d listener.onNewInput(x, s);"},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"                            break;"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"                        }"},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"                    }"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"                    pw.println(toPrint);"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":"                }"},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":"                postOutputFormatting();"},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"                pw.flush();"},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":"        } catch (IOException e) {"},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":79}},{"path":"src/main/java/core/InputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":" * Instance of InputListener to handle all the input in the Duke class."},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"public class InputHandler implements InputListener {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    private TaskManager taskManager;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"     * Creates a new InputHandler which uses the {@code TaskManager} to manage the {@code Task}s."},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"     * @param taskManager - taskmanager instance."},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"    public InputHandler(TaskManager taskManager) {"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        this.taskManager \u003d taskManager;"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    public String onNewInput(InputType type, String data) {"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"        return type.apply(this.taskManager, data);"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":26}},{"path":"src/main/java/core/InputListener.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * Functional Interface which only has a function to deal with new method."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public interface InputListener {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"     * Method to deal with any input."},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"     * @param type - type of input"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * @param data - the data for the task"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     * @return"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    String onNewInput(InputType type, String data);"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":14}},{"path":"src/main/java/core/InputType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import core.task.Event;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import core.task.Task;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import core.task.TaskAlreadyDoneException;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import core.task.TaskManager;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"import core.task.Todo;"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"import java.util.function.BiFunction;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":" * Enumerates the input types."},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"public enum InputType {"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    FIND(x -\u003e x.toLowerCase().trim().startsWith(\"find\"), (tm, data) -\u003e {"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        StringBuilder ret \u003d new StringBuilder(\"Matched items : \\n\");"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        var data2 \u003d data.substring(5);"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"        int cnt \u003d 1;"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"        for (var x : tm.retrieveAllTasks().stream().filter(x -\u003e x.contains(data2.trim())).toArray()) {"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"            ret.append(cnt++).append(\". \").append(x).append(\"\\n\");"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"        return ret.toString();"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"    DEADLINE(x -\u003e x.toLowerCase().startsWith(\"deadline\"), (tm, data) -\u003e {"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"        Task t \u003d new Deadline(data.substring(9));"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"        tm.addTask(t);"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"        return \"Added the Deadline : \" + t;"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"    DONE(x -\u003e x.toLowerCase().startsWith(\"done\"), (tm, data) -\u003e {"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"            int loc \u003d Integer.parseInt(data.substring(5)) - 1;"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":"            tm.doTaskByListId(loc);"},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"            return \"The task has been set to done ! \\n - \" + tm.retrieveTaskByListId(loc);"},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"        } catch (NumberFormatException e1) {"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"            return \"Not a valid index given !!\";"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"        } catch (IndexOutOfBoundsException | TaskAlreadyDoneException e) {"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"            return e.getMessage();"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":"    EVENT(x -\u003e x.toLowerCase().startsWith(\"event\"), (tm, data) -\u003e {"},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":"        Task t \u003d new Event(data.substring(6));"},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"        tm.addTask(t);"},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"        return \"Added the Event : \" + t;"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"    LIST(x -\u003e x.toLowerCase().startsWith(\"list\"), (tm, data) -\u003e {"},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":"        StringBuilder ret \u003d new StringBuilder();"},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":"        int cnt \u003d 1;"},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"        for (var x : tm.retrieveAllTasks()) {"},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":"            ret.append(cnt++).append(\". \").append(x).append(\"\\n\");"},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":"        return ret.toString();"},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"    TODO(x -\u003e x.toLowerCase().startsWith(\"todo\"), (tm, data) -\u003e {"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"            Task t \u003d new Todo(data.substring(5));"},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"            tm.addTask(t);"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"            return \"Added the TODO : \" + t;"},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"            return e.getMessage();"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"    DELETE(x -\u003e x.toLowerCase().startsWith(\"delete\"), (tm, data) -\u003e {"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"            int loc \u003d Integer.parseInt(data.substring(5)) - 1;"},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"            Task x \u003d tm.retrieveTaskByListId(loc);"},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":"            tm.deleteTaskByListId(loc);"},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":"            return \"The task has been deleted ! \\n - \" + x;"},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":"        } catch (NumberFormatException e1) {"},{"lineNumber":80,"author":{"gitId":"rajobasu"},"content":"            return \"Not a valid index given !!\";"},{"lineNumber":81,"author":{"gitId":"rajobasu"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":82,"author":{"gitId":"rajobasu"},"content":"            return e.getMessage();"},{"lineNumber":83,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"rajobasu"},"content":"    }),"},{"lineNumber":85,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":86,"author":{"gitId":"rajobasu"},"content":"    UNKNOWN(x -\u003e true, (tm, data) -\u003e \"Unknown command!! I don\u0027t know what you mean\");"},{"lineNumber":87,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":88,"author":{"gitId":"rajobasu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":89,"author":{"gitId":"rajobasu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CLASS DETAILS STARTING HERE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":90,"author":{"gitId":"rajobasu"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":91,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":92,"author":{"gitId":"rajobasu"},"content":"    private final Predicate\u003cString\u003e toMatch;"},{"lineNumber":93,"author":{"gitId":"rajobasu"},"content":"    private final BiFunction\u003cTaskManager, String, String\u003e func;"},{"lineNumber":94,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":95,"author":{"gitId":"rajobasu"},"content":"    InputType(Predicate\u003cString\u003e toMatch, BiFunction\u003cTaskManager, String, String\u003e func) {"},{"lineNumber":96,"author":{"gitId":"rajobasu"},"content":"        this.toMatch \u003d toMatch;"},{"lineNumber":97,"author":{"gitId":"rajobasu"},"content":"        this.func \u003d func;"},{"lineNumber":98,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":100,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"rajobasu"},"content":"     * Returns whether the given data is of this input type. Encapsulates input parsing."},{"lineNumber":102,"author":{"gitId":"rajobasu"},"content":"     * @param x - the given string"},{"lineNumber":103,"author":{"gitId":"rajobasu"},"content":"     * @return - whether it is of this {@code InputType}"},{"lineNumber":104,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"rajobasu"},"content":"    public boolean doesMatch(String x) {"},{"lineNumber":106,"author":{"gitId":"rajobasu"},"content":"        if (this.toMatch \u003d\u003d null || x \u003d\u003d null)"},{"lineNumber":107,"author":{"gitId":"rajobasu"},"content":"            return false;"},{"lineNumber":108,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":109,"author":{"gitId":"rajobasu"},"content":"        return toMatch.test(x);"},{"lineNumber":110,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":112,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"rajobasu"},"content":"     * Encapsulates the action associated with the particular {@code InputType}."},{"lineNumber":114,"author":{"gitId":"rajobasu"},"content":"     * @param tm - instance of {@code TaskManager}"},{"lineNumber":115,"author":{"gitId":"rajobasu"},"content":"     * @param data - data to act on"},{"lineNumber":116,"author":{"gitId":"rajobasu"},"content":"     * @return - the output of the action to be outputted."},{"lineNumber":117,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"rajobasu"},"content":"    public String apply(TaskManager tm, String data) {"},{"lineNumber":119,"author":{"gitId":"rajobasu"},"content":"        return func.apply(tm, data);"},{"lineNumber":120,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":121}},{"path":"src/main/java/core/TaskStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.Task;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":" * Interface having methods to facilitate storing of tasks."},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"public abstract class TaskStorage {"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"     * Saves the task list."},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"     * @param tm - the {@code TaskManager} to save."},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"     * @param fileLocation - the file location to save to."},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"     * @throws IOException - thrown if any IOException is encountered"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    public abstract void saveTaskList(ArrayList\u003cTask\u003e tm, Path fileLocation) throws IOException;"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"     * Retrieves the task list from the given {@code Path} location."},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"     * @param fileLocation - file location to load from"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"     * @return - the task list in the form of an {@code ArrayList\u003cTask\u003e}"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"     * @throws IOException - thrown if any IOException is encountered"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"    public abstract ArrayList\u003cTask\u003e retrieveTaskList(Path fileLocation) throws IOException;"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":28}},{"path":"src/main/java/core/TaskStorageFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.task.Task;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import java.io.FileInputStream;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import java.io.FileOutputStream;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"import java.io.ObjectInputStream;"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"import java.io.ObjectOutputStream;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Files;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":" * Implementation of a {@code TaskStorage} in a file location."},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"public class TaskStorageFile extends TaskStorage {"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    public void saveTaskList(ArrayList\u003cTask\u003e tm, Path fileLocation) throws IOException {"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"        Files.createDirectories(fileLocation.getParent());"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"        try (var fWriter \u003d new FileOutputStream(fileLocation.toFile()); var oos \u003d new ObjectOutputStream((fWriter))) {"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"            oos.writeObject(tm);"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"    public ArrayList\u003cTask\u003e retrieveTaskList(Path fileLocation) throws IOException {"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"        if (Files.isRegularFile(fileLocation)) {"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"            try (var fWriter \u003d new FileInputStream(fileLocation.toFile()); var ois \u003d new ObjectInputStream((fWriter))) {"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"                try {"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"                    var x \u003d ois.readObject();"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"                    if(x instanceof ArrayList\u003c?\u003e) {"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"                        return (ArrayList\u003cTask\u003e) x;"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"                    }else {"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"                        return new ArrayList\u003cTask\u003e();"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"                    }"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":"                } catch (ClassNotFoundException e) {"},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"                    Files.deleteIfExists(fileLocation);"},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"                    return new ArrayList\u003cTask\u003e();"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":47}},{"path":"src/main/java/core/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" * Encapsulates a Deadline type Task."},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    private LocalDate byTime;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"     * Creates a new Deadline task with a description. Must contain \u0027/by\u0027 after which should be the event time."},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"     * @param desc - description"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"    public Deadline(String desc) {"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"        super(desc);"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        var parts \u003d desc.split(\"/by\");"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"        this.taskDescription \u003d parts[0].trim();"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"        this.byTime \u003d LocalDate.parse(parts[1].trim());"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + byTime.format(DateTimeFormatter.ISO_LOCAL_DATE) + \")\";"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":28}},{"path":"src/main/java/core/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * Describes an Event."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"    private String atTime;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * Creates a new Event task with a description. Must contain \u0027/at\u0027 after which should be the event time."},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     * @param desc - the description"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    public Event(String desc) {"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"        super(desc);"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        var parts \u003d desc.split(\"/at\");"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"        this.taskDescription \u003d parts[0].trim();"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        this.atTime \u003d parts[1];"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + atTime + \")\";"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":25}},{"path":"src/main/java/core/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import java.io.Serializable;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":" * A {@code Task} is the smallest entity and all items in the list are instances of {@code Task}."},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"public class Task implements Serializable {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    protected String taskDescription;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"    private final int taskUID;"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    private static int UID_CURR;"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    static {"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"        UID_CURR \u003d 1;"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"    {"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        taskUID \u003d UID_CURR++;"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"     * Returns the Task unique identifier"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"     * @return - Task UID"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    public int getTaskUid() {"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"        return taskUID;"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"     * Constructs a Task using the description, and whether it is done or not."},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"     * @param desc - description"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"     * @param isDone - whether it is already done"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"    public Task(String desc, boolean isDone) {"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"        this.taskDescription \u003d desc;"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"     * Constructs a Task using the description."},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"     * @param desc - description"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"    public Task(String desc) {"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"        this(desc, false);"},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"     * Returns the status icon depending on whether the task has been done or not."},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"     * @return - status icon"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"    public String getStatusIcon() {"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"     * Sets the task as done."},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":"    public void setDone() {"},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":"        this.isDone \u003d true;"},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"     * Returns whether the task has already been done or not."},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"     * @return - whether the task has been done."},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"    public boolean isDone() {"},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"        return isDone;"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"     * Returns the task description."},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"     * @return - the description"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"    public String getTaskDescription() {"},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"        return taskDescription;"},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"rajobasu"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"rajobasu"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getTaskDescription();"},{"lineNumber":82,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":84,"author":{"gitId":"rajobasu"},"content":"    public boolean contains(String word) {"},{"lineNumber":85,"author":{"gitId":"rajobasu"},"content":"        return taskDescription.toLowerCase().contains(word.toLowerCase());"},{"lineNumber":86,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":88,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":88}},{"path":"src/main/java/core/task/TaskAlreadyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.DukeException;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":" * Thrown when the user tries to mark a {@code Task} as \u0027done\u0027 when it has already been marked as done."},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"public class TaskAlreadyDoneException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * Constructor for the class."},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    public TaskAlreadyDoneException() {"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"        super(\"Task has already been done!\");"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":16}},{"path":"src/main/java/core/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import core.TaskStorage;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import core.TaskStorageFile;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":" * Manages all the operations on the list of tasks, both active and done. Central class to manage tasks."},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"public class TaskManager {"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"    private ArrayList\u003cTask\u003e allTasks;"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    private Path savePath;"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"    private TaskStorage taskStorage;"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"     * Creates a new TaskManager, either from storage, or afresh."},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"     * @param loadFromStore - whether to load from store."},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":"    public TaskManager(boolean loadFromStore) {"},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"        taskStorage \u003d new TaskStorageFile();"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"        if(!loadFromStore) {"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"            allTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"            return;"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"        savePath \u003d Paths.get(\"data\", \"taskstore\");"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"rajobasu"},"content":"            allTasks \u003d taskStorage.retrieveTaskList(savePath);"},{"lineNumber":34,"author":{"gitId":"rajobasu"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":39,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"rajobasu"},"content":"     * Creates a new TaskManager from storage. If storage is empty, then creates a new list."},{"lineNumber":41,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"rajobasu"},"content":"    public TaskManager() {this(true);}"},{"lineNumber":43,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":44,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"rajobasu"},"content":"     * Adds a task."},{"lineNumber":46,"author":{"gitId":"rajobasu"},"content":"     * @param task - task to be added."},{"lineNumber":47,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"rajobasu"},"content":"    public void addTask(Task task) {"},{"lineNumber":49,"author":{"gitId":"rajobasu"},"content":"        allTasks.add(task);"},{"lineNumber":50,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":52,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"rajobasu"},"content":"     * Returns the task corresponding to the list index given."},{"lineNumber":54,"author":{"gitId":"rajobasu"},"content":"     * @param id - list index"},{"lineNumber":55,"author":{"gitId":"rajobasu"},"content":"     * @return - corresponding Task"},{"lineNumber":56,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"rajobasu"},"content":"    public Task retrieveTaskByListId(int id) {"},{"lineNumber":58,"author":{"gitId":"rajobasu"},"content":"        return allTasks.get(id);"},{"lineNumber":59,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":61,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"rajobasu"},"content":"     * Returns the task corresponding to the task UID given."},{"lineNumber":63,"author":{"gitId":"rajobasu"},"content":"     * @param id - task UID"},{"lineNumber":64,"author":{"gitId":"rajobasu"},"content":"     * @return - corresponding Task"},{"lineNumber":65,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"rajobasu"},"content":"    public Task retrieveTaskByTaskUid(int id) {"},{"lineNumber":67,"author":{"gitId":"rajobasu"},"content":"        for (var e : allTasks) {"},{"lineNumber":68,"author":{"gitId":"rajobasu"},"content":"            if (e.getTaskUid() \u003d\u003d id) {"},{"lineNumber":69,"author":{"gitId":"rajobasu"},"content":"                return e;"},{"lineNumber":70,"author":{"gitId":"rajobasu"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"rajobasu"},"content":"        return null;"},{"lineNumber":73,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":75,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"rajobasu"},"content":"     * Performs the task corresponding to the list index."},{"lineNumber":77,"author":{"gitId":"rajobasu"},"content":"     * @param id - list index"},{"lineNumber":78,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"rajobasu"},"content":"    public void doTaskByListId(int id) {"},{"lineNumber":80,"author":{"gitId":"rajobasu"},"content":"        var task \u003d retrieveTaskByListId(id);"},{"lineNumber":81,"author":{"gitId":"rajobasu"},"content":"        if (task.isDone()) {"},{"lineNumber":82,"author":{"gitId":"rajobasu"},"content":"            throw new TaskAlreadyDoneException();"},{"lineNumber":83,"author":{"gitId":"rajobasu"},"content":"        } else {"},{"lineNumber":84,"author":{"gitId":"rajobasu"},"content":"            task.setDone();"},{"lineNumber":85,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":88,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"rajobasu"},"content":"     * Performs the task corresponding to the task UID."},{"lineNumber":90,"author":{"gitId":"rajobasu"},"content":"     * @param id - Task UID"},{"lineNumber":91,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"rajobasu"},"content":"    public void doTaskByTaskUid(int id) {"},{"lineNumber":93,"author":{"gitId":"rajobasu"},"content":"        retrieveTaskByTaskUid(id).setDone();"},{"lineNumber":94,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":96,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"rajobasu"},"content":"     * Returns a list of all tasks."},{"lineNumber":98,"author":{"gitId":"rajobasu"},"content":"     * @return - list of tasks"},{"lineNumber":99,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"rajobasu"},"content":"    public List\u003cTask\u003e retrieveAllTasks() {"},{"lineNumber":101,"author":{"gitId":"rajobasu"},"content":"        return allTasks;"},{"lineNumber":102,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":104,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"rajobasu"},"content":"     * Deletes task corresponding to List index given."},{"lineNumber":106,"author":{"gitId":"rajobasu"},"content":"     * @param id - list index."},{"lineNumber":107,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"rajobasu"},"content":"    public void deleteTaskByListId(int id) {"},{"lineNumber":109,"author":{"gitId":"rajobasu"},"content":"        allTasks.remove(id);"},{"lineNumber":110,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":112,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"rajobasu"},"content":"     * Returns the {@code Path} where the storage is to be saved."},{"lineNumber":114,"author":{"gitId":"rajobasu"},"content":"     * @return - {@code Path}"},{"lineNumber":115,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"rajobasu"},"content":"    public Path getSavePath() {"},{"lineNumber":117,"author":{"gitId":"rajobasu"},"content":"        return savePath;"},{"lineNumber":118,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":120,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"rajobasu"},"content":"     * Sets the {@code Path} where everything is to be saved."},{"lineNumber":122,"author":{"gitId":"rajobasu"},"content":"     * @param savePath - {@code Path}"},{"lineNumber":123,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"rajobasu"},"content":"    public void setSavePath(Path savePath) {"},{"lineNumber":125,"author":{"gitId":"rajobasu"},"content":"        this.savePath \u003d savePath;"},{"lineNumber":126,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":128,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"rajobasu"},"content":"     * Gets the {@code TaskStorage} implementation."},{"lineNumber":130,"author":{"gitId":"rajobasu"},"content":"     * @return - {@code TaskStorage}"},{"lineNumber":131,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"rajobasu"},"content":"    public TaskStorage getTaskStorage() {"},{"lineNumber":133,"author":{"gitId":"rajobasu"},"content":"        return taskStorage;"},{"lineNumber":134,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":136,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"rajobasu"},"content":"     * Sets the {@code TaskStorage} implementation"},{"lineNumber":138,"author":{"gitId":"rajobasu"},"content":"     * @return - {@code TaskStorage} type."},{"lineNumber":139,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"rajobasu"},"content":"    public void setTaskStorage(TaskStorage taskStorage) {"},{"lineNumber":141,"author":{"gitId":"rajobasu"},"content":"        this.taskStorage \u003d taskStorage;"},{"lineNumber":142,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":144,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"rajobasu"},"content":"     * Reloads the task list from the given storage."},{"lineNumber":146,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"rajobasu"},"content":"    public void reloadTaskList() {"},{"lineNumber":148,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"rajobasu"},"content":"            allTasks \u003d taskStorage.retrieveTaskList(savePath);"},{"lineNumber":150,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":151,"author":{"gitId":"rajobasu"},"content":"        } catch (IOException e) {"},{"lineNumber":152,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":153,"author":{"gitId":"rajobasu"},"content":"        } catch (NullPointerException e){"},{"lineNumber":154,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":155,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":158,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"rajobasu"},"content":"     * Saves the tasklist to the assigned storage."},{"lineNumber":160,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"rajobasu"},"content":"    public void save() {"},{"lineNumber":162,"author":{"gitId":"rajobasu"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"rajobasu"},"content":"            taskStorage.saveTaskList(allTasks, savePath);"},{"lineNumber":164,"author":{"gitId":"rajobasu"},"content":"        } catch (IOException e) {"},{"lineNumber":165,"author":{"gitId":"rajobasu"},"content":"            e.printStackTrace();"},{"lineNumber":166,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":169,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":169}},{"path":"src/main/java/core/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":" * A {@code Task} of type Todo, that does not have any dates associated with it."},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":" */"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"     * Creates a {@code TodoTask} based on the description given."},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"     * @param desc - description."},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    public Todo(String desc) throws IllegalArgumentException {"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"        super(desc.trim());"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"        if(this.taskDescription.isEmpty()) {"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"            throw new IllegalArgumentException(\"Empty Description for task !!\");"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":23}},{"path":"src/test/java/core/task/TaskManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"public class TaskManagerTest {"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"    public void addTaskTest() {"},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"        Task t1 \u003d new Todo(\"task1\");"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"        Task t2 \u003d new Deadline(\"task2 /by 2009-12-09\");"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        TaskManager tm \u003d new TaskManager(false);"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"        tm.addTask(t1);"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        tm.addTask(t2);"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"        ArrayList\u003cTask\u003e t \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"        t.add(t1);"},{"lineNumber":21,"author":{"gitId":"rajobasu"},"content":"        t.add(t2);"},{"lineNumber":22,"author":{"gitId":"rajobasu"},"content":"        assertEquals(true, tm.retrieveAllTasks().equals(t));"},{"lineNumber":23,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":25,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"rajobasu"},"content":"    public void savePathGetSetTest() {"},{"lineNumber":27,"author":{"gitId":"rajobasu"},"content":"        Path p \u003d Paths.get(\"data\");"},{"lineNumber":28,"author":{"gitId":"rajobasu"},"content":"        TaskManager tm \u003d new TaskManager(false);"},{"lineNumber":29,"author":{"gitId":"rajobasu"},"content":"        tm.setSavePath(p);"},{"lineNumber":30,"author":{"gitId":"rajobasu"},"content":"        assertEquals(p, tm.getSavePath());"},{"lineNumber":31,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":32}},{"path":"src/test/java/core/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":"class TaskTest{"},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    public void containsTest() {"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"        Task t \u003d new Task(\"hello hello\");"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"        assertEquals(true, t.contains(\"hello\"));"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":13}},{"path":"src/test/java/core/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"package core.task;"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":7,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":8,"author":{"gitId":"rajobasu"},"content":"public class TodoTest {"},{"lineNumber":9,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"rajobasu"},"content":"    public void dummyTest(){"},{"lineNumber":11,"author":{"gitId":"rajobasu"},"content":"        assertEquals(2, 2);"},{"lineNumber":12,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"rajobasu"},"content":""},{"lineNumber":14,"author":{"gitId":"rajobasu"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"rajobasu"},"content":"    public void todoStringTest() {"},{"lineNumber":16,"author":{"gitId":"rajobasu"},"content":"        String y \u003d \"Some Task Todo\";"},{"lineNumber":17,"author":{"gitId":"rajobasu"},"content":"        Task x \u003d new Todo(y);"},{"lineNumber":18,"author":{"gitId":"rajobasu"},"content":"        assertEquals(\"[T]\" + \"[\" + x.getStatusIcon() + \"] \" + y, x.toString());"},{"lineNumber":19,"author":{"gitId":"rajobasu"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"rajobasu"},"content":"}"}],"authorContributionMap":{"rajobasu":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rajobasu"},"content":"task 1"},{"lineNumber":2,"author":{"gitId":"rajobasu"},"content":"todo task 2"},{"lineNumber":3,"author":{"gitId":"rajobasu"},"content":"deadline task 3 /by sunday"},{"lineNumber":4,"author":{"gitId":"rajobasu"},"content":"list"},{"lineNumber":5,"author":{"gitId":"rajobasu"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"rajobasu"},"content":"list"}],"authorContributionMap":{"rajobasu":6}}]
