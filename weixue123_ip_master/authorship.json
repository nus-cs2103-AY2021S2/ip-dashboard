[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"# duke.duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"1. After that, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"weixue123":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"weixue123":17,"-":45}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"D | 1 | CS2103 Quiz 6 | 2021-02-19 00:00"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":"E | 0 | CS2103 Tutorial 6 | 2021-02-17 16:00"},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"T | 1 | CS2103 Revision | "}],"authorContributionMap":{"weixue123":3}},{"path":"data/test.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"T | 0 | CS2103 Quiz | "},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":"D | 0 | CS2103 Quiz | 2021-02-17 19:14"},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"E | 0 | CS2103 Quiz | 2021-02-17 19:14"}],"authorContributionMap":{"weixue123":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"In short, **Nana the Cat Manager** is a **to-do list** desktop application with the GUI of a messaging app."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"The app manages a list of tasks, recording and tracking the following information for each:"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"1. The task\u0027s status, i.e. whether it is done."},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"2. The task\u0027s description."},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"3. The task\u0027s deadline or time."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"## Features"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"### Add To-do Task"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"Adds a task of to-do type to the lists of tasks."},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"### Add Deadline Task"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"Adds a task of deadline type to the lists of tasks."},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"### Add Event Task"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"Adds a task of event type to the lists of tasks."},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"### List Tasks"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"Displays the list of tasks with index numbers, statuses, descriptions, and time."},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"### Mark as Done"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"Marks a task in the list of tasks as done."},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"### Delete Task"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"Deletes a task from the list of tasks."},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"### Find Task"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"Lists the tasks with descriptions matching some specified keyword(s)."},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"### Get Reminder"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"Lists the tasks which are overdue or urgent."},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"### Save Data \u0026 Terminate Application"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"Saves the lists of tasks into the hard drive before terminating the application."},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"### Load Save Data"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"Loads the lists of tasks saved from the previous session."},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"This section specifies the respective commands to execute each feature."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"#### Notes about the command format:"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"  e.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter specifying the to-do\u0027s description, as"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"  in `todo CS2103 Revision`."},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"  e.g. Both `deadline CS2103 Quiz 6 2021-02-19`and `deadline CS2103 Quiz 6 2021-02-19 14:00`"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"  works, w.r.t the command `deadline DESCRIPTION /by DATE [TIME]`."},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"* Commands must follow the exact order as specified below.\u003cbr\u003e"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"* Extraneous parameters for commands that do not take in parameters will be ignored.\u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"  e.g. if the command specifies `list 123`, it will be interpreted as `list`."},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"### `todo`: Add To-do Task"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"Adds a new task of to-do type to the list of tasks."},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"Command format: `todo DESCRIPTION`"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"Example of usage:"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"![todo_example](images/todoExample.png)"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"### `deadline`: Add Deadline Task"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"Adds a new task of deadline type to the list of tasks."},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"Command format: `deadline DESCRIPTION /by DATE [TIME]`"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"- `DATE` must follow the `YYYY-MM-DD` format."},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"- `TIME` must follow the `HH:mm` format."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"![deadline_example](images/deadlineExample.png)"},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":"### `event`: Add Event Task"},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"Adds a new task of event type to the list of tasks."},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"Command format: `event DESCRIPTION /at DATE [TIME]`"},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"- `DATE` must follow the `YYYY-MM-DD` format."},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"- `TIME` must follow the `HH:mm` format."},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":"Example of usage:"},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":116,"author":{"gitId":"weixue123"},"content":"![event_example](images/eventExample.png)"},{"lineNumber":117,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":118,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":120,"author":{"gitId":"weixue123"},"content":"### `list`: List Tasks"},{"lineNumber":121,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":122,"author":{"gitId":"weixue123"},"content":"Displays the list of tasks with index numbers, statuses, descriptions, and timings."},{"lineNumber":123,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":124,"author":{"gitId":"weixue123"},"content":"Command format: `list`"},{"lineNumber":125,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":126,"author":{"gitId":"weixue123"},"content":"Example of usage:"},{"lineNumber":127,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":128,"author":{"gitId":"weixue123"},"content":"![list_example](images/listExample.png)"},{"lineNumber":129,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":130,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":131,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":132,"author":{"gitId":"weixue123"},"content":"### `done`: Mark as Done"},{"lineNumber":133,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":134,"author":{"gitId":"weixue123"},"content":"Marks a task, at a specified index in the list of tasks, as done."},{"lineNumber":135,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":136,"author":{"gitId":"weixue123"},"content":"Command format: `done INDEX`"},{"lineNumber":137,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":138,"author":{"gitId":"weixue123"},"content":"- Marks the task at the specified `INDEX` as done."},{"lineNumber":139,"author":{"gitId":"weixue123"},"content":"- `INDEX` must be a positive integer"},{"lineNumber":140,"author":{"gitId":"weixue123"},"content":"- To find out the index of a particular task, use the `list` command."},{"lineNumber":141,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":142,"author":{"gitId":"weixue123"},"content":"Example of usage:"},{"lineNumber":143,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":144,"author":{"gitId":"weixue123"},"content":"![done_example](images/doneExample.png)"},{"lineNumber":145,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":146,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":147,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":148,"author":{"gitId":"weixue123"},"content":"### `delete`: Delete Task"},{"lineNumber":149,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":150,"author":{"gitId":"weixue123"},"content":"Deletes a task from the list of tasks."},{"lineNumber":151,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":152,"author":{"gitId":"weixue123"},"content":"Command format: `delete INDEX`"},{"lineNumber":153,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":154,"author":{"gitId":"weixue123"},"content":"- Deletes the task at the specified `INDEX`."},{"lineNumber":155,"author":{"gitId":"weixue123"},"content":"- `INDEX` index must be a positive integer."},{"lineNumber":156,"author":{"gitId":"weixue123"},"content":"- To find out the index of a particular task, use the `list` command."},{"lineNumber":157,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":158,"author":{"gitId":"weixue123"},"content":"Example of usage:"},{"lineNumber":159,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":160,"author":{"gitId":"weixue123"},"content":"![delete_example](images/deleteExample.png)"},{"lineNumber":161,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":162,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":163,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":164,"author":{"gitId":"weixue123"},"content":"### `find`: Find Task"},{"lineNumber":165,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":166,"author":{"gitId":"weixue123"},"content":"Lists the tasks with descriptions matching some specified keyword(s), if any."},{"lineNumber":167,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":168,"author":{"gitId":"weixue123"},"content":"Command format: `find KEYWORDS`"},{"lineNumber":169,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":170,"author":{"gitId":"weixue123"},"content":"Example of usage:"},{"lineNumber":171,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":172,"author":{"gitId":"weixue123"},"content":"![find_example](images/findExample.png)"},{"lineNumber":173,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":174,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":175,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":176,"author":{"gitId":"weixue123"},"content":"### `reminder`: Get Reminder"},{"lineNumber":177,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":178,"author":{"gitId":"weixue123"},"content":"Lists the tasks which are overdue or urgent, if any."},{"lineNumber":179,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":180,"author":{"gitId":"weixue123"},"content":"Command format: `reminder URGENCY`"},{"lineNumber":181,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":182,"author":{"gitId":"weixue123"},"content":"- `URGENCY` refers to the number of days used when determining whether a task is urgent."},{"lineNumber":183,"author":{"gitId":"weixue123"},"content":"- Suppose a task\u0027s deadline is in 2 days."},{"lineNumber":184,"author":{"gitId":"weixue123"},"content":"    - If `URGENCY` is 1, then the task is considered urgent."},{"lineNumber":185,"author":{"gitId":"weixue123"},"content":"    - If `URGENCY` is 3, then the task is considered not urgent."},{"lineNumber":186,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":187,"author":{"gitId":"weixue123"},"content":"Example of usage:"},{"lineNumber":188,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":189,"author":{"gitId":"weixue123"},"content":"![reminder_example](images/reminderExample.png)"},{"lineNumber":190,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":191,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":192,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":193,"author":{"gitId":"weixue123"},"content":"### `bye`: Save Data \u0026 Terminate Application"},{"lineNumber":194,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":195,"author":{"gitId":"weixue123"},"content":"Terminates the application, but only after saving the task list into the hard drive."},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"weixue123"},"content":"Command format: `bye`"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"weixue123"},"content":"### Load Save Data"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"weixue123"},"content":"This is done automatically upon launching the application."},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"weixue123"},"content":"\u003cbr\u003e"}],"authorContributionMap":{"weixue123":189,"-":16}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.commands.Command;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.commands.InvalidInputCommand;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Storage;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import duke.ui.Parser;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":" * The chatbot/to-do list application."},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    private final Storage storage;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     * Initializes an instance of Duke with a \u003ccode\u003eTaskList\u003c/code\u003e property, which is essentially the"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     * state of the application, and a \u003ccode\u003eStorage\u003c/code\u003e property, which handles the loading and saving"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     * of tasks when the application starts and shuts down respectively."},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"     * @param fileName Name of text file in directory /data/ from which tasks are loaded when the app starts, and to"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"     *                 which tasks are saved when the app terminates."},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     *                 If the text file does not already exist in the directory /data/, then the app starts"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     *                 with an empty \u003ccode\u003eTaskList\u003c/code\u003e. When the app terminates, a new text file"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     *                 with the input file name will be created, to which existing tasks are saved."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    public Duke(String fileName) {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        this.storage \u003d new Storage(fileName);"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d this.storage.loadTasks();"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     * Executes the command and computes a response to display to the users w.r.t."},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     * the users\u0027 input."},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e of response."},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    public String getResponse(String input) {"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        Command command \u003d Parser.parse(input);"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        command.execute(this.tasks);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"        if (command instanceof ByeCommand) {"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"            this.storage.saveTasks(this.tasks);"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        return command.getResponse(this.tasks);"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"     * Determines if the application should be exited w.r.t the users\u0027 input."},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     * @return True if the application should be terminated, and false otherwise."},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"    public boolean isExit(String input) {"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"        Command command \u003d Parser.parse(input);"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"        return command.isExit();"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"     * Determines if the raw input is valid."},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"     * @return True if the input is valid, and false otherwise."},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"    public boolean inputIsValid(String input) {"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"        return !(Parser.parse(input) instanceof InvalidInputCommand);"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"weixue123":69,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":" * A launcher class to work around classpath issues."},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    private final Duke duke \u003d new Duke(\"tasks.txt\");"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(this.duke);"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":32}},{"path":"src/main/java/duke/commands/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.ui.TaskStringFormatter;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":" * Handles the logic of adding a \u003ccode\u003eTask\u003c/code\u003e to the to-do list."},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"public class AddTaskCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"    private final Task task;"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"     * Initializes a command to add a \u003ccode\u003eTask\u003c/code\u003e to the to-do list."},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * @param task The \u003ccode\u003eTask\u003c/code\u003e to be added to the to-do list."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    public AddTaskCommand(Task task) {"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"        this.task \u003d task;"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"     * Returns false as adding \u003ccode\u003eDeadline\u003c/code\u003e tasks should not terminate the application."},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     * @return false"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    public boolean isExit() {"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"        return false;"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"     * Adds the created \u003ccode\u003eTask\u003c/code\u003e to the input \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        tasks.addTask(this.task);"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"     * Computes a response to notify the users the adding of the \u003ccode\u003eTask\u003c/code\u003e."},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e to respond to the adding of the \u003ccode\u003eDeadline\u003c/code\u003e."},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    public String getResponse(TaskList tasks) {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        return \"Meow... I\u0027ve added this task:\\n\""},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"                + TaskStringFormatter.getTaskTable(this.task) + \"\\n\""},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"                + \"Now you have \" + tasks.getSize() + \" task(s) in the list :)\";"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":53}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":" * Handles the logic of terminating the application."},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"public class ByeCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"     * Returns true as the application should terminate when users input \"bye\"."},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"     * @return true"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    public boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"        return true;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     * Does nothing."},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     * Creates a response to notify the users that the application is shutting down."},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e to respond to the closing of the application."},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"    public String getResponse(TaskList tasks) {"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        return \"Meow... Seeya!\";"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":36}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":" * Handles the logic of the application."},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"     * Alters the application\u0027s state through the input \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    public abstract void execute(TaskList tasks);"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     * Computes a feedback or response to the users\u0027 input."},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e of response."},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    public abstract String getResponse(TaskList tasks);"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * Determines whether or not to terminate the application."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     * @return True if the application should terminate, and false otherwise."},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"    public abstract boolean isExit();"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":31}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.TaskNumberNotExistException;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import duke.ui.TaskStringFormatter;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":" * Handles the logic of deleting a task from the to-do list."},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"    private final int index;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    private Task deletedTask;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * Initializes a command to delete a \u003ccode\u003eTask\u003c/code\u003e from the to-do list."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     * The task to delete will be identified using its index in the application\u0027s"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     * \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     * @param index Index of the task to delete."},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"        this.index \u003d index;"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     * Returns false as deleting tasks should not terminate the application."},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     * @return false"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    public boolean isExit() {"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"        return false;"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     * Deletes a \u003ccode\u003eTask\u003c/code\u003e, identified by its index, from the input \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        // Set this.deletedTask to the popped Task (if any), or else null."},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        this.deletedTask \u003d tasks.popTaskByIndex(this.index);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"     * Computes a response to notify the users if a \u003ccode\u003eTask\u003c/code\u003e is deleted."},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e to respond to the deletion of a \u003ccode\u003eTask\u003c/code\u003e (if any)."},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    public String getResponse(TaskList tasks) {"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"            // Note that this getResponse method MUST be called after the execute method. Following"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"            // this condition, if this.deletedTask is equal to null here, then no task was popped"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"            // earlier. That can only mean that the index input into this command does not exist."},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"            if (null \u003d\u003d this.deletedTask) {"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"                throw new TaskNumberNotExistException(this.index);"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"        } catch (TaskNumberNotExistException e) {"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"            return e.getMessage();"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        return \"Mrawww I\u0027ve removed this task:\\n\""},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"                + TaskStringFormatter.getTaskTable(this.deletedTask);"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":67}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.TaskNumberNotExistException;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import duke.ui.TaskStringFormatter;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":" * Handles the logic of marking a task in the to-do as done."},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"    private final int index;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    private Task doneTask;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * Initializes a command to mark a \u003ccode\u003eTask\u003c/code\u003e in the to-do list as done."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     * The task will be identified using its index in the application\u0027s \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     * @param index Index of the task to be marked as done."},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    public DoneCommand(int index) {"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"        this.index \u003d index;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * Returns false as marking tasks as done should not terminate the application."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     * @return false"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"    public boolean isExit() {"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"        return false;"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     * Marks a \u003ccode\u003eTask\u003c/code\u003e in the input \u003ccode\u003eTaskList\u003c/code\u003e, identified by its index, as done."},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"        // Set this.doneTask to the task to be marked as done (if any), or else null."},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        this.doneTask \u003d tasks.getTaskByIndex(this.index);"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        if (null !\u003d this.doneTask) {"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"            this.doneTask.markAsDone();"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"     * Computes a response to notify the users if a \u003ccode\u003eTask\u003c/code\u003e is marked as done."},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e to respond to marking a \u003ccode\u003eTask\u003c/code\u003e as done."},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    public String getResponse(TaskList tasks) {"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"            // Note that this getResponse method MUST be called after the execute method. Following"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"            // this condition, iff this.doneTask is equal to null here, then no task was marked as"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"            // done earlier. That can only mean that the index input into this command does not exist."},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"            if (null \u003d\u003d this.doneTask) {"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"                throw new TaskNumberNotExistException(this.index);"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        } catch (TaskNumberNotExistException e) {"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"            return e.getMessage();"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        return \"Prrrr! I\u0027ve marked this task as done:\\n\""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"                + TaskStringFormatter.getTaskTable(this.doneTask);"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":69}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.ui.TaskStringFormatter;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":" * Handles the logic of searching the to-do list for tasks that matches certain keywords."},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"    private final String keywords;"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"     * Initializes a command to search the application\u0027s \u003ccode\u003eTaskList\u003c/code\u003e for task(s)"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"     * whose descriptions match the input keyword(s)."},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     * @param keywords The input keyword(s)."},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    public FindCommand(String keywords) {"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     * Returns false as searching for tasks should not terminate the application."},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * @return false"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    public boolean isExit() {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     * Does nothing."},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"     * Creates a response to display the search results to the users. The tasks in the search"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     * results will take the form of a multi-line string, with each row displaying one task with its"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     * index, description and status."},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e displaying the search results."},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"    public String getResponse(TaskList tasks) {"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        TaskList matchingTasks \u003d new TaskList();"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"        for (Task task : tasks.getListOfTasks()) {"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"            String taskDescription \u003d task.getDescription().toLowerCase();"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"            String stringToFind \u003d this.keywords.toLowerCase();"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"            if (taskDescription.contains(stringToFind)) {"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"                matchingTasks.addTask(task);"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"        if (matchingTasks.getSize() \u003d\u003d 0) {"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"            return \"No tasks matches the keyword(s) \u0027\" + this.keywords + \"\u0027 :O\";"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"            return \"Meow I\u0027ve found the matching tasks:\\n\""},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"                    + \"\\n\""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"                    + TaskStringFormatter.getTaskTable(matchingTasks);"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":68}},{"path":"src/main/java/duke/commands/InvalidInputCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":" * Handles the logic for when the users input invalid commands"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"public class InvalidInputCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"    private final String message;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"    public InvalidInputCommand(String message) {"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"        this.message \u003d message;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * Does nothing."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     * Computes a feedback or response to the users\u0027 input."},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     * @return Error message"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    public String getResponse(TaskList tasks) {"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        return this.message;"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     * Returns false as invalid user input should not terminate the application."},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     * @return false"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    public boolean isExit() {"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        return false;"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":41}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.ui.TaskStringFormatter;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":" * Handles the logic of listing the tasks in the to-do list."},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"     * Does nothing."},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     * Returns false as listing tasks should not terminate the application."},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"     * @return false"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     * Creates a response to display the existing tasks, if any, to the users. The output will"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     * take the form of a multi-line string, with each row displaying one task with its"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"     * index, description and status."},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e displaying the existing tasks."},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"    public String getResponse(TaskList tasks) {"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        if (tasks.getSize() \u003d\u003d 0) {"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"            return \"You have no tasks in your list yet :X\";"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"            return \"Here are the task(s) in your list:\\n\""},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"                    + \"\\n\""},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"                    + TaskStringFormatter.getTaskTable(tasks);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":45}},{"path":"src/main/java/duke/commands/ReminderCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import duke.ui.TaskStringFormatter;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":" * Handles the logic of generating reminders w.r.t. the tasks in the to-do list."},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"public class ReminderCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    private final int urgencyDays;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * Initializes a command to list out the overdue and urgent tasks in the to-do list."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     * @param urgencyDays Number of days to use when determining if a \u003ccode\u003eDeadline\u003c/code\u003e"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     *                    or an \u003ccode\u003eEvent\u003c/code\u003e is urgent."},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    public ReminderCommand(int urgencyDays) {"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"        this.urgencyDays \u003d urgencyDays;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * Does nothing."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"    public void execute(TaskList tasks) {"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     * Returns false as listing reminders should not terminate the application."},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     * @return false"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    public boolean isExit() {"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        return false;"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     * Creates a response to display overdue or urgent tasks, if any, to the users. The output will"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     * take the form of a multi-line string, with each row displaying one task with its"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     * index, description and status."},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eString\u003c/code\u003e displaying the existing tasks."},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"    public String getResponse(TaskList tasks) {"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"        return this.getOverdueTasksResponse(tasks) + \"\\n\""},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"                + this.getUrgentTasksResponse(tasks, this.urgencyDays);"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"    private String getOverdueTasksResponse(TaskList tasks) {"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"        TaskList overdueTasks \u003d this.getOverdueTasks(tasks);"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"        int numOverdue \u003d overdueTasks.getSize();"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        if (numOverdue \u003d\u003d 0) {"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"            return \"You do not have any overdue tasks!\";"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"            return \"Uh oh... You have \" + numOverdue + \" overdue task(s):\\n\""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"                    + \"\\n\""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"                    + TaskStringFormatter.getTaskTable(overdueTasks);"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"    private String getUrgentTasksResponse(TaskList tasks, int urgencyDays) {"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"        TaskList urgentTasks \u003d this.getUrgentTasks(tasks, urgencyDays);"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        int numUrgent \u003d urgentTasks.getSize();"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        if (numUrgent \u003d\u003d 0) {"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"            return \"You do not have any urgent tasks!\";"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"            return \"You have \" + numUrgent + \" task(s) due in less than \" + urgencyDays + \" day(s):\\n\""},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"                    + \"\\n\""},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"                    + TaskStringFormatter.getTaskTable(urgentTasks);"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"     * Obtains a \u003ccode\u003eTaskList\u003c/code\u003e of overdue tasks."},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"     * @return A filtered \u003ccode\u003eTaskList\u003c/code\u003e comprising only the overdue tasks."},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"    private TaskList getOverdueTasks(TaskList tasks) {"},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        TaskList overdueTasks \u003d new TaskList();"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"        for (Task task : tasks.getListOfTasks()) {"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"            boolean overdue \u003d false;"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"            if (task instanceof Event) {"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"                overdue \u003d ((Event) task).isOverdue();"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"                overdue \u003d ((Deadline) task).isOverdue();"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"            if (overdue) {"},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"                overdueTasks.addTask(task);"},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"        return overdueTasks;"},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"     * Obtains a \u003ccode\u003eTaskList\u003c/code\u003e of urgent tasks."},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects representing the application\u0027s state."},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"     * @return A filtered \u003ccode\u003eTaskList\u003c/code\u003e comprising only the urgent tasks."},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":"    private TaskList getUrgentTasks(TaskList tasks, int urgencyInDays) {"},{"lineNumber":116,"author":{"gitId":"weixue123"},"content":"        assert urgencyInDays \u003e 0;"},{"lineNumber":117,"author":{"gitId":"weixue123"},"content":"        TaskList urgentTasks \u003d new TaskList();"},{"lineNumber":118,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":119,"author":{"gitId":"weixue123"},"content":"        for (Task task : tasks.getListOfTasks()) {"},{"lineNumber":120,"author":{"gitId":"weixue123"},"content":"            boolean urgent \u003d false;"},{"lineNumber":121,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":122,"author":{"gitId":"weixue123"},"content":"            if (task instanceof Event) {"},{"lineNumber":123,"author":{"gitId":"weixue123"},"content":"                urgent \u003d ((Event) task).isUrgent(urgencyInDays);"},{"lineNumber":124,"author":{"gitId":"weixue123"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":125,"author":{"gitId":"weixue123"},"content":"                urgent \u003d ((Deadline) task).isUrgent(urgencyInDays);"},{"lineNumber":126,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":127,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":128,"author":{"gitId":"weixue123"},"content":"            if (urgent) {"},{"lineNumber":129,"author":{"gitId":"weixue123"},"content":"                urgentTasks.addTask(task);"},{"lineNumber":130,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":133,"author":{"gitId":"weixue123"},"content":"        return urgentTasks;"},{"lineNumber":134,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":135}},{"path":"src/main/java/duke/exceptions/EmptyInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class EmptyInputException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public EmptyInputException() {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"Ggrrhh you need to at least enter some input...\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/exceptions/InvalidActionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class InvalidActionException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public InvalidActionException(String action) {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"I don\u0027t know what \u0027\" + action + \"\u0027 means... O.O\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/exceptions/InvalidDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class InvalidDateTimeFormatException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public InvalidDateTimeFormatException(String dateString) {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"\u0027\" + dateString + \"\u0027 is not a date grrrh... Can you follow \u0027YYYY-MM-DD HH:mm\u0027?\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/exceptions/InvalidUrgencyDaysException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class InvalidUrgencyDaysException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public InvalidUrgencyDaysException() {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"The urgency level should be a positive integer meow!!\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/exceptions/MissingDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class MissingDeadlineException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public MissingDeadlineException() {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"You need to specify a deadline following a \u0027/by\u0027 marker...\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/exceptions/MissingDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class MissingDescriptionException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public MissingDescriptionException(String action) {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"Your action \u0027\" + action + \"\u0027 needs to have a description!!!\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/exceptions/MissingEventTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class MissingEventTimeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public MissingEventTimeException() {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"You need to specify an event time following an \u0027/at\u0027 marker...\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/exceptions/TaskNumberInvalidException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class TaskNumberInvalidException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public TaskNumberInvalidException() {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"The description that follows need to be a positive integer meow!!\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/exceptions/TaskNumberNotExistException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"public class TaskNumberNotExistException extends Exception {"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"    public TaskNumberNotExistException(int taskNumber) {"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"        super(\"Task \" + taskNumber + \" does not exist :O\");"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":8}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":" * Represents a deadline task."},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"    private final LocalDateTime byDateTime;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"     * Initializes a deadline task with a description and a datetime."},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"     * @param description Description of the deadline task."},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * @param byDateTime  The task\u0027s deadline."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    public Deadline(String description, LocalDateTime byDateTime) {"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"        this.byDateTime \u003d byDateTime;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     * Retrieves the task\u0027s deadline time."},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * @return The task\u0027s deadline."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    public LocalDateTime getByDateTime() {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        return this.byDateTime;"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     * Converts the task\u0027s deadline to a \u003ccode\u003eString\u003c/code\u003e."},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     * @return A formatted date string corresponding to the task\u0027s deadline."},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"    public String getByDateTimeString() {"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"        return this.getByDateTime().format(DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\"));"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     * Determines if the \u003ccode\u003eDeadline\u003c/code\u003e is overdue."},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     * @return True if the deadline is later than the current time, and false otherwise."},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    public boolean isOverdue() {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        if (this.isDone()) {"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"        return LocalDateTime.now().isAfter(this.getByDateTime());"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     * Determines if the \u003ccode\u003eDeadline\u003c/code\u003e is urgent."},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     * @param urgencyInDays Number of days to use when determining if the \u003ccode\u003eDeadline\u003c/code\u003e"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     *                      is urgent."},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * @return True if the deadline is within \u003ccode\u003eurgencyInDays\u003c/code\u003e of the current time."},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    public boolean isUrgent(int urgencyInDays) {"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        if (this.isDone()) {"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"        LocalDateTime urgencyMark \u003d this.getByDateTime().minusDays(urgencyInDays);"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        return LocalDateTime.now().isAfter(urgencyMark) \u0026\u0026 !this.isOverdue();"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":67}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":" * Represents an event task."},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"    private final LocalDateTime atDateTime;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"     * Initializes an event task with a description and a datetime."},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"     * @param description Description of the event task."},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * @param atDateTime  The event\u0027s time."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    public Event(String description, LocalDateTime atDateTime) {"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"        this.atDateTime \u003d atDateTime;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     * Retrieves the event\u0027s time."},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * @return The event\u0027s time."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    public LocalDateTime getAtDateTime() {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        return this.atDateTime;"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     * Converts the event\u0027s time to a \u003ccode\u003eString\u003c/code\u003e."},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     * @return A formatted date string corresponding to the event\u0027s time."},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"    public String getAtDateTimeString() {"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"        return this.getAtDateTime().format(DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\"));"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     * Determines if the \u003ccode\u003eEvent\u003c/code\u003e is overdue."},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     * @return True if the deadline is later than the current time, and false otherwise."},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    public boolean isOverdue() {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        if (this.isDone()) {"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"        return LocalDateTime.now().isAfter(this.getAtDateTime());"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     * Determines if the \u003ccode\u003eEvent\u003c/code\u003e is soon."},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     * @param urgencyInDays Number of days to use when determining if the \u003ccode\u003eDeadline\u003c/code\u003e"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     *                      is urgent."},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * @return True if the deadline is within \u003ccode\u003eurgencyInDays\u003c/code\u003e of the current time."},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    public boolean isUrgent(int urgencyInDays) {"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        if (this.isDone()) {"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"        LocalDateTime urgencyMark \u003d this.getAtDateTime().minusDays(urgencyInDays);"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        return LocalDateTime.now().isAfter(urgencyMark) \u0026\u0026 !this.isOverdue();"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":67}},{"path":"src/main/java/duke/tasks/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.net.URLDecoder;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.Launcher;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.ui.Parser;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":" * Handles the loading of tasks when the app starts, as well as the saving of tasks when"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":" * the app terminates."},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    private final String filePath;"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     * Initializes a storage/loader with a file path."},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * @param fileName Name of text file in directory /data/ from which tasks are loaded,"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     *                 and to which tasks are saved."},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    public Storage(String fileName) {"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        this.filePath \u003d this.getSaveFilePath(fileName);"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     * Loads saved tasks and returns them in a \u003ccode\u003eTaskList\u003c/code\u003e object. Note that, if a text file"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     * is non-existent at the specified path, then no loading is done and an empty \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     * is returned."},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"     * @return Returns a \u003ccode\u003eTaskList\u003c/code\u003e object containing the loaded tasks (if any)."},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    public TaskList loadTasks() {"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"                String taskDetails \u003d sc.nextLine();"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"                Task newTask \u003d createTaskFromSavedString(taskDetails);"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"                tasks.addTask(newTask);"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"            return tasks;"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"            return tasks;"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * Saves the tasks in the input \u003ccode\u003eTaskList\u003c/code\u003e into a text file at the specified path."},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     * If such a text file already exists, it will be overwritten."},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"     * If such a text file does not exist, one will be created."},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"     * @param tasks A collection of \u003ccode\u003eTask\u003c/code\u003e objects to save."},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"    public void saveTasks(TaskList tasks) {"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"            FileWriter writer \u003d new FileWriter(this.filePath);"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"            for (Task task : tasks.getListOfTasks()) {"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"                writer.write(convertTaskToSavableString(task));"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"            writer.close();"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        } catch (IOException e) {"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"            e.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"     * Creates a \u003ccode\u003eTask\u003c/code\u003e object from a \u003ccode\u003eString\u003c/code\u003e containing a task\u0027s details."},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"     * The \u003ccode\u003eString\u003c/code\u003e must follow the very specific format of"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"     * [ Task Type | Status | Task Description | Time if applicable ],"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"     * for instance [ D | 1 | CS2103 Quiz | 2021-02-12 02:00 ]"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"     * @param taskDetails A formatted String, containing a task\u0027s details, to convert."},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"     * @return The corresponding \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"    private Task createTaskFromSavedString(String taskDetails) {"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"        // Number of sections refer to the substrings separated by the character \"|\""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        int numberOfSections \u003d taskDetails.length() - taskDetails.replace(\"|\", \"\").length() + 1;"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"        assert numberOfSections \u003d\u003d 4;"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"        String[] taskDetailsArray \u003d taskDetails.split(\"\\\\|\", 4);"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        String taskType \u003d taskDetailsArray[0].trim();"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"        assert (taskType.equals(\"T\") || taskType.equals(\"D\") || taskType.equals(\"E\"));"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"        String done \u003d taskDetailsArray[1].trim();"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"        assert (done.equals(\"1\") || done.equals(\"0\"));"},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"        String description \u003d taskDetailsArray[2].trim();"},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"        assert description.length() \u003e 0;"},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"        // If the task to create is a deadline or an event, the LocalDateTime obtained must not be null."},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":"        // That means, the datetime string must be in a valid format, i.e. YYYY-MM-DD HH:mm or YYYY-MM-DD."},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"        String dateTimeString \u003d taskDetailsArray[3].trim();"},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime \u003d Parser.convertToDateTime(dateTimeString);"},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":"        assert taskType.equals(\"T\") || dateTime !\u003d null;"},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"        Task newTask;"},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"        if (taskType.equals(\"T\")) {"},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"            newTask \u003d new ToDo(description);"},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"        } else if (taskType.equals(\"D\")) {"},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":"            newTask \u003d new Deadline(description, dateTime);"},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":116,"author":{"gitId":"weixue123"},"content":"            newTask \u003d new Event(description, dateTime);"},{"lineNumber":117,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":119,"author":{"gitId":"weixue123"},"content":"        if (done.equals(\"1\")) {"},{"lineNumber":120,"author":{"gitId":"weixue123"},"content":"            newTask.markAsDone();"},{"lineNumber":121,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":123,"author":{"gitId":"weixue123"},"content":"        return newTask;"},{"lineNumber":124,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":126,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"weixue123"},"content":"     * Converts a \u003ccode\u003eTask\u003c/code\u003e object into a \u003ccode\u003eString\u003c/code\u003e containing the task\u0027s details."},{"lineNumber":128,"author":{"gitId":"weixue123"},"content":"     * The output \u003ccode\u003eString\u003c/code\u003e will have the very specific format of"},{"lineNumber":129,"author":{"gitId":"weixue123"},"content":"     * [ Task Type | Status | Task Description | Time if applicable ],"},{"lineNumber":130,"author":{"gitId":"weixue123"},"content":"     * for instance [ D | 1 | CS2103 Quiz | 2021-02-12 02:00 ]"},{"lineNumber":131,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"weixue123"},"content":"     * @param task A \u003ccode\u003eTask\u003c/code\u003e object to convert to a \u003ccode\u003eString\u003c/code\u003e."},{"lineNumber":133,"author":{"gitId":"weixue123"},"content":"     * @return The corresponding formatted \u003ccode\u003eString\u003c/code\u003e containing the input task\u0027s details."},{"lineNumber":134,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"weixue123"},"content":"    private String convertTaskToSavableString(Task task) {"},{"lineNumber":136,"author":{"gitId":"weixue123"},"content":"        assert (task instanceof ToDo || task instanceof Deadline || task instanceof Event);"},{"lineNumber":137,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":138,"author":{"gitId":"weixue123"},"content":"        String dateTimeString \u003d \"\";"},{"lineNumber":139,"author":{"gitId":"weixue123"},"content":"        String taskType;"},{"lineNumber":140,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":141,"author":{"gitId":"weixue123"},"content":"        if (task instanceof Deadline) {"},{"lineNumber":142,"author":{"gitId":"weixue123"},"content":"            taskType \u003d \"D\";"},{"lineNumber":143,"author":{"gitId":"weixue123"},"content":"            dateTimeString \u003d ((Deadline) task).getByDateTimeString();"},{"lineNumber":144,"author":{"gitId":"weixue123"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":145,"author":{"gitId":"weixue123"},"content":"            taskType \u003d \"E\";"},{"lineNumber":146,"author":{"gitId":"weixue123"},"content":"            dateTimeString \u003d ((Event) task).getAtDateTimeString();"},{"lineNumber":147,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":148,"author":{"gitId":"weixue123"},"content":"            taskType \u003d \"T\";"},{"lineNumber":149,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":151,"author":{"gitId":"weixue123"},"content":"        String done \u003d task.isDone() ? \"1\" : \"0\";"},{"lineNumber":152,"author":{"gitId":"weixue123"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":153,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":154,"author":{"gitId":"weixue123"},"content":"        return taskType + \" | \" + done + \" | \" + description + \" | \" + dateTimeString + \"\\n\";"},{"lineNumber":155,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":157,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"weixue123"},"content":"     * Builds the path to the text file from which to load data and to which to save data."},{"lineNumber":159,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"weixue123"},"content":"     * @param fileName Name of text file."},{"lineNumber":161,"author":{"gitId":"weixue123"},"content":"     * @return Path to the save file."},{"lineNumber":162,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"weixue123"},"content":"    private String getSaveFilePath(String fileName) {"},{"lineNumber":164,"author":{"gitId":"weixue123"},"content":"        String appDirectory \u003d URLDecoder.decode("},{"lineNumber":165,"author":{"gitId":"weixue123"},"content":"                Launcher.class"},{"lineNumber":166,"author":{"gitId":"weixue123"},"content":"                        .getProtectionDomain()"},{"lineNumber":167,"author":{"gitId":"weixue123"},"content":"                        .getCodeSource()"},{"lineNumber":168,"author":{"gitId":"weixue123"},"content":"                        .getLocation()"},{"lineNumber":169,"author":{"gitId":"weixue123"},"content":"                        .getPath(),"},{"lineNumber":170,"author":{"gitId":"weixue123"},"content":"                StandardCharsets.UTF_8);"},{"lineNumber":171,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":172,"author":{"gitId":"weixue123"},"content":"        // Obtain the path of the directory containing the save file"},{"lineNumber":173,"author":{"gitId":"weixue123"},"content":"        String dataDirectory;"},{"lineNumber":174,"author":{"gitId":"weixue123"},"content":"        if (appDirectory.endsWith(\".jar\")) {"},{"lineNumber":175,"author":{"gitId":"weixue123"},"content":"            dataDirectory \u003d new File(appDirectory).getParentFile().getPath() + \"/data\";"},{"lineNumber":176,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":177,"author":{"gitId":"weixue123"},"content":"            dataDirectory \u003d \"data\";"},{"lineNumber":178,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":180,"author":{"gitId":"weixue123"},"content":"        if (!new File(dataDirectory).exists()) {"},{"lineNumber":181,"author":{"gitId":"weixue123"},"content":"            boolean directoryCreated \u003d new File(dataDirectory).mkdir();"},{"lineNumber":182,"author":{"gitId":"weixue123"},"content":"            assert directoryCreated;"},{"lineNumber":183,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":185,"author":{"gitId":"weixue123"},"content":"        return dataDirectory + \"/\" + fileName;"},{"lineNumber":186,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":187}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":" * An abstract class representing a general \"task\"."},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"    private final String description;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"     * Initializes a Task with a description."},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"     * @param description Description of the Task."},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"     * Marks the task as done."},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    public void markAsDone() {"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     * Retrieves the status of the Task, i.e. whether it is done or not."},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     * @return True is Task is done, or false otherwise."},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    public boolean isDone() {"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"        return this.isDone;"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"     * Retrieves the Task\u0027s description."},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"     * @return The description of the Task."},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"    public String getDescription() {"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        return this.description;"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":44}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":" * Collects a list of \u003ccode\u003eTask\u003c/code\u003e objects. Note that the \u003ccode\u003eTask\u003c/code\u003e objects"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":" * will be indexed according to the time that they were added - a \u003ccode\u003eTask\u003c/code\u003e added"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":" * earlier will have a smaller index, whereas a \u003ccode\u003eTask\u003c/code\u003e added later will have"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":" * a larger index."},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * Initializes an indexed, ordered collection of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    public TaskList() {"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"     * Gets an indexed, ordered list of the \u003ccode\u003eTask\u003c/code\u003e objects that were collected."},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     * @return An \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    public ArrayList\u003cTask\u003e getListOfTasks() {"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"        return this.tasks;"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"     * Adds a \u003ccode\u003eTask\u003c/code\u003e object to the collection."},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     * @param task The \u003ccode\u003eTask\u003c/code\u003e object to add."},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"    public void addTask(Task task) {"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.tasks.add(task);"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"     * Retrieves a Task in the collection by index (starting from 1)."},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     * @param index The index of the \u003ccode\u003eTask\u003c/code\u003e to retrieve."},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eTask\u003c/code\u003e object if one exists at the specified index, else null."},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    public Task getTaskByIndex(int index) {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"            return this.tasks.get(index - 1);"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"            return null;"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     * Retrieves a Task in the collection by index (starting from 1). The retrieved"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     * task is removed from the collection."},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * @param index The index of the \u003ccode\u003eTask\u003c/code\u003e to retrieve."},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eTask\u003c/code\u003e object if one exists at the specified index, else null."},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"    public Task popTaskByIndex(int index) {"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"            return this.tasks.remove(index - 1);"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"            return null;"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"     * Gets the size of the collection, i.e. the number of \u003ccode\u003eTask\u003c/code\u003e objects in the collection."},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"     * @return The size of the collection."},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"    public int getSize() {"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        return this.tasks.size();"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":77}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":" * Represents a to-do task."},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"     * Initializes a to-do task with a description."},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"     * @param description Description of the to-do task."},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":16}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":" * This class controls the creation and styling of dialog boxes for both the user and Duke."},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":" * A dialog box consists of a \u003ccode\u003eLabel\u003c/code\u003e containing a user input or a response from Duke, and an"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":" * \u003ccode\u003eImageView\u003c/code\u003e to represent the user\u0027s or Duke\u0027s avatar respectively."},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"        this.dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        this.displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     * Flips the dialog box such that the display picture is on the left and the dialog box"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     * is on the right."},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     * Creates a styled dialog box to display the users\u0027 input."},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     * @param text A string of user input."},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     * @param img  An \u003ccode\u003eImage\u003c/code\u003e to use as the users\u0027 avatar."},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eDialogBox\u003c/code\u003e to be displayed."},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        String lightBlue \u003d \"#d4ebf2\";"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        db.styleLabelBox(lightBlue);"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"        return db;"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"     * Creates a styled dialog box to display Duke\u0027s response (to valid input)."},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"     * @param text Duke\u0027s response."},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"     * @param img  An \u003ccode\u003eImage\u003c/code\u003e to use as the Duke\u0027s avatar."},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eDialogBox\u003c/code\u003e to be displayed."},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"        String lightGrey \u003d \"#f0f0f0\";"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"        db.styleLabelBox(lightGrey);"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"        db.flip();"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"        db.setMinHeight(db.getValidDialogHeight(text));"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"        return db;"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"     * Creates a styled dialog box to display Duke\u0027s response (to an invalid input)."},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"     * @param text Duke\u0027s response."},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"     * @param img  An \u003ccode\u003eImage\u003c/code\u003e to use as the Duke\u0027s avatar."},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"     * @return A \u003ccode\u003eDialogBox\u003c/code\u003e to be displayed."},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"    public static DialogBox getDukeDialogForInvalid(String text, Image img) {"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"        String lightRed \u003d \"#ffe5e5\";"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"        db.styleLabelBox(lightRed);"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"        db.flip();"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        return db;"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"     * Styles the label boxes in which the dialogues will be shown."},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"     * @param color HEX code of desired background color for label box."},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"    private void styleLabelBox(String color) {"},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"        this.dialog.setStyle(\"-fx-background-color: \" + color + \";\");"},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":"     * Dynamically set the height for Duke\u0027s dialogue boxes based on the text to be displayed."},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"     * This method is for displaying responses to valid input."},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"     * @param text Text to be displayed."},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"     * @return Height to use for the dialogue box"},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":"    private int getValidDialogHeight(String text) {"},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":"        int numLines \u003d text.split(\"\\n\", -1).length;"},{"lineNumber":116,"author":{"gitId":"weixue123"},"content":"        return 60 + 17 * numLines;"},{"lineNumber":117,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":118}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":" * This class controls the creation and styling of the application\u0027s main window."},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/PoliteCat.png\"));"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/NeutralCat.png\"));"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"    private final Image dukeImageInvalid \u003d new Image(this.getClass().getResourceAsStream(\"/images/SkepticalCat.png\"));"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     * Initializes the user-interface and displays the welcome message."},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.scrollPane.vvalueProperty().bind(this.dialogContainer.heightProperty());"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        String welcomeMessage \u003d \"Meow! I\u0027m Nana the cat manager!!\""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"                + \"What can I do for you!?\";"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        this.dialogContainer.getChildren().addAll("},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"                DialogBox.getDukeDialog(welcomeMessage, this.dukeImage)"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"        );"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"        this.userInput.clear();"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"    public void setDuke(Duke duke) {"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"        this.duke \u003d duke;"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     * Receives a \u003ccode\u003eString\u003c/code\u003e of user input. Then, does the following:"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     * (1) Executes the actions w.r.t. to the input."},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     * (2) Computes a response and display it in a dialog container."},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     * (3) Determines if the application should exit. Then, exit if so."},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    private void handleUserInput() {"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        String input \u003d this.userInput.getText();"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        String response \u003d this.duke.getResponse(input);"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"        this.dialogContainer.getChildren().addAll("},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"                DialogBox.getUserDialog(input, this.userImage),"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"                this.duke.inputIsValid(input)"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"                        ? DialogBox.getDukeDialog(response, this.dukeImage)"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"                        : DialogBox.getDukeDialogForInvalid(response, this.dukeImageInvalid)"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"        );"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"        this.userInput.clear();"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        if (this.duke.isExit(input)) {"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"            Platform.exit();"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"            System.exit(0);"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":77}},{"path":"src/main/java/duke/ui/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"import duke.commands.AddTaskCommand;"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.commands.Command;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"import duke.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"import duke.commands.InvalidInputCommand;"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"import duke.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"import duke.commands.ReminderCommand;"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.EmptyInputException;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.InvalidActionException;"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.InvalidDateTimeFormatException;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.InvalidUrgencyDaysException;"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.MissingDeadlineException;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.MissingDescriptionException;"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.MissingEventTimeException;"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"import duke.exceptions.TaskNumberInvalidException;"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":" * Handles the conversion of raw users\u0027 input into logic that runs the application."},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"public class Parser {"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"    private static final String BYE \u003d \"BYE\";"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    private static final String LIST \u003d \"LIST\";"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"    private static final String DONE \u003d \"DONE\";"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    private static final String DELETE \u003d \"DELETE\";"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"    private static final String FIND \u003d \"FIND\";"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"    private static final String TODO \u003d \"TODO\";"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"    private static final String DEADLINE \u003d \"DEADLINE\";"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"    private static final String EVENT \u003d \"EVENT\";"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    private static final String REMINDER \u003d \"REMINDER\";"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    private static final ArrayList\u003cString\u003e validActions \u003d"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"            new ArrayList\u003c\u003e(Arrays.asList(BYE, LIST, DONE, DELETE, FIND, REMINDER, TODO, DEADLINE, EVENT));"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"     * Parses a line of raw user input, converting it into a \u003ccode\u003eCommand\u003c/code\u003e object that"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"     * handles all of the application\u0027s logic. Accordingly, the output \u003ccode\u003eCommand\u003c/code\u003e object"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"     * will be used to:"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     * (1) alter the application\u0027s state"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     * (2) computes responses to the users"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     * (3) determine whether to terminate the application"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     * @return Returns a \u003ccode\u003eCommand\u003c/code\u003e object which will be used to execute the desired responses."},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"    public static Command parse(String input) {"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        // If the input is valid, getExceptionMessage will return null."},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        // If the input is invalid, getExceptionMessage will return the appropriate message to be displayed."},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"        String exceptionMessage \u003d getExceptionMessage(input);"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        if (exceptionMessage !\u003d null) {"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"            return new InvalidInputCommand(exceptionMessage);"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"        String action \u003d getAction(input);"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"        String description \u003d getDescription(input);"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"        LocalDateTime deadlineDateTime \u003d convertToDateTime(getByDateTimeString(input));"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        LocalDateTime eventDateTime \u003d convertToDateTime(getAtDateTimeString(input));"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        switch (action) {"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        case BYE:"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"            return new ByeCommand();"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"        case LIST:"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"            return new ListCommand();"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"        case DONE:"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"            return new DoneCommand(Integer.parseInt(description));"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"        case DELETE:"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"            return new DeleteCommand(Integer.parseInt(description));"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"        case REMINDER:"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"            return new ReminderCommand(Integer.parseInt(description));"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"        case FIND:"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"            return new FindCommand(description);"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"        case TODO:"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"            return new AddTaskCommand(new ToDo(description));"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"        case DEADLINE:"},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"            return new AddTaskCommand(new Deadline(description, deadlineDateTime));"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"        case EVENT:"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"            return new AddTaskCommand(new Event(description, eventDateTime));"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"        default:"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"            return new InvalidInputCommand(\"I do not understand your input :O\");"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"     * Extracts the action\u0027s type from a line of raw user input, which, according to"},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"     * the app\u0027s specifications, is simply the first token."},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"     * @return The action type to take."},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":"    private static String getAction(String input) {"},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"        return (input + \" \").split(\" \")[0].toUpperCase();"},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"     * Removes the first token, i.e. the action\u0027s type, from the input string and returns the remainder."},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"     * @return The input with the action\u0027s type substring/token removed."},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":"    private static String getRemainingTokens(String input) {"},{"lineNumber":116,"author":{"gitId":"weixue123"},"content":"        if (!input.contains(\" \")) {"},{"lineNumber":117,"author":{"gitId":"weixue123"},"content":"            return \"\";"},{"lineNumber":118,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"weixue123"},"content":"        return input.split(\" \", 2)[1];"},{"lineNumber":120,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":122,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"weixue123"},"content":"     * Extracts the action\u0027s description from a line of raw user input."},{"lineNumber":124,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":126,"author":{"gitId":"weixue123"},"content":"     * @return The description substring/tokens accompanying the action."},{"lineNumber":127,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"weixue123"},"content":"    private static String getDescription(String input) {"},{"lineNumber":129,"author":{"gitId":"weixue123"},"content":"        String action \u003d getAction(input);"},{"lineNumber":130,"author":{"gitId":"weixue123"},"content":"        String remainingTokens \u003d getRemainingTokens(input);"},{"lineNumber":131,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":132,"author":{"gitId":"weixue123"},"content":"        if (action.equals(DEADLINE) \u0026\u0026 remainingTokens.contains(\"/by\")) {"},{"lineNumber":133,"author":{"gitId":"weixue123"},"content":"            return remainingTokens.split(\"/by\")[0].trim();"},{"lineNumber":134,"author":{"gitId":"weixue123"},"content":"        } else if (action.equals(EVENT) \u0026\u0026 remainingTokens.contains(\"/at\")) {"},{"lineNumber":135,"author":{"gitId":"weixue123"},"content":"            return remainingTokens.split(\"/at\")[0].trim();"},{"lineNumber":136,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":137,"author":{"gitId":"weixue123"},"content":"            return remainingTokens;"},{"lineNumber":138,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":141,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"weixue123"},"content":"     * If the action is to add a \u003ccode\u003eDeadline\u003c/code\u003e to the to-do list, then extract the"},{"lineNumber":143,"author":{"gitId":"weixue123"},"content":"     * deadline from the raw user input."},{"lineNumber":144,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":146,"author":{"gitId":"weixue123"},"content":"     * @return A substring/token representing the deadline, or an empty string if not applicable."},{"lineNumber":147,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"weixue123"},"content":"    private static String getByDateTimeString(String input) {"},{"lineNumber":149,"author":{"gitId":"weixue123"},"content":"        String action \u003d getAction(input);"},{"lineNumber":150,"author":{"gitId":"weixue123"},"content":"        String remainingTokens \u003d getRemainingTokens(input);"},{"lineNumber":151,"author":{"gitId":"weixue123"},"content":"        if (action.equals(DEADLINE) \u0026\u0026 remainingTokens.contains(\"/by\")) {"},{"lineNumber":152,"author":{"gitId":"weixue123"},"content":"            return remainingTokens.split(\"/by\", 2)[1].trim();"},{"lineNumber":153,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"weixue123"},"content":"        return \"\";"},{"lineNumber":155,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":157,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"weixue123"},"content":"     * If the action is to add a \u003ccode\u003eEvent\u003c/code\u003e to the to-do list, then extract the"},{"lineNumber":159,"author":{"gitId":"weixue123"},"content":"     * event\u0027s time from the raw user input."},{"lineNumber":160,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":161,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":162,"author":{"gitId":"weixue123"},"content":"     * @return A substring/token representing the event\u0027s time, or an empty string if not applicable."},{"lineNumber":163,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"weixue123"},"content":"    private static String getAtDateTimeString(String input) {"},{"lineNumber":165,"author":{"gitId":"weixue123"},"content":"        String action \u003d getAction(input);"},{"lineNumber":166,"author":{"gitId":"weixue123"},"content":"        String remainingTokens \u003d getRemainingTokens(input);"},{"lineNumber":167,"author":{"gitId":"weixue123"},"content":"        if (action.equals(EVENT) \u0026\u0026 remainingTokens.contains(\"/at\")) {"},{"lineNumber":168,"author":{"gitId":"weixue123"},"content":"            return remainingTokens.split(\"/at\", 2)[1].trim();"},{"lineNumber":169,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"weixue123"},"content":"        return \"\";"},{"lineNumber":171,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":173,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"weixue123"},"content":"     * Determines if a \u003ccode\u003eString\u003c/code\u003e can be converted to a positive integer."},{"lineNumber":175,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"weixue123"},"content":"     * @param str Any string."},{"lineNumber":177,"author":{"gitId":"weixue123"},"content":"     * @return True if the input string can be converted to a positive integer, and false otherwise."},{"lineNumber":178,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"weixue123"},"content":"    private static boolean isPositiveInteger(String str) {"},{"lineNumber":180,"author":{"gitId":"weixue123"},"content":"        if (str \u003d\u003d null) {"},{"lineNumber":181,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":182,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":184,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":185,"author":{"gitId":"weixue123"},"content":"            Integer.parseInt(str);"},{"lineNumber":186,"author":{"gitId":"weixue123"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":187,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":188,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":190,"author":{"gitId":"weixue123"},"content":"        return Integer.parseInt(str) \u003e 0;"},{"lineNumber":191,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":193,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"weixue123"},"content":"     * Converts an input date or datetime string into a \u003ccode\u003eLocalDateTime\u003c/code\u003e object."},{"lineNumber":195,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"weixue123"},"content":"     * @param dateTimeString A date or datetime string of format YYYY-MM-DD or YYYY-MM-DD HH:mm"},{"lineNumber":197,"author":{"gitId":"weixue123"},"content":"     *                       respectively."},{"lineNumber":198,"author":{"gitId":"weixue123"},"content":"     * @return A datetime converted from the input date or datetime string, but only if they were"},{"lineNumber":199,"author":{"gitId":"weixue123"},"content":"     * in the specified format. Else, null is returned."},{"lineNumber":200,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"weixue123"},"content":"    public static LocalDateTime convertToDateTime(String dateTimeString) {"},{"lineNumber":202,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime;"},{"lineNumber":203,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":204,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":205,"author":{"gitId":"weixue123"},"content":"            dateTime \u003d LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\"));"},{"lineNumber":206,"author":{"gitId":"weixue123"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":207,"author":{"gitId":"weixue123"},"content":"            dateTime \u003d null;"},{"lineNumber":208,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":210,"author":{"gitId":"weixue123"},"content":"        if (null !\u003d dateTime) {"},{"lineNumber":211,"author":{"gitId":"weixue123"},"content":"            return dateTime;"},{"lineNumber":212,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":214,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":215,"author":{"gitId":"weixue123"},"content":"            LocalDate date \u003d LocalDate.parse(dateTimeString, DateTimeFormatter.ofPattern(\"uuuu-MM-dd\"));"},{"lineNumber":216,"author":{"gitId":"weixue123"},"content":"            return LocalDateTime.of(date, LocalTime.MIDNIGHT);"},{"lineNumber":217,"author":{"gitId":"weixue123"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":218,"author":{"gitId":"weixue123"},"content":"            return null;"},{"lineNumber":219,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":222,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"weixue123"},"content":"     * Given a line of user input, obtains the exception message if the input was invalid."},{"lineNumber":224,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"weixue123"},"content":"     * @param input A line of raw user input."},{"lineNumber":226,"author":{"gitId":"weixue123"},"content":"     * @return An exception message (if applicable), or an empty string if the input was valid."},{"lineNumber":227,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"weixue123"},"content":"    private static String getExceptionMessage(String input) {"},{"lineNumber":229,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":230,"author":{"gitId":"weixue123"},"content":"            if (input.length() \u003d\u003d 0) {"},{"lineNumber":231,"author":{"gitId":"weixue123"},"content":"                throw new EmptyInputException();"},{"lineNumber":232,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":233,"author":{"gitId":"weixue123"},"content":"        } catch (EmptyInputException e) {"},{"lineNumber":234,"author":{"gitId":"weixue123"},"content":"            return e.getMessage();"},{"lineNumber":235,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":237,"author":{"gitId":"weixue123"},"content":"        String action \u003d getAction(input);"},{"lineNumber":238,"author":{"gitId":"weixue123"},"content":"        String description \u003d getDescription(input);"},{"lineNumber":239,"author":{"gitId":"weixue123"},"content":"        String byDateTimeString \u003d getByDateTimeString(input);"},{"lineNumber":240,"author":{"gitId":"weixue123"},"content":"        String atDateTimeString \u003d getAtDateTimeString(input);"},{"lineNumber":241,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":242,"author":{"gitId":"weixue123"},"content":"        try {"},{"lineNumber":243,"author":{"gitId":"weixue123"},"content":"            if (!validActions.contains(action)) {"},{"lineNumber":244,"author":{"gitId":"weixue123"},"content":"                throw new InvalidActionException(action);"},{"lineNumber":245,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":246,"author":{"gitId":"weixue123"},"content":"            if ((!action.equals(BYE) \u0026\u0026 !action.equals(LIST)) \u0026 description.length() \u003d\u003d 0) {"},{"lineNumber":247,"author":{"gitId":"weixue123"},"content":"                throw new MissingDescriptionException(action);"},{"lineNumber":248,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":249,"author":{"gitId":"weixue123"},"content":"            if ((action.equals(DONE) || action.equals(DELETE)) \u0026\u0026 (!isPositiveInteger(description))) {"},{"lineNumber":250,"author":{"gitId":"weixue123"},"content":"                throw new TaskNumberInvalidException();"},{"lineNumber":251,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":252,"author":{"gitId":"weixue123"},"content":"            if (action.equals(REMINDER) \u0026\u0026 (!isPositiveInteger(description))) {"},{"lineNumber":253,"author":{"gitId":"weixue123"},"content":"                throw new InvalidUrgencyDaysException();"},{"lineNumber":254,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":255,"author":{"gitId":"weixue123"},"content":"            if (action.equals(DEADLINE) \u0026\u0026 byDateTimeString.length() \u003d\u003d 0) {"},{"lineNumber":256,"author":{"gitId":"weixue123"},"content":"                throw new MissingDeadlineException();"},{"lineNumber":257,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":258,"author":{"gitId":"weixue123"},"content":"            if (action.equals(EVENT) \u0026\u0026 atDateTimeString.length() \u003d\u003d 0) {"},{"lineNumber":259,"author":{"gitId":"weixue123"},"content":"                throw new MissingEventTimeException();"},{"lineNumber":260,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":261,"author":{"gitId":"weixue123"},"content":"            if (action.equals(DEADLINE) \u0026\u0026 null \u003d\u003d convertToDateTime(byDateTimeString)) {"},{"lineNumber":262,"author":{"gitId":"weixue123"},"content":"                throw new InvalidDateTimeFormatException(byDateTimeString);"},{"lineNumber":263,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":264,"author":{"gitId":"weixue123"},"content":"            if (action.equals(EVENT) \u0026\u0026 null \u003d\u003d convertToDateTime(atDateTimeString)) {"},{"lineNumber":265,"author":{"gitId":"weixue123"},"content":"                throw new InvalidDateTimeFormatException(atDateTimeString);"},{"lineNumber":266,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":267,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":268,"author":{"gitId":"weixue123"},"content":"        } catch (MissingDescriptionException"},{"lineNumber":269,"author":{"gitId":"weixue123"},"content":"                | InvalidActionException"},{"lineNumber":270,"author":{"gitId":"weixue123"},"content":"                | TaskNumberInvalidException"},{"lineNumber":271,"author":{"gitId":"weixue123"},"content":"                | MissingDeadlineException"},{"lineNumber":272,"author":{"gitId":"weixue123"},"content":"                | MissingEventTimeException"},{"lineNumber":273,"author":{"gitId":"weixue123"},"content":"                | InvalidDateTimeFormatException"},{"lineNumber":274,"author":{"gitId":"weixue123"},"content":"                | InvalidUrgencyDaysException e) {"},{"lineNumber":275,"author":{"gitId":"weixue123"},"content":"            return e.getMessage();"},{"lineNumber":276,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":278,"author":{"gitId":"weixue123"},"content":"        return null;"},{"lineNumber":279,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":280}},{"path":"src/main/java/duke/ui/TaskStringFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":" * Manages the building and formatting of the status strings to be displayed in the GUI."},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"public class TaskStringFormatter {"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    private static final int targetDescLength \u003d 20;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * Computes a pretty task table made of strings, with headers and separators, to be displayed"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     * in the application\u0027s GUI. This table will contain only 1 task."},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     * @param task \u003ccode\u003eTask\u003c/code\u003e to be displayed in the output task table."},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     * @return A pretty task table."},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    public static String getTaskTable(Task task) {"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"        assert (task instanceof ToDo || task instanceof Deadline || task instanceof Event);"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"        String tableHeader \u003d getTaskTableHeader(false);"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"        return tableHeader + getStatusString(task);"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     * Computes a pretty task table made of strings, with headers and separators, to be displayed"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     * in the application\u0027s GUI. This table will contain a list of tasks."},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"     * @param tasks A \u003ccode\u003eTaskList\u003c/code\u003e, the elements of which are to be displayed in the"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     *              output task table."},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"     * @return A pretty task table."},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"    public static String getTaskTable(TaskList tasks) {"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        String tableHeader \u003d getTaskTableHeader(true);"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        StringBuilder output \u003d new StringBuilder(tableHeader);"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"        for (int index \u003d 0; index \u003c tasks.getSize(); index++) {"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"            int taskNumber \u003d index + 1;"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"            Task task \u003d tasks.getTaskByIndex(taskNumber);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"            assert (task instanceof ToDo || task instanceof Deadline || task instanceof Event);"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"            output.append(taskNumber).append(\".\").append(getStatusString(task)).append(\"\\n\");"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        // Trim to remove the newline at the end"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        return output.toString().trim();"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"     * Computes a status string for the given \u003ccode\u003eTask\u003c/code\u003e, containing the following information:"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"     * 1. Status"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     * 2. Description"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     * 3. Time (if applicable)"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     * @param task \u003ccode\u003eTask\u003c/code\u003e\u003e for which the status string is to be computed."},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * @return The task\u0027s status string."},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    private static String getStatusString(Task task) {"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        assert (task instanceof ToDo || task instanceof Deadline || task instanceof Event);"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        String description \u003d setLength(task.getDescription());"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        String status \u003d \"[\" + (task.isDone() ? \"X\" : \" \") + \"]\";"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"        String time \u003d \"\";"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"        if (task instanceof ToDo) {"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"            status \u003d \"[T]\" + status;"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"            status \u003d \"[D]\" + status;"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"            time \u003d ((Deadline) task).getByDateTimeString();"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"            status \u003d \"[E]\" + status;"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"            time \u003d ((Event) task).getAtDateTimeString();"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"        return status + \" | \" + description + \" | \" + time;"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"     * Trims or pads with white spaces the input string to a specific length, then return it."},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"     * @param string The string to be trimmed and padded."},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"     * @return The trimmed or padded string with a specific length."},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"    private static String setLength(String string) {"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"        if (string.length() \u003c targetDescLength) {"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"            return String.format(\"%1$-\" + targetDescLength + \"s\", string);"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"        } else if (string.length() \u003e targetDescLength) {"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"            return string.substring(0, targetDescLength - 3) + \"...\";"},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        } else {"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"            return string;"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"     * Obtains a pretty table header with separators and the following three columns:"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"     * 1. Status"},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"     * 2. Description"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"     * 3. Time"},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"     * @param isList \u003ccode\u003eBoolean\u003c/code\u003e indicating whether the constituent of the resulting"},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"     *               task table is a list of tasks, or just one task."},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"     * @return A pretty table header."},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":"    private static String getTaskTableHeader(boolean isList) {"},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"        String statusColHeader \u003d isList ? \"Status  \" : \"Status\";"},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"        String descriptionColHeader \u003d String.format(\"%1$-\" + targetDescLength + \"s\", \"Description\");"},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":"        String timeColHeader \u003d \"Time            \";"},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"        String header \u003d statusColHeader + \" | \" + descriptionColHeader + \" | \" + timeColHeader;"},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"        String separator \u003d \"-\".repeat(header.length());"},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"        return header + \"\\n\" + separator + \"\\n\";"},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":114}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"590.0\""},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"    \u003cpadding\u003e"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    \u003c/padding\u003e"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    \u003cstylesheets\u003e"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"        \u003cURL value\u003d\"@styles.css\"/\u003e"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    \u003c/stylesheets\u003e"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" maxWidth\u003d\"450.0\" minHeight\u003d\"52.0\" styleClass\u003d\"dialog-box\"\u003e"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"        \u003cfont\u003e"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"            \u003cFont name\u003d\"Monospaced Regular\" size\u003d\"14.0\"/\u003e"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"        \u003c/font\u003e"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"        \u003cpadding\u003e"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"        \u003c/padding\u003e"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        \u003cclip\u003e"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"            \u003cCircle centerX\u003d\"25.0\" centerY\u003d\"25.0\" radius\u003d\"20.0\"/\u003e"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"        \u003c/clip\u003e"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    \u003c/ImageView\u003e"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"weixue123":33}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"            prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"            fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"    \u003cstylesheets\u003e"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"        \u003cURL value\u003d\"@styles.css\"/\u003e"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    \u003c/stylesheets\u003e"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"2.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"               prefWidth\u003d\"498.0\" AnchorPane.bottomAnchor\u003d\"1.0\" promptText\u003d\"Message\" styleClass\u003d\"user-input\"\u003e"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    \u003c/TextField\u003e"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"502.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"            prefHeight\u003d\"41.0\" prefWidth\u003d\"96.0\" text\u003d\"Send\" styleClass\u003d\"send-button\"/\u003e"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"                vvalue\u003d\"1.0\"\u003e"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"588.0\" styleClass\u003d\"dialog-container\"/\u003e"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"weixue123":26}},{"path":"src/test/java/duke/commands/TestAddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eAddTaskCommand\u003c/code\u003e class in duke.commands"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"public class TestAddTaskCommand {"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    private final ToDo toDo;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    private final Deadline deadline;"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    private final Event event;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    private final AddTaskCommand addToDoCommand;"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    private final AddTaskCommand addDeadlineCommand;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    private final AddTaskCommand addEventCommand;"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eAddTaskCommand\u003c/code\u003e instance for testing."},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    public TestAddTaskCommand() {"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2021-02-06 23:30\", formatter);"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        this.toDo \u003d new ToDo(\"CS2103 Post-Lecture Quiz 1\");"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        this.deadline \u003d new Deadline(\"BT4013 Quiz 2\", dateTime);"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.event \u003d new Event(\"CS2103 Quiz 3\", dateTime);"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        this.addToDoCommand \u003d new AddTaskCommand(this.toDo);"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"        this.addDeadlineCommand \u003d new AddTaskCommand(this.deadline);"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        this.addEventCommand \u003d new AddTaskCommand(this.event);"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eAddTaskCommand\u003c/code\u003e correctly determines whether to exit the application."},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"    public void testIsExit() {"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.addToDoCommand.isExit());"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.addDeadlineCommand.isExit());"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.addEventCommand.isExit());"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eAddTaskCommand\u003c/code\u003e alters the input \u003ccode\u003eTaskList\u003c/code\u003e correctly."},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"    public void testExecute() {"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        this.addToDoCommand.execute(tasks);"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        assertEquals(1, tasks.getSize());"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, tasks.getTaskByIndex(1));"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        this.addDeadlineCommand.execute(tasks);"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"        assertEquals(2, tasks.getSize());"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, tasks.getTaskByIndex(1));"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, tasks.getTaskByIndex(2));"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"        this.addEventCommand.execute(tasks);"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"        assertEquals(3, tasks.getSize());"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, tasks.getTaskByIndex(1));"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, tasks.getTaskByIndex(2));"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, tasks.getTaskByIndex(3));"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eAddTaskCommand\u003c/code\u003e computes the response message correctly."},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"    public void testResponse() {"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"        this.addToDoCommand.execute(tasks);"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"        String expectedAddToDoResponse \u003d \"Meow... I\u0027ve added this task:\\n\""},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"                + \"Status | Description          | Time            \\n\""},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"                + \"------------------------------------------------\\n\""},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"                + \"[T][ ] | CS2103 Post-Lectu... | \\n\""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"                + \"Now you have 1 task(s) in the list :)\";"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedAddToDoResponse, this.addToDoCommand.getResponse(tasks));"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"        this.addDeadlineCommand.execute(tasks);"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        String expectedAddDeadlineResponse \u003d \"Meow... I\u0027ve added this task:\\n\""},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"                + \"Status | Description          | Time            \\n\""},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"                + \"------------------------------------------------\\n\""},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"                + \"[D][ ] | BT4013 Quiz 2        | 2021-02-06 23:30\\n\""},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"                + \"Now you have 2 task(s) in the list :)\";"},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedAddDeadlineResponse, this.addDeadlineCommand.getResponse(tasks));"},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"        this.addEventCommand.execute(tasks);"},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":"        String expectedAddEventResponse \u003d \"Meow... I\u0027ve added this task:\\n\""},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"                + \"Status | Description          | Time            \\n\""},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":"                + \"------------------------------------------------\\n\""},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"                + \"[E][ ] | CS2103 Quiz 3        | 2021-02-06 23:30\\n\""},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"                + \"Now you have 3 task(s) in the list :)\";"},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedAddEventResponse, this.addEventCommand.getResponse(tasks));"},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":114}},{"path":"src/test/java/duke/commands/TestByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import duke.helper.HelperFunctions;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eByeCommand\u003c/code\u003e class in duke.commands"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"public class TestByeCommand {"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    private final ByeCommand command;"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eByeCommand\u003c/code\u003e instance for testing."},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    public TestByeCommand() {"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"        this.command \u003d new ByeCommand();"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new ToDo(\"CS2103 Quiz\"));"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Deadline(\"CS2103 Quiz\", LocalDateTime.now()));"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Event(\"CS2103 Quiz\", LocalDateTime.now()));"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eByeCommand\u003c/code\u003e correctly determines whether to exit the application."},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    public void testIsExit() {"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        assertTrue(this.command.isExit());"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eByeCommand\u003c/code\u003e (correctly) does not change the input \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    public void testExecute() {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        TaskList oldTaskList \u003d HelperFunctions.deepCopyTaskList(this.tasks);"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        this.command.execute(this.tasks);"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        assertTrue(HelperFunctions.taskListsAreEqual(oldTaskList, this.tasks));"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eByeCommand\u003c/code\u003e computes the response message correctly."},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"    public void testResponse() {"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"        String expectedResponse \u003d \"Meow... Seeya!\";"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedResponse, this.command.getResponse(this.tasks));"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":60}},{"path":"src/test/java/duke/commands/TestDeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eDeleteCommand\u003c/code\u003e class in duke.commands"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"public class TestDeleteCommand {"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"    private final ToDo toDo;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    private final Deadline deadline;"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    private final Event event;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    private final DeleteCommand command;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eDeleteCommand\u003c/code\u003e instance and a \u003ccode\u003eTaskList\u003c/code\u003e instance for testing."},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    public TestDeleteCommand() {"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2021-02-06 23:30\", formatter);"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        this.toDo \u003d new ToDo(\"CS2103 Quiz 1\");"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        this.deadline \u003d new Deadline(\"BT4013 Quiz 2\", dateTime);"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        this.event \u003d new Event(\"CS2103 Quiz 3\", dateTime);"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"        this.deadline.markAsDone();"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.toDo);"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.deadline);"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.event);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"        this.command \u003d new DeleteCommand(1);"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eDeleteCommand\u003c/code\u003e correctly determines whether to exit the application."},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    public void testIsExit() {"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.command.isExit());"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eDeleteCommand\u003c/code\u003e alters the input \u003ccode\u003eTaskList\u003c/code\u003e correctly."},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"    public void testExecute() {"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"        assertEquals(3, this.tasks.getSize());"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, this.tasks.getTaskByIndex(1));"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, this.tasks.getTaskByIndex(2));"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.getTaskByIndex(3));"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        this.command.execute(this.tasks);"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"        assertEquals(2, this.tasks.getSize());"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, this.tasks.getTaskByIndex(1));"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.getTaskByIndex(2));"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eDeleteCommand\u003c/code\u003e computes the response message correctly."},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"    public void testResponse() {"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"        this.command.execute(this.tasks);"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"        String expectedResponse \u003d \"Mrawww I\u0027ve removed this task:\\n\""},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"                + \"Status | Description          | Time            \\n\""},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"                + \"------------------------------------------------\\n\""},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"                + \"[T][ ] | CS2103 Quiz 1        | \";"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedResponse, this.command.getResponse(this.tasks));"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"        DeleteCommand invalidCommand \u003d new DeleteCommand(10);"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"        String expectedExceptionMessage \u003d \"Task 10 does not exist :O\";"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedExceptionMessage, invalidCommand.getResponse(this.tasks));"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":89}},{"path":"src/test/java/duke/commands/TestDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eDoneCommand\u003c/code\u003e class in duke.commands"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"public class TestDoneCommand {"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    private final ToDo toDo;"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    private final Deadline deadline;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    private final Event event;"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    private final DoneCommand command;"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eDoneCommand\u003c/code\u003e instance and a \u003ccode\u003eTaskList\u003c/code\u003e instance for testing."},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"    public TestDoneCommand() {"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2021-02-06 23:30\", formatter);"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        this.toDo \u003d new ToDo(\"CS2103 Quiz 1\");"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        this.deadline \u003d new Deadline(\"BT4013 Quiz 2\", dateTime);"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.event \u003d new Event(\"CS2103 Quiz 3\", dateTime);"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        this.deadline.markAsDone();"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.toDo);"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.deadline);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.event);"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"        this.command \u003d new DoneCommand(3);"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eDoneCommand\u003c/code\u003e correctly determines whether to exit the application."},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    public void testIsExit() {"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.command.isExit());"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eDoneCommand\u003c/code\u003e alters the input \u003ccode\u003eTaskList\u003c/code\u003e correctly."},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    public void testExecute() {"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        assertEquals(3, this.tasks.getSize());"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, this.tasks.getTaskByIndex(1));"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, this.tasks.getTaskByIndex(2));"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.getTaskByIndex(3));"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.tasks.getTaskByIndex(1).isDone());"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"        assertTrue(this.tasks.getTaskByIndex(2).isDone());"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.tasks.getTaskByIndex(3).isDone());"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"        this.command.execute(this.tasks);"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        assertEquals(3, this.tasks.getSize());"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, this.tasks.getTaskByIndex(1));"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, this.tasks.getTaskByIndex(2));"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.getTaskByIndex(3));"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.tasks.getTaskByIndex(1).isDone());"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"        assertTrue(this.tasks.getTaskByIndex(2).isDone());"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"        assertTrue(this.tasks.getTaskByIndex(3).isDone());"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eDoneCommand\u003c/code\u003e computes the response message correctly."},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"    public void testResponse() {"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"        this.command.execute(this.tasks);"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"        String expectedResponse \u003d \"Prrrr! I\u0027ve marked this task as done:\\n\""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"                + \"Status | Description          | Time            \\n\""},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"                + \"------------------------------------------------\\n\""},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"                + \"[E][X] | CS2103 Quiz 3        | 2021-02-06 23:30\";"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedResponse, this.command.getResponse(this.tasks));"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"        DoneCommand invalidCommand \u003d new DoneCommand(10);"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"        String expectedExceptionMessage \u003d \"Task 10 does not exist :O\";"},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedExceptionMessage, invalidCommand.getResponse(this.tasks));"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":100}},{"path":"src/test/java/duke/commands/TestFindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.helper.HelperFunctions;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eFindCommand\u003c/code\u003e class in duke.commands"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"public class TestFindCommand {"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    private final FindCommand command;"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eFindCommand\u003c/code\u003e instance and a \u003ccode\u003eTaskList\u003c/code\u003e instance for testing."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    public TestFindCommand() {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2021-02-06 23:30\", formatter);"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new ToDo(\"CS2103 Quiz 1\"));"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Deadline(\"BT4013 Quiz 2\", dateTime));"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Event(\"CS2103 Quiz 3\", dateTime));"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.command \u003d new FindCommand(\"CS\");"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eFindCommand\u003c/code\u003e correctly determines whether to exit the application."},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"    public void testIsExit() {"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.command.isExit());"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eFindCommand\u003c/code\u003e (correctly) does not change the input \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    public void testExecute() {"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"        TaskList oldTaskList \u003d HelperFunctions.deepCopyTaskList(this.tasks);"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"        this.command.execute(this.tasks);"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"        assertTrue(HelperFunctions.taskListsAreEqual(oldTaskList, this.tasks));"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eFindCommand\u003c/code\u003e computes the response message correctly."},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"    public void testResponse() {"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        String expectedResponse \u003d \"Meow I\u0027ve found the matching tasks:\\n\""},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"                + \"Status   | Description          | Time            \\n\""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"                + \"--------------------------------------------------\\n\""},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"                + \"1.[T][ ] | CS2103 Quiz 1        | \\n\""},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"                + \"2.[E][ ] | CS2103 Quiz 3        | 2021-02-06 23:30\";"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedResponse, this.command.getResponse(this.tasks));"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"        String expectedEmptyResponse \u003d \"No tasks matches the keyword(s) \u0027CS\u0027 :O\";"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedEmptyResponse, this.command.getResponse(new TaskList()));"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":74}},{"path":"src/test/java/duke/commands/TestInvalidInputCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.helper.HelperFunctions;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"import duke.ui.Parser;"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eInvalidInputCommand\u003c/code\u003e class in duke.commands"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"public class TestInvalidInputCommand {"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eInvalidInputCommand\u003c/code\u003e instance for testing."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    public TestInvalidInputCommand() {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new ToDo(\"CS2103 Quiz\"));"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Deadline(\"CS2103 Quiz\", LocalDateTime.now()));"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Event(\"CS2103 Quiz\", LocalDateTime.now()));"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly determines whether to exit the application."},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"    public void testIsExit() {"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"        assertFalse(new InvalidInputCommand(\"Some exception message\").isExit());"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e (correctly) does not change the input \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    public void testExecute() {"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        TaskList oldTaskList \u003d HelperFunctions.deepCopyTaskList(this.tasks);"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        new InvalidInputCommand(\"Some exception message\").execute(this.tasks);"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"        assertTrue(HelperFunctions.taskListsAreEqual(oldTaskList, this.tasks));"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly responds to the exception when an empty"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"     * input is entered."},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"    public void testEmptyInputResponse() {"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"        Command command \u003d Parser.parse(\"\");"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"        assertTrue(command instanceof InvalidInputCommand);"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        String expectedResponse \u003d \"Ggrrhh you need to at least enter some input...\";"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedResponse, command.getResponse(this.tasks));"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly respond to the exception when"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"     * no valid action could be inferred from the input."},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"    public void testInvalidActionResponse() {"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"        Command command \u003d Parser.parse(\"Some input without a valid action type\");"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        assertTrue(command instanceof InvalidInputCommand);"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"        String expectedResponse \u003d \"I don\u0027t know what \u0027SOME\u0027 means... O.O\";"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedResponse, command.getResponse(this.tasks));"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly respond to the exception when a task"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"     * description is missing when required."},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"    public void testMissingDescriptionResponse() {"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"        for (String input : Arrays.asList("},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"                \"done\","},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"                \"delete\","},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"                \"find\","},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"                \"todo\","},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"                \"deadline\","},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"                \"event\""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        )) {"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"            assertTrue(command instanceof InvalidInputCommand);"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"            String expectedResponse \u003d \"Your action \u0027\" + input.toUpperCase() + \"\u0027 needs to have a description!!!\";"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"            assertEquals(expectedResponse, command.getResponse(this.tasks));"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly respond to the exception when, for a DONE"},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"     * or DELETE command, the accompanying description is not an integer."},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"    public void testTaskNumberInvalidResponse() {"},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"        for (String input : Arrays.asList("},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":"                \"done a\","},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"                \"delete b\""},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"        )) {"},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"            assertTrue(command instanceof InvalidInputCommand);"},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"            String expectedResponse \u003d \"The description that follows need to be a positive integer meow!!\";"},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"            assertEquals(expectedResponse, command.getResponse(this.tasks));"},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly respond to the exception when, for a DEADLINE"},{"lineNumber":117,"author":{"gitId":"weixue123"},"content":"     * command, a datetime is not specified in the input."},{"lineNumber":118,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"weixue123"},"content":"    public void testMissingDeadlineResponse() {"},{"lineNumber":121,"author":{"gitId":"weixue123"},"content":"        for (String input : Arrays.asList("},{"lineNumber":122,"author":{"gitId":"weixue123"},"content":"                \"deadline CS2103 Quiz\","},{"lineNumber":123,"author":{"gitId":"weixue123"},"content":"                \"deadline CS2103 Quiz /by\""},{"lineNumber":124,"author":{"gitId":"weixue123"},"content":"        )) {"},{"lineNumber":125,"author":{"gitId":"weixue123"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":126,"author":{"gitId":"weixue123"},"content":"            assertTrue(command instanceof InvalidInputCommand);"},{"lineNumber":127,"author":{"gitId":"weixue123"},"content":"            String expectedResponse \u003d \"You need to specify a deadline following a \u0027/by\u0027 marker...\";"},{"lineNumber":128,"author":{"gitId":"weixue123"},"content":"            assertEquals(expectedResponse, command.getResponse(this.tasks));"},{"lineNumber":129,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":132,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly respond to the exception when, for an EVENT"},{"lineNumber":134,"author":{"gitId":"weixue123"},"content":"     * command, an datetime is not specified in the input."},{"lineNumber":135,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"weixue123"},"content":"    public void testMissingEventTimeResponse() {"},{"lineNumber":138,"author":{"gitId":"weixue123"},"content":"        for (String input : Arrays.asList("},{"lineNumber":139,"author":{"gitId":"weixue123"},"content":"                \"event CS2103 Quiz\","},{"lineNumber":140,"author":{"gitId":"weixue123"},"content":"                \"event CS2103 Quiz /at\""},{"lineNumber":141,"author":{"gitId":"weixue123"},"content":"        )) {"},{"lineNumber":142,"author":{"gitId":"weixue123"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":143,"author":{"gitId":"weixue123"},"content":"            assertTrue(command instanceof InvalidInputCommand);"},{"lineNumber":144,"author":{"gitId":"weixue123"},"content":"            String expectedResponse \u003d \"You need to specify an event time following an \u0027/at\u0027 marker...\";"},{"lineNumber":145,"author":{"gitId":"weixue123"},"content":"            assertEquals(expectedResponse, command.getResponse(this.tasks));"},{"lineNumber":146,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":149,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly respond to the exception when, for a DEADLINE"},{"lineNumber":151,"author":{"gitId":"weixue123"},"content":"     * or an EVENT command, the datetime specified in the input is not in a valid format."},{"lineNumber":152,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"weixue123"},"content":"    public void testInvalidDateTimeFormatResponse() {"},{"lineNumber":155,"author":{"gitId":"weixue123"},"content":"        String inputToAddDeadline \u003d \"deadline CS2103 Quiz /by\";"},{"lineNumber":156,"author":{"gitId":"weixue123"},"content":"        String inputToAddEvent \u003d \"event CS2103 Quiz /at\";"},{"lineNumber":157,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":158,"author":{"gitId":"weixue123"},"content":"        for (String invalidDateTime : Arrays.asList("},{"lineNumber":159,"author":{"gitId":"weixue123"},"content":"                \"some invalid string\","},{"lineNumber":160,"author":{"gitId":"weixue123"},"content":"                \"2020-10-35\","},{"lineNumber":161,"author":{"gitId":"weixue123"},"content":"                \"11 Feb 2021\","},{"lineNumber":162,"author":{"gitId":"weixue123"},"content":"                \"11-02-2021\","},{"lineNumber":163,"author":{"gitId":"weixue123"},"content":"                \"02-11-2021\","},{"lineNumber":164,"author":{"gitId":"weixue123"},"content":"                \"2020-02-11 10\","},{"lineNumber":165,"author":{"gitId":"weixue123"},"content":"                \"2020-02-11 10 PM\","},{"lineNumber":166,"author":{"gitId":"weixue123"},"content":"                \"2020-02-11 25:00\","},{"lineNumber":167,"author":{"gitId":"weixue123"},"content":"                \"2020-02-11 10:00 PM\""},{"lineNumber":168,"author":{"gitId":"weixue123"},"content":"        )) {"},{"lineNumber":169,"author":{"gitId":"weixue123"},"content":"            Command addDeadlineCommand \u003d Parser.parse(inputToAddDeadline + invalidDateTime);"},{"lineNumber":170,"author":{"gitId":"weixue123"},"content":"            assertTrue(addDeadlineCommand instanceof InvalidInputCommand);"},{"lineNumber":171,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":172,"author":{"gitId":"weixue123"},"content":"            Command addEventCommand \u003d Parser.parse(inputToAddEvent + invalidDateTime);"},{"lineNumber":173,"author":{"gitId":"weixue123"},"content":"            assertTrue(addEventCommand instanceof InvalidInputCommand);"},{"lineNumber":174,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":175,"author":{"gitId":"weixue123"},"content":"            String expectedResponse \u003d \"\u0027\" + invalidDateTime"},{"lineNumber":176,"author":{"gitId":"weixue123"},"content":"                    + \"\u0027 is not a date grrrh... Can you follow \u0027YYYY-MM-DD HH:mm\u0027?\";"},{"lineNumber":177,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":178,"author":{"gitId":"weixue123"},"content":"            assertEquals(expectedResponse, addDeadlineCommand.getResponse(this.tasks));"},{"lineNumber":179,"author":{"gitId":"weixue123"},"content":"            assertEquals(expectedResponse, addEventCommand.getResponse(this.tasks));"},{"lineNumber":180,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":183,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eInvalidInputCommand\u003c/code\u003e correctly respond to the exception when, for a REMINDER"},{"lineNumber":185,"author":{"gitId":"weixue123"},"content":"     * command, the accompanying integer is not a positive integer."},{"lineNumber":186,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":188,"author":{"gitId":"weixue123"},"content":"    public void testInvalidUrgencyDaysResponse() {"},{"lineNumber":189,"author":{"gitId":"weixue123"},"content":"        for (String input : Arrays.asList("},{"lineNumber":190,"author":{"gitId":"weixue123"},"content":"                \"reminder a\","},{"lineNumber":191,"author":{"gitId":"weixue123"},"content":"                \"reminder 0\","},{"lineNumber":192,"author":{"gitId":"weixue123"},"content":"                \"reminder -1\""},{"lineNumber":193,"author":{"gitId":"weixue123"},"content":"        )) {"},{"lineNumber":194,"author":{"gitId":"weixue123"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":195,"author":{"gitId":"weixue123"},"content":"            assertTrue(command instanceof InvalidInputCommand);"},{"lineNumber":196,"author":{"gitId":"weixue123"},"content":"            String expectedResponse \u003d \"The urgency level should be a positive integer meow!!\";"},{"lineNumber":197,"author":{"gitId":"weixue123"},"content":"            assertEquals(expectedResponse, command.getResponse(this.tasks));"},{"lineNumber":198,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":200}},{"path":"src/test/java/duke/commands/TestListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.helper.HelperFunctions;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eListCommand\u003c/code\u003e class in duke.commands"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"public class TestListCommand {"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"    private final ListCommand command;"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eListCommand\u003c/code\u003e instance and a \u003ccode\u003eTaskList\u003c/code\u003e instance for testing."},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    public TestListCommand() {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2021-02-06 23:30\", formatter);"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new ToDo(\"CS2103 Quiz 1\"));"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Deadline(\"BT4013 Quiz 2\", dateTime));"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Event(\"CS2103 Quiz 3\", dateTime));"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.command \u003d new ListCommand();"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eListCommand\u003c/code\u003e correctly determines whether to exit the application."},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"    public void testIsExit() {"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.command.isExit());"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eListCommand\u003c/code\u003e (correctly) does not change the input \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    public void testExecute() {"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"        TaskList oldTaskList \u003d HelperFunctions.deepCopyTaskList(this.tasks);"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"        this.command.execute(this.tasks);"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"        assertTrue(HelperFunctions.taskListsAreEqual(oldTaskList, this.tasks));"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eListCommand\u003c/code\u003e computes the response message correctly."},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"    public void testResponse() {"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        String expectedResponse \u003d \"Here are the task(s) in your list:\\n\""},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"                + \"Status   | Description          | Time            \\n\""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"                + \"--------------------------------------------------\\n\""},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"                + \"1.[T][ ] | CS2103 Quiz 1        | \\n\""},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"                + \"2.[D][ ] | BT4013 Quiz 2        | 2021-02-06 23:30\\n\""},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"                + \"3.[E][ ] | CS2103 Quiz 3        | 2021-02-06 23:30\";"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedResponse, this.command.getResponse(this.tasks));"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        String expectedEmptyResponse \u003d \"You have no tasks in your list yet :X\";"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedEmptyResponse, this.command.getResponse(new TaskList()));"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":75}},{"path":"src/test/java/duke/commands/TestReminderCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import duke.helper.HelperFunctions;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eReminderCommand\u003c/code\u003e class in duke.commands"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"public class TestReminderCommand {"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    private final String twoDaysAfter;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"    private final String oneDayBefore;"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eReminderCommand\u003c/code\u003e instance and a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     * instance for testing."},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    public TestReminderCommand() {"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        LocalDateTime twoDaysAfterDateTime \u003d LocalDateTime.now().plusDays(2);"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        this.twoDaysAfter \u003d twoDaysAfterDateTime.format(formatter);"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        LocalDateTime oneDayBeforeDateTime \u003d LocalDateTime.now().minusDays(1);"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"        this.oneDayBefore \u003d oneDayBeforeDateTime.format(formatter);"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"        Deadline overdueDeadline \u003d new Deadline(\"CS2103 Quiz 1\", oneDayBeforeDateTime);"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        Deadline goodDeadline \u003d new Deadline(\"CS2103 Quiz 2\", twoDaysAfterDateTime);"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        Deadline doneDeadline \u003d new Deadline(\"CS2103 Quiz 3\", oneDayBeforeDateTime);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"        doneDeadline.markAsDone();"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"        Event overdueEvent \u003d new Event(\"CS2103 Quiz 4\", oneDayBeforeDateTime);"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"        Event goodEvent \u003d new Event(\"CS2103 Quiz 5\", twoDaysAfterDateTime);"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        Event doneEvent \u003d new Event(\"CS2103 Quiz 6\", oneDayBeforeDateTime);"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        doneEvent.markAsDone();"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"        tasks.addTask(overdueDeadline);"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"        tasks.addTask(goodDeadline);"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"        tasks.addTask(doneDeadline);"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"        tasks.addTask(overdueEvent);"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"        tasks.addTask(goodEvent);"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"        tasks.addTask(doneEvent);"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eReminderCommand\u003c/code\u003e correctly determines whether to exit the application."},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"    public void testIsExit() {"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        assertFalse(new ReminderCommand(5).isExit());"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eReminderCommand\u003c/code\u003e\u0027s execute method alters the input \u003ccode\u003eTaskList\u003c/code\u003e correctly."},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"    public void testExecute() {"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"        ReminderCommand command \u003d new ReminderCommand(5);"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        TaskList oldTaskList \u003d HelperFunctions.deepCopyTaskList(this.tasks);"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        command.execute(this.tasks);"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"        assertTrue(HelperFunctions.taskListsAreEqual(oldTaskList, this.tasks));"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eReminderCommand\u003c/code\u003e computes the response message correctly."},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"    public void testResponse() {"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"        // \"Relaxed\" because tasks will only be flagged out as urgent if there are less than 1 day left."},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"        ReminderCommand relaxedCommand \u003d new ReminderCommand(1);"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"        String expectedRelaxed \u003d \"Uh oh... You have 2 overdue task(s):\\n\""},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"                + \"Status   | Description          | Time            \\n\""},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"                + \"--------------------------------------------------\\n\""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"                + \"1.[D][ ] | CS2103 Quiz 1        | \" + this.oneDayBefore + \"\\n\""},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"                + \"2.[E][ ] | CS2103 Quiz 4        | \" + this.oneDayBefore + \"\\n\""},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"                + \"You do not have any urgent tasks!\";"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedRelaxed, relaxedCommand.getResponse(this.tasks));"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"        // \"Urgent\" because tasks will be flagged out as urgent if there are 10 or less days left."},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"        ReminderCommand urgentCommand \u003d new ReminderCommand(10);"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"        String expectedUrgent \u003d \"Uh oh... You have 2 overdue task(s):\\n\""},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"                + \"Status   | Description          | Time            \\n\""},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"                + \"--------------------------------------------------\\n\""},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"                + \"1.[D][ ] | CS2103 Quiz 1        | \" + this.oneDayBefore + \"\\n\""},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"                + \"2.[E][ ] | CS2103 Quiz 4        | \" + this.oneDayBefore + \"\\n\""},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"                + \"You have 2 task(s) due in less than 10 day(s):\\n\""},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"                + \"Status   | Description          | Time            \\n\""},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"                + \"--------------------------------------------------\\n\""},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"                + \"1.[D][ ] | CS2103 Quiz 2        | \" + this.twoDaysAfter + \"\\n\""},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"                + \"2.[E][ ] | CS2103 Quiz 5        | \" + this.twoDaysAfter;"},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedUrgent, urgentCommand.getResponse(this.tasks));"},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":"        String expectedEmpty \u003d \"You do not have any overdue tasks!\\n\""},{"lineNumber":116,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":117,"author":{"gitId":"weixue123"},"content":"                + \"\\n\""},{"lineNumber":118,"author":{"gitId":"weixue123"},"content":"                + \"You do not have any urgent tasks!\";"},{"lineNumber":119,"author":{"gitId":"weixue123"},"content":"        assertEquals(expectedEmpty, urgentCommand.getResponse(new TaskList()));"},{"lineNumber":120,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":121}},{"path":"src/test/java/duke/helper/HelperFunctions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.helper;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import duke.tasks.ToDo;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":" * Helper class containing helper functions to assist our JUnit tests."},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"public class HelperFunctions {"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"     * Does a deep comparison to check if the two input \u003ccode\u003eTaskList\u003c/code\u003e objects"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"     * are equal. The two lists are equal IFF their constituents have identical properties."},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     * @param taskListOne \u003ccode\u003eTaskList\u003c/code\u003e one"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     * @param taskListTwo \u003ccode\u003eTaskList\u003c/code\u003e two"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     * @return True is the two input \u003ccode\u003eTaskList\u003c/code\u003e objects are equal, and false otherwise."},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    public static boolean taskListsAreEqual(TaskList taskListOne, TaskList taskListTwo) {"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"        if (taskListOne.getSize() !\u003d taskListTwo.getSize()) {"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"        for (int index \u003d 1; index \u003c\u003d taskListOne.getSize(); index++) {"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"            Task taskOne \u003d taskListOne.getTaskByIndex(index);"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"            Task taskTwo \u003d taskListTwo.getTaskByIndex(index);"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"            if (!tasksAreEqual(taskOne, taskTwo)) {"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"                return false;"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        return true;"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"     * Does a deep copy of the input \u003ccode\u003eTaskList\u003c/code\u003e;"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"     * @param tasks A \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     * @return A deep copy \u003ccode\u003eTaskList\u003c/code\u003e, with its constituent \u003ccode\u003eTask\u003c/code\u003e objects"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     * deep copies as well."},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    public static TaskList deepCopyTaskList(TaskList tasks) {"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"        TaskList newTasks \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        for (Task task : tasks.getListOfTasks()) {"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"            assert (task instanceof ToDo || task instanceof Deadline || task instanceof Event);"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"            Task newTask;"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"                newTask \u003d new ToDo(task.getDescription());"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"                newTask \u003d new Deadline(task.getDescription(), ((Deadline) task).getByDateTime());"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"                newTask \u003d new Event(task.getDescription(), ((Event) task).getAtDateTime());"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"            if (task.isDone()) {"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"                newTask.markAsDone();"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"            newTasks.addTask(newTask);"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"        return newTasks;"},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"     * Does a deep comparison to check if two input \u003ccode\u003eTask\u003c/code\u003e objects are equal."},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"     * The two tasks are equal IFF they have identical properties."},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"     * @param taskOne \u003ccode\u003eTask\u003c/code\u003e one"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"     * @param taskTwo \u003ccode\u003eTask\u003c/code\u003e two"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"     * @return Return true if the two input \u003ccode\u003eTask\u003c/code\u003e objects are equal, and false otherwise."},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"    public static boolean tasksAreEqual(Task taskOne, Task taskTwo) {"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"        if (!taskOne.getDescription().equals(taskTwo.getDescription())) {"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"        if (taskOne.isDone() !\u003d taskTwo.isDone()) {"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"        if (taskOne instanceof ToDo \u0026\u0026 !(taskTwo instanceof ToDo)) {"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        if (taskOne instanceof Deadline \u0026\u0026 !(taskTwo instanceof Deadline)) {"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"        if (taskOne instanceof Event \u0026\u0026 !(taskTwo instanceof Event)) {"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"        if (taskOne instanceof Deadline) {"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"            String byDateTimeOne \u003d ((Deadline) taskOne).getByDateTimeString();"},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"            String byDateTimeTwo \u003d ((Deadline) taskTwo).getByDateTimeString();"},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"            if (!byDateTimeOne.equals(byDateTimeTwo)) {"},{"lineNumber":102,"author":{"gitId":"weixue123"},"content":"                return false;"},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"        if (taskOne instanceof Event) {"},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"            String atDateTimeOne \u003d ((Event) taskOne).getAtDateTimeString();"},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":"            String atDateTimeTwo \u003d ((Event) taskTwo).getAtDateTimeString();"},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"            if (!atDateTimeOne.equals(atDateTimeTwo)) {"},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"                return false;"},{"lineNumber":111,"author":{"gitId":"weixue123"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":114,"author":{"gitId":"weixue123"},"content":"        return true;"},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":117,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":117}},{"path":"src/test/java/duke/tasks/TestDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eDeadline\u003c/code\u003e class in duke.tasks"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"public class TestDeadline {"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    private final String dateTimeString;"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    private final String description;"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    private final Deadline deadline;"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"     * Initializes an instance of \u003ccode\u003eDeadline\u003c/code\u003e instance for testing."},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    public TestDeadline() {"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"        this.dateTime \u003d LocalDateTime.now();"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"        this.dateTimeString \u003d this.dateTime.format(DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\"));"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"        this.description \u003d \"CS2103 Quiz\";"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"        this.deadline \u003d new Deadline(this.description, this.dateTime);"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"     * Tests that the task\u0027s can be marked as done correctly."},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"    public void testIsDone() {"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.deadline.isDone());"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.deadline.markAsDone();"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"        assertTrue(this.deadline.isDone());"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     * Tests that the task\u0027s description is processed correctly."},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    public void testDescription() {"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.description, this.deadline.getDescription());"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"     * Tests that the deadline\u0027s datetime is processed correctly."},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    public void testDateTime() {"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.dateTime, this.deadline.getByDateTime());"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * Tests that the datetime input to the \u003ccode\u003eDeadline\u003c/code\u003e is correctly converted to a datetime"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     * string of the desired format."},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"    public void testDateTimeString() {"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.dateTimeString, this.deadline.getByDateTimeString());"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"     * Tests that the task is correctly flagged out if overdue."},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"    public void testIsOverdue() {"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"        Deadline overdueDeadline \u003d new Deadline(this.description, this.dateTime.minusDays(1));"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        assertTrue(overdueDeadline.isOverdue());"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        // Done tasks should not be overdue"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        overdueDeadline.markAsDone();"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"        assertFalse(overdueDeadline.isOverdue());"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"        Deadline onTimeDeadline \u003d new Deadline(this.description, this.dateTime.plusDays(1));"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"        assertFalse(onTimeDeadline.isOverdue());"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"     * Tests that the task is correctly flagged out if urgent."},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"    public void testIsUrgent() {"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"        Deadline urgentDeadline \u003d new Deadline(this.description, this.dateTime.plusDays(2));"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"        assertFalse(urgentDeadline.isUrgent(1));"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        // Done tasks should not be urgent"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"        assertTrue(urgentDeadline.isUrgent(3));"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"        urgentDeadline.markAsDone();"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"        assertFalse(urgentDeadline.isUrgent(3));"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        // Overdue tasks should not be urgent"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"        Deadline overdueDeadline \u003d new Deadline(this.description, this.dateTime.minusDays(1));"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"        assertFalse(overdueDeadline.isUrgent(1));"},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":99}},{"path":"src/test/java/duke/tasks/TestEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eEvent\u003c/code\u003e class in duke.tasks"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"public class TestEvent {"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    private final String dateTimeString;"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    private final String description;"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    private final Event event;"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"     * Initializes an instance of \u003ccode\u003eEvent\u003c/code\u003e instance for testing."},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    public TestEvent() {"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"        this.dateTime \u003d LocalDateTime.now();"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"        this.dateTimeString \u003d this.dateTime.format(DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\"));"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"        this.description \u003d \"CS2103 Quiz\";"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"        this.event \u003d new Event(this.description, this.dateTime);"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"     * Tests that the task\u0027s can be marked as done correctly."},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"    public void testIsDone() {"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.event.isDone());"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.event.markAsDone();"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"        assertTrue(this.event.isDone());"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     * Tests that the task\u0027s description is processed correctly."},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    public void testDescription() {"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.description, this.event.getDescription());"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"     * Tests that the event\u0027s datetime is processed correctly."},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"    public void testDateTime() {"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.dateTime, this.event.getAtDateTime());"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"     * Tests that the datetime input to the \u003ccode\u003eEvent\u003c/code\u003e is correctly converted to a datetime"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"     * string of the desired format."},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"    public void testDateTimeString() {"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.dateTimeString, this.event.getAtDateTimeString());"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"     * Tests that the task is correctly flagged out if overdue."},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"    public void testIsOverdue() {"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"        Event overdueEvent \u003d new Event(this.description, this.dateTime.minusDays(1));"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        assertTrue(overdueEvent.isOverdue());"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"        // Done tasks should not be overdue"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        overdueEvent.markAsDone();"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"        assertFalse(overdueEvent.isOverdue());"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"        Event onTimeEvent \u003d new Event(this.description, this.dateTime.plusDays(1));"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"        assertFalse(onTimeEvent.isOverdue());"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"     * Tests that the task is correctly flagged out if urgent."},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"    public void testIsUrgent() {"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"        Event urgentEvent \u003d new Event(this.description, this.dateTime.plusDays(2));"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"        assertFalse(urgentEvent.isUrgent(1));"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        // Done tasks should not be urgent"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"        assertTrue(urgentEvent.isUrgent(3));"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"        urgentEvent.markAsDone();"},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"        assertFalse(urgentEvent.isUrgent(3));"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        // Overdue tasks should not be urgent"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"        Event overdueEvent \u003d new Event(this.description, this.dateTime.minusDays(1));"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"        assertFalse(overdueEvent.isUrgent(1));"},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":99}},{"path":"src/test/java/duke/tasks/TestStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import duke.helper.HelperFunctions;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eStorage\u003c/code\u003e class in duke.tasks"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"public class TestStorage {"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"     * Initializes some tasks and a \u003ccode\u003eTaskList\u003c/code\u003e instance for testing."},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    public TestStorage() {"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new ToDo(\"CS2103 Quiz\"));"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Deadline(\"CS2103 Quiz\", LocalDateTime.now()));"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(new Event(\"CS2103 Quiz\", LocalDateTime.now()));"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     * Tests whether an empty \u003ccode\u003eTaskList\u003c/code\u003e is (correctly) loaded when there"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     * is no text file at the specified path."},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"    public void testLoadEmptyTasks() {"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        Storage invalidStorage \u003d new Storage(\"file_that_does_not_exist.txt\");"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        TaskList emptyTaskList \u003d invalidStorage.loadTasks();"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        assertEquals(0, emptyTaskList.getSize());"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"     * First, tests whether the tasks in a \u003ccode\u003eTaskList\u003c/code\u003e can be saved correctly into a specified"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"     * text file."},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     * Then, tests whether the same tasks saved into the specified text file can be loaded correctly into"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"     * another \u003ccode\u003eTaskList\u003c/code\u003e instance."},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"    public void testSaveAndLoadTasks() {"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        Storage storage \u003d new Storage(\"test.txt\");"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        storage.saveTasks(this.tasks);"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"        TaskList loadedTasks \u003d storage.loadTasks();"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"        // Check that the loaded tasks are the same as the ones that were saved."},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"        assertTrue(HelperFunctions.taskListsAreEqual(this.tasks, loadedTasks));"},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":55}},{"path":"src/test/java/duke/tasks/TestTaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eTaskList\u003c/code\u003e class in duke.tasks"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"public class TestTaskList {"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    private final TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"    private final ToDo toDo;"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"    private final Deadline deadline;"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    private final Event event;"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"     * Initializes a \u003ccode\u003eTaskList\u003c/code\u003e instance with preset properties for testing."},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    public TestTaskList() {"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(\"2021-02-06 23:30\", formatter);"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        this.toDo \u003d new ToDo(\"CS2103 Quiz 1\");"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        this.deadline \u003d new Deadline(\"BT4013 Quiz 2\", dateTime);"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"        this.event \u003d new Event(\"CS2103 Quiz 3\", dateTime);"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"        this.deadline.markAsDone();"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.toDo);"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.deadline);"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        this.tasks.addTask(this.event);"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"     * Tests whether the \u003ccode\u003eTaskList\u003c/code\u003e class collects and orders its tasks correctly."},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"    public void testGetListOfTasks() {"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d this.tasks.getListOfTasks();"},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"        assertEquals(3, listOfTasks.size());"},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, listOfTasks.get(0));"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, listOfTasks.get(1));"},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, listOfTasks.get(2));"},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"     * Tests whether the correct task can be retrieved, by index, from the \u003ccode\u003eTaskList\u003c/code\u003e collection."},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"    public void testGetTask() {"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"        assertNull(this.tasks.getTaskByIndex(-1));"},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"        assertNull(this.tasks.getTaskByIndex(0));"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"        assertNull(this.tasks.getTaskByIndex(4));"},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, this.tasks.getTaskByIndex(1));"},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, this.tasks.getTaskByIndex(2));"},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.getTaskByIndex(3));"},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"     * Tests whether the correct task can be popped, by index, from the \u003ccode\u003eTaskList\u003c/code\u003e collection."},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"    public void testPopTask() {"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"        assertNull(this.tasks.popTaskByIndex(-1));"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":"        assertNull(this.tasks.popTaskByIndex(0));"},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"        assertNull(this.tasks.popTaskByIndex(4));"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"        assertEquals(3, this.tasks.getSize());"},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, this.tasks.getTaskByIndex(1));"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, this.tasks.getTaskByIndex(2));"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.getTaskByIndex(3));"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.toDo, this.tasks.popTaskByIndex(1));"},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"        assertEquals(2, this.tasks.getSize());"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, this.tasks.getTaskByIndex(1));"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.getTaskByIndex(2));"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.deadline, this.tasks.popTaskByIndex(1));"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":"        assertEquals(1, this.tasks.getSize());"},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.getTaskByIndex(1));"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.event, this.tasks.popTaskByIndex(1));"},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        assertEquals(0, this.tasks.getSize());"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"     * Tests whether the \u003ccode\u003eTaskList\u003c/code\u003e class outputs the size of its collection correctly."},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"    public void testGetSize() {"},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"        assertEquals(3, this.tasks.getSize());"},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":100}},{"path":"src/test/java/duke/tasks/TestToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eToDo\u003c/code\u003e class in duke.tasks"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"public class TestToDo {"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"    private final String description;"},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"    private final ToDo toDo;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"     * Initializes an instance of \u003ccode\u003eToDo\u003c/code\u003e instance for testing."},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"    public TestToDo() {"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"        this.description \u003d \"CS2103 Quiz\";"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"        this.toDo \u003d new ToDo(this.description);"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":"     * Tests that the task\u0027s can be marked as done correctly."},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    public void testIsDone() {"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"        assertFalse(this.toDo.isDone());"},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"        this.toDo.markAsDone();"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"        assertTrue(this.toDo.isDone());"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"     * Tests that the task\u0027s description is processed correctly."},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"    public void testDescription() {"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        assertEquals(this.description, this.toDo.getDescription());"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":41}},{"path":"src/test/java/duke/ui/TestParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;"},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":12,"author":{"gitId":"weixue123"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":14,"author":{"gitId":"weixue123"},"content":"import duke.commands.AddTaskCommand;"},{"lineNumber":15,"author":{"gitId":"weixue123"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":16,"author":{"gitId":"weixue123"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitId":"weixue123"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":18,"author":{"gitId":"weixue123"},"content":"import duke.commands.FindCommand;"},{"lineNumber":19,"author":{"gitId":"weixue123"},"content":"import duke.commands.InvalidInputCommand;"},{"lineNumber":20,"author":{"gitId":"weixue123"},"content":"import duke.commands.ListCommand;"},{"lineNumber":21,"author":{"gitId":"weixue123"},"content":"import duke.commands.ReminderCommand;"},{"lineNumber":22,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":23,"author":{"gitId":"weixue123"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"weixue123"},"content":" * JUnit test for the \u003ccode\u003eParser\u003c/code\u003e class in duke.ui"},{"lineNumber":25,"author":{"gitId":"weixue123"},"content":" */"},{"lineNumber":26,"author":{"gitId":"weixue123"},"content":"public class TestParser {"},{"lineNumber":27,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":28,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"weixue123"},"content":"     * Tests that the parser interprets our raw input correctly."},{"lineNumber":30,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"weixue123"},"content":"    public void testParser() {"},{"lineNumber":33,"author":{"gitId":"weixue123"},"content":"        // Test that parsing valid input will return commands that carry out concrete action"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"bye\") instanceof ByeCommand);"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"list\") instanceof ListCommand);"},{"lineNumber":36,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"done 1\") instanceof DoneCommand);"},{"lineNumber":37,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"find CS\") instanceof FindCommand);"},{"lineNumber":39,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"reminder 1\") instanceof ReminderCommand);"},{"lineNumber":40,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"todo CS2103 Quiz\") instanceof AddTaskCommand);"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"deadline CS2103 Quiz /by 2021-02-06 23:30\") instanceof AddTaskCommand);"},{"lineNumber":42,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"deadline CS2103 Quiz /by 2021-02-06\") instanceof AddTaskCommand);"},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"event CS2103 Quiz /at 2021-02-06 23:30\") instanceof AddTaskCommand);"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"        assertTrue(Parser.parse(\"event CS2103 Quiz /at 2021-02-06\") instanceof AddTaskCommand);"},{"lineNumber":45,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":46,"author":{"gitId":"weixue123"},"content":"        // Test that parsing invalid input would return the InvalidInputCommand, which does nothing."},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"        for (String input : Arrays.asList("},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"                \"\","},{"lineNumber":49,"author":{"gitId":"weixue123"},"content":"                \"something invalid\","},{"lineNumber":50,"author":{"gitId":"weixue123"},"content":"                \"done\","},{"lineNumber":51,"author":{"gitId":"weixue123"},"content":"                \"done something\","},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"                \"delete\","},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"                \"delete something\","},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"                \"find\","},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"                \"remind\","},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"                \"remind something\","},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"                \"remind 0\","},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"                \"remind -1\","},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"                \"todo\","},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"                \"deadline\","},{"lineNumber":61,"author":{"gitId":"weixue123"},"content":"                \"deadline something\","},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"                \"deadline something /by\","},{"lineNumber":63,"author":{"gitId":"weixue123"},"content":"                \"deadline something /by invalid datetime string\","},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"                \"event\","},{"lineNumber":65,"author":{"gitId":"weixue123"},"content":"                \"event something\","},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"                \"event something /at\","},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"                \"event something /at invalid datetime string\""},{"lineNumber":68,"author":{"gitId":"weixue123"},"content":"        )) {"},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"            assertTrue(Parser.parse(input) instanceof InvalidInputCommand);"},{"lineNumber":70,"author":{"gitId":"weixue123"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"weixue123"},"content":"     * Tests that \u003ccode\u003eParser\u003c/code\u003e converts the datetime strings in our raw input (if any) to"},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"     * \u003ccode\u003eLocalDateTime\u003c/code\u003e objects correctly."},{"lineNumber":76,"author":{"gitId":"weixue123"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"    public void testDateTimeParser() {"},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\");"},{"lineNumber":80,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"        // Converting datetime strings to LocalDateTime objects"},{"lineNumber":82,"author":{"gitId":"weixue123"},"content":"        String dateTimeString \u003d \"2021-02-06 23:30\";"},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"        LocalDateTime dateTime \u003d Parser.convertToDateTime(dateTimeString);"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"        assertNotNull(dateTime);"},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"        assertEquals(dateTimeString, dateTime.format(formatter));"},{"lineNumber":86,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"        // Converting date strings to LocalDateTime objects, with time set to 00:00"},{"lineNumber":88,"author":{"gitId":"weixue123"},"content":"        String dateString \u003d \"2021-02-06\";"},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"        LocalDateTime date \u003d Parser.convertToDateTime(dateString);"},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"        assertNotNull(date);"},{"lineNumber":91,"author":{"gitId":"weixue123"},"content":"        assertEquals(dateString + \" 00:00\", date.format(formatter));"},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":93,"author":{"gitId":"weixue123"},"content":"        // Handling invalid date or datetime strings"},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"        String nonDateTimeString \u003d \"not a valid datetime string\";"},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"        LocalDateTime nonDateTime \u003d Parser.convertToDateTime(nonDateTimeString);"},{"lineNumber":96,"author":{"gitId":"weixue123"},"content":"        assertNull(nonDateTime);"},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"weixue123"},"content":"}"}],"authorContributionMap":{"weixue123":98}}]
