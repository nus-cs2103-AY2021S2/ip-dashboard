[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":" * Handles the main program logic of the Duke task manager program"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    private Parser parser;"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for a new Duke instance. Takes as a single parameter, \u003ccode\u003efilePath\u003c/code\u003e, which determines the"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     * location from which tasks will be read from or saved to hard disk"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     * @param filePath relative file path of \u003ccode\u003e.txt\u003c/code\u003e file where tasks will be saved/loaded from"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    public Duke(String filePath) {"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"            ui.showLoadingError();"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"        parser \u003d new Parser(ui, tasks);"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"    public static void main(String[] args) {"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"     * Handles the running of the Duke program by continually fetching user commands, parsing them and then executing"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"     * them"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"    public void run() {"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"        this.ui.displayWelcomeMessage();"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"        while (true) {"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"            String userCommand \u003d this.ui.getUserCommand();"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"            boolean exit \u003d this.parser.parse(userCommand);"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"            try {"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"                this.storage.save(this.tasks.getTaskList());"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"            } catch (DukeException e) {"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"                ui.showSavingError();"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"            if (exit) {"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"                break;"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kangtinglee":58,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":" * Customized exception class for Duke exceptions"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for DukeException"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"     * @param errorMessage errorMessage to be displayed"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        super(errorMessage);"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":16}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":" * Parser is the class that parses raw user commands and executes the intended effect"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    private final Ui ui;"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    private final TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Parser class"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"     *  @param ui      Ui object that interacts with user"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"     * @param tasks   TaskList object which contains all the tasks in the program"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    public Parser(Ui ui, TaskList tasks) {"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        this.ui \u003d ui;"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"     * Parses the raw command from the user, deciphers the intent and executes it. Adds/deletes/modifies tasks in"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"     * \u003ccode\u003etask\u003c/code\u003e and displays messages via \u003ccode\u003eui\u003c/code\u003e. Displays error message in the event"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"     * that the command is not recognizable."},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"     * @param fullCommand raw command provided as a String"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"     * @return true if the user enters \"bye\", a sign to terminate the program"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"    public boolean parse(String fullCommand) {"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"            StringBuilder response \u003d new StringBuilder();"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"            if (fullCommand.equals(\"bye\")) {"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"                response.append(\"Bye. Hope to see you soon!\");"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"                this.ui.displayMessage(response.toString());"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"                return true;"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"            } else if (fullCommand.equals(\"list\")) {"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"                response.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"                for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"                    Task task \u003d tasks.get(i);"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"                    response.append(i + 1);"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\".\");"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"                    response.append(task);"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"                    if (i !\u003d tasks.size() - 1) {"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"                        response.append(\"\\n\");"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"                    }"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"                }"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"            } else if (fullCommand.startsWith(\"done\")) {"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"                int userChoice \u003d Integer.parseInt(fullCommand.split(\" \")[1]);"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"                if (userChoice \u003e tasks.size()) {"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but there is no such task :-(\");"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"                Task task \u003d tasks.get(userChoice - 1);"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"                task.markComplete();"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"                response.append(\"Nice! I\u0027ve marked this task as done:\\n\");"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"                response.append(task);"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"            } else if (fullCommand.startsWith(\"delete\")) {"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"                int userChoice \u003d Integer.parseInt(fullCommand.split(\" \")[1]);"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"                if (userChoice \u003e tasks.size()) {"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but there is no such task :-(\");"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"                Task task \u003d tasks.remove(userChoice - 1);"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"                response.append(\"Noted. I\u0027ve removed this task:\\n  \");"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"                response.append(task);"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"                response.append(\"\\nNow you have \");"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"                response.append(tasks.size());"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"                response.append(\" duke.tasks in the list.\");"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"            } else if (fullCommand.startsWith(\"event\") ||"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"                    fullCommand.startsWith(\"todo\") ||"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"                    fullCommand.startsWith(\"deadline\")) {"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"                Task task \u003d Task.parseTask(fullCommand);"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"                tasks.add(task);"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"                response.append(\"Got it. I\u0027ve added this task:\\n  added: \");"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"                response.append(task);"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":"                response.append(\"\\nNow you have \");"},{"lineNumber":80,"author":{"gitId":"kangtinglee"},"content":"                response.append(tasks.size());"},{"lineNumber":81,"author":{"gitId":"kangtinglee"},"content":"                response.append(\" duke.tasks in the list.\");"},{"lineNumber":82,"author":{"gitId":"kangtinglee"},"content":"            } else if (fullCommand.startsWith(\"on\")) {"},{"lineNumber":83,"author":{"gitId":"kangtinglee"},"content":"                // TODO: Implement a command that fetches all deadlines on a given date"},{"lineNumber":84,"author":{"gitId":"kangtinglee"},"content":"            } else if (fullCommand.startsWith(\"find\")) {"},{"lineNumber":85,"author":{"gitId":"kangtinglee"},"content":"                String query \u003d fullCommand.split(\" \", 2)[1];"},{"lineNumber":86,"author":{"gitId":"kangtinglee"},"content":"                response.append(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":87,"author":{"gitId":"kangtinglee"},"content":"                for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":88,"author":{"gitId":"kangtinglee"},"content":"                    Task task \u003d tasks.get(i);"},{"lineNumber":89,"author":{"gitId":"kangtinglee"},"content":"                    if (task.contains(query)) {"},{"lineNumber":90,"author":{"gitId":"kangtinglee"},"content":"                        response.append(i + 1);"},{"lineNumber":91,"author":{"gitId":"kangtinglee"},"content":"                        response.append(\".\");"},{"lineNumber":92,"author":{"gitId":"kangtinglee"},"content":"                        response.append(task);"},{"lineNumber":93,"author":{"gitId":"kangtinglee"},"content":"                        if (i !\u003d tasks.size() - 1) {"},{"lineNumber":94,"author":{"gitId":"kangtinglee"},"content":"                            response.append(\"\\n\");"},{"lineNumber":95,"author":{"gitId":"kangtinglee"},"content":"                        }"},{"lineNumber":96,"author":{"gitId":"kangtinglee"},"content":"                    }"},{"lineNumber":97,"author":{"gitId":"kangtinglee"},"content":"                }"},{"lineNumber":98,"author":{"gitId":"kangtinglee"},"content":"            } else {"},{"lineNumber":99,"author":{"gitId":"kangtinglee"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":100,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"kangtinglee"},"content":"            this.ui.displayMessage(response.toString());"},{"lineNumber":102,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":103,"author":{"gitId":"kangtinglee"},"content":"            this.ui.displayMessage(e.getMessage());"},{"lineNumber":104,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"kangtinglee"},"content":"        return false;"},{"lineNumber":106,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":107}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":" * Storage class handles the loading and saving of tasks to hard disk"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    private final File file;"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Storage class. Takes as input the file path where the data will be read/written to"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     * @param filePath File path where data will be read/written to"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    public Storage(String filePath) {"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        this.file \u003d new File(filePath);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        /* Create directory if it does not exist */"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"        if (!this.file.getParentFile().exists()) {"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"            this.file.getParentFile().mkdir();"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"     * Save tasks to hard disk"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"     * @param taskList List\\\u003cTask\\\u003e of tasks to be written to disk"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException If IOException encountered"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"    public void save(List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"            FileWriter writer \u003d new FileWriter(this.file);"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"            for (Task task : taskList) {"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"                writer.write(task.storageEntry());"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"                writer.write(System.lineSeparator());"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"            writer.flush();"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"        } catch (IOException e) {"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"Encountered an error when saving duke.tasks to file\");"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"     * Loads tasks from hard disk"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"     * @return List\\\u003cTask\\\u003e of tasks read from hard disk"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException If FileNotFoundException occurs which is possible in the event that the file is"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"     *                       missing/not created yet"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"            Scanner scanner \u003d new Scanner(this.file);"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"                String data \u003d scanner.nextLine();"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"                taskList.add(Task.parseRecord(data));"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"            scanner.close();"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"            return taskList;"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"Encountered an error when loading duke.tasks from file\");"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":76}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":" * Deadline class which is an extension of Task which also contains deadline (date and time) of the task."},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    private final LocalDate date;"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    private final LocalTime time;"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Deadline class"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Deadline task"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     * @param date        that the task is due"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     * @param time        that the task is due"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, LocalDate date, LocalTime time) {"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        this.time \u003d time;"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Deadline class with completion status specified"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Deadline task"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"     * @param date        that the task is due"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     * @param time        that the task is due"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"     * @param completed   \u003ccode\u003etrue\u003c/code\u003e if the event is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, LocalDate date, LocalTime time, Boolean completed) {"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE, completed);"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"        this.time \u003d time;"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Deadline class whereby only date is given for the deadline but not time"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Deadline task"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"     * @param date        that the task is due"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, LocalDate date) {"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE);"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"        this.time \u003d null;"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Deadline class whereby only date is given for the deadline but not time"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"     * with completion status specified"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Deadline task"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"     * @param date        that the task is due"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"     * @param completed   \u003ccode\u003etrue\u003c/code\u003e if the event is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, LocalDate date, Boolean completed) {"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE, completed);"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"        this.time \u003d null;"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"     * Parse command meant to create Deadline tasks"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"     * @param command to be parsed"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"     * @return Deadline object created based on command issued"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException if command is empty or missing \"/by\" delimiter which provides deadline, deadline not"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"     *                       provided in an acceptable format or command is empty"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":"    public static Deadline parseDeadline(String command) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"kangtinglee"},"content":"        if (command.isEmpty()) {"},{"lineNumber":81,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":82,"author":{"gitId":"kangtinglee"},"content":"        } else if (!command.contains(\"/by\")) {"},{"lineNumber":83,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline must contain a time.\");"},{"lineNumber":84,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"kangtinglee"},"content":"        String[] partitioned \u003d command.split(\"/by\");"},{"lineNumber":86,"author":{"gitId":"kangtinglee"},"content":"        String desc \u003d partitioned[0].strip();"},{"lineNumber":87,"author":{"gitId":"kangtinglee"},"content":"        String[] datetime \u003d partitioned[1].strip().split(\" \");"},{"lineNumber":88,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"kangtinglee"},"content":"            if (datetime.length \u003d\u003d 2) {"},{"lineNumber":90,"author":{"gitId":"kangtinglee"},"content":"                return new Deadline(desc, LocalDate.parse(datetime[0]), LocalTime.parse(datetime[1]));"},{"lineNumber":91,"author":{"gitId":"kangtinglee"},"content":"            } else {"},{"lineNumber":92,"author":{"gitId":"kangtinglee"},"content":"                return new Deadline(desc, LocalDate.parse(datetime[0]));"},{"lineNumber":93,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"kangtinglee"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":95,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The datetime description of a deadline must be either of the form\" +"},{"lineNumber":96,"author":{"gitId":"kangtinglee"},"content":"                    \"\u0027YYYY-MM-DD\u0027 or \u0027YYYY-MM-DD hh:mm\u0027\");"},{"lineNumber":97,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":99,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":101,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":103,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.toString());"},{"lineNumber":104,"author":{"gitId":"kangtinglee"},"content":"        output.append(\" (by: \");"},{"lineNumber":105,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":106,"author":{"gitId":"kangtinglee"},"content":"        if (this.time !\u003d null) {"},{"lineNumber":107,"author":{"gitId":"kangtinglee"},"content":"            output.append(\" \");"},{"lineNumber":108,"author":{"gitId":"kangtinglee"},"content":"            output.append(this.time.format(DateTimeFormatter.ofPattern(\"h:mm a\")));"},{"lineNumber":109,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"kangtinglee"},"content":"        output.append(\")\");"},{"lineNumber":111,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":112,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":114,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"kangtinglee"},"content":"     * Returns the String formatted entry for writing to disk"},{"lineNumber":116,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"kangtinglee"},"content":"     * @return String formatted entry to be written to disk by Storage objects"},{"lineNumber":118,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"kangtinglee"},"content":"    public String storageEntry() {"},{"lineNumber":120,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.storageEntry());"},{"lineNumber":121,"author":{"gitId":"kangtinglee"},"content":"        output.append(\"|\");"},{"lineNumber":122,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"},{"lineNumber":123,"author":{"gitId":"kangtinglee"},"content":"        if (this.time !\u003d null) {"},{"lineNumber":124,"author":{"gitId":"kangtinglee"},"content":"            output.append(\" \");"},{"lineNumber":125,"author":{"gitId":"kangtinglee"},"content":"            output.append(this.time.format(DateTimeFormatter.ofPattern(\"HH:mm\")));"},{"lineNumber":126,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":128,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":129}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":" * Event task which is an extension os Task to also include a location of the event"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    private final String location;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Event class"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Event"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"     * @param location    of the Event"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    public Event(String description, String location) {"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.EVENT);"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        this.location \u003d location;"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Event class with completion status specified"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Event"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"     * @param location    of the Event"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"     * @param completed   \u003ccode\u003etrue\u003c/code\u003e if the event is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"    public Event(String description, String location, Boolean completed) {"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.EVENT, completed);"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"        this.location \u003d location;"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     * Parse command meant to create Event tasks"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"     * @param command to be parsed"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"     * @return Event object created based on command issued"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException if command is empty or missing \"/at\" delimiter which provides the location of the event"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"    public static Event parseEvent(String command) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"        if (command.isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"        } else if (!command.contains(\"/at\")) {"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event must contain a location.\");"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"        String[] partitioned \u003d command.split(\"/at\");"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"        return new Event(partitioned[0].strip(), partitioned[1].strip());"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.toString());"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"        output.append(\" (at: \");"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.location);"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"        output.append(\")\");"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"     * Returns the String formatted entry for writing to disk"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"     * @return String formatted entry to be written to disk by Storage objects"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"    public String storageEntry() {"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.storageEntry());"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"        output.append(\"|\");"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.location);"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":72}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":" * Base Task class which provides shared functionality such as description, task type and status"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"public class Task {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    private final String description;"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    private final TaskType type;"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    private TaskStatus status;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Task class"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"     * @param description of task"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     * @param type        of task"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     * @see TaskStatus"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    public Task(String description, TaskType type) {"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"        this.type \u003d type;"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        this.status \u003d TaskStatus.PENDING;"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Task class with completion status specified"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"     * @param description of task"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"     * @param type        of task"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"     * @param completion  \u003ccode\u003etrue\u003c/code\u003e if the event is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"     * @see TaskStatus"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"    public Task(String description, TaskType type, Boolean completion) {"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"        this.description \u003d description;"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"        this.type \u003d type;"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"        this.status \u003d completion ? TaskStatus.COMPLETED : TaskStatus.PENDING;"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"     * Parse commands and creates Todo, Event or Deadline objects based on the type of command"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"     * @param command to be parsed"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"     * @return Respective Task object based on command issued"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException if incomplete or unrecognizable command issued"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"    public static Task parseTask(String command) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"            String[] inputSplit \u003d command.split(\" \", 2);"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"            String entryType \u003d inputSplit[0];"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"            String description \u003d inputSplit[1].strip();"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"            switch (entryType) {"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"            case \"todo\":"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"                return Todo.parseTodo(description);"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"            case \"event\":"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"                return Event.parseEvent(description);"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"            case \"deadline\":"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"                return Deadline.parseDeadline(description);"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"            default:"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I the description of the task cannot be empty :-(\");"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"     * Parse record read from disk by Storage objects and returns the corresponding Task object"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"     * @param fullRecord Single entry read from file"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"     * @return Corresponding Task object"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"    public static Task parseRecord(String fullRecord) {"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"        String[] recordSplit \u003d fullRecord.split(\"\\\\|\");"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"        String entryType \u003d recordSplit[0];"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":"        Boolean completed \u003d recordSplit[1].equals(\"1\");"},{"lineNumber":80,"author":{"gitId":"kangtinglee"},"content":"        String description \u003d recordSplit[2];"},{"lineNumber":81,"author":{"gitId":"kangtinglee"},"content":"        Task output \u003d null;"},{"lineNumber":82,"author":{"gitId":"kangtinglee"},"content":"        switch (entryType) {"},{"lineNumber":83,"author":{"gitId":"kangtinglee"},"content":"        case \"T\":"},{"lineNumber":84,"author":{"gitId":"kangtinglee"},"content":"            output \u003d new Todo(description, completed);"},{"lineNumber":85,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"kangtinglee"},"content":"        case \"D\":"},{"lineNumber":87,"author":{"gitId":"kangtinglee"},"content":"            String[] dateTimeSplit \u003d recordSplit[3].split(\" \");"},{"lineNumber":88,"author":{"gitId":"kangtinglee"},"content":"            if (dateTimeSplit.length \u003d\u003d 2) {"},{"lineNumber":89,"author":{"gitId":"kangtinglee"},"content":"                output \u003d new Deadline(description, LocalDate.parse(dateTimeSplit[0]),"},{"lineNumber":90,"author":{"gitId":"kangtinglee"},"content":"                        LocalTime.parse(dateTimeSplit[1]), completed);"},{"lineNumber":91,"author":{"gitId":"kangtinglee"},"content":"            } else {"},{"lineNumber":92,"author":{"gitId":"kangtinglee"},"content":"                output \u003d new Deadline(description, LocalDate.parse(dateTimeSplit[0]),"},{"lineNumber":93,"author":{"gitId":"kangtinglee"},"content":"                        completed);"},{"lineNumber":94,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"kangtinglee"},"content":"        case \"E\":"},{"lineNumber":97,"author":{"gitId":"kangtinglee"},"content":"            output \u003d new Event(description, recordSplit[3], completed);"},{"lineNumber":98,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"kangtinglee"},"content":"        return output;"},{"lineNumber":101,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":103,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"kangtinglee"},"content":"     * Returns true if task is marked as completed"},{"lineNumber":105,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"kangtinglee"},"content":"     * @return true if task is marked as completed"},{"lineNumber":107,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"kangtinglee"},"content":"    public boolean contains(String query) {"},{"lineNumber":109,"author":{"gitId":"kangtinglee"},"content":"        return this.description.contains(query);"},{"lineNumber":110,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":112,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"kangtinglee"},"content":"     * Returns true if task is marked as completed"},{"lineNumber":114,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"kangtinglee"},"content":"     * @return true if task is marked as completed"},{"lineNumber":116,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"kangtinglee"},"content":"    public boolean isComplete() {"},{"lineNumber":118,"author":{"gitId":"kangtinglee"},"content":"        return this.status \u003d\u003d TaskStatus.COMPLETED;"},{"lineNumber":119,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":121,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"kangtinglee"},"content":"     * Mark class as completed"},{"lineNumber":123,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"kangtinglee"},"content":"    public void markComplete() {"},{"lineNumber":125,"author":{"gitId":"kangtinglee"},"content":"        this.status \u003d TaskStatus.COMPLETED;"},{"lineNumber":126,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":128,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":130,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":131,"author":{"gitId":"kangtinglee"},"content":"        switch (this.type) {"},{"lineNumber":132,"author":{"gitId":"kangtinglee"},"content":"        case TODO:"},{"lineNumber":133,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"[T]\");"},{"lineNumber":134,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":135,"author":{"gitId":"kangtinglee"},"content":"        case EVENT:"},{"lineNumber":136,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"[E]\");"},{"lineNumber":137,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":138,"author":{"gitId":"kangtinglee"},"content":"        case DEADLINE:"},{"lineNumber":139,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"[D]\");"},{"lineNumber":140,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":141,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.isComplete() ? \"[X] \" : \"[ ] \");"},{"lineNumber":143,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.description);"},{"lineNumber":144,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":145,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":147,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"kangtinglee"},"content":"     * Returns the String formatted entry for writing to disk"},{"lineNumber":149,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"kangtinglee"},"content":"     * @return String formatted entry to be written to disk by Storage objects"},{"lineNumber":151,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"kangtinglee"},"content":"    public String storageEntry() {"},{"lineNumber":153,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":154,"author":{"gitId":"kangtinglee"},"content":"        switch (this.type) {"},{"lineNumber":155,"author":{"gitId":"kangtinglee"},"content":"        case TODO:"},{"lineNumber":156,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"T\");"},{"lineNumber":157,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":158,"author":{"gitId":"kangtinglee"},"content":"        case EVENT:"},{"lineNumber":159,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"E\");"},{"lineNumber":160,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":161,"author":{"gitId":"kangtinglee"},"content":"        case DEADLINE:"},{"lineNumber":162,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"D\");"},{"lineNumber":163,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":164,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"kangtinglee"},"content":"        output.append(\"|\");"},{"lineNumber":166,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.isComplete() ? \"1\" : \"0\");"},{"lineNumber":167,"author":{"gitId":"kangtinglee"},"content":"        output.append(\"|\");"},{"lineNumber":168,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.description);"},{"lineNumber":169,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":170,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":171}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"    private final List\u003cTask\u003e taskList;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    public TaskList() {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    public TaskList(List\u003cTask\u003e storedTasks) {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        this.taskList \u003d storedTasks;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    public void add(Task task) {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"        this.taskList.add(task);"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    public Task get(int idx) {"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        return this.taskList.get(idx);"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    public Task remove(int idx) {"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        return this.taskList.remove(idx);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    public int size() {"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"        return this.taskList.size();"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"        return this.taskList;"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":36}},{"path":"src/main/java/duke/tasks/TaskStatus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":" * Enumeration of task statuses"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public enum TaskStatus {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"    PENDING, COMPLETED"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":8}},{"path":"src/main/java/duke/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":" * Enumeration of task types"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":8}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":" * Todo class to handle todo entries which are the simplest type of task"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Todo with completion status specified"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Todo entry"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"     * @param completed   \u003ccode\u003etrue\u003c/code\u003e if the entry is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    public Todo(String description, Boolean completed) {"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.TODO, completed);"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Todo"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Todo entry"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    public Todo(String description) {"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.TODO);"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"     * Parser for todo commands"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"     * @param command to be parsed"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"     * @return Todo object initialized based on the command parsed"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException if the command is an empty String"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"    public static Todo parseTodo(String command) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"        if (command.isEmpty()) {"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"        return new Todo(command);"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":41}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":" * Ui class which handles interactions with the user"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    private static final String BORDER \u003d \"-------------------------------------\";"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    private final Scanner scanner;"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Ui class. Intializes the scanner object for reading from std.in"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    public Ui() {"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     * Displays a message properly formatted with borders"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     * @param message to be displayed"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    public void displayMessage(String message) {"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        System.out.println(Ui.BORDER);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"        System.out.println(message);"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        System.out.println(Ui.BORDER);"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"     * Displays welcome message"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"    public void displayWelcomeMessage() {"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"        String logo \u003d \" ____        _\\n\""},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"                + \"|  _ \\\\ _   _| | _____\\n\""},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"        this.displayMessage(\"Hello from\\n\" + logo + \"\\nWhat can I do for you?\");"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"     * Displays message when loading error is encountered when reading from hard disk"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"    public void showLoadingError() {"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"        this.displayMessage(\"An error was encountered when loading from the provided filepath.\");"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"     * Displays message when loading error is encountered when writing to hard disk"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"    public void showSavingError() {"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"        this.displayMessage(\"An error was encountered when saving to the provided filepath.\");"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"     * Retrieves full command from the user"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"     * @return raw user command"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"    public String getUserCommand() {"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"        return this.scanner.nextLine().strip();"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":65}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    public void dummyTest() {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"        Duke duke \u003d new Duke(\"data/tasks.txt\");"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(2, 2);"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":13}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"class EventTest {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    public void testParseTodo() throws DukeException {"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d Event.parseEvent(\"This is an event entry /at EventTest\");"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(\"[E][ ] This is an event entry (at: EventTest)\", task.toString());"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(false, task.isComplete());"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    public void testStorageEntry() throws DukeException {"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d new Event(\"This is a todo entry\", \"EventTest\");"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(\"E|0|This is a todo entry|EventTest\", task.storageEntry());"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(false, task.isComplete());"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    public void testConstructor() throws DukeException {"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d new Event(\"This is a todo entry\", \"EventTest\", true);"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(true, task.isComplete());"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"    public void testParseTodo_exceptionThrown() {"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"            Event.parseEvent(\"This is an event entry EventTest\");"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"            fail();"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"            assertEquals(\"☹ OOPS!!! The description of an event must contain a location.\", e.getMessage());"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":40}},{"path":"src/test/java/duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"class TodoTest {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    public void testParseTodo() throws DukeException {"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d Todo.parseTodo(\"This is a todo entry\");"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(\"[T][ ] This is a todo entry\", task.toString());"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(false, task.isComplete());"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    public void testStorageEntry() throws DukeException {"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d new Todo(\"This is a todo entry\");"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(\"T|0|This is a todo entry\", task.storageEntry());"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(false, task.isComplete());"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    public void testConstructor() throws DukeException {"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d new Todo(\"This is a todo entry\", true);"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(true, task.isComplete());"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"    public void testParseTodo_exceptionThrown() {"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"            Todo.parseTodo(\"\");"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"            fail();"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\", e.getMessage());"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":40}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"todo read up on blockchain"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"event dinner appointment /at Jewel"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 1 /by 2021-03-18 08:00"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 2 /by 2021-03-19 18:47"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 3 /by 2021-03-20"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"list"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"delete 1"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"list"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"event"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"invalid"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 3 /by 2021-03-2"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"done 5"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"bye"}],"authorContributionMap":{"kangtinglee":15}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"if [ -e \"./data/tasks.txt\" ]"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"then"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"  rm data/tasks.txt"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"fi"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"if ! /usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*/*.java"},{"lineNumber":22,"author":{"gitId":"-"},"content":"then"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":25,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"/usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":35,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":36,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":37,"author":{"gitId":"-"},"content":"then"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":40,"author":{"gitId":"-"},"content":"else"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":43,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"kangtinglee":7,"-":36}}]
