[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"    ignoreFailures \u003d true"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"    options.compilerArgs \u003c\u003c \u0027-Xlint:unchecked\u0027"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"    options.deprecation \u003d true"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":22,"-":45}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"E|0|Dinner with coursemates|i3"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"D|0|Book movie tickets|2021-03-01"}],"authorContributionMap":{"kangtinglee":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"### Adding a `todo`"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"Adds a todo task to Duke."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"Example: `todo Order groceries from Redmart`"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"![todo demo](images/todo.png)"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"### Adding an `event`"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"Adds a event task to Duke."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"Format: `event DESCRIPTION /at LOCATION`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"Example: `event Dinner with coursemates /at i3`"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"![event demo](images/event.png)"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"### Adding a `deadline`"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"Adds a deadline task to Duke."},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"Format: `deadline DESCRIPTION /by YYYY-MM-DD [hh:mm]`"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"- It is optional to include a time"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"Examples: "},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"- `deadline Book movie tickets /by 2021-03-01`"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"- `deadline Preorder sneakers /by 2021-04-15 21:00`"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"![deadline demo](images/deadline.png)"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"### `clear` the task list"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"Clear all tasks within Duke"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"Format: `clear`"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"![clear demo](images/clear.png)"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"### `delete` a task"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"Delete a given tasks within Duke"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"Format: `delete N`"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"Example: `delete 1`"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"![delete demo](images/delete.png)"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"### Mark a task as `done`"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"Clear all tasks within Duke"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"Format: `done N`"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"Example: `done 1`"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"![done demo](images/done.png)"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"### `find` a task"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"Search for a task within Duke"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"Format: `find DESCRIPTION`"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"Example: `find movie`"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"![find demo](images/find.png)"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"### `list` the task list"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"List all tasks within Duke"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"Format: `list`"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"![list demo](images/list.png)"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"### Good`bye`"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"Exit Duke"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":80,"author":{"gitId":"kangtinglee"},"content":"Format: `bye`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"kangtinglee":70,"-":11}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.ui.MainWindow;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"        Parameters params \u003d this.getParameters();"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"        Duke duke \u003d new Duke(params.getNamed().get(\"data\") \u003d\u003d null ? \"data/tasks.txt\" : params.getNamed().get(\"data\"));"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().displayWelcomeMessage();"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":32}},{"path":"src/main/java/duke/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public class ClearCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    public ClearCommand(CommandType type, String command) {"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"        super(type, command);"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    public Response execute(TaskList tasks) {"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        tasks.clear();"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"        return new Response(\"The entire task list has been cleared!\", ResponseStatus.OK);"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":19}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    protected final CommandType type;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    protected final String command;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    protected Command(CommandType type, String command) {"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        this.type \u003d type;"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        this.command \u003d command;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    public abstract Response execute(TaskList tasks);"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    protected int getCommandSelection(TaskList tasks) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        int selection \u003d Integer.parseInt(this.command.split(\" \")[1]);"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"        if (selection \u003e tasks.size()) {"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but there is no such task :-(\");"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"        return selection;"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":26}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    public DeleteCommand(CommandType type, String command) {"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        super(type, command);"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    public Response execute(TaskList tasks) {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"            int selection \u003d this.getCommandSelection(tasks);"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"            Task task \u003d tasks.remove(selection - 1);"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            StringBuilder text \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"            text.append(\"Noted. I\u0027ve removed this task:\\n  \");"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"            text.append(task);"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"            text.append(\"\\nNow you have \");"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"            text.append(tasks.size());"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"            text.append(\" tasks in the list.\");"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"            return new Response(text.toString(), ResponseStatus.OK);"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"            return new Response(\"☹ OOPS!!! Please tell me which task to delete :-(\", ResponseStatus.ERROR);"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"            return new Response(e.getMessage(), ResponseStatus.ERROR);"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":38}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    public DoneCommand(CommandType type, String command) {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"        super(type, command);"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    public Response execute(TaskList tasks) {"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"            int selection \u003d this.getCommandSelection(tasks);"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"            Task taskDone \u003d tasks.get(selection - 1);"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"            taskDone.markComplete();"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            StringBuilder text \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"            text.append(\"Nice! I\u0027ve marked this task as done:\\n\");"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"            text.append(taskDone);"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"            return new Response(text.toString(), ResponseStatus.OK);"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"            return new Response(\"☹ OOPS!!! Please tell me which task to delete :-(\", ResponseStatus.ERROR);"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"            return new Response(e.getMessage(), ResponseStatus.ERROR);"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":34}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    public ExitCommand(CommandType type, String command) {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"        super(type, command);"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    public Response execute(TaskList tasks) {"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"        Platform.exit();"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"        System.exit(0);"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"        return new Response(\"\", ResponseStatus.EXIT);"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":21}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    public FindCommand(CommandType type, String command) {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"        super(type, command);"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    public Response execute(TaskList tasks) {"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"        String query \u003d this.command.split(\" \", 2)[1];"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder text \u003d new StringBuilder();"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        text.append(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            if (task.contains(query)) {"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"                text.append(i + 1);"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"                text.append(\".\");"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"                text.append(task);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"                if (i !\u003d tasks.size() - 1) {"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"                    text.append(\"\\n\");"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"                }"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"        return new Response(text.toString(), ResponseStatus.OK);"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":34}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    public ListCommand(CommandType type, String command) {"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"        super(type, command);"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    public Response execute(TaskList tasks) {"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"            return new Response(\"There are no tasks recorded!\", ResponseStatus.OK);"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder text \u003d new StringBuilder();"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        text.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            text.append(i + 1);"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"            text.append(\".\");"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"            text.append(task);"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"            if (i !\u003d tasks.size() - 1) {"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"                text.append(\"\\n\");"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"        return new Response(text.toString(), ResponseStatus.OK);"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":33}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"public class TodoCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    public TodoCommand(CommandType type, String command) {"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        super(type, command);"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    public Response execute(TaskList tasks) {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"            Task task \u003d Task.parseTask(this.type, this.command);"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"            StringBuilder text \u003d new StringBuilder();"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"            tasks.add(task);"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"            text.append(\"Got it. I\u0027ve added this task:\\n  added: \");"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            text.append(task);"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"            text.append(\"\\nNow you have \");"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"            text.append(tasks.size());"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"            text.append(\" tasks in the list.\");"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"            return new Response(text.toString(), ResponseStatus.OK);"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"            return new Response(e.getMessage(), ResponseStatus.ERROR);"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":32}},{"path":"src/main/java/duke/command/UnrecognizableCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public class UnrecognizableCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    public UnrecognizableCommand() {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"        super(CommandType.UNRECOGNIZED, null);"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    public Response execute(TaskList tasks) {"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        return new Response(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", ResponseStatus.ERROR);"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":17}},{"path":"src/main/java/duke/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.duke;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":" * Handles the main program logic of the Duke task manager program"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    private TaskList tasks;"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    private Parser parser;"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for a new Duke instance. Takes as a single parameter, \u003ccode\u003efilePath\u003c/code\u003e, which determines the"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"     * location from which tasks will be read from or saved to hard disk"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"     * @param filePath relative file path of \u003ccode\u003e.txt\u003c/code\u003e file where tasks will be saved/loaded from"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    public Duke(String filePath) {"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"        ui \u003d new Ui();"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"            ui.showLoadingError();"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"        parser \u003d new Parser(tasks);"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"    public Response getWelcomeMessage() {"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"        return new Response(ui.displayWelcomeMessage(), ResponseStatus.OK);"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"    public Response getResponse(String inputCommand) {"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"        Command command \u003d this.parser.parse(inputCommand);"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"        Response response \u003d command.execute(tasks);"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"            this.storage.save(this.tasks.getTaskList());"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"            ui.showSavingError();"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"        if (response.getStatus() \u003d\u003d ResponseStatus.EXIT) {"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"            Platform.exit();"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"        return response;"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kangtinglee":57,"-":1}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":" * Customized exception class for Duke exceptions"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for DukeException"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"     * @param errorMessage errorMessage to be displayed"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        super(errorMessage);"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":16}},{"path":"src/main/java/duke/parser/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"public enum CommandType {"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"    BYE, LIST, DONE, DELETE, EVENT, FIND, TODO, DEADLINE, UNRECOGNIZED, CLEAR"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":5}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import java.util.regex.Pattern;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.command.ClearCommand;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import duke.command.Command;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"import duke.command.ListCommand;"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"import duke.command.TodoCommand;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"import duke.command.UnrecognizableCommand;"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.TaskList;"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":" * Parser is the class that parses raw user commands and executes the intended effect"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    private final TaskList tasks;"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Parser class"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"     * @param tasks   TaskList object which contains all the tasks in the program"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    public Parser(TaskList tasks) {"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"     * Parses the raw command from the user, deciphers the intent and executes it. Adds/deletes/modifies tasks in"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"     * \u003ccode\u003etask\u003c/code\u003e and displays messages via ui. Displays error message in the event"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     * that the command is not recognizable."},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"     * @param fullCommand raw command provided as a String"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"     * @return true if the user enters \"bye\", a sign to terminate the program"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"    public Command parse(String fullCommand) {"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"        CommandType commandType \u003d Parser.getCommandType(fullCommand);"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"        switch (commandType) {"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"        case DEADLINE:"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"        case TODO:"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"        case EVENT:"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"            return new TodoCommand(commandType, fullCommand);"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"        case LIST:"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"            return new ListCommand(commandType, fullCommand);"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"        case DELETE:"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"            return new DeleteCommand(commandType, fullCommand);"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"        case BYE:"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"            return new ExitCommand(commandType, fullCommand);"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"        case FIND:"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"            return new FindCommand(commandType, fullCommand);"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"        case DONE:"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"            return new DoneCommand(commandType, fullCommand);"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"        case CLEAR:"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"            return new ClearCommand(commandType, fullCommand);"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"        default:"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"            return new UnrecognizableCommand();"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"    public static CommandType getCommandType(String userCommand) {"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"        Map\u003cCommandType, Pattern\u003e patterns \u003d new HashMap\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.DONE, Pattern.compile(\"^d(one)?(?\u003d\\\\s)+\"));"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.TODO, Pattern.compile(\"^t(odo)?(?\u003d\\\\s)+\"));"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.EVENT, Pattern.compile(\"^e(vent)?(?\u003d\\\\s)+\"));"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.DEADLINE, Pattern.compile(\"^(deadline|dl)(?\u003d\\\\s)+\"));"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.LIST, Pattern.compile(\"^l(ist)?$\"));"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.DELETE, Pattern.compile(\"^del(ete)?(?\u003d\\\\s)+\"));"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.BYE, Pattern.compile(\"^bye\"));"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.FIND, Pattern.compile(\"^f(ind)?(?\u003d\\\\s)+\"));"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"        patterns.put(CommandType.CLEAR, Pattern.compile(\"^clear$\"));"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"        for (CommandType type : patterns.keySet()) {"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"            if (patterns.get(type).matcher(userCommand.toLowerCase()).find()) {"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"                return type;"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"kangtinglee"},"content":"        return CommandType.UNRECOGNIZED;"},{"lineNumber":82,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":83}},{"path":"src/main/java/duke/response/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.response;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":" * Response class that encapsulates a message to be displayed to the user as well as the type of status of the command"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public class Response {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    private String text;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    private ResponseStatus status;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Response objects"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"     * @param text Text to be displayed to user"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"     * @param status Type of response (OK, EXIT, ERROR)"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    public Response(String text, ResponseStatus status) {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"        this.text \u003d text;"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"        this.status \u003d status;"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"    public String getText() {"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"        return Ui.displayMessage(text);"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    public ResponseStatus getStatus() {"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"        return status;"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":29}},{"path":"src/main/java/duke/response/ResponseStatus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.response;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"public enum ResponseStatus {"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"    OK, ERROR, EXIT"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":5}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"import duke.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":" * Storage class handles the loading and saving of tasks to hard disk"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    private final File file;"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Storage class. Takes as input the file path where the data will be read/written to"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     * @param filePath File path where data will be read/written to"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    public Storage(String filePath) {"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        this.file \u003d new File(filePath);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        /* Create directory if it does not exist */"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"        if (!this.file.getParentFile().exists()) {"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"            this.file.getParentFile().mkdir();"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"     * Save tasks to hard disk"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"     * @param taskList List of tasks to be written to disk"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException If IOException encountered"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"    public void save(List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"            FileWriter writer \u003d new FileWriter(this.file);"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"            for (Task task : taskList) {"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"                writer.write(task.storageEntry());"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"                writer.write(System.lineSeparator());"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"            writer.flush();"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"        } catch (IOException e) {"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"Encountered an error when saving duke.tasks to file\");"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"        assert this.file.exists() : \"Missing task list on disk!\";"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"     * Loads tasks from hard disk"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"     * @return List of tasks read from hard disk"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException If FileNotFoundException occurs which is possible in the event that the file is"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"     *                       missing/not created yet"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"            Scanner scanner \u003d new Scanner(this.file);"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"                String data \u003d scanner.nextLine();"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"                taskList.add(Task.parseRecord(data));"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"            scanner.close();"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"            return taskList;"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"Encountered an error when loading duke.tasks from file\");"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":78}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":" * Deadline class which is an extension of Task which also contains deadline (date and time) of the task."},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    private final LocalDate date;"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    private final LocalTime time;"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Deadline class"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Deadline task"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     * @param date        that the task is due"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     * @param time        that the task is due"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, LocalDate date, LocalTime time) {"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        this.time \u003d time;"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Deadline class with completion status specified"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Deadline task"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"     * @param date        that the task is due"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     * @param time        that the task is due"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"     * @param completed   \u003ccode\u003etrue\u003c/code\u003e if the event is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, LocalDate date, LocalTime time, Boolean completed) {"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE, completed);"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"        this.time \u003d time;"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Deadline class whereby only date is given for the deadline but not time"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Deadline task"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"     * @param date        that the task is due"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, LocalDate date) {"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE);"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"        this.time \u003d null;"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Deadline class whereby only date is given for the deadline but not time"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"     * with completion status specified"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Deadline task"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"     * @param date        that the task is due"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"     * @param completed   \u003ccode\u003etrue\u003c/code\u003e if the event is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, LocalDate date, Boolean completed) {"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE, completed);"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"        this.time \u003d null;"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"     * Parse command meant to create Deadline tasks"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"     * @param command to be parsed"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"     * @return Deadline object created based on command issued"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException if command is empty or missing \"/by\" delimiter which provides deadline, deadline not"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"     *                       provided in an acceptable format or command is empty"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":"    public static Deadline parseDeadline(String command) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"kangtinglee"},"content":"        if (command.isEmpty()) {"},{"lineNumber":81,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":82,"author":{"gitId":"kangtinglee"},"content":"        } else if (!command.contains(\"/by\")) {"},{"lineNumber":83,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline must contain a time.\");"},{"lineNumber":84,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"kangtinglee"},"content":"        String[] partitioned \u003d command.split(\"/by\");"},{"lineNumber":86,"author":{"gitId":"kangtinglee"},"content":"        String desc \u003d partitioned[0].strip();"},{"lineNumber":87,"author":{"gitId":"kangtinglee"},"content":"        String[] datetime \u003d partitioned[1].strip().split(\" \");"},{"lineNumber":88,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"kangtinglee"},"content":"            if (datetime.length \u003d\u003d 2) {"},{"lineNumber":90,"author":{"gitId":"kangtinglee"},"content":"                return new Deadline(desc, LocalDate.parse(datetime[0]), LocalTime.parse(datetime[1]));"},{"lineNumber":91,"author":{"gitId":"kangtinglee"},"content":"            } else {"},{"lineNumber":92,"author":{"gitId":"kangtinglee"},"content":"                return new Deadline(desc, LocalDate.parse(datetime[0]));"},{"lineNumber":93,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"kangtinglee"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":95,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The datetime description of a deadline must be either of the form\""},{"lineNumber":96,"author":{"gitId":"kangtinglee"},"content":"                    + \"\u0027YYYY-MM-DD\u0027 or \u0027YYYY-MM-DD hh:mm\u0027\");"},{"lineNumber":97,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":99,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":101,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":103,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.toString());"},{"lineNumber":104,"author":{"gitId":"kangtinglee"},"content":"        output.append(\" (by: \");"},{"lineNumber":105,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":106,"author":{"gitId":"kangtinglee"},"content":"        if (this.time !\u003d null) {"},{"lineNumber":107,"author":{"gitId":"kangtinglee"},"content":"            output.append(\" \");"},{"lineNumber":108,"author":{"gitId":"kangtinglee"},"content":"            output.append(this.time.format(DateTimeFormatter.ofPattern(\"h:mm a\")));"},{"lineNumber":109,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"kangtinglee"},"content":"        output.append(\")\");"},{"lineNumber":111,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":112,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":114,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"kangtinglee"},"content":"     * Returns the String formatted entry for writing to disk"},{"lineNumber":116,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"kangtinglee"},"content":"     * @return String formatted entry to be written to disk by Storage objects"},{"lineNumber":118,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"kangtinglee"},"content":"    public String storageEntry() {"},{"lineNumber":120,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.storageEntry());"},{"lineNumber":121,"author":{"gitId":"kangtinglee"},"content":"        output.append(\"|\");"},{"lineNumber":122,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"},{"lineNumber":123,"author":{"gitId":"kangtinglee"},"content":"        if (this.time !\u003d null) {"},{"lineNumber":124,"author":{"gitId":"kangtinglee"},"content":"            output.append(\" \");"},{"lineNumber":125,"author":{"gitId":"kangtinglee"},"content":"            output.append(this.time.format(DateTimeFormatter.ofPattern(\"HH:mm\")));"},{"lineNumber":126,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":128,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":129}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":" * Event task which is an extension os Task to also include a location of the event"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    private final String location;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Event class"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Event"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"     * @param location    of the Event"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    public Event(String description, String location) {"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.EVENT);"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        this.location \u003d location;"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for the Event class with completion status specified"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Event"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"     * @param location    of the Event"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"     * @param completed   \u003ccode\u003etrue\u003c/code\u003e if the event is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"    public Event(String description, String location, Boolean completed) {"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.EVENT, completed);"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"        this.location \u003d location;"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     * Parse command meant to create Event tasks"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"     * @param command to be parsed"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"     * @return Event object created based on command issued"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException if command is empty or missing \"/at\" delimiter which provides the location of the event"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"    public static Event parseEvent(String command) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"        if (command.isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"        } else if (!command.contains(\"/at\")) {"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event must contain a location.\");"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"        String[] partitioned \u003d command.split(\"/at\");"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"        return new Event(partitioned[0].strip(), partitioned[1].strip());"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.toString());"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"        output.append(\" (at: \");"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.location);"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"        output.append(\")\");"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"     * Returns the String formatted entry for writing to disk"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"     * @return String formatted entry to be written to disk by Storage objects"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"    public String storageEntry() {"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.storageEntry());"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"        output.append(\"|\");"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.location);"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":72}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.parser.CommandType;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":" * Base Task class which provides shared functionality such as description, task type and status"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"public class Task {"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    private final String description;"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    private final TaskType type;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    private TaskStatus status;"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Task class"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     * @param description of task"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     * @param type        of task"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     * @see TaskStatus"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    public Task(String description, TaskType type) {"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        this.type \u003d type;"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"        this.status \u003d TaskStatus.PENDING;"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Task class with completion status specified"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"     * @param description of task"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"     * @param type        of task"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"     * @param completion  \u003ccode\u003etrue\u003c/code\u003e if the event is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     * @see TaskStatus"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"    public Task(String description, TaskType type, Boolean completion) {"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"        this.description \u003d description;"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"        this.type \u003d type;"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"        this.status \u003d completion ? TaskStatus.COMPLETED : TaskStatus.PENDING;"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"     * Parse commands and creates Todo, Event or Deadline objects based on the type of command"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"     * @param command to be parsed"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"     * @return Respective Task object based on command issued"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException if incomplete or unrecognizable command issued"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"    public static Task parseTask(CommandType type, String command) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"            String[] inputSplit \u003d command.split(\" \", 2);"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"            String description \u003d inputSplit[1].strip();"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"            switch (type) {"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"            case TODO:"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"                return Todo.parseTodo(description);"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"            case EVENT:"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"                return Event.parseEvent(description);"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"            case DEADLINE:"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"                return Deadline.parseDeadline(description);"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"            default:"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I the description of the task cannot be empty :-(\");"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"     * Parse record read from disk by Storage objects and returns the corresponding Task object"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"     * @param fullRecord Single entry read from file"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"     * @return Corresponding Task object"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"    public static Task parseRecord(String fullRecord) {"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"        String[] recordSplit \u003d fullRecord.split(\"\\\\|\");"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"        String entryType \u003d recordSplit[0];"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":"        Boolean completed \u003d recordSplit[1].equals(\"1\");"},{"lineNumber":80,"author":{"gitId":"kangtinglee"},"content":"        String description \u003d recordSplit[2];"},{"lineNumber":81,"author":{"gitId":"kangtinglee"},"content":"        Task output \u003d null;"},{"lineNumber":82,"author":{"gitId":"kangtinglee"},"content":"        switch (entryType) {"},{"lineNumber":83,"author":{"gitId":"kangtinglee"},"content":"        case \"T\":"},{"lineNumber":84,"author":{"gitId":"kangtinglee"},"content":"            output \u003d new Todo(description, completed);"},{"lineNumber":85,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"kangtinglee"},"content":"        case \"D\":"},{"lineNumber":87,"author":{"gitId":"kangtinglee"},"content":"            String[] dateTimeSplit \u003d recordSplit[3].split(\" \");"},{"lineNumber":88,"author":{"gitId":"kangtinglee"},"content":"            if (dateTimeSplit.length \u003d\u003d 2) {"},{"lineNumber":89,"author":{"gitId":"kangtinglee"},"content":"                output \u003d new Deadline(description, LocalDate.parse(dateTimeSplit[0]),"},{"lineNumber":90,"author":{"gitId":"kangtinglee"},"content":"                        LocalTime.parse(dateTimeSplit[1]), completed);"},{"lineNumber":91,"author":{"gitId":"kangtinglee"},"content":"            } else {"},{"lineNumber":92,"author":{"gitId":"kangtinglee"},"content":"                output \u003d new Deadline(description, LocalDate.parse(dateTimeSplit[0]),"},{"lineNumber":93,"author":{"gitId":"kangtinglee"},"content":"                        completed);"},{"lineNumber":94,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"kangtinglee"},"content":"        case \"E\":"},{"lineNumber":97,"author":{"gitId":"kangtinglee"},"content":"            output \u003d new Event(description, recordSplit[3], completed);"},{"lineNumber":98,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"kangtinglee"},"content":"        default:"},{"lineNumber":100,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":101,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"kangtinglee"},"content":"        return output;"},{"lineNumber":103,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":105,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"kangtinglee"},"content":"     * Returns true if task is marked as completed"},{"lineNumber":107,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"kangtinglee"},"content":"     * @return true if task is marked as completed"},{"lineNumber":109,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"kangtinglee"},"content":"    public boolean contains(String query) {"},{"lineNumber":111,"author":{"gitId":"kangtinglee"},"content":"        return this.description.contains(query);"},{"lineNumber":112,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":114,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"kangtinglee"},"content":"     * Returns true if task is marked as completed"},{"lineNumber":116,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"kangtinglee"},"content":"     * @return true if task is marked as completed"},{"lineNumber":118,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"kangtinglee"},"content":"    public boolean isComplete() {"},{"lineNumber":120,"author":{"gitId":"kangtinglee"},"content":"        return this.status \u003d\u003d TaskStatus.COMPLETED;"},{"lineNumber":121,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":123,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"kangtinglee"},"content":"     * Mark class as completed"},{"lineNumber":125,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"kangtinglee"},"content":"    public void markComplete() {"},{"lineNumber":127,"author":{"gitId":"kangtinglee"},"content":"        this.status \u003d TaskStatus.COMPLETED;"},{"lineNumber":128,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":130,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":131,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":132,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":133,"author":{"gitId":"kangtinglee"},"content":"        switch (this.type) {"},{"lineNumber":134,"author":{"gitId":"kangtinglee"},"content":"        case TODO:"},{"lineNumber":135,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"[T]\");"},{"lineNumber":136,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":137,"author":{"gitId":"kangtinglee"},"content":"        case EVENT:"},{"lineNumber":138,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"[E]\");"},{"lineNumber":139,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":140,"author":{"gitId":"kangtinglee"},"content":"        case DEADLINE:"},{"lineNumber":141,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"[D]\");"},{"lineNumber":142,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":143,"author":{"gitId":"kangtinglee"},"content":"        default:"},{"lineNumber":144,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":145,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.isComplete() ? \"[X] \" : \"[ ] \");"},{"lineNumber":147,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.description);"},{"lineNumber":148,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":149,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":151,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"kangtinglee"},"content":"     * Returns the String formatted entry for writing to disk"},{"lineNumber":153,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"kangtinglee"},"content":"     * @return String formatted entry to be written to disk by Storage objects"},{"lineNumber":155,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"kangtinglee"},"content":"    public String storageEntry() {"},{"lineNumber":157,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":158,"author":{"gitId":"kangtinglee"},"content":"        switch (this.type) {"},{"lineNumber":159,"author":{"gitId":"kangtinglee"},"content":"        case TODO:"},{"lineNumber":160,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"T\");"},{"lineNumber":161,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":162,"author":{"gitId":"kangtinglee"},"content":"        case EVENT:"},{"lineNumber":163,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"E\");"},{"lineNumber":164,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":165,"author":{"gitId":"kangtinglee"},"content":"        case DEADLINE:"},{"lineNumber":166,"author":{"gitId":"kangtinglee"},"content":"            output.append(\"D\");"},{"lineNumber":167,"author":{"gitId":"kangtinglee"},"content":"            break;"},{"lineNumber":168,"author":{"gitId":"kangtinglee"},"content":"        default:"},{"lineNumber":169,"author":{"gitId":"kangtinglee"},"content":"            assert false : \"There should only be three todo types\";"},{"lineNumber":170,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"kangtinglee"},"content":"        output.append(\"|\");"},{"lineNumber":172,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.isComplete() ? \"1\" : \"0\");"},{"lineNumber":173,"author":{"gitId":"kangtinglee"},"content":"        output.append(\"|\");"},{"lineNumber":174,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.description);"},{"lineNumber":175,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":176,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":177}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"    private final List\u003cTask\u003e taskList;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    public TaskList() {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    public TaskList(List\u003cTask\u003e storedTasks) {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        this.taskList \u003d storedTasks;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    public void add(Task task) {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"        this.taskList.add(task);"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    public void clear() {"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        this.taskList.clear();"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    public Task get(int idx) {"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        return this.taskList.get(idx);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    public Task remove(int idx) {"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"        return this.taskList.remove(idx);"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    public int size() {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"        return this.taskList.size();"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"        return this.taskList;"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":40}},{"path":"src/main/java/duke/tasks/TaskStatus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":" * Enumeration of task statuses"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public enum TaskStatus {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"    PENDING, COMPLETED"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":8}},{"path":"src/main/java/duke/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":" * Enumeration of task types"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":8}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":" * Todo class to handle todo entries which are the simplest type of task"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Todo with completion status specified"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Todo entry"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"     * @param completed   \u003ccode\u003etrue\u003c/code\u003e if the entry is completed, \u003ccode\u003efalse\u003c/code\u003e otherwise"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    public Todo(String description, Boolean completed) {"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.TODO, completed);"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     * Constructor for Todo"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"     * @param description of the Todo entry"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    public Todo(String description) {"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.TODO);"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"     * Parser for todo commands"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"     * @param command to be parsed"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"     * @return Todo object initialized based on the command parsed"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"     * @throws DukeException if the command is an empty String"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"    public static Todo parseTodo(String command) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"        if (command.isEmpty()) {"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"        return new Todo(command);"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":41}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import duke.response.ResponseStatus;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    private static final String userFxmlPath \u003d \"/view/UserDialogBox.fxml\";"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    private static final String dukeFxmlPath \u003d \"/view/DukeDialogBox.fxml\";"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    private Label dialog;"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    private ImageView displayPicture;"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    private DialogBox(String text, Image img, String fxmlPath) {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(fxmlPath));"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"            fxmlLoader.load();"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"            e.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"        dialog.setText(text);"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"        Circle clip \u003d new Circle(displayPicture.getFitHeight() / 2,"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"                displayPicture.getFitHeight() / 2, displayPicture.getFitHeight() / 2);"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"        displayPicture.setImage(img);"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"        setHeight(dialog.getHeight());"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"    private void flip() {"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"        return new DialogBox(text, img, DialogBox.userFxmlPath);"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"    public static DialogBox getDukeDialog(String text, Image img, ResponseStatus status) {"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"        var db \u003d new DialogBox(text, img, DialogBox.dukeFxmlPath);"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"        db.flip();"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"        if (status \u003d\u003d ResponseStatus.ERROR) {"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"            db.setStyle(\"-fx-background-color: linear-gradient(from 25% 25% to 100% 100%, #833ab4, #fd1d1d);\""},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"                    + \"-fx-background-radius: 20px;\");"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":"        return db;"},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":"        return DialogBox.getDukeDialog(text, img, ResponseStatus.OK);"},{"lineNumber":80,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":81}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import duke.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import duke.response.Response;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.layout.Priority;"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    private Duke duke;"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    public void initialize() {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"        dialogContainer.setSpacing(5.0);"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"        HBox.setHgrow(userInput, Priority.ALWAYS);"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"    public void setDuke(Duke duke) {"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"        this.duke \u003d duke;"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"    public void displayWelcomeMessage() {"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getWelcomeMessage().getText(), dukeImage));"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"        Response response \u003d duke.getResponse(input);"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"                DialogBox.getDukeDialog(response.getText(), dukeImage, response.getStatus())"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"        );"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"        userInput.clear();"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":61}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":" * Ui class which formatting of texts"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"     * Return text with formatting/decorations"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"     * @param message to be displayed"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"     * @return formatted text"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    public static String displayMessage(String message) {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        return message;"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"     * Return welcome text"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"     * @return welcome text"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"    public static String displayWelcomeMessage() {"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        return Ui.displayMessage(\"Hello from Duke!\\nWhat can I do for you?\");"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"     * Return text when loading error is encountered when reading from hard disk"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"     * @return error text"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"    public static String showLoadingError() {"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"        return Ui.displayMessage(\"An error was encountered when loading from the provided filepath.\");"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"     * Return message when loading error is encountered when writing to hard disk"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"     * @return error text"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"    public static String showSavingError() {"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"        return Ui.displayMessage(\"An error was encountered when saving to the provided filepath.\");"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":40}},{"path":"src/main/resources/view/DukeDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" spacing\u003d\"5\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: linear-gradient(from 25% 25% to 100% 100%, #6A82FB, #FC5C7D); -fx-background-radius: 20px;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"        \u003c!--Reused from https://github.com/nus-cs2103-AY2021S2/forum/issues/137--\u003e"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"         \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"            \u003cFont name\u003d\"Menlo Regular\" size\u003d\"12.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    \u003c/children\u003e"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"    \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"      \u003cInsets /\u003e"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"kangtinglee":24}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"      \u003cVBox layoutY\u003d\"558.0\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\"\u003e"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"         \u003cchildren\u003e"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"              \u003cTextField fx:id\u003d\"userInput\" maxWidth\u003d\"1.7976931348623157E308\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"         \u003c/children\u003e\u003c/VBox\u003e"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"               \u003copaqueInsets\u003e"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"                  \u003cInsets /\u003e"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"               \u003c/opaqueInsets\u003e\u003c/VBox\u003e"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            \u003c/content\u003e"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"    \u003c/children\u003e"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"kangtinglee":26}},{"path":"src/main/resources/view/UserDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" spacing\u003d\"5\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: linear-gradient(from 25% 25% to 100% 100%, #FC5C7D, #6A82FB); -fx-background-radius: 20px;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"         \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"            \u003cFont name\u003d\"Menlo Regular\" size\u003d\"12.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"      \u003cInsets /\u003e"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"kangtinglee":23}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"import duke.duke.Duke;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"public class DukeTest {"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    public void dummyTest() {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"        Duke duke \u003d new Duke(\"data/tasks.txt\");"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(2, 2);"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":15}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"class EventTest {"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    public void testParseTodo() throws DukeException {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d Event.parseEvent(\"This is an event entry /at EventTest\");"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(\"[E][ ] This is an event entry (at: EventTest)\", task.toString());"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(false, task.isComplete());"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    public void testStorageEntry() throws DukeException {"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d new Event(\"This is a todo entry\", \"EventTest\");"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(\"E|0|This is a todo entry|EventTest\", task.storageEntry());"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(false, task.isComplete());"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    public void testConstructor() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d new Event(\"This is a todo entry\", \"EventTest\", true);"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(true, task.isComplete());"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    public void testParseTodo_exceptionThrown() {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"            Event.parseEvent(\"This is an event entry EventTest\");"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"            fail();"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"            assertEquals(\"☹ OOPS!!! The description of an event must contain a location.\", e.getMessage());"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":41}},{"path":"src/test/java/duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"class TodoTest {"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    public void testParseTodo() throws DukeException {"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d Todo.parseTodo(\"This is a todo entry\");"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(\"[T][ ] This is a todo entry\", task.toString());"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(false, task.isComplete());"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    public void testStorageEntry() throws DukeException {"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d new Todo(\"This is a todo entry\");"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(\"T|0|This is a todo entry\", task.storageEntry());"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(false, task.isComplete());"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    public void testConstructor() throws DukeException {"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"        Task task \u003d new Todo(\"This is a todo entry\", true);"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"        assertEquals(true, task.isComplete());"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"    public void testParseTodo_exceptionThrown() {"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"            Todo.parseTodo(\"\");"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"            fail();"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\", e.getMessage());"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":41}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"E|0|dinner appointment|Jewel"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"D|1|CS3244 Assignment 1|2021-03-18 08:00"}],"authorContributionMap":{"kangtinglee":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"todo read up on blockchain"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"event dinner appointment /at Jewel"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 1 /by 2021-03-18 08:00"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 2 /by 2021-03-19 18:47"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 3 /by 2021-03-20"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"list"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"delete 1"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"list"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"event"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"invalid"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 3 /by 2021-03-2"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"done 5"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"bye"}],"authorContributionMap":{"kangtinglee":15}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"if [ -e \"./data/tasks.txt\" ]"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"then"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"  rm data/tasks.txt"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"fi"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"if ! /usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*/*.java"},{"lineNumber":22,"author":{"gitId":"-"},"content":"then"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":25,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"/usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":35,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":36,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":37,"author":{"gitId":"-"},"content":"then"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":40,"author":{"gitId":"-"},"content":"else"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":43,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"kangtinglee":7,"-":36}}]
