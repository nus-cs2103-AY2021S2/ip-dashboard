[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"    private final String date;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"    public Deadline(String description, String date) {"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.DEADLINE);"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"        this.date \u003d date;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.toString());"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        output.append(\" (by: \");"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.date);"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        output.append(\")\");"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    public static Deadline parseDeadline(String description) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        if (description.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        } else if (!description.contains(\"/by\")) {"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline must contain a time.\");"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"        String[] partitioned \u003d description.split(\"/by\");"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        return new Deadline(partitioned[0].strip(), partitioned[1].strip());"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":28}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"    private static final String BORDER \u003d \"-------------------------------------\";"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"        Duke.printWithBorders(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"            String userInput \u003d sc.nextLine().strip();"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"            StringBuilder response \u003d new StringBuilder();"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":"            try {"},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"                if (userInput.equals(\"bye\")) {"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\"Bye. Hope to see you soon!\");"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"                    Duke.printWithBorders(response.toString());"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"                    return;"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"                } else if (userInput.equals(\"list\")) {"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"                    for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"                        Task task \u003d tasks.get(i);"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"                        response.append(i + 1);"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"                        response.append(\".\");"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"                        response.append(task);"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"                        if (i !\u003d tasks.size() - 1) {"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"                            response.append(\"\\n\");"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"                        }"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"                    }"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"                } else if (userInput.startsWith(\"done\")) {"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"                    // TODO: 17/1/21 Throw exception if no valid choice is entered"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"                    int userChoice \u003d Integer.valueOf(userInput.split(\" \")[1]);"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":"                    if (userChoice \u003e tasks.size()) {"},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but there is no such task :-(\");"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"                    }"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"                    Task task \u003d tasks.get(userChoice - 1);"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"                    task.markComplete();"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\"Nice! I\u0027ve marked this task as done:\\n\");"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"                    response.append(task);"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"                } else if (userInput.startsWith(\"delete\")) {"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"                    // TODO: 17/1/21 Throw exception if no valid choice is entered"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"                    int userChoice \u003d Integer.valueOf(userInput.split(\" \")[1]);"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"                    if (userChoice \u003e tasks.size()) {"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but there is no such task :-(\");"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"                    }"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"                    Task task \u003d tasks.remove(userChoice - 1);"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\"Noted. I\u0027ve removed this task:\\n  \");"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"                    response.append(task);"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\"\\nNow you have \");"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"                    response.append(tasks.size());"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\" tasks in the list.\");"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"                } else if (userInput.startsWith(\"event\") ||"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"                        userInput.startsWith(\"todo\") ||"},{"lineNumber":58,"author":{"gitId":"kangtinglee"},"content":"                        userInput.startsWith(\"deadline\")) {"},{"lineNumber":59,"author":{"gitId":"kangtinglee"},"content":"                    Task task \u003d Task.parseTask(userInput);"},{"lineNumber":60,"author":{"gitId":"kangtinglee"},"content":"                    tasks.add(task);"},{"lineNumber":61,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\"Got it. I\u0027ve added this task:\\n  added: \");"},{"lineNumber":62,"author":{"gitId":"kangtinglee"},"content":"                    response.append(task);"},{"lineNumber":63,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\"\\nNow you have \");"},{"lineNumber":64,"author":{"gitId":"kangtinglee"},"content":"                    response.append(tasks.size());"},{"lineNumber":65,"author":{"gitId":"kangtinglee"},"content":"                    response.append(\" tasks in the list.\");"},{"lineNumber":66,"author":{"gitId":"kangtinglee"},"content":"                } else {"},{"lineNumber":67,"author":{"gitId":"kangtinglee"},"content":"                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":68,"author":{"gitId":"kangtinglee"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"kangtinglee"},"content":"                Duke.printWithBorders(response.toString());"},{"lineNumber":70,"author":{"gitId":"kangtinglee"},"content":"            } catch (DukeException e) {"},{"lineNumber":71,"author":{"gitId":"kangtinglee"},"content":"                Duke.printWithBorders(e.getMessage());"},{"lineNumber":72,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":76,"author":{"gitId":"kangtinglee"},"content":"    public static void printWithBorders(String message) {"},{"lineNumber":77,"author":{"gitId":"kangtinglee"},"content":"        System.out.println(Duke.BORDER);"},{"lineNumber":78,"author":{"gitId":"kangtinglee"},"content":"        System.out.println(message);"},{"lineNumber":79,"author":{"gitId":"kangtinglee"},"content":"        System.out.println(Duke.BORDER);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kangtinglee":77,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"        super(errorMessage);"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"    private final String timing;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"    public Event(String description, String timing) {"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"        super(description, TaskType.EVENT);"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"        this.timing \u003d timing;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder(super.toString());"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"        output.append(\" (at: \");"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.timing);"},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"        output.append(\")\");"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    public static Event parseEvent(String description) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"        if (description.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        } else if (!description.contains(\"/at\")) {"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an event must contain a location.\");"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"        String[] partitioned \u003d description.split(\"/at\");"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"        return new Event(partitioned[0].strip(), partitioned[1].strip());"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":28}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"    private final String description;"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"    private final TaskType type;"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"    private TaskStatus status \u003d TaskStatus.PENDING;"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"    public Task(String description, TaskType type) {"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"        this.description \u003d description;"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"        this.type \u003d type;"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"    public boolean isComplete() {"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"        return this.status \u003d\u003d TaskStatus.COMPLETED;"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":15,"author":{"gitId":"kangtinglee"},"content":"    public void markComplete() {"},{"lineNumber":16,"author":{"gitId":"kangtinglee"},"content":"        this.status \u003d TaskStatus.COMPLETED;"},{"lineNumber":17,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":19,"author":{"gitId":"kangtinglee"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"kangtinglee"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"kangtinglee"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":22,"author":{"gitId":"kangtinglee"},"content":"        switch (this.type) {"},{"lineNumber":23,"author":{"gitId":"kangtinglee"},"content":"            case TODO:"},{"lineNumber":24,"author":{"gitId":"kangtinglee"},"content":"                output.append(\"[T]\");"},{"lineNumber":25,"author":{"gitId":"kangtinglee"},"content":"                break;"},{"lineNumber":26,"author":{"gitId":"kangtinglee"},"content":"            case EVENT:"},{"lineNumber":27,"author":{"gitId":"kangtinglee"},"content":"                output.append(\"[E]\");"},{"lineNumber":28,"author":{"gitId":"kangtinglee"},"content":"                break;"},{"lineNumber":29,"author":{"gitId":"kangtinglee"},"content":"            case DEADLINE:"},{"lineNumber":30,"author":{"gitId":"kangtinglee"},"content":"                output.append(\"[D]\");"},{"lineNumber":31,"author":{"gitId":"kangtinglee"},"content":"                break;"},{"lineNumber":32,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.isComplete() ? \"[X] \" : \"[ ] \");"},{"lineNumber":34,"author":{"gitId":"kangtinglee"},"content":"        output.append(this.description);"},{"lineNumber":35,"author":{"gitId":"kangtinglee"},"content":"        return output.toString();"},{"lineNumber":36,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":38,"author":{"gitId":"kangtinglee"},"content":"    public static Task parseTask(String userInput) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"kangtinglee"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"kangtinglee"},"content":"            String[] inputSplit \u003d userInput.split(\" \",2);"},{"lineNumber":41,"author":{"gitId":"kangtinglee"},"content":"            String entryType \u003d inputSplit[0];"},{"lineNumber":42,"author":{"gitId":"kangtinglee"},"content":"            String description \u003d inputSplit[1].strip();"},{"lineNumber":43,"author":{"gitId":"kangtinglee"},"content":"            switch (entryType) {"},{"lineNumber":44,"author":{"gitId":"kangtinglee"},"content":"                case \"todo\":"},{"lineNumber":45,"author":{"gitId":"kangtinglee"},"content":"                    return Todo.parseTodo(description);"},{"lineNumber":46,"author":{"gitId":"kangtinglee"},"content":"                case \"event\":"},{"lineNumber":47,"author":{"gitId":"kangtinglee"},"content":"                    return Event.parseEvent(description);"},{"lineNumber":48,"author":{"gitId":"kangtinglee"},"content":"                case \"deadline\":"},{"lineNumber":49,"author":{"gitId":"kangtinglee"},"content":"                    return Deadline.parseDeadline(description);"},{"lineNumber":50,"author":{"gitId":"kangtinglee"},"content":"                default:"},{"lineNumber":51,"author":{"gitId":"kangtinglee"},"content":"                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":52,"author":{"gitId":"kangtinglee"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"kangtinglee"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":54,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I the description of the task cannot be empty :-(\");"},{"lineNumber":55,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":57}},{"path":"src/main/java/TaskStatus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"public enum TaskStatus {"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"    PENDING, COMPLETED"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":3}},{"path":"src/main/java/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"public enum TaskType {"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":3}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"    public Todo(String description) { super(description, TaskType.TODO); }"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":""},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"    public static Todo parseTodo(String description) throws DukeException {"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"        if (description.isEmpty()) {"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"        }"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"        return new Todo(description);"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"}"}],"authorContributionMap":{"kangtinglee":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kangtinglee"},"content":"todo read up on blockchain"},{"lineNumber":2,"author":{"gitId":"kangtinglee"},"content":"event dinner appointment /at Jewel"},{"lineNumber":3,"author":{"gitId":"kangtinglee"},"content":"deadline CS3244 Assignment 1 /by Saturday"},{"lineNumber":4,"author":{"gitId":"kangtinglee"},"content":"list"},{"lineNumber":5,"author":{"gitId":"kangtinglee"},"content":"done 3"},{"lineNumber":6,"author":{"gitId":"kangtinglee"},"content":"delete 1"},{"lineNumber":7,"author":{"gitId":"kangtinglee"},"content":"list"},{"lineNumber":8,"author":{"gitId":"kangtinglee"},"content":"event"},{"lineNumber":9,"author":{"gitId":"kangtinglee"},"content":"invalid"},{"lineNumber":10,"author":{"gitId":"kangtinglee"},"content":"deadline"},{"lineNumber":11,"author":{"gitId":"kangtinglee"},"content":"todo"},{"lineNumber":12,"author":{"gitId":"kangtinglee"},"content":"done 5"},{"lineNumber":13,"author":{"gitId":"kangtinglee"},"content":"bye"}],"authorContributionMap":{"kangtinglee":13}}]
