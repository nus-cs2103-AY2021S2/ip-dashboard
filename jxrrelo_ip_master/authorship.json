[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"# jaryl.duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"1. After that, locate the `src/main/java/jaryl.duke.Duke.java` file, right-click it, and choose `Run jaryl.duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":21,"jxrrelo":2}},{"path":"src/main/java/jaryl/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * List of valid commands for Duke"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    EXIT, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND, HELP"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":8}},{"path":"src/main/java/jaryl/duke/DataManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.io.*;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":" * DataManager handles reading/writing data from/to local disk storage"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"public class DataManager {"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"    private static final String DELIMITER \u003d \" \\\\| \";"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new DataManager"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"     * @param filePath path to file"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    public DataManager(String filePath) {"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"     * Handles the creation and writing of data to file on local disk storage"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList list of tasks"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"    public void writeToFile(ArrayList\u003cTask\u003e tasksList) {"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"        for(int i \u003d 0; i \u003c tasksList.size(); i++) {"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"            sb.append(tasksList.get(i).fileFormat()).append(\"\\n\");"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(this.filePath));"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"            bw.write(sb.toString());"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"            bw.close();"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"     * Handles the reading of data from existing file on local disk storage"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"    public ArrayList\u003cTask\u003e readFromFile() throws DukeException {"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"        ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"        LocalDateTime date \u003d null;"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"        Path path \u003d Paths.get(filePath);"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":"        if(!Files.exists(path)) {"},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":"                Files.createDirectories(path.getParent());"},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"                Files.createFile(path);"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"            } catch (IOException e) {"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"                e.printStackTrace();"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFileException();"},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":64,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"jxrrelo"},"content":"            Task task \u003d null;"},{"lineNumber":66,"author":{"gitId":"jxrrelo"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(this.filePath));"},{"lineNumber":67,"author":{"gitId":"jxrrelo"},"content":"            String input \u003d br.readLine();"},{"lineNumber":68,"author":{"gitId":"jxrrelo"},"content":"            while(input !\u003d null) {"},{"lineNumber":69,"author":{"gitId":"jxrrelo"},"content":"                String[] inputArr \u003d input.split(DELIMITER);"},{"lineNumber":70,"author":{"gitId":"jxrrelo"},"content":"                if(inputArr.length \u003d\u003d 4) {"},{"lineNumber":71,"author":{"gitId":"jxrrelo"},"content":"                    date \u003d LocalDateTime.parse(inputArr[3], DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"},{"lineNumber":72,"author":{"gitId":"jxrrelo"},"content":"                }"},{"lineNumber":73,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":74,"author":{"gitId":"jxrrelo"},"content":"                try {"},{"lineNumber":75,"author":{"gitId":"jxrrelo"},"content":"                    switch (inputArr[0]) {"},{"lineNumber":76,"author":{"gitId":"jxrrelo"},"content":"                        case \"T\":"},{"lineNumber":77,"author":{"gitId":"jxrrelo"},"content":"                            task \u003d new Todo(inputArr[2]);"},{"lineNumber":78,"author":{"gitId":"jxrrelo"},"content":"                            break;"},{"lineNumber":79,"author":{"gitId":"jxrrelo"},"content":"                        case \"D\":"},{"lineNumber":80,"author":{"gitId":"jxrrelo"},"content":"                            task \u003d new Deadline(inputArr[2], df.format(date));"},{"lineNumber":81,"author":{"gitId":"jxrrelo"},"content":"                            break;"},{"lineNumber":82,"author":{"gitId":"jxrrelo"},"content":"                        case \"E\":"},{"lineNumber":83,"author":{"gitId":"jxrrelo"},"content":"                            task \u003d new Event(inputArr[2], df.format(date));"},{"lineNumber":84,"author":{"gitId":"jxrrelo"},"content":"                            break;"},{"lineNumber":85,"author":{"gitId":"jxrrelo"},"content":"                    }"},{"lineNumber":86,"author":{"gitId":"jxrrelo"},"content":"                    if(Integer.parseInt(inputArr[1]) \u003d\u003d 1) {"},{"lineNumber":87,"author":{"gitId":"jxrrelo"},"content":"                        task.toggleStatus();"},{"lineNumber":88,"author":{"gitId":"jxrrelo"},"content":"                    }"},{"lineNumber":89,"author":{"gitId":"jxrrelo"},"content":"                    tasksList.add(task);"},{"lineNumber":90,"author":{"gitId":"jxrrelo"},"content":"                } catch (InvalidFormatException e) {"},{"lineNumber":91,"author":{"gitId":"jxrrelo"},"content":"                    System.out.println(e.getMessage());"},{"lineNumber":92,"author":{"gitId":"jxrrelo"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"jxrrelo"},"content":"                input \u003d br.readLine();"},{"lineNumber":94,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"jxrrelo"},"content":"            br.close();"},{"lineNumber":96,"author":{"gitId":"jxrrelo"},"content":"        } catch (IOException e) {"},{"lineNumber":97,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":98,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"jxrrelo"},"content":"        return tasksList;"},{"lineNumber":100,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":101}},{"path":"src/main/java/jaryl/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":" * Deadline represents a task with a task description and deadline date"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    private final LocalDateTime date;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Deadline task"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"     * @param description   description of task"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"     * @param date          deadline date of task"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"     * @throws InvalidFormatException   invalid format exception"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"     * @throws DateTimeParseException   date/time parse exception"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"    public Deadline(String description, String date) throws InvalidFormatException, DateTimeParseException {"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"        super(description, \"D\");"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        if(date.equals(\"\"))"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify both task description and date/time using /by\");"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"     * Reformats string format of Deadline task when writing to disk"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"     * @return Deadline task in reformatted String format"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"    public String fileFormat() {"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"        return \"D | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \" + df.format(this.date);"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"     * Converts Deadline task to string format"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"     * @return Deadline task in original String format"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        return \"[\" + super.getType() + \"]\" + super.toString() + \" (by: \" + df.format(this.date) + \")\";"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":46}},{"path":"src/main/java/jaryl/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":" * Duke chatbot for CS2103T Individual Project"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":" * @author LOH FAH YAO, JARYL"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.txt\";"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    private DataManager dataManager;"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    private ArrayList\u003cTask\u003e tasksList;"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"    private Output output;"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Duke object"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"    public Duke() {"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"        this.output \u003d new Output();"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"        dataManager \u003d new DataManager(FILE_PATH);"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"            tasksList \u003d dataManager.readFromFile();"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"        } catch (DukeException e) {"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"            tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"     * Entry point of application"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"     * @params args input arguments"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"    public static void main(String[] args) {"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"        new Duke().run();"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"     * Entry point into Duke chatbot"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"    public void run() {"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        boolean isExit \u003d false;"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"        output.printWelcomeMsg();"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"        while(sc.hasNextLine()) {"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"                Command cmd \u003d Command.valueOf(input.split(\" \")[0].toUpperCase());"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"                switch (cmd) {"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":"                    case EXIT:"},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"                        isExit \u003d output.printByeMsg();"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":"                        break;"},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"                    case LIST:"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"                        output.listAction(tasksList);"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"                        break;"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"                    case DONE:"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"                        output.doneAction(tasksList, input, dataManager);"},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":"                        break;"},{"lineNumber":63,"author":{"gitId":"jxrrelo"},"content":"                    case TODO:"},{"lineNumber":64,"author":{"gitId":"jxrrelo"},"content":"                    case DEADLINE:"},{"lineNumber":65,"author":{"gitId":"jxrrelo"},"content":"                    case EVENT:"},{"lineNumber":66,"author":{"gitId":"jxrrelo"},"content":"                        output.addAction(tasksList, input, dataManager);"},{"lineNumber":67,"author":{"gitId":"jxrrelo"},"content":"                        break;"},{"lineNumber":68,"author":{"gitId":"jxrrelo"},"content":"                    case DELETE:"},{"lineNumber":69,"author":{"gitId":"jxrrelo"},"content":"                        output.deleteAction(tasksList, input, dataManager);"},{"lineNumber":70,"author":{"gitId":"jxrrelo"},"content":"                        break;"},{"lineNumber":71,"author":{"gitId":"jxrrelo"},"content":"                    case FIND:"},{"lineNumber":72,"author":{"gitId":"jxrrelo"},"content":"                        output.findAction(tasksList, input);"},{"lineNumber":73,"author":{"gitId":"jxrrelo"},"content":"                        break;"},{"lineNumber":74,"author":{"gitId":"jxrrelo"},"content":"                    case HELP:"},{"lineNumber":75,"author":{"gitId":"jxrrelo"},"content":"                        output.sendHelp();"},{"lineNumber":76,"author":{"gitId":"jxrrelo"},"content":"                        break;"},{"lineNumber":77,"author":{"gitId":"jxrrelo"},"content":"                }"},{"lineNumber":78,"author":{"gitId":"jxrrelo"},"content":"            } catch (IllegalArgumentException e) {"},{"lineNumber":79,"author":{"gitId":"jxrrelo"},"content":"                output.printIllegalArgumentError();"},{"lineNumber":80,"author":{"gitId":"jxrrelo"},"content":"            } catch (DukeException e1) {"},{"lineNumber":81,"author":{"gitId":"jxrrelo"},"content":"                System.out.println(e1);"},{"lineNumber":82,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":84,"author":{"gitId":"jxrrelo"},"content":"            if(isExit) break;"},{"lineNumber":85,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"jxrrelo":84}},{"path":"src/main/java/jaryl/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * DukeException handles duke exceptions"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"        Output output \u003d new Output();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        return output.addLine() + \"\\n    ☹ OOPS! \" + this.getMessage() + \"\\n\" + output.addLine();"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":16}},{"path":"src/main/java/jaryl/duke/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * EmptyListException represents a duke exception"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" * Handles empty list exceptions"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"public class EmptyListException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new EmptyListException"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    public EmptyListException() {"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        super(\"It seems you have nothing on your list.\");"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":14}},{"path":"src/main/java/jaryl/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":" * Event represents a task with a task description and task date"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    private final LocalDateTime date;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Event task"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"     * @param description   description of task"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"     * @param date          date of task"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"     * @throws InvalidFormatException   invalid format exception"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"     * @throws DateTimeParseException   date/time parse exception"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"    public Event(String description, String date) throws InvalidFormatException, DateTimeParseException {"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"        super(description, \"E\");"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        if(date.equals(\"\"))"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify both task description and date/time using /at\");"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"     * Reformats string format of Event task when writing to disk"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"     * @return Event task in reformatted String format"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"    public String fileFormat() {"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"        return \"E | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \" + df.format(this.date);"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"     * Converts Event task to string format"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"     * @return Event task in original String format"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"        return \"[\" + super.getType() + \"]\" + super.toString() + \" (at: \" + df.format(this.date) + \")\";"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":47}},{"path":"src/main/java/jaryl/duke/InvalidFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * InvalidFileException represents a DukeException"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" * Handles invalid file exceptions"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"public class InvalidFileException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new InvalidFileException"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    public InvalidFileException() {"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        super(\"\");"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":14}},{"path":"src/main/java/jaryl/duke/InvalidFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * InvalidFormatException represents a DukeException."},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" * Handles invalid format exceptions"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"public class InvalidFormatException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new EmptyListException"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"     * @params msg  error message"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    public InvalidFormatException(String msg) {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"        super(msg);"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":15}},{"path":"src/main/java/jaryl/duke/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":" * Output handles I/O, interactions with user"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"public class Output {"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"     * Prints a line as a separator"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"     * @return returns the line as a String"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"    public String addLine() {"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"        return \"    ----------------------------------------------------------------------------------------------------------------------------------------------------------\";"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     * Prints welcome message"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"    public void printWelcomeMsg() {"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine());"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    Hello! I\u0027m Duke, your friendly chatbot.\\n    What can I do for you today?\\n\");"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"        printListCommands();"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine() + \"\\n\");"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"     * Prints message upon successfully adding task"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"     * @param task      the task to be added"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"     * @param numTasks  total number of existing tasks"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"    public void printAddedTask(Task task, int numTasks) {"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine());"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    Got it. I\u0027ve added this task:\");"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"      \" + task);"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    Now you have \" + numTasks + \" tasks in the list.\");"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine() + \"\\n\");"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"     * Prints a list of valid commands"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"    public void printListCommands() {"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    1. list                                   Lists out all existing tasks                              (e.g. list)\");"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    2. done \u003ctask number\u003e                     Marks the specified task number as done/undone            (e.g. done 2)\");"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    3. find \u003ckeyword\u003e                         Finds any existing tasks containing the given keyword     (e.g. find homework)\");"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    4. todo \u003ctodo message\u003e                    Adds the specified todo to the list                       (e.g. todo homework)\");"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    5. deadline \u003cdeadline message\u003e \u003cdate\u003e     Adds the specified deadline to the list                   (e.g. deadline return book /by 02/12/2020 4pm)\");"},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    6. event \u003cevent message\u003e \u003cdate\u003e           Adds the specified event to the list                      (e.g. event project meeting /at 02/12/2020 4pm)\");"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    7. delete \u003ctask number\u003e                   Deletes the specified task number from the list           (e.g. delete 2)\");"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    8. help                                   Prints help information                                   (e.g. help)\");"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    9. exit                                   Terminate Duke                                            (e.g. bye)\");"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"     * Handles help command"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"    public void sendHelp() {"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine());"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    Duke has sent help! Here is a list of valid commands:\\n\");"},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":"        printListCommands();"},{"lineNumber":63,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine() + \"\\n\");"},{"lineNumber":64,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":66,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"jxrrelo"},"content":"     * Prints message upon successfully marking a task done"},{"lineNumber":68,"author":{"gitId":"jxrrelo"},"content":"     * @param task  the task to be marked done"},{"lineNumber":69,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"jxrrelo"},"content":"    public void printDoneMsg(Task task) {"},{"lineNumber":71,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine());"},{"lineNumber":72,"author":{"gitId":"jxrrelo"},"content":"        if(task.getStatusIcon().equals(\"\\u2713\"))"},{"lineNumber":73,"author":{"gitId":"jxrrelo"},"content":"            System.out.println(\"    Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":74,"author":{"gitId":"jxrrelo"},"content":"        else"},{"lineNumber":75,"author":{"gitId":"jxrrelo"},"content":"            System.out.println(\"    Noted. I\u0027ve marked this task as undone:\");"},{"lineNumber":76,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"      \" + task);"},{"lineNumber":77,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine() + \"\\n\");"},{"lineNumber":78,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":80,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"jxrrelo"},"content":"     * Prints message upon successfully deleting a task"},{"lineNumber":82,"author":{"gitId":"jxrrelo"},"content":"     * @param task      the task to be deleted"},{"lineNumber":83,"author":{"gitId":"jxrrelo"},"content":"     * @param numTasks  total number of existing tasks"},{"lineNumber":84,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"jxrrelo"},"content":"    public void printDeleteMsg(Task task, int numTasks) {"},{"lineNumber":86,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine());"},{"lineNumber":87,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    Noted. I\u0027ve removed this task:\");"},{"lineNumber":88,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"      \" + task);"},{"lineNumber":89,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(\"    Now you have \" + numTasks + \" tasks in the list.\");"},{"lineNumber":90,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine() + \"\\n\");"},{"lineNumber":91,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":93,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"jxrrelo"},"content":"     * Prints message upon terminating the program with Exit command"},{"lineNumber":95,"author":{"gitId":"jxrrelo"},"content":"     * @return  exit confirmation"},{"lineNumber":96,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"jxrrelo"},"content":"    public boolean printByeMsg() {"},{"lineNumber":98,"author":{"gitId":"jxrrelo"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":99,"author":{"gitId":"jxrrelo"},"content":"        System.out.print(addLine() + \"\\n    Are you sure you\u0027d like to exit? (Y/N): \");"},{"lineNumber":100,"author":{"gitId":"jxrrelo"},"content":"        String input \u003d sc.next();"},{"lineNumber":101,"author":{"gitId":"jxrrelo"},"content":"        while(true) {"},{"lineNumber":102,"author":{"gitId":"jxrrelo"},"content":"            if(input.equals(\"Y\") || input.equals(\"y\")) {"},{"lineNumber":103,"author":{"gitId":"jxrrelo"},"content":"                System.out.println(addLine() + \"\\n    Bye. Hope to see you again soon!\\n\" + addLine());"},{"lineNumber":104,"author":{"gitId":"jxrrelo"},"content":"                return true;"},{"lineNumber":105,"author":{"gitId":"jxrrelo"},"content":"            } else if(input.equals(\"N\") || input.equals(\"n\")) {"},{"lineNumber":106,"author":{"gitId":"jxrrelo"},"content":"                System.out.println(addLine() + \"\\n    You\u0027re most welcomed to stay on!\\n\" + addLine());"},{"lineNumber":107,"author":{"gitId":"jxrrelo"},"content":"                return false;"},{"lineNumber":108,"author":{"gitId":"jxrrelo"},"content":"            } else {"},{"lineNumber":109,"author":{"gitId":"jxrrelo"},"content":"                System.out.print(addLine() + \"\\n    Are you sure you\u0027d like to exit? (Y/N): \");"},{"lineNumber":110,"author":{"gitId":"jxrrelo"},"content":"                input \u003d sc.next();"},{"lineNumber":111,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":115,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"jxrrelo"},"content":"     * Prints message for user query"},{"lineNumber":117,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"jxrrelo"},"content":"    public void printFind(ArrayList\u003cTask\u003e foundTasks, String query) {"},{"lineNumber":119,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine());"},{"lineNumber":120,"author":{"gitId":"jxrrelo"},"content":"        if (foundTasks.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitId":"jxrrelo"},"content":"            System.out.println(\"    ☹ OOPS! No tasks found for the query: \" + query);"},{"lineNumber":122,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"jxrrelo"},"content":"        for (Task t : foundTasks) {"},{"lineNumber":124,"author":{"gitId":"jxrrelo"},"content":"            System.out.println(\"    \" + t);"},{"lineNumber":125,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine() + \"\\n\");"},{"lineNumber":127,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":129,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"jxrrelo"},"content":"     * Prints message when user inputs an illegal argument"},{"lineNumber":131,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"jxrrelo"},"content":"    public void printIllegalArgumentError() {"},{"lineNumber":133,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine() + \"\\n    ☹ OOPS! I\u0027m sorry, but I don\u0027t know what that means :(\" + \"\\n\" + addLine() + \"\\n\");"},{"lineNumber":134,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":136,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"jxrrelo"},"content":"     * Handles list command"},{"lineNumber":138,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList list of tasks"},{"lineNumber":139,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"jxrrelo"},"content":"    public void listAction(ArrayList\u003cTask\u003e tasksList) throws DukeException {"},{"lineNumber":141,"author":{"gitId":"jxrrelo"},"content":"        if(tasksList.size() \u003d\u003d 0) {"},{"lineNumber":142,"author":{"gitId":"jxrrelo"},"content":"            throw new EmptyListException();"},{"lineNumber":143,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":145,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine());"},{"lineNumber":146,"author":{"gitId":"jxrrelo"},"content":"        for(int i \u003d 1; i \u003c\u003d tasksList.size(); i++) {"},{"lineNumber":147,"author":{"gitId":"jxrrelo"},"content":"            Task task \u003d tasksList.get(i - 1);"},{"lineNumber":148,"author":{"gitId":"jxrrelo"},"content":"            System.out.println(\"    \" + i + \". \" + task);"},{"lineNumber":149,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"jxrrelo"},"content":"        System.out.println(addLine() + \"\\n\");"},{"lineNumber":151,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":153,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"jxrrelo"},"content":"     * Handles done command"},{"lineNumber":155,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList     list of tasks"},{"lineNumber":156,"author":{"gitId":"jxrrelo"},"content":"     * @param input         user input"},{"lineNumber":157,"author":{"gitId":"jxrrelo"},"content":"     * @param dataManager   data manager which handles reading/writing data"},{"lineNumber":158,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"jxrrelo"},"content":"    public void doneAction(ArrayList\u003cTask\u003e tasksList, String input, DataManager dataManager) throws DukeException {"},{"lineNumber":160,"author":{"gitId":"jxrrelo"},"content":"        String[] params \u003d input.split(\" \");"},{"lineNumber":161,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":162,"author":{"gitId":"jxrrelo"},"content":"        if (params.length \u003c 2) {"},{"lineNumber":163,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Invalid event number. Please specify a valid event you would like to mark done\");"},{"lineNumber":164,"author":{"gitId":"jxrrelo"},"content":"        } else if (Integer.parseInt(params[1]) \u003c\u003d 0 || Integer.parseInt(params[1]) \u003e tasksList.size()) {"},{"lineNumber":165,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Invalid event number. Please specify a valid event you would like to mark done\");"},{"lineNumber":166,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"jxrrelo"},"content":"        Task done \u003d tasksList.get(Integer.parseInt(params[1]) - 1);"},{"lineNumber":168,"author":{"gitId":"jxrrelo"},"content":"        done.toggleStatus();"},{"lineNumber":169,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":170,"author":{"gitId":"jxrrelo"},"content":"        printDoneMsg(done);"},{"lineNumber":171,"author":{"gitId":"jxrrelo"},"content":"        dataManager.writeToFile(tasksList);"},{"lineNumber":172,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":174,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"jxrrelo"},"content":"     * Handles todo, deadline and event commands"},{"lineNumber":176,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList     list of tasks"},{"lineNumber":177,"author":{"gitId":"jxrrelo"},"content":"     * @param input         user input"},{"lineNumber":178,"author":{"gitId":"jxrrelo"},"content":"     * @param dataManager   data manager which handles reading/writing data"},{"lineNumber":179,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"jxrrelo"},"content":"    public void addAction(ArrayList\u003cTask\u003e tasksList, String input, DataManager dataManager) throws DukeException {"},{"lineNumber":181,"author":{"gitId":"jxrrelo"},"content":"        String taskDesc \u003d \"\", dateTime \u003d \"\";"},{"lineNumber":182,"author":{"gitId":"jxrrelo"},"content":"        String[] checkFormat;"},{"lineNumber":183,"author":{"gitId":"jxrrelo"},"content":"        String[] params \u003d input.split(\" \");"},{"lineNumber":184,"author":{"gitId":"jxrrelo"},"content":"        if(params[0].equals(\"todo\")) {"},{"lineNumber":185,"author":{"gitId":"jxrrelo"},"content":"            if(params.length \u003e 1) {"},{"lineNumber":186,"author":{"gitId":"jxrrelo"},"content":"                taskDesc \u003d input.split(\"todo \")[1];"},{"lineNumber":187,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":189,"author":{"gitId":"jxrrelo"},"content":"            Todo todo \u003d new Todo(taskDesc);"},{"lineNumber":190,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":191,"author":{"gitId":"jxrrelo"},"content":"            tasksList.add(todo);"},{"lineNumber":192,"author":{"gitId":"jxrrelo"},"content":"            printAddedTask(todo, tasksList.size());"},{"lineNumber":193,"author":{"gitId":"jxrrelo"},"content":"            dataManager.writeToFile(tasksList);"},{"lineNumber":194,"author":{"gitId":"jxrrelo"},"content":"        } else if(params[0].equals(\"deadline\")) {"},{"lineNumber":195,"author":{"gitId":"jxrrelo"},"content":"            checkFormat \u003d input.split(\" /by \");"},{"lineNumber":196,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":197,"author":{"gitId":"jxrrelo"},"content":"            if(params.length \u003e\u003d 4 \u0026\u0026 checkFormat.length \u003e 1) {"},{"lineNumber":198,"author":{"gitId":"jxrrelo"},"content":"                taskDesc \u003d input.split(\"deadline \")[1].split(\" /by \")[0];"},{"lineNumber":199,"author":{"gitId":"jxrrelo"},"content":"                dateTime \u003d input.split(\" /by \")[1];"},{"lineNumber":200,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":201,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":202,"author":{"gitId":"jxrrelo"},"content":"            Deadline deadline \u003d new Deadline(taskDesc, dateTime);"},{"lineNumber":203,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":204,"author":{"gitId":"jxrrelo"},"content":"            tasksList.add(deadline);"},{"lineNumber":205,"author":{"gitId":"jxrrelo"},"content":"            printAddedTask(deadline, tasksList.size());"},{"lineNumber":206,"author":{"gitId":"jxrrelo"},"content":"            dataManager.writeToFile(tasksList);"},{"lineNumber":207,"author":{"gitId":"jxrrelo"},"content":"        } else if(params[0].equals(\"event\")) {"},{"lineNumber":208,"author":{"gitId":"jxrrelo"},"content":"            checkFormat \u003d input.split(\" /at \");"},{"lineNumber":209,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":210,"author":{"gitId":"jxrrelo"},"content":"            if(params.length \u003e\u003d 4 \u0026\u0026 checkFormat.length \u003e 1) {"},{"lineNumber":211,"author":{"gitId":"jxrrelo"},"content":"                taskDesc \u003d input.split(\"event \")[1].split(\" /at \")[0];"},{"lineNumber":212,"author":{"gitId":"jxrrelo"},"content":"                dateTime \u003d input.split(\" /at \")[1];"},{"lineNumber":213,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":214,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":215,"author":{"gitId":"jxrrelo"},"content":"            Event event \u003d new Event(taskDesc, dateTime);"},{"lineNumber":216,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":217,"author":{"gitId":"jxrrelo"},"content":"            tasksList.add(event);"},{"lineNumber":218,"author":{"gitId":"jxrrelo"},"content":"            printAddedTask(event, tasksList.size());"},{"lineNumber":219,"author":{"gitId":"jxrrelo"},"content":"            dataManager.writeToFile(tasksList);"},{"lineNumber":220,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":223,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"jxrrelo"},"content":"     * Handles delete command"},{"lineNumber":225,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList     list of tasks"},{"lineNumber":226,"author":{"gitId":"jxrrelo"},"content":"     * @param input         user input"},{"lineNumber":227,"author":{"gitId":"jxrrelo"},"content":"     * @param dataManager   data manager which handles reading/writing data"},{"lineNumber":228,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"jxrrelo"},"content":"    public void deleteAction(ArrayList\u003cTask\u003e tasksList, String input, DataManager dataManager) throws DukeException {"},{"lineNumber":230,"author":{"gitId":"jxrrelo"},"content":"        String[] params \u003d input.split(\" \");"},{"lineNumber":231,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":232,"author":{"gitId":"jxrrelo"},"content":"        if (params.length \u003c 2) {"},{"lineNumber":233,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify a valid event you would like to delete\");"},{"lineNumber":234,"author":{"gitId":"jxrrelo"},"content":"        } else if (Integer.parseInt(params[1]) \u003c\u003d 0 || Integer.parseInt(params[1]) \u003e tasksList.size()) {"},{"lineNumber":235,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify a valid event you would like to delete\");"},{"lineNumber":236,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"jxrrelo"},"content":"        Task delete \u003d tasksList.remove(Integer.parseInt(params[1]) - 1);"},{"lineNumber":238,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":239,"author":{"gitId":"jxrrelo"},"content":"        printDeleteMsg(delete, tasksList.size());"},{"lineNumber":240,"author":{"gitId":"jxrrelo"},"content":"        dataManager.writeToFile(tasksList);"},{"lineNumber":241,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":243,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":244,"author":{"gitId":"jxrrelo"},"content":"     * Handles find command"},{"lineNumber":245,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList     list of tasks"},{"lineNumber":246,"author":{"gitId":"jxrrelo"},"content":"     * @param input         user input"},{"lineNumber":247,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":248,"author":{"gitId":"jxrrelo"},"content":"    public void findAction(ArrayList\u003cTask\u003e tasksList, String input) throws DukeException {"},{"lineNumber":249,"author":{"gitId":"jxrrelo"},"content":"        String[] params \u003d input.split(\" \");"},{"lineNumber":250,"author":{"gitId":"jxrrelo"},"content":"        String toFind \u003d \"\";"},{"lineNumber":251,"author":{"gitId":"jxrrelo"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":252,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":253,"author":{"gitId":"jxrrelo"},"content":"        if (params.length \u003c 2) {"},{"lineNumber":254,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify a valid query.\");"},{"lineNumber":255,"author":{"gitId":"jxrrelo"},"content":"        } else {"},{"lineNumber":256,"author":{"gitId":"jxrrelo"},"content":"            toFind \u003d input.split(\"find \")[1];"},{"lineNumber":257,"author":{"gitId":"jxrrelo"},"content":"            for (Task t : tasksList) {"},{"lineNumber":258,"author":{"gitId":"jxrrelo"},"content":"                if(t.getDescription().contains(toFind)) {"},{"lineNumber":259,"author":{"gitId":"jxrrelo"},"content":"                    foundTasks.add(t);"},{"lineNumber":260,"author":{"gitId":"jxrrelo"},"content":"                }"},{"lineNumber":261,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":262,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":264,"author":{"gitId":"jxrrelo"},"content":"        printFind(foundTasks, toFind);"},{"lineNumber":265,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":266}},{"path":"src/main/java/jaryl/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * Task with a description and type that can be added to a task list"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" * Can exist as Todo, Deadline or Event"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":" * @author LOH FAH YAO, JARYL"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    protected String type;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Task"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"     * @param description   description of task"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"     * @param type          task type in \"T\", \"D\" or \"E\""},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    public Task(String description, String type) {"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"        this.type \u003d type;"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"     * Retrieves the description of the task"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"     * @return  Task description"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"    public String getDescription() {"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"        return this.description;"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"     * Retrieves the status icon of the task depending whether it is done"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"     * @return  Task status icon"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"    public String getStatusIcon() {"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"     * Toggles the status of the task"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    public void toggleStatus() {"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        this.isDone \u003d !this.isDone;"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"     * Retrieves the task type"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"     * @return  the task type in \"T\", \"D\" or \"E\""},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"    public String getType() {"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"        return this.type;"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":"     * Reformats string format of Task when writing to disk"},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"     * @return Task in reformatted String format"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"    public String fileFormat() {"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"        return this.type + \" | \" + (isDone ? \"1 | \" : \"0 | \") + this.description;"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":63,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"jxrrelo"},"content":"     * Converts Task to string format"},{"lineNumber":65,"author":{"gitId":"jxrrelo"},"content":"     * @return Task in original String format"},{"lineNumber":66,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitId":"jxrrelo"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":70,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":71}},{"path":"src/main/java/jaryl/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * Todo represents a task with a task description"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Todo task"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"     * @param description               description of task"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"     * @throws InvalidFormatException   invalid format exception"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    public Todo(String description) throws InvalidFormatException {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"        super(description, \"T\");"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        if(description.equals(\"\"))"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify task description\");"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     * Converts Todo task to string format"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"     * @return Todo task in original String format"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"        return \"[\" + super.getType() + \"]\" + super.toString();"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":26}},{"path":"src/test/java/jaryl/duke/DataManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"public class DataManagerTest {"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    private static final String FILE_PATH \u003d \"./data/test.txt\";"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    private ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    public void testWriteToFile() throws InvalidFormatException {"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"        DataManager dataManager \u003d new DataManager(FILE_PATH);"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"        if(Files.exists(Paths.get(FILE_PATH))) {"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"                Files.delete(Paths.get(FILE_PATH));"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"            } catch (IOException e) {"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"                e.printStackTrace();"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"        tasksList.add(new Todo(\"Math Homework\"));"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"        tasksList.add(new Deadline(\"Science Homework\", \"02/12/2021 1800\"));"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"        tasksList.add(new Event(\"Jay Chou Concert\", \"02/12/2021 1800\"));"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"        dataManager.writeToFile(tasksList);"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"        assert(Files.exists(Paths.get(FILE_PATH)));"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"    public void testReadFromFile() throws DukeException {"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"        DataManager dataManager \u003d new DataManager(FILE_PATH);"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"        if(Files.exists(Paths.get(FILE_PATH))) {"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"                Files.delete(Paths.get(FILE_PATH));"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"                String data \u003d \"T | 0 | Math Homework\" +"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"                        \"\\nD | 0 | Science Homework | 02 Dec 2021 1800\" +"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"                        \"\\nE | 0 | Jay Chou Concert | 02 Dec 2021 1800\";"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"                Files.write(Paths.get(FILE_PATH), data.getBytes());"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"            } catch (IOException e) {"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"                e.printStackTrace();"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"                tasksList \u003d dataManager.readFromFile();"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"            } catch (DukeException e) {"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":"                e.printStackTrace();"},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"            assertEquals(tasksList.size(), 3);"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":61}},{"path":"src/test/java/jaryl/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class DeadlineTest {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    public void testToString() {"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"            Deadline deadline \u003d new Deadline(\"Math Homework\", \"02/12/2021 1800\");"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"            assertEquals(deadline.toString(), \"[D][ ] Math Homework (by: 02 Dec 2021 1800)\");"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        } catch (InvalidFormatException e) {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":16}},{"path":"src/test/java/jaryl/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class EventTest {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    public void testToString() {"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"            Event event \u003d new Event(\"Jay Chou Concert\", \"02/12/2021 1800\");"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"            assertEquals(event.toString(), \"[E][ ] Jay Chou Concert (at: 02 Dec 2021 1800)\");"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        } catch (InvalidFormatException e) {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":16}},{"path":"src/test/java/jaryl/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class TodoTest {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    public void testToString() {"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"            Todo todo \u003d new Todo(\"Math Homework\");"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"            assertEquals(todo.toString(), \"[T][ ] Math Homework\");"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        } catch (InvalidFormatException e) {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"list"}],"authorContributionMap":{"jxrrelo":4}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"java -classpath ..\\bin jaryl.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"jxrrelo":1}}]
