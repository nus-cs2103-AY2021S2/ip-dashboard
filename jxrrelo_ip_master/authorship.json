[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"# jaryl.duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"1. After that, locate the `src/main/java/jaryl.duke.Duke.java` file, right-click it, and choose `Run jaryl.duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":21,"jxrrelo":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"javafx {"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"    version \u003d \"11.0.2\""},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    mainClassName \u003d \"jaryl.duke.Launcher\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":37,"jxrrelo":20}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"rootProject.name \u003d \u0027ip\u0027"}],"authorContributionMap":{"jxrrelo":1}},{"path":"src/main/java/jaryl/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * List of valid commands for Duke"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    EXIT, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND, HELP"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":8}},{"path":"src/main/java/jaryl/duke/DataManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.io.*;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":" * DataManager handles reading/writing data from/to local disk storage"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"public class DataManager {"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"    private static final String DELIMITER \u003d \" \\\\| \";"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new DataManager"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"     * @param filePath path to file"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    public DataManager(String filePath) {"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"     * Handles the creation and writing of data to file on local disk storage"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList list of tasks"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"    public void writeToFile(ArrayList\u003cTask\u003e tasksList) {"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"        for(int i \u003d 0; i \u003c tasksList.size(); i++) {"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"            sb.append(tasksList.get(i).fileFormat()).append(\"\\n\");"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(this.filePath));"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"            bw.write(sb.toString());"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"            bw.close();"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"     * Handles the reading of data from existing file on local disk storage"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"    public ArrayList\u003cTask\u003e readFromFile() throws DukeException {"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"        ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"        LocalDateTime date \u003d null;"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"        Path path \u003d Paths.get(filePath);"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":"        if(!Files.exists(path)) {"},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":"                Files.createDirectories(path.getParent());"},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"                Files.createFile(path);"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"            } catch (IOException e) {"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"                e.printStackTrace();"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFileException();"},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":64,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"jxrrelo"},"content":"            Task task \u003d null;"},{"lineNumber":66,"author":{"gitId":"jxrrelo"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(this.filePath));"},{"lineNumber":67,"author":{"gitId":"jxrrelo"},"content":"            String input \u003d br.readLine();"},{"lineNumber":68,"author":{"gitId":"jxrrelo"},"content":"            while(input !\u003d null) {"},{"lineNumber":69,"author":{"gitId":"jxrrelo"},"content":"                String[] inputArr \u003d input.split(DELIMITER);"},{"lineNumber":70,"author":{"gitId":"jxrrelo"},"content":"                if(inputArr.length \u003d\u003d 4) {"},{"lineNumber":71,"author":{"gitId":"jxrrelo"},"content":"                    date \u003d LocalDateTime.parse(inputArr[3], DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"},{"lineNumber":72,"author":{"gitId":"jxrrelo"},"content":"                }"},{"lineNumber":73,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":74,"author":{"gitId":"jxrrelo"},"content":"                try {"},{"lineNumber":75,"author":{"gitId":"jxrrelo"},"content":"                    switch (inputArr[0]) {"},{"lineNumber":76,"author":{"gitId":"jxrrelo"},"content":"                        case \"T\":"},{"lineNumber":77,"author":{"gitId":"jxrrelo"},"content":"                            task \u003d new Todo(inputArr[2]);"},{"lineNumber":78,"author":{"gitId":"jxrrelo"},"content":"                            break;"},{"lineNumber":79,"author":{"gitId":"jxrrelo"},"content":"                        case \"D\":"},{"lineNumber":80,"author":{"gitId":"jxrrelo"},"content":"                            task \u003d new Deadline(inputArr[2], df.format(date));"},{"lineNumber":81,"author":{"gitId":"jxrrelo"},"content":"                            break;"},{"lineNumber":82,"author":{"gitId":"jxrrelo"},"content":"                        case \"E\":"},{"lineNumber":83,"author":{"gitId":"jxrrelo"},"content":"                            task \u003d new Event(inputArr[2], df.format(date));"},{"lineNumber":84,"author":{"gitId":"jxrrelo"},"content":"                            break;"},{"lineNumber":85,"author":{"gitId":"jxrrelo"},"content":"                    }"},{"lineNumber":86,"author":{"gitId":"jxrrelo"},"content":"                    if(Integer.parseInt(inputArr[1]) \u003d\u003d 1) {"},{"lineNumber":87,"author":{"gitId":"jxrrelo"},"content":"                        task.toggleStatus();"},{"lineNumber":88,"author":{"gitId":"jxrrelo"},"content":"                    }"},{"lineNumber":89,"author":{"gitId":"jxrrelo"},"content":"                    tasksList.add(task);"},{"lineNumber":90,"author":{"gitId":"jxrrelo"},"content":"                } catch (InvalidFormatException e) {"},{"lineNumber":91,"author":{"gitId":"jxrrelo"},"content":"                    System.out.println(e.getMessage());"},{"lineNumber":92,"author":{"gitId":"jxrrelo"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"jxrrelo"},"content":"                input \u003d br.readLine();"},{"lineNumber":94,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"jxrrelo"},"content":"            br.close();"},{"lineNumber":96,"author":{"gitId":"jxrrelo"},"content":"        } catch (IOException e) {"},{"lineNumber":97,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":98,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"jxrrelo"},"content":"        return tasksList;"},{"lineNumber":100,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":101}},{"path":"src/main/java/jaryl/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":" * Deadline represents a task with a task description and deadline date"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    private final LocalDateTime date;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Deadline task"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"     * @param description   description of task"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"     * @param date          deadline date of task"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"     * @throws InvalidFormatException   invalid format exception"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"     * @throws DateTimeParseException   date/time parse exception"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"    public Deadline(String description, String date) throws InvalidFormatException, DateTimeParseException {"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"        super(description, \"D\");"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        if(date.equals(\"\"))"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify both task description and date/time using /by\");"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"     * Reformats string format of Deadline task when writing to disk"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"     * @return Deadline task in reformatted String format"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"    public String fileFormat() {"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"        return \"D | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \" + df.format(this.date);"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"     * Converts Deadline task to string format"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"     * @return Deadline task in original String format"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        return \"[\" + super.getType() + \"]\" + super.toString() + \" (by: \" + df.format(this.date) + \")\";"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":46}},{"path":"src/main/java/jaryl/duke/Dialog.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"public class Dialog extends HBox {"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    private ImageView displayPic;"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"    private Label dialog;"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    private Dialog(String text, Image image) {"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/Dialog.fxml\"));"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"            fxmlLoader.load();"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"        dialog.setText(text);"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"        displayPic.setImage(image);"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"    private void flip() {"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"        ObservableList\u003cNode\u003e observableList \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"        Collections.reverse(observableList);"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"        getChildren().setAll(observableList);"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    public static Dialog getDukeResponse(String str, Image dukeImg) {"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        var dialog \u003d new Dialog(str, dukeImg);"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"        dialog.flip();"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"        return dialog;"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"    public static Dialog getUserResponse(String str, Image userImg) {"},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"        var dialog \u003d new Dialog(str, userImg);"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"        return dialog;"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":53}},{"path":"src/main/java/jaryl/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":" * Duke chatbot for CS2103T Individual Project"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":" * @author LOH FAH YAO, JARYL"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"public class Duke extends Application {"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.txt\";"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"    private DataManager dataManager;"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"    private ArrayList\u003cTask\u003e tasksList;"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"    private Output output;"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"    private TextField userInput;"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"    private VBox vBox;"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"    private Button sendButton;"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"    private Image userImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/ash.png\"));"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"    private Image dukeImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/pikachu.png\"));"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Duke object"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"    public Duke() {"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"        this.output \u003d new Output();"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"        dataManager \u003d new DataManager(FILE_PATH);"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"            tasksList \u003d dataManager.readFromFile();"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        } catch (DukeException e) {"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"            tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"    public void start(Stage stage) {"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"        vBox \u003d new VBox();"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"        scrollPane.setContent(vBox);"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"        sendButton \u003d new Button(\"\u003e\");"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"        userInput \u003d new TextField();"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"        AnchorPane anchorPane \u003d new AnchorPane();"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"        anchorPane.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":63,"author":{"gitId":"jxrrelo"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":64,"author":{"gitId":"jxrrelo"},"content":"        stage.setResizable(false);"},{"lineNumber":65,"author":{"gitId":"jxrrelo"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":66,"author":{"gitId":"jxrrelo"},"content":"        stage.setMinHeight(500.0);"},{"lineNumber":67,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":68,"author":{"gitId":"jxrrelo"},"content":"        anchorPane.setPrefSize(400.0, 600.0);"},{"lineNumber":69,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":70,"author":{"gitId":"jxrrelo"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":71,"author":{"gitId":"jxrrelo"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":72,"author":{"gitId":"jxrrelo"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":73,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":74,"author":{"gitId":"jxrrelo"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":75,"author":{"gitId":"jxrrelo"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":76,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":77,"author":{"gitId":"jxrrelo"},"content":"        vBox.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":78,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":79,"author":{"gitId":"jxrrelo"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":80,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":81,"author":{"gitId":"jxrrelo"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":82,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":83,"author":{"gitId":"jxrrelo"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":84,"author":{"gitId":"jxrrelo"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);"},{"lineNumber":85,"author":{"gitId":"jxrrelo"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":86,"author":{"gitId":"jxrrelo"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":87,"author":{"gitId":"jxrrelo"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":88,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":89,"author":{"gitId":"jxrrelo"},"content":"        stage.setScene(new Scene(anchorPane));"},{"lineNumber":90,"author":{"gitId":"jxrrelo"},"content":"        stage.show();"},{"lineNumber":91,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":92,"author":{"gitId":"jxrrelo"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":93,"author":{"gitId":"jxrrelo"},"content":"            userInputHandler();"},{"lineNumber":94,"author":{"gitId":"jxrrelo"},"content":"        });"},{"lineNumber":95,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":96,"author":{"gitId":"jxrrelo"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":97,"author":{"gitId":"jxrrelo"},"content":"            userInputHandler();"},{"lineNumber":98,"author":{"gitId":"jxrrelo"},"content":"        });"},{"lineNumber":99,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":100,"author":{"gitId":"jxrrelo"},"content":"        vBox.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":101,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":103,"author":{"gitId":"jxrrelo"},"content":"    private void userInputHandler() {"},{"lineNumber":104,"author":{"gitId":"jxrrelo"},"content":"        Label dukeResponse \u003d new Label(getResponse(userInput.getText()));"},{"lineNumber":105,"author":{"gitId":"jxrrelo"},"content":"        Label userResponse \u003d new Label(userInput.getText());"},{"lineNumber":106,"author":{"gitId":"jxrrelo"},"content":"        vBox.getChildren().addAll("},{"lineNumber":107,"author":{"gitId":"jxrrelo"},"content":"                Dialog.getUserResponse(userResponse.toString(), userImg),"},{"lineNumber":108,"author":{"gitId":"jxrrelo"},"content":"                Dialog.getDukeResponse(dukeResponse.toString(), dukeImg)"},{"lineNumber":109,"author":{"gitId":"jxrrelo"},"content":"        );"},{"lineNumber":110,"author":{"gitId":"jxrrelo"},"content":"        userInput.clear();"},{"lineNumber":111,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":113,"author":{"gitId":"jxrrelo"},"content":"    protected String getResponse(String input) {"},{"lineNumber":114,"author":{"gitId":"jxrrelo"},"content":"        return this.run(input);"},{"lineNumber":115,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":117,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"jxrrelo"},"content":"     * Entry point into Duke chatbot"},{"lineNumber":119,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"jxrrelo"},"content":"    public String run(String input) {"},{"lineNumber":121,"author":{"gitId":"jxrrelo"},"content":"        String resp \u003d output.printWelcomeMsg();"},{"lineNumber":122,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":123,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":124,"author":{"gitId":"jxrrelo"},"content":"            Command cmd \u003d Command.valueOf(input.split(\" \")[0].toUpperCase());"},{"lineNumber":125,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":126,"author":{"gitId":"jxrrelo"},"content":"            switch (cmd) {"},{"lineNumber":127,"author":{"gitId":"jxrrelo"},"content":"                case EXIT:"},{"lineNumber":128,"author":{"gitId":"jxrrelo"},"content":"                    Platform.exit();"},{"lineNumber":129,"author":{"gitId":"jxrrelo"},"content":"                    System.exit(0);"},{"lineNumber":130,"author":{"gitId":"jxrrelo"},"content":"                    break;"},{"lineNumber":131,"author":{"gitId":"jxrrelo"},"content":"                case LIST:"},{"lineNumber":132,"author":{"gitId":"jxrrelo"},"content":"                    resp \u003d output.listAction(tasksList);"},{"lineNumber":133,"author":{"gitId":"jxrrelo"},"content":"                    break;"},{"lineNumber":134,"author":{"gitId":"jxrrelo"},"content":"                case DONE:"},{"lineNumber":135,"author":{"gitId":"jxrrelo"},"content":"                    resp \u003d output.doneAction(tasksList, input, dataManager);"},{"lineNumber":136,"author":{"gitId":"jxrrelo"},"content":"                    break;"},{"lineNumber":137,"author":{"gitId":"jxrrelo"},"content":"                case TODO:"},{"lineNumber":138,"author":{"gitId":"jxrrelo"},"content":"                case DEADLINE:"},{"lineNumber":139,"author":{"gitId":"jxrrelo"},"content":"                case EVENT:"},{"lineNumber":140,"author":{"gitId":"jxrrelo"},"content":"                    resp \u003d output.addAction(tasksList, input, dataManager);"},{"lineNumber":141,"author":{"gitId":"jxrrelo"},"content":"                    break;"},{"lineNumber":142,"author":{"gitId":"jxrrelo"},"content":"                case DELETE:"},{"lineNumber":143,"author":{"gitId":"jxrrelo"},"content":"                    resp \u003d output.deleteAction(tasksList, input, dataManager);"},{"lineNumber":144,"author":{"gitId":"jxrrelo"},"content":"                    break;"},{"lineNumber":145,"author":{"gitId":"jxrrelo"},"content":"                case FIND:"},{"lineNumber":146,"author":{"gitId":"jxrrelo"},"content":"                    resp \u003d output.findAction(tasksList, input);"},{"lineNumber":147,"author":{"gitId":"jxrrelo"},"content":"                    break;"},{"lineNumber":148,"author":{"gitId":"jxrrelo"},"content":"                case HELP:"},{"lineNumber":149,"author":{"gitId":"jxrrelo"},"content":"                    resp \u003d output.sendHelp();"},{"lineNumber":150,"author":{"gitId":"jxrrelo"},"content":"                    break;"},{"lineNumber":151,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"jxrrelo"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":153,"author":{"gitId":"jxrrelo"},"content":"            resp \u003d output.printIllegalArgumentError();"},{"lineNumber":154,"author":{"gitId":"jxrrelo"},"content":"        } catch (DukeException e1) {"},{"lineNumber":155,"author":{"gitId":"jxrrelo"},"content":"            resp \u003d e1.toString();"},{"lineNumber":156,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"jxrrelo"},"content":"        return resp;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"jxrrelo":157}},{"path":"src/main/java/jaryl/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * DukeException handles duke exceptions"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"        Output output \u003d new Output();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        return \"☹ OOPS! \" + this.getMessage();"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":16}},{"path":"src/main/java/jaryl/duke/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * EmptyListException represents a duke exception"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" * Handles empty list exceptions"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"public class EmptyListException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new EmptyListException"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    public EmptyListException() {"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        super(\"It seems you have nothing on your list.\");"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":14}},{"path":"src/main/java/jaryl/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":" * Event represents a task with a task description and task date"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    private final LocalDateTime date;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Event task"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"     * @param description   description of task"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"     * @param date          date of task"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"     * @throws InvalidFormatException   invalid format exception"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"     * @throws DateTimeParseException   date/time parse exception"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"    public Event(String description, String date) throws InvalidFormatException, DateTimeParseException {"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"        super(description, \"E\");"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        if(date.equals(\"\"))"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify both task description and date/time using /at\");"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"     * Reformats string format of Event task when writing to disk"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"     * @return Event task in reformatted String format"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"    public String fileFormat() {"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"        return \"E | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \" + df.format(this.date);"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"     * Converts Event task to string format"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"     * @return Event task in original String format"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"        return \"[\" + super.getType() + \"]\" + super.toString() + \" (at: \" + df.format(this.date) + \")\";"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":47}},{"path":"src/main/java/jaryl/duke/InvalidFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * InvalidFileException represents a DukeException"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" * Handles invalid file exceptions"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"public class InvalidFileException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new InvalidFileException"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    public InvalidFileException() {"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        super(\"\");"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":14}},{"path":"src/main/java/jaryl/duke/InvalidFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * InvalidFormatException represents a DukeException."},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" * Handles invalid format exceptions"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"public class InvalidFormatException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new EmptyListException"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"     * @params msg  error message"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    public InvalidFormatException(String msg) {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"        super(msg);"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":15}},{"path":"src/main/java/jaryl/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":9}},{"path":"src/main/java/jaryl/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"public class Main extends Application {"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"    public void start(Stage s) {"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"            FXMLLoader fxml \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"            AnchorPane anchorPane \u003d fxml.load();"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"            s.setScene(new Scene(anchorPane));"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"            fxml.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"            s.show();"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"        } catch (IOException e) {"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":25}},{"path":"src/main/java/jaryl/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"public class MainWindow {"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    private Duke duke;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    @FXML"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"    private ScrollPane scroller;"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"    private TextField userInput;"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    private Button sendButton;"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"    private VBox dialogBox;"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    private Image userImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/ash.png\"));"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"    private Image dukeImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/pikachu.png\"));"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"    public void setDuke(Duke duke) {"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"        this.duke \u003d duke;"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"        scroller.vvalueProperty().bind(dialogBox.heightProperty());"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"    public void textUpdateHandler() {"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"        if (sendButton.isDisabled() \u0026\u0026 !userInput.getText().isBlank()) {"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"            sendButton.setDisable(false);"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"        if (!sendButton.isDisabled() \u0026\u0026 userInput.getText().isBlank()) {"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"            sendButton.setDisable(true);"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"    private void userInputHandler() {"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"        String resp \u003d duke.getResponse(input);"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"        dialogBox.getChildren().addAll("},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"                Dialog.getUserResponse(input, userImg),"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"                Dialog.getDukeResponse(resp, dukeImg)"},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"        );"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"        userInput.clear();"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":53}},{"path":"src/main/java/jaryl/duke/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":" * Output handles I/O, interactions with user"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"public class Output {"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"     * Prints welcome message"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    public String printWelcomeMsg() {"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        return \"Hello! I\u0027m Duke, your friendly chatbot. What can I do for you today? Type help for more information.\";"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"     * Prints message upon successfully adding task"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     * @param task      the task to be added"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"     * @param numTasks  total number of existing tasks"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    public String printAddedTask(Task task, int numTasks) {"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        return \"Got it. I\u0027ve added this task:\\n\\t\" + task + \"\\nNow you have \" + numTasks + \" tasks in the list.\";"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"     * Handles help command"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"    public String sendHelp() {"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"        return (\"Duke has sent help! Here are a list of commands you can use:\\n1. list\\n2. done\\n\" +"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"                \"3. find\\n4. todo\\n\" + \"5. deadline\\n6. event\\n\" + \"7. delete\\n8. help\\n9. exit\");"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"     * Prints message upon successfully marking a task done"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"     * @param task  the task to be marked done"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"    public String printDoneMsg(Task task) {"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"        if(task.getStatusIcon().equals(\"\\u2713\"))"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"            return \"Nice! I\u0027ve marked this task as done: \\n\\t\" + task;"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"        else"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"            return \"Noted. I\u0027ve marked this task as undone: \\n\\t\" + task;"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"     * Prints message upon successfully deleting a task"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"     * @param task      the task to be deleted"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"     * @param numTasks  total number of existing tasks"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"    public String printDeleteMsg(Task task, int numTasks) {"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"        return \"Noted. I\u0027ve removed this task: \\n\\t\" + task + \"\\nNow you have \" + numTasks + \" tasks in the list.\";"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"     * Prints message for user query"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"    public String printFind(ArrayList\u003cTask\u003e foundTasks, String query) {"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"        if (foundTasks.size() \u003d\u003d 0) {"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"            return \"☹ OOPS! No tasks found for the query: \\n\\t\" + query;"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":"        for (Task t : foundTasks) {"},{"lineNumber":63,"author":{"gitId":"jxrrelo"},"content":"            sb.append(t);"},{"lineNumber":64,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"jxrrelo"},"content":"        return sb.toString();"},{"lineNumber":66,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":68,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"jxrrelo"},"content":"     * Prints message when user inputs an illegal argument"},{"lineNumber":70,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"jxrrelo"},"content":"    public String printIllegalArgumentError() {"},{"lineNumber":72,"author":{"gitId":"jxrrelo"},"content":"        return \"☹ OOPS! I\u0027m sorry, but I don\u0027t know what that means :(\";"},{"lineNumber":73,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":75,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"jxrrelo"},"content":"     * Handles list command"},{"lineNumber":77,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList list of tasks"},{"lineNumber":78,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"jxrrelo"},"content":"    public String listAction(ArrayList\u003cTask\u003e tasksList) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"jxrrelo"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitId":"jxrrelo"},"content":"        if(tasksList.size() \u003d\u003d 0) {"},{"lineNumber":82,"author":{"gitId":"jxrrelo"},"content":"            throw new EmptyListException();"},{"lineNumber":83,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":85,"author":{"gitId":"jxrrelo"},"content":"        for(int i \u003d 1; i \u003c\u003d tasksList.size(); i++) {"},{"lineNumber":86,"author":{"gitId":"jxrrelo"},"content":"            Task task \u003d tasksList.get(i - 1);"},{"lineNumber":87,"author":{"gitId":"jxrrelo"},"content":"            sb.append(i + \". \" + task + \"\\n\");"},{"lineNumber":88,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":90,"author":{"gitId":"jxrrelo"},"content":"        return sb.toString();"},{"lineNumber":91,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":93,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"jxrrelo"},"content":"     * Handles done command"},{"lineNumber":95,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList     list of tasks"},{"lineNumber":96,"author":{"gitId":"jxrrelo"},"content":"     * @param input         user input"},{"lineNumber":97,"author":{"gitId":"jxrrelo"},"content":"     * @param dataManager   data manager which handles reading/writing data"},{"lineNumber":98,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"jxrrelo"},"content":"    public String doneAction(ArrayList\u003cTask\u003e tasksList, String input, DataManager dataManager) throws DukeException {"},{"lineNumber":100,"author":{"gitId":"jxrrelo"},"content":"        String[] params \u003d input.split(\" \");"},{"lineNumber":101,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":102,"author":{"gitId":"jxrrelo"},"content":"        if (params.length \u003c 2) {"},{"lineNumber":103,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Invalid event number. Please specify a valid event you would like to mark done\");"},{"lineNumber":104,"author":{"gitId":"jxrrelo"},"content":"        } else if (Integer.parseInt(params[1]) \u003c\u003d 0 || Integer.parseInt(params[1]) \u003e tasksList.size()) {"},{"lineNumber":105,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Invalid event number. Please specify a valid event you would like to mark done\");"},{"lineNumber":106,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"jxrrelo"},"content":"        Task done \u003d tasksList.get(Integer.parseInt(params[1]) - 1);"},{"lineNumber":108,"author":{"gitId":"jxrrelo"},"content":"        done.toggleStatus();"},{"lineNumber":109,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":110,"author":{"gitId":"jxrrelo"},"content":"        dataManager.writeToFile(tasksList);"},{"lineNumber":111,"author":{"gitId":"jxrrelo"},"content":"        return(printDoneMsg(done));"},{"lineNumber":112,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":114,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"jxrrelo"},"content":"     * Handles todo, deadline and event commands"},{"lineNumber":116,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList     list of tasks"},{"lineNumber":117,"author":{"gitId":"jxrrelo"},"content":"     * @param input         user input"},{"lineNumber":118,"author":{"gitId":"jxrrelo"},"content":"     * @param dataManager   data manager which handles reading/writing data"},{"lineNumber":119,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"jxrrelo"},"content":"    public String addAction(ArrayList\u003cTask\u003e tasksList, String input, DataManager dataManager) throws DukeException {"},{"lineNumber":121,"author":{"gitId":"jxrrelo"},"content":"        String taskDesc \u003d \"\", dateTime \u003d \"\";"},{"lineNumber":122,"author":{"gitId":"jxrrelo"},"content":"        String[] checkFormat;"},{"lineNumber":123,"author":{"gitId":"jxrrelo"},"content":"        String[] params \u003d input.split(\" \");"},{"lineNumber":124,"author":{"gitId":"jxrrelo"},"content":"        if(params[0].equals(\"todo\")) {"},{"lineNumber":125,"author":{"gitId":"jxrrelo"},"content":"            if(params.length \u003e 1) {"},{"lineNumber":126,"author":{"gitId":"jxrrelo"},"content":"                taskDesc \u003d input.split(\"todo \")[1];"},{"lineNumber":127,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":129,"author":{"gitId":"jxrrelo"},"content":"            Todo todo \u003d new Todo(taskDesc);"},{"lineNumber":130,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":131,"author":{"gitId":"jxrrelo"},"content":"            tasksList.add(todo);"},{"lineNumber":132,"author":{"gitId":"jxrrelo"},"content":"            dataManager.writeToFile(tasksList);"},{"lineNumber":133,"author":{"gitId":"jxrrelo"},"content":"            return printAddedTask(todo, tasksList.size());"},{"lineNumber":134,"author":{"gitId":"jxrrelo"},"content":"        } else if(params[0].equals(\"deadline\")) {"},{"lineNumber":135,"author":{"gitId":"jxrrelo"},"content":"            checkFormat \u003d input.split(\" /by \");"},{"lineNumber":136,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":137,"author":{"gitId":"jxrrelo"},"content":"            if(params.length \u003e\u003d 4 \u0026\u0026 checkFormat.length \u003e 1) {"},{"lineNumber":138,"author":{"gitId":"jxrrelo"},"content":"                taskDesc \u003d input.split(\"deadline \")[1].split(\" /by \")[0];"},{"lineNumber":139,"author":{"gitId":"jxrrelo"},"content":"                dateTime \u003d input.split(\" /by \")[1];"},{"lineNumber":140,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":142,"author":{"gitId":"jxrrelo"},"content":"            Deadline deadline \u003d new Deadline(taskDesc, dateTime);"},{"lineNumber":143,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":144,"author":{"gitId":"jxrrelo"},"content":"            tasksList.add(deadline);"},{"lineNumber":145,"author":{"gitId":"jxrrelo"},"content":"            dataManager.writeToFile(tasksList);"},{"lineNumber":146,"author":{"gitId":"jxrrelo"},"content":"            return printAddedTask(deadline, tasksList.size());"},{"lineNumber":147,"author":{"gitId":"jxrrelo"},"content":"        } else if(params[0].equals(\"event\")) {"},{"lineNumber":148,"author":{"gitId":"jxrrelo"},"content":"            checkFormat \u003d input.split(\" /at \");"},{"lineNumber":149,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":150,"author":{"gitId":"jxrrelo"},"content":"            if(params.length \u003e\u003d 4 \u0026\u0026 checkFormat.length \u003e 1) {"},{"lineNumber":151,"author":{"gitId":"jxrrelo"},"content":"                taskDesc \u003d input.split(\"event \")[1].split(\" /at \")[0];"},{"lineNumber":152,"author":{"gitId":"jxrrelo"},"content":"                dateTime \u003d input.split(\" /at \")[1];"},{"lineNumber":153,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":155,"author":{"gitId":"jxrrelo"},"content":"            Event event \u003d new Event(taskDesc, dateTime);"},{"lineNumber":156,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":157,"author":{"gitId":"jxrrelo"},"content":"            tasksList.add(event);"},{"lineNumber":158,"author":{"gitId":"jxrrelo"},"content":"            dataManager.writeToFile(tasksList);"},{"lineNumber":159,"author":{"gitId":"jxrrelo"},"content":"            return printAddedTask(event, tasksList.size());"},{"lineNumber":160,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"jxrrelo"},"content":"        return null;"},{"lineNumber":162,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":164,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"jxrrelo"},"content":"     * Handles delete command"},{"lineNumber":166,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList     list of tasks"},{"lineNumber":167,"author":{"gitId":"jxrrelo"},"content":"     * @param input         user input"},{"lineNumber":168,"author":{"gitId":"jxrrelo"},"content":"     * @param dataManager   data manager which handles reading/writing data"},{"lineNumber":169,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"jxrrelo"},"content":"    public String deleteAction(ArrayList\u003cTask\u003e tasksList, String input, DataManager dataManager) throws DukeException {"},{"lineNumber":171,"author":{"gitId":"jxrrelo"},"content":"        String[] params \u003d input.split(\" \");"},{"lineNumber":172,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":173,"author":{"gitId":"jxrrelo"},"content":"        if (params.length \u003c 2) {"},{"lineNumber":174,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify a valid event you would like to delete\");"},{"lineNumber":175,"author":{"gitId":"jxrrelo"},"content":"        } else if (Integer.parseInt(params[1]) \u003c\u003d 0 || Integer.parseInt(params[1]) \u003e tasksList.size()) {"},{"lineNumber":176,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify a valid event you would like to delete\");"},{"lineNumber":177,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"jxrrelo"},"content":"        Task delete \u003d tasksList.remove(Integer.parseInt(params[1]) - 1);"},{"lineNumber":179,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":180,"author":{"gitId":"jxrrelo"},"content":"        dataManager.writeToFile(tasksList);"},{"lineNumber":181,"author":{"gitId":"jxrrelo"},"content":"        return printDeleteMsg(delete, tasksList.size());"},{"lineNumber":182,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":184,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"jxrrelo"},"content":"     * Handles find command"},{"lineNumber":186,"author":{"gitId":"jxrrelo"},"content":"     * @param tasksList     list of tasks"},{"lineNumber":187,"author":{"gitId":"jxrrelo"},"content":"     * @param input         user input"},{"lineNumber":188,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"jxrrelo"},"content":"    public String findAction(ArrayList\u003cTask\u003e tasksList, String input) throws DukeException {"},{"lineNumber":190,"author":{"gitId":"jxrrelo"},"content":"        String[] params \u003d input.split(\" \");"},{"lineNumber":191,"author":{"gitId":"jxrrelo"},"content":"        String toFind \u003d \"\";"},{"lineNumber":192,"author":{"gitId":"jxrrelo"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":193,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":194,"author":{"gitId":"jxrrelo"},"content":"        if (params.length \u003c 2) {"},{"lineNumber":195,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify a valid query.\");"},{"lineNumber":196,"author":{"gitId":"jxrrelo"},"content":"        } else {"},{"lineNumber":197,"author":{"gitId":"jxrrelo"},"content":"            toFind \u003d input.split(\"find \")[1];"},{"lineNumber":198,"author":{"gitId":"jxrrelo"},"content":"            for (Task t : tasksList) {"},{"lineNumber":199,"author":{"gitId":"jxrrelo"},"content":"                if(t.getDescription().contains(toFind)) {"},{"lineNumber":200,"author":{"gitId":"jxrrelo"},"content":"                    foundTasks.add(t);"},{"lineNumber":201,"author":{"gitId":"jxrrelo"},"content":"                }"},{"lineNumber":202,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":205,"author":{"gitId":"jxrrelo"},"content":"        return printFind(foundTasks, toFind);"},{"lineNumber":206,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":207}},{"path":"src/main/java/jaryl/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * Task with a description and type that can be added to a task list"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" * Can exist as Todo, Deadline or Event"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":" * @author LOH FAH YAO, JARYL"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    protected String type;"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Task"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"     * @param description   description of task"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"     * @param type          task type in \"T\", \"D\" or \"E\""},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    public Task(String description, String type) {"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"        this.type \u003d type;"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"     * Retrieves the description of the task"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"     * @return  Task description"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"    public String getDescription() {"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"        return this.description;"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"     * Retrieves the status icon of the task depending whether it is done"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"     * @return  Task status icon"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"    public String getStatusIcon() {"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"     * Toggles the status of the task"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"    public void toggleStatus() {"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        this.isDone \u003d !this.isDone;"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"     * Retrieves the task type"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"     * @return  the task type in \"T\", \"D\" or \"E\""},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":"    public String getType() {"},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"        return this.type;"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":"     * Reformats string format of Task when writing to disk"},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":"     * @return Task in reformatted String format"},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"    public String fileFormat() {"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"        return this.type + \" | \" + (isDone ? \"1 | \" : \"0 | \") + this.description;"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":63,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"jxrrelo"},"content":"     * Converts Task to string format"},{"lineNumber":65,"author":{"gitId":"jxrrelo"},"content":"     * @return Task in original String format"},{"lineNumber":66,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitId":"jxrrelo"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":70,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":71}},{"path":"src/main/java/jaryl/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":" * Todo represents a task with a task description"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"     * Constructor to instantiate a new Todo task"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"     * @param description               description of task"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"     * @throws InvalidFormatException   invalid format exception"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    public Todo(String description) throws InvalidFormatException {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"        super(description, \"T\");"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        if(description.equals(\"\"))"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"            throw new InvalidFormatException(\"Please specify task description\");"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"     * Converts Todo task to string format"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"     * @return Todo task in original String format"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"        return \"[\" + super.getType() + \"]\" + super.toString();"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":26}},{"path":"src/main/resources/view/Dialog.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"         xmlns\u003d\"http://javafx.com/javafx/\"\u003e"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"               style\u003d\"-fx-background-radius: 15; -fx-background-color: white;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"            \u003cfont\u003e"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"                \u003cFont name\u003d\"Arial\" size\u003d\"15.0\"/\u003e"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"            \u003c/font\u003e"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"            \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"                \u003cInsets top\u003d\"8.0\" bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"            \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"                \u003cInsets top\u003d\"8.0\" bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"        \u003c/Label\u003e"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"        \u003cHBox\u003e"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"            \u003cImageView fx:id\u003d\"displayPic\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" /\u003e"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"            \u003cpadding\u003e"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"                \u003cInsets left\u003d\"8.0\" right\u003d\"8.0\"/\u003e"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"            \u003c/padding\u003e"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"        \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"    \u003c/children\u003e"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"    \u003cpadding\u003e"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":"        \u003cInsets bottom\u003d\"6.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15\"/\u003e"},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"    \u003c/padding\u003e"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"jxrrelo":34}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.layout.Pane?\u003e"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"            fx:controller\u003d\"jaryl.duke.MainWindow\""},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"            maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"            minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" \u003e"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"    \u003cchildren\u003e"},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"        \u003cPane fx:id\u003d\"header\" style\u003d\"-fx-background-color: lightblue;\""},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"              minWidth\u003d\"400\" prefHeight\u003d\"100.0\" prefWidth\u003d\"400.0\" maxHeight\u003d\"100\" minHeight\u003d\"100\" \u003e"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"            \u003cVBox alignment\u003d\"CENTER\" layoutX\u003d\"140\"\u003e"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"                \u003cLabel fx:id\u003d\"headerText\" text\u003d\"myDUKE\"\u003e"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"                    \u003cfont\u003e"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"                        \u003cFont name\u003d\"Courier New\" size\u003d\"35.0\"/\u003e"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"                    \u003c/font\u003e"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":"                    \u003cpadding\u003e"},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"                        \u003cInsets top\u003d\"5.0\"/\u003e"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"                    \u003c/padding\u003e"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"                \u003c/Label\u003e"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":"            \u003c/VBox\u003e"},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"        \u003c/Pane\u003e"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"        \u003cTextField style\u003d\"-fx-border-radius: 10 10 0 0;  -fx-background-radius: 10 10 10 10;\" fx:id\u003d\"userInput\""},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"                   layoutY\u003d\"558.0\" onAction\u003d\"#userInputHandler\" prefHeight\u003d\"41.0\" prefWidth\u003d\"321.0\""},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" onKeyTyped\u003d\"#textUpdateHandler\"/\u003e"},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#userInputHandler\""},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"\u003e\" style\u003d\"-fx-background-color: lightblue;\" disable\u003d\"True\"/\u003e"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"        \u003cScrollPane fx:id\u003d\"scroller\" layoutY\u003d\"50\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"507.0\" prefWidth\u003d\"400.0\""},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":"                    vvalue\u003d\"1.0\"\u003e"},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"            \u003ccontent\u003e"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"                \u003cVBox fx:id\u003d\"dialogBox\" prefHeight\u003d\"502.0\" prefWidth\u003d\"388.0\""},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"                      style\u003d\"-fx-background-color: lightblue;\"/\u003e"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"            \u003c/content\u003e"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"    \u003c/children\u003e"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"jxrrelo":46}},{"path":"src/test/java/jaryl/duke/DataManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"public class DataManagerTest {"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"    private static final String FILE_PATH \u003d \"./data/test.txt\";"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"    private ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"    public void testWriteToFile() throws InvalidFormatException {"},{"lineNumber":17,"author":{"gitId":"jxrrelo"},"content":"        DataManager dataManager \u003d new DataManager(FILE_PATH);"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":19,"author":{"gitId":"jxrrelo"},"content":"        if(Files.exists(Paths.get(FILE_PATH))) {"},{"lineNumber":20,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":21,"author":{"gitId":"jxrrelo"},"content":"                Files.delete(Paths.get(FILE_PATH));"},{"lineNumber":22,"author":{"gitId":"jxrrelo"},"content":"            } catch (IOException e) {"},{"lineNumber":23,"author":{"gitId":"jxrrelo"},"content":"                e.printStackTrace();"},{"lineNumber":24,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":27,"author":{"gitId":"jxrrelo"},"content":"        tasksList.add(new Todo(\"Math Homework\"));"},{"lineNumber":28,"author":{"gitId":"jxrrelo"},"content":"        tasksList.add(new Deadline(\"Science Homework\", \"02/12/2021 1800\"));"},{"lineNumber":29,"author":{"gitId":"jxrrelo"},"content":"        tasksList.add(new Event(\"Jay Chou Concert\", \"02/12/2021 1800\"));"},{"lineNumber":30,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":31,"author":{"gitId":"jxrrelo"},"content":"        dataManager.writeToFile(tasksList);"},{"lineNumber":32,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":33,"author":{"gitId":"jxrrelo"},"content":"        assert(Files.exists(Paths.get(FILE_PATH)));"},{"lineNumber":34,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":36,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"jxrrelo"},"content":"    public void testReadFromFile() throws DukeException {"},{"lineNumber":38,"author":{"gitId":"jxrrelo"},"content":"        DataManager dataManager \u003d new DataManager(FILE_PATH);"},{"lineNumber":39,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":40,"author":{"gitId":"jxrrelo"},"content":"        if(Files.exists(Paths.get(FILE_PATH))) {"},{"lineNumber":41,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"jxrrelo"},"content":"                Files.delete(Paths.get(FILE_PATH));"},{"lineNumber":43,"author":{"gitId":"jxrrelo"},"content":"                String data \u003d \"T | 0 | Math Homework\" +"},{"lineNumber":44,"author":{"gitId":"jxrrelo"},"content":"                        \"\\nD | 0 | Science Homework | 02 Dec 2021 1800\" +"},{"lineNumber":45,"author":{"gitId":"jxrrelo"},"content":"                        \"\\nE | 0 | Jay Chou Concert | 02 Dec 2021 1800\";"},{"lineNumber":46,"author":{"gitId":"jxrrelo"},"content":"                Files.write(Paths.get(FILE_PATH), data.getBytes());"},{"lineNumber":47,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":48,"author":{"gitId":"jxrrelo"},"content":"            } catch (IOException e) {"},{"lineNumber":49,"author":{"gitId":"jxrrelo"},"content":"                e.printStackTrace();"},{"lineNumber":50,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":52,"author":{"gitId":"jxrrelo"},"content":"            try {"},{"lineNumber":53,"author":{"gitId":"jxrrelo"},"content":"                tasksList \u003d dataManager.readFromFile();"},{"lineNumber":54,"author":{"gitId":"jxrrelo"},"content":"            } catch (DukeException e) {"},{"lineNumber":55,"author":{"gitId":"jxrrelo"},"content":"                e.printStackTrace();"},{"lineNumber":56,"author":{"gitId":"jxrrelo"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":58,"author":{"gitId":"jxrrelo"},"content":"            assertEquals(tasksList.size(), 3);"},{"lineNumber":59,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":62,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":62}},{"path":"src/test/java/jaryl/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class DeadlineTest {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    public void testToString() {"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"            Deadline deadline \u003d new Deadline(\"Math Homework\", \"02/12/2021 1800\");"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"            assertEquals(deadline.toString(), \"[D][ ] Math Homework (by: 02 Dec 2021 1800)\");"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        } catch (InvalidFormatException e) {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":16}},{"path":"src/test/java/jaryl/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class EventTest {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    public void testToString() {"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"            Event event \u003d new Event(\"Jay Chou Concert\", \"02/12/2021 1800\");"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"            assertEquals(event.toString(), \"[E][ ] Jay Chou Concert (at: 02 Dec 2021 1800)\");"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        } catch (InvalidFormatException e) {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":16}},{"path":"src/test/java/jaryl/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"package jaryl.duke;"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jxrrelo"},"content":""},{"lineNumber":6,"author":{"gitId":"jxrrelo"},"content":"public class TodoTest {"},{"lineNumber":7,"author":{"gitId":"jxrrelo"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"jxrrelo"},"content":"    public void testToString() {"},{"lineNumber":9,"author":{"gitId":"jxrrelo"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"jxrrelo"},"content":"            Todo todo \u003d new Todo(\"Math Homework\");"},{"lineNumber":11,"author":{"gitId":"jxrrelo"},"content":"            assertEquals(todo.toString(), \"[T][ ] Math Homework\");"},{"lineNumber":12,"author":{"gitId":"jxrrelo"},"content":"        } catch (InvalidFormatException e) {"},{"lineNumber":13,"author":{"gitId":"jxrrelo"},"content":"            e.printStackTrace();"},{"lineNumber":14,"author":{"gitId":"jxrrelo"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"jxrrelo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jxrrelo"},"content":"}"}],"authorContributionMap":{"jxrrelo":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jxrrelo"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"jxrrelo"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"jxrrelo"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"jxrrelo"},"content":"list"}],"authorContributionMap":{"jxrrelo":4}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"jxrrelo"},"content":"java -classpath ..\\bin jaryl.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"jxrrelo":1}}]
