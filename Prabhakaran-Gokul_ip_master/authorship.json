[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"D, 1, return book, Sunday"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"D, 0, return book, Sunday"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"D, 0, project meeting, Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"D, 0, return book, 2019-10-15 18:21"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"T, 0, read book"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"T, 0, make food"}],"authorContributionMap":{"Prabhakaran-Gokul":6}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Deadline extends Task{"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String SHORT_HAND \u003d \"D\";"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    protected final String by;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String localDateStr;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public LocalDate localDate;"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Deadline(String taskDescription, String by) {"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        super(taskDescription);"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.localDateStr \u003d null;"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void dateFormatter(String ymd) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            DateTimeFormatter dateTimeFormatter2 \u003d DateTimeFormatter.ofPattern(\"MMM-dd-yyyy\");"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.localDate \u003d LocalDate.parse(ymd, dateTimeFormatter);"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.localDateStr \u003d dateTimeFormatter2.format(localDate);"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        catch (DateTimeParseException e) {"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Date cannot be parsed\");"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void dateTimeFormatter(String text) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"MMM-dd-yyyy HH:mm\");"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(text, formatter);"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.localDateStr \u003d formatter1.format(dateTime);"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        catch (DateTimeParseException e) {"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Date and time cannot be parsed\");"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    //TODO remove empty spaces, if any, when performing this.by.split(\" \")"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (this.by.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                dateFormatter(this.by);"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } else {"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                dateTimeFormatter(this.by);"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        catch (DukeException e) {"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            System.out.println(\"\\t\\t\" + e.getMessage());"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (localDate \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return \"[\" + SHORT_HAND + \"]\" + super.toString() + \" (by: \" + this.by + \")\";"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return \"[\" + SHORT_HAND + \"]\" + super.toString() + \" (by: \" + localDateStr + \")\";"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":""}],"authorContributionMap":{"Prabhakaran-Gokul":63}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Duke is the main class that runs the whole program."},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * @author Prabhakaran Gokul"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * This constructor initialises the Ui, Storage Classes"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Duke() {"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.taskList \u003d new TaskList(storage.loadFile());"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.ui.loadingSuccess();"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        catch (DukeException e) {"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.ui.showError(e.getMessage());"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.taskList \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.ui.loadingFailure();"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * This is the driver of the program."},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parser class in initialised here and user inputs are parsed to"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * perform the necessary actions. DukeExceptions are caught and handled here"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void run() {"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.ui.welcomeMsg();"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Parser exec \u003d new Parser(taskList);"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String command;"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        while (sc.hasNext()) {"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            command \u003d sc.nextLine();"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                exec.executeCommand(command);"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } catch (DukeException e) {"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (!exec.isAlive) {"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                try {"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    this.storage.saveFile(this.taskList.list);"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    ui.byeMsg();"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    sc.close();"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    break;"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                catch (DukeException e) {"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    ui.showError(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    break;"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        new Duke().run();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":63,"-":5}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public DukeException(String message) {"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        super(message);"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    protected final String at;"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public final String SHORT_HAND \u003d \"E\";"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Event (String taskDescription, String at) {"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        super(taskDescription);"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.at \u003d at;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return \"[\" + SHORT_HAND +  \"]\" + super.toString() + \" (at: \" + this.at + \")\";"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":14}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Parser class is an abstraction of an object that parses and interprets text messages into commands."},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public TaskList taskList;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public boolean isAlive;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Instantiates the Parser with attributes."},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param taskList the task list with a list of commands"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Parser (TaskList taskList) {"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.isAlive \u003d true;"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * This parses and executes relevant comments from the tasklist"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param command the command given by the user"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException an exception due to errors in parsing text"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void executeCommand(String command) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String arr[] \u003d command.split(\" \", 2);"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String firstWord \u003d arr[0];"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String time;"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        switch (firstWord) {"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"bye\":"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.isAlive \u003d false;"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"list\":"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            taskList.displayTasks();"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"done\":"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                String num \u003d arr[1];"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                //TODO exception handling if num is not a number"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                taskList.markAsDone(Integer.valueOf(num));"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Enter an integer only\");"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"find\":"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String toFind \u003d arr[1];"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            taskList.findTasks(toFind);"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"delete\":"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            try {"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                String num \u003d arr[1];"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                taskList.deleteTask(Integer.valueOf(num));"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Enter an integer only\");"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"todo\":"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length \u003d\u003d 1) {"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Sorry, description of a todo cannot be empty\");"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String toDo \u003d arr[1];"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            taskList.addTask(new ToDo(toDo));"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"deadline\":"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length \u003d\u003d 1) {"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Sorry description of a deadline cannot be empty\");"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String deadline \u003d arr[1];"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            taskList.addTask(new Deadline(getMsg(deadline, \" /by \"), getDateTime(deadline, \" /by \")));"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"event\":"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length \u003d\u003d 1) {"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Sorry description of an event cannot be empty\");"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String event \u003d arr[1];"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            taskList.addTask(new Event(getMsg(event, \" /at \"), getDateTime(event, \" /at \")));"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            taskList.complain();"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String getDateTime(String text, String search) throws DukeException {"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        //TODO handle case when text does not contain \"/at\" or \"/by\""},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        int index \u003d text.indexOf(search);"},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Statement does not contain \" + search);"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return text.substring(index + 5);"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String getMsg(String text, String search) throws DukeException {"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        //TODO handle case when text does not contain \"/at\" or \"/by\""},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        int index \u003d text.indexOf(search);"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Statement does not contain \" + search);"},{"lineNumber":96,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return text.substring(0, index);"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":99}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Storage class in an abstraction of a file loading and a saving system."},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String DEFAULT_STORAGE_FILE \u003d \"data/duke.txt\";"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String filePath;"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public File f;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Storage(String filePath) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!isValidFileExtension(filePath)) {"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"\\t\\tFile should end with .txt extension\");"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.f \u003d new File(filePath);"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constucts an instance of the Storage class."},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Storage() {"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.filePath \u003d \"data\";"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.f \u003d new File(filePath, \"duke.txt\");"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.f.getParentFile().mkdirs();"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Checks the validity of a filepath"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param filePath the path of the file that is to be checked for validity"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return boolean value stating is the file is a valid one"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public boolean isValidFileExtension(String filePath) {"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return filePath.endsWith(\".txt\");"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Loads duke.txt file from the local disk."},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return a list of tasks that is written in the duke.txt file"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException an exception when loading a file from the local disk"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public ArrayList\u003cTask\u003e loadFile() throws DukeException {"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            Scanner sc \u003d new Scanner(this.f);"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            while (sc.hasNext()) {"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                taskArr.add(stringToTask(sc.nextLine()));"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        catch (FileNotFoundException e) {"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"File not found!\");"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return taskArr;"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Saves a file to the disk with task details."},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param TaskArr a list of tasks that needs to be saved to the disk"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException an exception when saving the file to the local disk"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void saveFile(ArrayList\u003cTask\u003e TaskArr) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            FileWriter fw \u003d new FileWriter(DEFAULT_STORAGE_FILE);"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            for (Task t : TaskArr) {"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                fw.write(taskToString(t) + \"\\n\");"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            fw.close();"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        catch (IOException e) {"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Error saving the Tasks into a file\");"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Converts strings to Task instances"},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param task the task string that need to be converted to a Task Object"},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return Returns the task object"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException throws exception"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Task stringToTask(String task) throws DukeException{"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String arr[] \u003d task.split(\", \");"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Task result;"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (arr.length \u003d\u003d 0) {"},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Read invalid task from the file\");"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String taskType \u003d arr[0];"},{"lineNumber":96,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (taskType.equals(\"T\")) {"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length !\u003d 3) {"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Read invalid Todo task from the file\");"},{"lineNumber":100,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d new ToDo(arr[2]);"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (Integer.valueOf(arr[1]) \u003d\u003d 1) {"},{"lineNumber":103,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                result.isDone \u003d true;"},{"lineNumber":104,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return result;"},{"lineNumber":106,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (taskType.equals(\"D\")) {"},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length !\u003d 4) {"},{"lineNumber":108,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Read invalid Deadline task from the file\");"},{"lineNumber":109,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d new Deadline(arr[2], arr[3]);"},{"lineNumber":111,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (Integer.valueOf(arr[1]) \u003d\u003d 1) {"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                result.isDone \u003d true;"},{"lineNumber":113,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (taskType.equals(\"E\")) {"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length !\u003d 4) {"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Read invalid Event task from the file\");"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d new Deadline(arr[2], arr[3]);"},{"lineNumber":119,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (Integer.valueOf(arr[1]) \u003d\u003d 1) {"},{"lineNumber":120,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                result.isDone \u003d true;"},{"lineNumber":121,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":123,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Read invalid Task type\");"},{"lineNumber":124,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":126,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return result;"},{"lineNumber":127,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Converts Tasks to string"},{"lineNumber":131,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param task the task object that need to be converted to a String"},{"lineNumber":132,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return throws exception "},{"lineNumber":133,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String taskToString(Task task) {"},{"lineNumber":135,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        int num \u003d 0;"},{"lineNumber":136,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String result \u003d \"\";"},{"lineNumber":137,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (task.isDone) {"},{"lineNumber":138,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            num \u003d 1;"},{"lineNumber":139,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":141,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (task instanceof Event) {"},{"lineNumber":142,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d \"E, \" + num"},{"lineNumber":143,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + task.taskDescription"},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + ((Event) task).at;"},{"lineNumber":145,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (task instanceof Deadline){"},{"lineNumber":146,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d \"D, \" + num"},{"lineNumber":147,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + task.taskDescription"},{"lineNumber":148,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + ((Deadline) task).by;"},{"lineNumber":149,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (task instanceof ToDo) {"},{"lineNumber":150,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d \"T, \" + num"},{"lineNumber":151,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + task.taskDescription;"},{"lineNumber":152,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return result;"},{"lineNumber":154,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":155,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":156}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Task creates an abstraction of everyday tasks that user perform."},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String SHORTHAND \u003d \"INVALID\";"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    protected final String taskDescription;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Task constructor instatiates a task class"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param taskDescription"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Task(String taskDescription) {"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Decides the status icon of the task, X for completed and \"\" for not completed."},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return The completion status of the task"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private String getStatusIcon() {"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return this.isDone ? \"X\" : \"\";"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Marks a task as done/completed."},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void markAsDone() {"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // TODO consider adding assertion here"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        isDone \u003d true;"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Shows the details about the task ."},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return A formatted string with details of the task"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.taskDescription;"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":43}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class TaskList {"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public ArrayList\u003cTask\u003e list;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public boolean isAlive;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public TaskList() {"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.isAlive \u003d true;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskArr) {"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.list \u003d taskArr;"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.isAlive \u003d true;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private void echoNoOfTask() {"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(\"\\t\\tNow you have \" + getNoOfTasks() + \" tasks in the list\\n\");"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void addTask(Task task) {"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.list.add(task);"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(\"\\t\\tOkay I have added this task:\\n\\t\\t\\t\" + task);"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        echoNoOfTask();"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void deleteTask(int index) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (index \u003c 1 || index \u003e getNoOfTasks()) {"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"There is no such task number!\");"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Task task \u003d list.get(index - 1);"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.list.remove(index - 1);"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(\"\\t\\tOkay, I\u0027ve I have removed this task:\\n\\t\\t\\t\" + task);"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        echoNoOfTask();"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public int getNoOfTasks() {"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return list.size();"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void findTasks(String toFind) {"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        for (Task t : this.list) {"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (t.taskDescription.contains(toFind)) {"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                newList.add(t);"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String text \u003d \"\";"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (newList.size() \u003d\u003d 0) {"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            System.out.println(\"\\t\\tFound no related tasks\");"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            text +\u003d \"\\t\\tHere are the tasks in your list:\\n\";"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            for (int i \u003d 0; i \u003c newList.size(); i++) {"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                text +\u003d \"\\t\\t\" +"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        (i+1) +"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        \". \" +"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        newList.get(i) +"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        \"\\n\";"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            System.out.println(text);"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void displayTasks() {"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String text \u003d \"\";"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (list.size() \u003d\u003d 0) {"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            System.out.println(\"\\t\\tThere are no tasks\");"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            text +\u003d \"\\t\\tHere are the tasks in your list:\\n\";"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                text +\u003d \"\\t\\t\" +"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        (i+1) +"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        \". \" +"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        list.get(i) +"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        \"\\n\";"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            System.out.println(text);"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    //TODO consider throwing an exception (eg. DukeException)"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void complain() throws DukeException {"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        throw new DukeException(\"Sorry I do not understand that!\");"},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void markAsDone(int num) throws DukeException{"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        //TODO consider adding assertion/exception here(to prevent indexing issues)"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (getNoOfTasks() \u003d\u003d 0) {"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            System.out.println(\"\\t\\tThere are no tasks in the list to mark as done!\");"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            try {"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                list.get(num - 1).markAsDone();"},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                System.out.println(\"\\t\\tOkay! I\u0027ve marked this task as done:\\n\\t\\t\" + list.get(num - 1) + \"\\n\");"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"\\t\\tOnly Enter natural numbers (i.e. 1,2,3..) not more than \" + getNoOfTasks());"},{"lineNumber":96,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":100,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return \"TaskList for Duke\";"},{"lineNumber":103,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":104}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public final String SHORT_HAND \u003d \"T\";"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public ToDo (String taskDescription) {"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        super(taskDescription);"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return \"[\" + SHORT_HAND +  \"]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":12}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Ui class is reponsible for outputs on the command line."},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * The main Duke class is able to use this to print out the necessary output."},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String SPACING \u003d \"\\t\\t\";"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String GO_TO_NEXT_LINE \u003d \"\\n\";"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * An empty Ui constructor that instantiates an Ui class"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Ui() {"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * showError method displays the exception messages caught."},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param errorMsg The content of the exception message"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void showError(String errorMsg) {"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + errorMsg + GO_TO_NEXT_LINE);"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Displays a welcome message that greets the user."},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void welcomeMsg() {"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String text \u003d SPACING + \"Hello! I\u0027m Duke\""},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + GO_TO_NEXT_LINE + SPACING"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \"What can I do for you?\""},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + GO_TO_NEXT_LINE;"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(text);"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Formats and Repeats whatever message that is given as the input."},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param msg The message that need to be formatted and repeated"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void say(String msg) {"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + msg + GO_TO_NEXT_LINE);"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Formats and displays information about successful loading of file."},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void loadingSuccess() {"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + \"Existing file successfully loaded\" + GO_TO_NEXT_LINE);"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Formats and displays information about a failure loading the file."},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void loadingFailure() {"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + \"Existing file could not be found. New file will be created\""},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + GO_TO_NEXT_LINE);"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Greets the user goodbye."},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void byeMsg() {"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + \"See you again soon!\");"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":64}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void getDateTime_correctInput_success() throws Exception{"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(\"Monday\", new Parser(new TaskList())"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .getDateTime(\"read book /by Monday\", \" /by \"));"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(\"23 Jan 2021\", new Parser(new TaskList())"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .getDateTime(\"read book /by 23 Jan 2021\", \" /by \"));"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void getDateTime_incorrectInput_exceptionThrown() {"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            assertEquals(\"Monday\", new Parser(new TaskList())"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    .getDateTime(\"read book /at Monday\", \" /by \"));"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        catch (DukeException e) {"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            assertEquals(\"Statement does not contain  /by \", e.getMessage());"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":26}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class StorageTest {"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void taskToString_correctInputs_success() {"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"Sunday\");"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        d.isDone \u003d true;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(\"D, 1, return book, Sunday\", new Storage().taskToString(d));"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void stringToTask_correctInputs_success() throws Exception{"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ToDo t \u003d new ToDo(\"make food\");"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(t.taskDescription, new Storage().stringToTask(\"T, 0, make food\").taskDescription);"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":18}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.PrintStream;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class UiTest {"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final PrintStream originalErr \u003d System.err;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void testWelcomemsg() {"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String text \u003d \"\\t\\tHello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\";"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.print(text);"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(text, outContent.toString());"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void setUpStreams() {"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.setErr(new PrintStream(errContent));"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @AfterEach"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void restoreStreams() {"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.setOut(originalOut);"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.setErr(originalErr);"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"list"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"project meeting"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"event project meeting /at Aug 10th 2-4 pm"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"todo go for cca"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"done 1"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"list"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"bye"}],"authorContributionMap":{"Prabhakaran-Gokul":12}}]
