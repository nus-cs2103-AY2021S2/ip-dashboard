[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"    1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"    1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   ```"}],"authorContributionMap":{"-":21,"Prabhakaran-Gokul":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"Prabhakaran-Gokul":16}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"D, 0, finish ME4102 project, end of the week"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"E, 0, play football, Friday"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"D, 0, ME3103 report, 2020-02-19"}],"authorContributionMap":{"Prabhakaran-Gokul":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"# Duke project User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Duke Application manages the everyday tasks of users."},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"1. After that, locate the `src/main/java/Launcher.java` file, right-click it, and choose `Run Launcher.main()`."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Add a todo Task"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Format:** `todo TASK_DESCRIPTION`"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Parameters**"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      1. Description of the task"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Example:** `todo make breakfast`"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     "},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Add a deadline Task"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Format:** `deadline TASK_DESCRIPTION /by DEADLINE`"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Parameters**"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      1. Description of the task"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      2. Deadline of the task "},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Example:** `deadline Submit ME3103 report /by 2020-02-19`"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     "},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Add an event Task"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Format:** `event TASK_DESCRIPTION /at EVENT_LOCATION_OR_TIME`"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Parameters**"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      1. Description of the task"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      2. Event location or time"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Example:** `event project meeting /at Mon 2-4pm`"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     "},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* List all tasks"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Format:** `list`"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Example:** `list`"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     "},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Mark a task as done"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Format:** `done TASK_INDEX`"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Parameters**"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      1. Index of the task"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Example:** `done 2`"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Delete single/multiple tasks"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Format:** `delete INDEX_1 INDEX_2 ...`"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Parameters**"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      1. Index of the task to delete "},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Example:** `delete 2`, `delete 1 2 5` "},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Find tasks with keywords"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Format:** `find KEYWORD`"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Parameters**"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"      1. A keyword "},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Example:** `find egg`, `find CS2103`"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   \u003cbr\u003e\u003cbr\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     "},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"* Save all changes and exit"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Format:** `bye`"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"   * **Example:** `bye`"},{"lineNumber":70,"author":{"gitId":"-"},"content":"   "},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"## Command Summary"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| Actions | Format |"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| ------ | ------ |"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| Add a todo task | todo TASK_DESCRIPTION |"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| Add a deadline | deadline TASK_DESCRIPTION /by DEADLINE |"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| Add an event Task | event TASK_DESCRIPTION /at EVENT_LOCATION_OR_TIME |"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| List all tasks | list |"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| Mark a task as done | done TASK_INDEX |"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| Delete single/multiple tasks | delete INDEX_1 INDEX_2 ... |"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| Find tasks with keywords | find KEYWORD |"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"| Save all changes and exit | bye |"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   "},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"   "},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"   "},{"lineNumber":88,"author":{"gitId":"-"},"content":"   "}],"authorContributionMap":{"Prabhakaran-Gokul":72,"-":16}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String SHORT_HAND \u003d \"D\";"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    protected final String by;"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private String localDateStr;"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private LocalDate localDate;"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs the Deadline class."},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param taskDescription description of the task"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param by the deadline of the task"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Deadline(String taskDescription, String by) {"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        super(taskDescription);"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.by \u003d by;"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.localDateStr \u003d null;"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Formats text version of a date to LocalDate."},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param yearMonthDay the date to be parsed"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException exception is thrown if the date is not in the correct format"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void dateFormatter(String yearMonthDay) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM-dd-yyyy\");"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.localDate \u003d LocalDate.parse(yearMonthDay, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.localDateStr \u003d dateTimeFormatter.format(localDate);"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Date cannot be parsed\");"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Formats text version of a date from the yyyy-MM-dd HH:mm format to MMM-dd-yyyy HH:mm format."},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param dateTimeText date in the yyyy-MM-dd HH:mm format"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException exection if dateTimeText cannot be parsed"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void dateTimeFormatter(String dateTimeText) throws DukeException {"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM-dd-yyyy HH:mm\");"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(dateTimeText, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.localDateStr \u003d formatter.format(dateTime);"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Date and time cannot be parsed\");"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    //TODO remove empty spaces, if any, when performing this.by.split(\" \")"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (this.by.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                dateFormatter(this.by);"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } else {"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                dateTimeFormatter(this.by);"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (DukeException e) {"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            System.out.println(\"\\t\\t\" + e.getMessage());"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (localDate \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return \"[\" + SHORT_HAND + \"]\" + super.toString() + \" (by: \" + this.by + \")\";"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return \"[\" + SHORT_HAND + \"]\" + super.toString() + \" (by: \" + localDateStr + \")\";"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":""}],"authorContributionMap":{"Prabhakaran-Gokul":75}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Duke is the main class that runs the whole program."},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * @author Prabhakaran Gokul"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * This constructor initialises the Ui, Storage Classes"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Duke() {"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.taskList \u003d new TaskList(storage.loadFile());"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.ui.loadingSuccess();"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (DukeException e) {"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.ui.showError(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.taskList \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.ui.loadingFailure();"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Drives the program."},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parser class in initialised here and user inputs are parsed and"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * processed to generate a response."},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String run (String input) {"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String dukeResponse;"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Parser exec \u003d new Parser(taskList);"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            dukeResponse \u003d exec.executeCommand(input);"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (DukeException e) {"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            dukeResponse \u003d e.getMessage();"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (exec.getIsExit()) {"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                this.storage.saveFile(this.taskList.getListOfTasks());"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } catch (DukeException e) {"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                dukeResponse \u003d e.getMessage();"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return dukeResponse;"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String getResponse(String input) {"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return run(input);"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":57,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Throws exception pertaining to the Duke application."},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":10}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String SHORT_HAND \u003d \"E\";"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    protected final String at;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Construsts an Event task"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param taskDescription descripion of the event"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param at date/time of the event"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Event (String taskDescription, String at) {"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        super(taskDescription);"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.at \u003d at;"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return \"[\" + SHORT_HAND + \"]\" + super.toString() + \" (at: \" + this.at + \")\";"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":21}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Launcher {"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static void main(String[] args) {"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":8}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/rooney.jpg\"));"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        duke \u003d d;"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private void handleUserInput() {"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        );"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        userInput.clear();"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (response.equals(\"bye\")) {"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            Platform.exit();"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":57}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Parser class is an abstraction of an object that parses and interprets text messages into commands."},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private boolean isExit;"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Instantiates the Parser with attributes."},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param taskList the task list with a list of commands"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Parser (TaskList taskList) {"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.isExit \u003d false;"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public boolean getIsExit() {"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return isExit;"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * This parses and executes relevant comments from the tasklist"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param command the command given by the user"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException an exception due to errors in parsing text"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String executeCommand(String command) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String[] arr \u003d command.split(\" \", 2);"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String firstWord \u003d arr[0];"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String reply \u003d \"\";"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        switch (firstWord) {"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"bye\":"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            this.isExit \u003d true;"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reply \u003d \"bye\";"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"list\":"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reply \u003d taskList.displayTasks();"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"done\":"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                String num \u003d arr[1];"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                //TODO exception handling if num is not a number"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                reply \u003d taskList.markAsDone(Integer.valueOf(num));"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Enter an integer only\");"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"find\":"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String toFind \u003d arr[1];"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reply \u003d taskList.findTasks(toFind);"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"delete\":"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            try {"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                String num \u003d arr[1];"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                ArrayList\u003cInteger\u003e tasksToDelete \u003d getTaskNumbers(num);"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                reply \u003d taskList.deleteMultipleTasks(tasksToDelete);"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Enter an integer only\");"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"todo\":"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length \u003d\u003d 1) {"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Sorry, description of a todo cannot be empty\");"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String toDo \u003d arr[1];"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reply \u003d taskList.addTask(new ToDo(toDo));"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"deadline\":"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length \u003d\u003d 1) {"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Sorry description of a deadline cannot be empty\");"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String deadline \u003d arr[1];"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reply \u003d taskList.addTask(new Deadline(getMessage(deadline, \" /by \"), getDateTime(deadline, \" /by \")));"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        case \"event\":"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length \u003d\u003d 1) {"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Sorry description of an event cannot be empty\");"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            String event \u003d arr[1];"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            reply \u003d taskList.addTask(new Event(getMessage(event, \" /at \"), getDateTime(event, \" /at \")));"},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        default:"},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            taskList.complain();"},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return reply;"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses the input text to return the deadline or event date/time."},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param text input text containing task description and date/time"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param delimiter the delimiter to parse the input text"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return the date/time in the input text"},{"lineNumber":96,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException thrown when the input text does not contain the required delimiter"},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String getDateTime(String text, String delimiter) throws DukeException {"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        //TODO handle case when text does not contain \"/at\" or \"/by\""},{"lineNumber":100,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        int index \u003d text.indexOf(delimiter);"},{"lineNumber":101,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Statement does not contain \" + delimiter);"},{"lineNumber":103,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return text.substring(index + 5);"},{"lineNumber":105,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Parses the input text to return the task description."},{"lineNumber":109,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param text input text containing task description and date/time"},{"lineNumber":110,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param delimiter the delimiter to parse the input text"},{"lineNumber":111,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return the task description from the input text"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException thrown when the input text does not contain the required delimiter"},{"lineNumber":113,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String getMessage(String text, String delimiter) throws DukeException {"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        //TODO handle case when text does not contain \"/at\" or \"/by\""},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        int index \u003d text.indexOf(delimiter);"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":118,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Statement does not contain \" + delimiter);"},{"lineNumber":119,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return text.substring(0, index);"},{"lineNumber":121,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":123,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Converts a string of numbers to integer format and stores it an ArrayList."},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param num a string of numbers"},{"lineNumber":126,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return an ArrayList of integers"},{"lineNumber":127,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public ArrayList\u003cInteger\u003e getTaskNumbers(String num) {"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String[] splitNum \u003d num.split(\" \");"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ArrayList\u003cInteger\u003e listOfTaskNumbers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":131,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        for (String value: splitNum) {"},{"lineNumber":132,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            listOfTaskNumbers.add(Integer.valueOf(value));"},{"lineNumber":133,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return listOfTaskNumbers;"},{"lineNumber":135,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":136}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Storage class in an abstraction of a file loading and a saving system."},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String DEFAULT_STORAGE_FILE \u003d \"data/duke.txt\";"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private File f;"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private String filePath;"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs a Storage with a specified path."},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param filePath file path of where task data is stored"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException throws exception if the filePath is invalid"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Storage(String filePath) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (!isValidFileExtension(filePath)) {"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"\\t\\tFile should end with .txt extension\");"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.f \u003d new File(filePath);"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs an instance of the Storage class."},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Storage() {"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.filePath \u003d \"data\";"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.f \u003d new File(filePath, \"duke.txt\");"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.f.getParentFile().mkdirs();"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Checks the validity of a filepath"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param filePath the path of the file that is to be checked for validity"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return boolean value stating is the file is a valid one"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public boolean isValidFileExtension(String filePath) {"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return filePath.endsWith(\".txt\");"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Loads duke.txt file from the local disk."},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return a list of tasks that is written in the duke.txt file"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException an exception when loading a file from the local disk"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public ArrayList\u003cTask\u003e loadFile() throws DukeException {"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            Scanner sc \u003d new Scanner(this.f);"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            while (sc.hasNext()) {"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                taskArr.add(stringToTask(sc.nextLine()));"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"File not found!\");"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return taskArr;"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Saves a file to the disk with task details."},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param TaskArr a list of tasks that needs to be saved to the disk"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException an exception when saving the file to the local disk"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void saveFile(ArrayList\u003cTask\u003e TaskArr) throws DukeException {"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            FileWriter fw \u003d new FileWriter(DEFAULT_STORAGE_FILE);"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            for (Task t : TaskArr) {"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                fw.write(taskToString(t) + \"\\n\");"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            fw.close();"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (IOException e) {"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Error saving the Tasks into a file\");"},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Converts strings to Task instances"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param task the task string that need to be converted to a Task Object"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return Returns the task object"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException throws exception"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Task stringToTask(String task) throws DukeException {"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String[] arr \u003d task.split(\", \");"},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Task result;"},{"lineNumber":96,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (arr.length \u003d\u003d 0) {"},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Read invalid task from the file\");"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String taskType \u003d arr[0];"},{"lineNumber":100,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":101,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (taskType.equals(\"T\")) {"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length !\u003d 3) {"},{"lineNumber":103,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Read invalid Todo task from the file\");"},{"lineNumber":104,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d new ToDo(arr[2]);"},{"lineNumber":106,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (Integer.valueOf(arr[1]) \u003d\u003d 1) {"},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                result.isDone \u003d true;"},{"lineNumber":108,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            return result;"},{"lineNumber":110,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (taskType.equals(\"D\")) {"},{"lineNumber":111,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length !\u003d 4) {"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Read invalid Deadline task from the file\");"},{"lineNumber":113,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d new Deadline(arr[2], arr[3]);"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (Integer.valueOf(arr[1]) \u003d\u003d 1) {"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                result.isDone \u003d true;"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (taskType.equals(\"E\")) {"},{"lineNumber":119,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (arr.length !\u003d 4) {"},{"lineNumber":120,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Read invalid Event task from the file\");"},{"lineNumber":121,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d new Event(arr[2], arr[3]);"},{"lineNumber":123,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (Integer.valueOf(arr[1]) \u003d\u003d 1) {"},{"lineNumber":124,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                result.isDone \u003d true;"},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":127,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"Read invalid Task type\");"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return result;"},{"lineNumber":131,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":133,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Converts Tasks to string"},{"lineNumber":135,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param task the task object that need to be converted to a String"},{"lineNumber":136,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return throws exception"},{"lineNumber":137,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String taskToString(Task task) {"},{"lineNumber":139,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        int num \u003d 0;"},{"lineNumber":140,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String result \u003d \"\";"},{"lineNumber":141,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (task.isDone) {"},{"lineNumber":142,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            num \u003d 1;"},{"lineNumber":143,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":145,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (task instanceof Event) {"},{"lineNumber":146,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d \"E, \" + num"},{"lineNumber":147,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + task.taskDescription"},{"lineNumber":148,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + ((Event) task).at;"},{"lineNumber":149,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":150,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d \"D, \" + num"},{"lineNumber":151,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + task.taskDescription"},{"lineNumber":152,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + ((Deadline) task).by;"},{"lineNumber":153,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else if (task instanceof ToDo) {"},{"lineNumber":154,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            result \u003d \"T, \" + num"},{"lineNumber":155,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \", \" + task.taskDescription;"},{"lineNumber":156,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return result;"},{"lineNumber":158,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":159,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":160}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Task creates an abstraction of everyday tasks that user perform."},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String SHORTHAND \u003d \"INVALID\";"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    protected final String taskDescription;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Task constructor instantiates a task class"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param taskDescription"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Task(String taskDescription) {"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Decides the status icon of the task, X for completed and \"\" for not completed."},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return The completion status of the task"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return this.isDone ? \"X\" : \"\";"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Marks a task as done/completed."},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void markAsDone() {"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        // TODO consider adding assertion here"},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        isDone \u003d true;"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public boolean getIsDone() {"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return isDone;"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void setIsDone(boolean bool) {"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        isDone \u003d bool;"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String getTaskDescription () {"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return taskDescription;"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Shows the details about the task ."},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return A formatted string with details of the task"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.taskDescription;"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":57}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private ArrayList\u003cTask\u003e listOfTasks;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private boolean isAlive;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs a TaskList with an empty list of tasks."},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.listOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.isAlive \u003d true;"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs a TaskList with the input taskArr as the list of tasks."},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param taskArr list of tasks"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskArr) {"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.listOfTasks \u003d taskArr;"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.isAlive \u003d true;"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public ArrayList\u003cTask\u003e getListOfTasks() {"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return this.listOfTasks;"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Describes the number of tasks present."},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return A descriptive string that describes the number of tasks."},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private String echoNoOfTask() {"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        int numOfTasks \u003d getNoOfTasks();"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assert numOfTasks \u003e\u003d 0 : \"Number of tasks cannot be a negative integer\";"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String noOfTasksText \u003d \"Now you have \" + numOfTasks + \" tasks in the list\\n\";"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return noOfTasksText;"},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Adds a task to the listOfTasks."},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param task the task to add"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return returns an status message of this method"},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String addTask(Task task) {"},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String addStatus;"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.listOfTasks.add(task);"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        addStatus \u003d \"Okay I have added this task: \\n\" + task + \"\\n\" + echoNoOfTask();"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return addStatus;"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    //TODO create a function to check if the task number is valid."},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Deletes the specified task from the listOfTasks."},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param index the index of the task to delete"},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return returns an status message of this method"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String deleteTask(int index) throws DukeException {"},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String deleteStatus;"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (index \u003c 1 || index \u003e getNoOfTasks()) {"},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            throw new DukeException(\"There is no such task number!\");"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Task task \u003d this.listOfTasks.get(index - 1);"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        this.listOfTasks.remove(index - 1);"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        deleteStatus \u003d \"Okay, I\u0027ve I have removed this task: \\n\" + task + \"\\n\" + echoNoOfTask();"},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return deleteStatus;"},{"lineNumber":67,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":69,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Deletes multiple tasks from the listOfTasks."},{"lineNumber":71,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param tasksToDelete the tasks to delete"},{"lineNumber":72,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return returns an status message of this method"},{"lineNumber":73,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String deleteMultipleTasks(ArrayList\u003cInteger\u003e tasksToDelete) throws DukeException {"},{"lineNumber":75,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        //sort in descending order to prevent mixing up task number when deleting tasks"},{"lineNumber":76,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Collections.sort(tasksToDelete, Collections.reverseOrder());"},{"lineNumber":77,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String deleteStatus;"},{"lineNumber":78,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        for (Integer taskNumber : tasksToDelete) {"},{"lineNumber":79,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            deleteTask(taskNumber);"},{"lineNumber":80,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        deleteStatus \u003d \"Successfully deleted tasks\";"},{"lineNumber":82,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return deleteStatus;"},{"lineNumber":83,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":85,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Calculates the number of tasks present."},{"lineNumber":87,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return number of tasks present"},{"lineNumber":88,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public int getNoOfTasks() {"},{"lineNumber":90,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return this.listOfTasks.size();"},{"lineNumber":91,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":93,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Searches for and finds tasks that contain the input string."},{"lineNumber":95,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param toFind text to find from the list of tasks"},{"lineNumber":96,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return tasks that contain the string toFind"},{"lineNumber":97,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String findTasks(String toFind) {"},{"lineNumber":99,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        for (Task t : this.listOfTasks) {"},{"lineNumber":101,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            if (t.taskDescription.contains(toFind)) {"},{"lineNumber":102,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                newList.add(t);"},{"lineNumber":103,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String text \u003d \"\";"},{"lineNumber":106,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (newList.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            System.out.println(\"Found no related tasks\");"},{"lineNumber":108,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":109,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            text +\u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":110,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            for (int i \u003d 0; i \u003c newList.size(); i++) {"},{"lineNumber":111,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                text +\u003d (i + 1)"},{"lineNumber":112,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        +"},{"lineNumber":113,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        \". \""},{"lineNumber":114,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        + newList.get(i);"},{"lineNumber":115,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return text;"},{"lineNumber":118,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":120,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Displays all the tasks in the list of task."},{"lineNumber":122,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return a string describing all the tasks"},{"lineNumber":123,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String displayTasks() {"},{"lineNumber":125,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String text \u003d \"\";"},{"lineNumber":126,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (this.listOfTasks.size() \u003d\u003d 0) {"},{"lineNumber":127,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            text \u003d \"There are no tasks\";"},{"lineNumber":128,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":129,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            text +\u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":130,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            for (int i \u003d 0; i \u003c this.listOfTasks.size(); i++) {"},{"lineNumber":131,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                text +\u003d (i + 1) + \". \""},{"lineNumber":132,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        + this.listOfTasks.get(i)"},{"lineNumber":133,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        + \"\\n\";"},{"lineNumber":134,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return text;"},{"lineNumber":137,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":139,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    //TODO consider throwing an exception (eg. DukeException)"},{"lineNumber":140,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":141,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Complains if an invalid command is given by the user."},{"lineNumber":143,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException exception is thrown"},{"lineNumber":144,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void complain() throws DukeException {"},{"lineNumber":146,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        throw new DukeException(\"Sorry I do not understand that!\");"},{"lineNumber":147,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":149,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Marks a task as done."},{"lineNumber":151,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param num task number in the task list"},{"lineNumber":152,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @return a status message of this method"},{"lineNumber":153,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @throws DukeException throws an error is the given input num is invalid"},{"lineNumber":154,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String markAsDone(int num) throws DukeException {"},{"lineNumber":156,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        //TODO consider adding assertion/exception here(to prevent indexing issues)"},{"lineNumber":157,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assert num \u003e\u003d 0 : \"Excepted a positive value for task number, to mark it as done\";"},{"lineNumber":158,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String markStatus;"},{"lineNumber":159,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        if (getNoOfTasks() \u003d\u003d 0) {"},{"lineNumber":160,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            markStatus \u003d \"There are no tasks in the list to be marked as done!\";"},{"lineNumber":161,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } else {"},{"lineNumber":162,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            try {"},{"lineNumber":163,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                this.listOfTasks.get(num - 1).markAsDone();"},{"lineNumber":164,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                markStatus \u003d \"Okay! I\u0027ve marked this task as done:\\n\" + this.listOfTasks.get(num - 1);"},{"lineNumber":165,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":166,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                throw new DukeException(\"Only Enter natural numbers (i.e 1,2,3..) not more than \""},{"lineNumber":167,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                        + getNoOfTasks());"},{"lineNumber":168,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return markStatus;"},{"lineNumber":171,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":173,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":174,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":175,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return \"TaskList for Duke\";"},{"lineNumber":176,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":177}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public static final String SHORT_HAND \u003d \"T\";"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Constructs a ToDo task."},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param taskDescription description of the ToDo task."},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public ToDo (String taskDescription) {"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        super(taskDescription);"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        return \"[\" + SHORT_HAND + \"]\" + super.toString();"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":18}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * Ui class is responsible for outputs on the command line."},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":" * The main Duke class is able to use this to print out the necessary output."},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String SPACING \u003d \"\\t\\t\";"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private static final String GO_TO_NEXT_LINE \u003d \"\\n\";"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * An empty Ui constructor that instantiates an Ui class"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public Ui() {"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * showError method displays the exception messages caught."},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param errorMsg The content of the exception message"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void showError(String errorMsg) {"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + errorMsg + GO_TO_NEXT_LINE);"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Displays a welcome message that greets the user."},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void welcomeMsg() {"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String text \u003d SPACING + \"Hello! I\u0027m Duke\""},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + GO_TO_NEXT_LINE + SPACING"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + \"What can I do for you?\""},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    + GO_TO_NEXT_LINE;"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(text);"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Formats and Repeats whatever message that is given as the input."},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * @param msg The message that need to be formatted and repeated"},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void say(String msg) {"},{"lineNumber":42,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + msg + GO_TO_NEXT_LINE);"},{"lineNumber":43,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":45,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Formats and displays information about successful loading of file."},{"lineNumber":47,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void loadingSuccess() {"},{"lineNumber":49,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + \"Existing file successfully loaded\" + GO_TO_NEXT_LINE);"},{"lineNumber":50,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Formats and displays information about a failure loading the file."},{"lineNumber":53,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void loadingFailure() {"},{"lineNumber":55,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + \"Existing file could not be found. New file will be created\""},{"lineNumber":56,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                + GO_TO_NEXT_LINE);"},{"lineNumber":57,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":59,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     * Greets the user goodbye."},{"lineNumber":61,"author":{"gitId":"Prabhakaran-Gokul"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void byeMsg() {"},{"lineNumber":63,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.println(SPACING + \"See you again soon!\");"},{"lineNumber":64,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":66,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":66}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Prabhakaran-Gokul":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Prabhakaran-Gokul":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import duke.Parser;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void getDateTime_correctInput_success() throws Exception {"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(\"Monday\", new Parser(new TaskList())"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .getDateTime(\"read book /by Monday\", \" /by \"));"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(\"23 Jan 2021\", new Parser(new TaskList())"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                .getDateTime(\"read book /by 23 Jan 2021\", \" /by \"));"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void getDateTime_incorrectInput_exceptionThrown() {"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            assertEquals(\"Monday\", new Parser(new TaskList())"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"                    .getDateTime(\"read book /at Monday\", \" /by \"));"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        } catch (DukeException e) {"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":"            assertEquals(\"Statement does not contain  /by \", e.getMessage());"},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":29}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import duke.Deadline;"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import duke.ToDo;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class StorageTest {"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void taskToString_correctInputs_success() {"},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"Sunday\");"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        d.setIsDone(true);"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(\"D, 1, return book, Sunday\", new Storage().taskToString(d));"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void stringToTask_correctInputs_success() throws Exception {"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        ToDo t \u003d new ToDo(\"make food\");"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(t.getTaskDescription(), new Storage().stringToTask(\"T, 0, make food\").getTaskDescription());"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":23}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import java.io.PrintStream;"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"import duke.Ui;"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":13,"author":{"gitId":"Prabhakaran-Gokul"},"content":"public class UiTest {"},{"lineNumber":14,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":15,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"},{"lineNumber":16,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":17,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    private final PrintStream originalErr \u003d System.err;"},{"lineNumber":18,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":19,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void testWelcomemsg() {"},{"lineNumber":21,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        String text \u003d \"\\t\\tHello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\";"},{"lineNumber":22,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.out.print(text);"},{"lineNumber":24,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        assertEquals(text, outContent.toString());"},{"lineNumber":25,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":27,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @BeforeEach"},{"lineNumber":28,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void setUpStreams() {"},{"lineNumber":29,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":30,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.setErr(new PrintStream(errContent));"},{"lineNumber":31,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":33,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    @AfterEach"},{"lineNumber":34,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    public void restoreStreams() {"},{"lineNumber":35,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.setOut(originalOut);"},{"lineNumber":36,"author":{"gitId":"Prabhakaran-Gokul"},"content":"        System.setErr(originalErr);"},{"lineNumber":37,"author":{"gitId":"Prabhakaran-Gokul"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":39,"author":{"gitId":"Prabhakaran-Gokul"},"content":""},{"lineNumber":40,"author":{"gitId":"Prabhakaran-Gokul"},"content":"}"}],"authorContributionMap":{"Prabhakaran-Gokul":40}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Prabhakaran-Gokul"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Prabhakaran-Gokul"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"Prabhakaran-Gokul"},"content":"list"},{"lineNumber":4,"author":{"gitId":"Prabhakaran-Gokul"},"content":"project meeting"},{"lineNumber":5,"author":{"gitId":"Prabhakaran-Gokul"},"content":"event project meeting /at Aug 10th 2-4 pm"},{"lineNumber":6,"author":{"gitId":"Prabhakaran-Gokul"},"content":"todo go for cca"},{"lineNumber":7,"author":{"gitId":"Prabhakaran-Gokul"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"Prabhakaran-Gokul"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Prabhakaran-Gokul"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"Prabhakaran-Gokul"},"content":"done 1"},{"lineNumber":11,"author":{"gitId":"Prabhakaran-Gokul"},"content":"list"},{"lineNumber":12,"author":{"gitId":"Prabhakaran-Gokul"},"content":"bye"}],"authorContributionMap":{"Prabhakaran-Gokul":12}}]
