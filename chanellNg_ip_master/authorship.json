[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"# User Guide "},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"1. After that, locate the `src/main/java/Launcher.java` file, right-click it, and choose `Run Launcher.main()`. "},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"1. Refer to the Features below for details of each command."},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"## Features"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"***NOTE: Words in UPPER_CASE are the parameters to be supplied by the user.***"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"### Adding a task: "},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"#### Adding a ToDo task: `todo`"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"Adds a new ToDo task to the Duke\u0027s tasklist."},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"Format: `todo CONTENT`"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"- The content field must be provided."},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"- `todo hello`"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"-  `todo read book`"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"#### Adding a Deadline task: `deadline`"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"Adds a new Deadline task to the Duke\u0027s tasklist."},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"Format: `deadline CONTENT /by DATE_AND_TIME`"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"- The date and time must be in the format DD/MM/YYYY HH:MM"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"- Both fields must be provided."},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"- `deadline read book /by 12/12/2020 18:30`"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"- `deadline return book /by 10/10/2020 10:00`"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"#### Adding an Event task: `event`"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"Adds a new Event task to the Duke\u0027s tasklist."},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"Format: `event CONTENT /at DATE_AND_TIME`"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"- The date and time must be in the format DD/MM/YYYY HH:MM"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"- Both fields must be provided."},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"- `event go for meeting /at 12/10/2020 18:00`"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"- `event meet groupmates /at 10/10/2020 10:30`"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"### Listing all tasks: `list`"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"Shows a list of all tasks in the Duke\u0027s tasklist."},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"Format: `list`"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"### Marking a task as done: `done`"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"Marks an existing task in the Duke\u0027s tasklist as done."},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"Format: `done INDEX`"},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"- Updates the task status to done for the task at the specified `INDEX`"},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"- The index refers to the index number shown in the displayed tasklist."},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":"- The index **must be a positive integer**."},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"- `list` followed by `done 3` marks the 3rd task in the tasklist as done."},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"### Deleting a task: `delete`"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"Deletes an existing task from the Duke\u0027s tasklist."},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"Format: `delete INDEX`"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"- Deletes the task at the specified `INDEX`"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"- The index refers to the index number shown in the displayed tasklist."},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"- The index **must be a positive integer**."},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"- `list` followed by `delete 1` deletes the 1st task in the tasklist."},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"### Finding a task by content: `find`"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"Finds tasks with contents that contain the given keyword/s."},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":"Format: `find KEYWORD OR KEYWORDS`"},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":"- The search is **case-sensitive**. "},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"- Only the contents of the tasks are searched."},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"- The following tasks will be returned: "},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"  1. content matching the keyword/s"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"  2. the keyword/s form a part of the content"},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"- `find read` returns both task with content `read book` and task with content `read` from the tasklist."},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"### Editing a task: `edit`"},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":"#### Editing a task\u0027s content: `edit_content`"},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":"Edits an existing task\u0027s content in the Duke\u0027s tasklist."},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":"Format: `edit INDEX content NEW_CONTENT`"},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":"- Edits the content of the task at the specified `INDEX`"},{"lineNumber":132,"author":{"gitId":"chanellNg"},"content":"- The index refers to the index number shown in the displayed tasklist."},{"lineNumber":133,"author":{"gitId":"chanellNg"},"content":"- The index **must be a positive integer**."},{"lineNumber":134,"author":{"gitId":"chanellNg"},"content":"- Existing content will be updated to `NEW_CONTENT`. "},{"lineNumber":135,"author":{"gitId":"chanellNg"},"content":"- All fields must be provided."},{"lineNumber":136,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":137,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":138,"author":{"gitId":"chanellNg"},"content":"- `edit 1 content read new book` edits the content of the 1st task in the tasklist to `read new book`."},{"lineNumber":139,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":140,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":141,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":142,"author":{"gitId":"chanellNg"},"content":"#### Editing a task\u0027s date and time: `edit_datetime`"},{"lineNumber":143,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":144,"author":{"gitId":"chanellNg"},"content":"Edits an existing task\u0027s date and time in the Duke\u0027s tasklist."},{"lineNumber":145,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":146,"author":{"gitId":"chanellNg"},"content":"Format: `edit INDEX datetime NEW_DATETIME`"},{"lineNumber":147,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":148,"author":{"gitId":"chanellNg"},"content":"- Edit the date and time of the task at the specified `INDEX`"},{"lineNumber":149,"author":{"gitId":"chanellNg"},"content":"- The index refers to the index number shown in the displayed tasklist."},{"lineNumber":150,"author":{"gitId":"chanellNg"},"content":"- The index **must be a positive integer**."},{"lineNumber":151,"author":{"gitId":"chanellNg"},"content":"- The date and time must be in the format DD/MM/YYYY HH:MM  "},{"lineNumber":152,"author":{"gitId":"chanellNg"},"content":"- Existing date and time will be updated to `NEW_DATETIME`."},{"lineNumber":153,"author":{"gitId":"chanellNg"},"content":"- All fields must be provided."},{"lineNumber":154,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":155,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":156,"author":{"gitId":"chanellNg"},"content":"- `edit 2 datetime 12/12/2020 18:30` edits the date and time of the 2nd task in the tasklist to `12/12/2020 18:30`."},{"lineNumber":157,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":158,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":159,"author":{"gitId":"chanellNg"},"content":"### Exiting the program: `bye`"},{"lineNumber":160,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":161,"author":{"gitId":"chanellNg"},"content":"Saves the tasklist\u0027s changes to the file at relative filepath `/data/duke.txt`."},{"lineNumber":162,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":163,"author":{"gitId":"chanellNg"},"content":"Format: `bye`"},{"lineNumber":164,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":165,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":166,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":167,"author":{"gitId":"chanellNg"},"content":"##Command Summary"},{"lineNumber":168,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":169,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":170,"author":{"gitId":"chanellNg"},"content":"Action | Format, Examples"},{"lineNumber":171,"author":{"gitId":"chanellNg"},"content":"------------ | -------------"},{"lineNumber":172,"author":{"gitId":"chanellNg"},"content":"Add | ToDo Task \u003cbr /\u003e `todo CONTENT` \u003c/br\u003e e.g. `todo hello` \u003c/br\u003e \u003c/br\u003e Deadline Task \u003c/br\u003e `deadline CONTENT /by DATE_AND_TIME` \u003c/br\u003e  e.g. `deadline read book /by 12/12/2020 18:30` \u003c/br\u003e\u003c/br\u003e Event Task \u003c/br\u003e `event CONTENT /at DATE_AND_TIME` \u003c/br\u003e e.g. `event go for meeting /at 12/10/2020 18:00`"},{"lineNumber":173,"author":{"gitId":"chanellNg"},"content":"List | `list`"},{"lineNumber":174,"author":{"gitId":"chanellNg"},"content":"Done | `done INDEX` \u003cbr /\u003e e.g. `done 3`"},{"lineNumber":175,"author":{"gitId":"chanellNg"},"content":"Delete | `delete INDEX` \u003cbr /\u003e e.g. `delete 1`"},{"lineNumber":176,"author":{"gitId":"chanellNg"},"content":"Find | `find KEYWORD OR KEYWORDS` \u003cbr /\u003e e.g. `find read`"},{"lineNumber":177,"author":{"gitId":"chanellNg"},"content":"Edit | Edit content \u003cbr /\u003e`edit INDEX content NEW_CONTENT` \u003cbr /\u003e e.g. `edit 1 content read new book` \u003cbr /\u003e \u003cbr /\u003e Edit date and time \u003cbr /\u003e `edit INDEX datetime NEW_DATETIME` \u003cbr /\u003e e.g.  `edit 2 datetime 12/12/2020 18:30` \u003cbr /\u003e"},{"lineNumber":178,"author":{"gitId":"chanellNg"},"content":"Exit | `bye`"},{"lineNumber":179,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":180,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":166,"-":14}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"    mainClassName \u003d \"ip.src.main.java.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chanellNg":16,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"E | 1 | bye | 12/02/2019 18:00"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"E | 0 | read | 12/12/2020 18:40"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"D | 0 | read book  | 12/12/2020 18:20"}],"authorContributionMap":{"chanellNg":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"## Setting up in Intellij"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    1. Click `Open`."},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    1. Select the project directory, and click `OK`."},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    1. If there are any further prompts, accept the defaults."},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"1. After that, locate the `src/main/java/Launcher.java` file, right-click it, and choose `Run Launcher.main()`."},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"1. Refer to the Features below for details of each command."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"***NOTE: Words in UPPER_CASE are the parameters to be supplied by the user.***"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"### Adding a task:"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"#### Adding a ToDo task: `todo`"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"Adds a new ToDo task to the Duke\u0027s tasklist."},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"Format: `todo CONTENT`"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"- The content field must be provided."},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"- `todo hello`"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"-  `todo read book`"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"#### Adding a Deadline task: `deadline`"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"Adds a new Deadline task to the Duke\u0027s tasklist."},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"Format: `deadline CONTENT /by DATE_AND_TIME`"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"- The date and time must be in the format DD/MM/YYYY HH:MM"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"- Both fields must be provided."},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"- `deadline read book /by 12/12/2020 18:30`"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"- `deadline return book /by 10/10/2020 10:00`"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"#### Adding an Event task: `event`"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"Adds a new Event task to the Duke\u0027s tasklist."},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"Format: `event CONTENT /at DATE_AND_TIME`"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"- The date and time must be in the format DD/MM/YYYY HH:MM"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"- Both fields must be provided."},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"- `event go for meeting /at 12/10/2020 18:00`"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"- `event meet groupmates /at 10/10/2020 10:30`"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"### Listing all tasks: `list`"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"Shows a list of all tasks in the Duke\u0027s tasklist."},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"Format: `list`"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"### Marking a task as done: `done`"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"Marks an existing task in the Duke\u0027s tasklist as done."},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"Format: `done INDEX`"},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"- Updates the task status to done for the task at the specified `INDEX`"},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"- The index refers to the index number shown in the displayed tasklist."},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":"- The index **must be a positive integer**."},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"- `list` followed by `done 3` marks the 3rd task in the tasklist as done."},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"### Deleting a task: `delete`"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"Deletes an existing task from the Duke\u0027s tasklist."},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"Format: `delete INDEX`"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"- Deletes the task at the specified `INDEX`"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"- The index refers to the index number shown in the displayed tasklist."},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"- The index **must be a positive integer**."},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"- `list` followed by `delete 1` deletes the 1st task in the tasklist."},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"### Finding a task by content: `find`"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"Finds tasks with contents that contain the given keyword/s."},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":"Format: `find KEYWORD OR KEYWORDS`"},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":"- The search is **case-sensitive**."},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"- Only the contents of the tasks are searched."},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"- The following tasks will be returned:"},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"    1. content matching the keyword/s"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"    2. the keyword/s form a part of the content"},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"- `find read` returns both task with content `read book` and task with content `read` from the tasklist."},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"### Editing a task: `edit`"},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":"#### Editing a task\u0027s content: `edit_content`"},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":"Edits an existing task\u0027s content in the Duke\u0027s tasklist."},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":"Format: `edit INDEX content NEW_CONTENT`"},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":"- Edits the content of the task at the specified `INDEX`"},{"lineNumber":132,"author":{"gitId":"chanellNg"},"content":"- The index refers to the index number shown in the displayed tasklist."},{"lineNumber":133,"author":{"gitId":"chanellNg"},"content":"- The index **must be a positive integer**."},{"lineNumber":134,"author":{"gitId":"chanellNg"},"content":"- Existing content will be updated to `NEW_CONTENT`."},{"lineNumber":135,"author":{"gitId":"chanellNg"},"content":"- All fields must be provided."},{"lineNumber":136,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":137,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":138,"author":{"gitId":"chanellNg"},"content":"- `edit 1 content read new book` edits the content of the 1st task in the tasklist to `read new book`."},{"lineNumber":139,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":140,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":141,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":142,"author":{"gitId":"chanellNg"},"content":"#### Editing a task\u0027s date and time: `edit_datetime`"},{"lineNumber":143,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":144,"author":{"gitId":"chanellNg"},"content":"Edits an existing task\u0027s date and time in the Duke\u0027s tasklist."},{"lineNumber":145,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":146,"author":{"gitId":"chanellNg"},"content":"Format: `edit INDEX datetime NEW_DATETIME`"},{"lineNumber":147,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":148,"author":{"gitId":"chanellNg"},"content":"- Edit the date and time of the task at the specified `INDEX`"},{"lineNumber":149,"author":{"gitId":"chanellNg"},"content":"- The index refers to the index number shown in the displayed tasklist."},{"lineNumber":150,"author":{"gitId":"chanellNg"},"content":"- The index **must be a positive integer**."},{"lineNumber":151,"author":{"gitId":"chanellNg"},"content":"- The date and time must be in the format DD/MM/YYYY HH:MM"},{"lineNumber":152,"author":{"gitId":"chanellNg"},"content":"- Existing date and time will be updated to `NEW_DATETIME`."},{"lineNumber":153,"author":{"gitId":"chanellNg"},"content":"- All fields must be provided."},{"lineNumber":154,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":155,"author":{"gitId":"chanellNg"},"content":"Examples:"},{"lineNumber":156,"author":{"gitId":"chanellNg"},"content":"- `edit 2 datetime 12/12/2020 18:30` edits the date and time of the 2nd task in the tasklist to `12/12/2020 18:30`."},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":159,"author":{"gitId":"chanellNg"},"content":"### Exiting the program: `bye`"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"chanellNg"},"content":"Saves the tasklist\u0027s changes to the file at relative filepath `/data/duke.txt`."},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"chanellNg"},"content":"Format: `bye`"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"chanellNg"},"content":"\u0026nbsp;"},{"lineNumber":167,"author":{"gitId":"chanellNg"},"content":"##Command Summary"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"chanellNg"},"content":"Action | Format, Examples"},{"lineNumber":171,"author":{"gitId":"chanellNg"},"content":"------------ | -------------"},{"lineNumber":172,"author":{"gitId":"chanellNg"},"content":"Add | ToDo Task \u003cbr /\u003e `todo CONTENT` \u003c/br\u003e e.g. `todo hello` \u003c/br\u003e \u003c/br\u003e Deadline Task \u003c/br\u003e `deadline CONTENT /by DATE_AND_TIME` \u003c/br\u003e  e.g. `deadline read book /by 12/12/2020 18:30` \u003c/br\u003e\u003c/br\u003e Event Task \u003c/br\u003e `event CONTENT /at DATE_AND_TIME` \u003c/br\u003e e.g. `event go for meeting /at 12/10/2020 18:00`"},{"lineNumber":173,"author":{"gitId":"chanellNg"},"content":"List | `list`"},{"lineNumber":174,"author":{"gitId":"chanellNg"},"content":"Done | `done INDEX` \u003cbr /\u003e e.g. `done 3`"},{"lineNumber":175,"author":{"gitId":"chanellNg"},"content":"Delete | `delete INDEX` \u003cbr /\u003e e.g. `delete 1`"},{"lineNumber":176,"author":{"gitId":"chanellNg"},"content":"Find | `find KEYWORD OR KEYWORDS` \u003cbr /\u003e e.g. `find read`"},{"lineNumber":177,"author":{"gitId":"chanellNg"},"content":"Edit | Edit content \u003cbr /\u003e`edit INDEX content NEW_CONTENT` \u003cbr /\u003e e.g. `edit 1 content read new book` \u003cbr /\u003e \u003cbr /\u003e Edit date and time \u003cbr /\u003e `edit INDEX datetime NEW_DATETIME` \u003cbr /\u003e e.g.  `edit 2 datetime 12/12/2020 18:30` \u003cbr /\u003e"},{"lineNumber":178,"author":{"gitId":"chanellNg"},"content":"Exit | `bye`"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"chanellNg":167,"-":13}},{"path":"src/main/A_MoreOop.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.*;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"/** A-More OOP class that demonstrates OOP by having classes such as Task, Event etc."},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"public class A_MoreOop {"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"    /** Returns a Duke bot that has loaded the tasks from the file given."},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"     * @param filePath Location of the file with the tasks information."},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     * @param bot The Duke bot to be updated with the tasks from the file."},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"     * @throws FileNotFoundException"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"    private static void createBot(String filePath, Duke bot) throws FileNotFoundException {"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"        File f \u003d new File(filePath); // create a File for the given file path"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"        Storage storage \u003d new Storage(filePath, bot);"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new Task(\"\");"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"        while (s.hasNext()) {"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"            storage.loadTask(s.nextLine());"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"     * Overwrites the file with the updated tasks everytime a user gives a command/input."},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"     * @param filePath The location of the file to be updated."},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"     * @param bot The bot with the new tasks to be written to the file."},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"     * @throws IOException"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"    private static void updateFile(String filePath, Duke bot) throws IOException {"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"        Storage storage \u003d new Storage(filePath, bot);"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"        storage.updateFile();"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"     * Main method that greets users and interacts with users."},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"            File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"            f.getParentFile().mkdirs();"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"            if (f.createNewFile()) {"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"                System.out.println(\"File created\");"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"                createBot(\"data/duke.txt\", bot);"},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"        } catch (IOException e) {"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"            System.out.println(\"Error in creating file\");"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"        Ui ui \u003d new Ui(bot);"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"        while (!(input.equals(\"bye\"))) {"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":"                String command \u003d parser.getCommand(input);"},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"                try {"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"                    if (command.equals(\"done\")) {"},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d parser.getId(input);"},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"                        ui.doneCommand(id);"},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"todo\")) {"},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":"                        try {"},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"                            input \u003d parser.toDoTask(input);"},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"                            ui.toDoCommand(input);"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"                        } catch (Exception e) {"},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"                            throw new DukeException((\"OOPS!!! The description cannot be empty.\"));"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"                        }"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"event\")) {"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d parser.eventTaskContent(input);"},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":"                        String at \u003d parser.eventTaskAt(input);"},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"                        ui.eventCommand(content, at);"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"deadline\")) {"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d parser.deadlineTaskContent(input);"},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"                        String by \u003d parser.deadlineTaskBy(input);"},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":"                        ui.deadlineCommand(content, by);"},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"                    } else if(command.equals(\"delete\")) {"},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d parser.getId(input);"},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"                        ui.deleteCommand(id);"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"                    } else {"},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"                        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-{\");"},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"                    }"},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":"                } catch (DukeException e1) {"},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"                    System.out.println(e1);"},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"                }"},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"            try {"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"                updateFile(\"data/duke.txt\", bot);"},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"            } catch (IOException e) {"},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":"                System.out.println(\"Unable to update file\");"},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":"}"},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":131}},{"path":"src/main/Level1_9/Level_1.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Duke;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"public class Level_1 {"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.next();"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        while(!(input.equals(\"bye\"))){"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"            bot.echo(input);"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.next();"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":21}},{"path":"src/main/Level1_9/Level_2.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Duke;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Task;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"public class Level_2 {"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        //int counter \u003d 1;"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"        while(!(input.equals(\"bye\"))) {"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"            }else{"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"                Task newTask \u003d new Task(input);"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"                bot.addToList(newTask);"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"                //counter++;"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":29}},{"path":"src/main/Level1_9/Level_3.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Duke;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Task;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"public class Level_3 {"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        //int counter \u003d 1;"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"        while(!(input.equals(\"bye\"))) {"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"            }else{"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"                String command \u003d input.split(\" \")[0];"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"                if(command.equals(\"done\")){"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"                    int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"                    bot.markTaskAsDone(id);"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"                }else {"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"                    Task newTask \u003d new Task(input);"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"                    bot.addToList(newTask);"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"                    //counter++;"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"                }"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":36}},{"path":"src/main/Level1_9/Level_4.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Deadline;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Duke;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Event;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.ToDo;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"public class Level_4 {"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"        //int counter \u003d 1;"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"        while(!(input.equals(\"bye\"))) {"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"            }else{"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"                String command \u003d input.split(\" \")[0];"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"                if(command.equals(\"done\")){"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"                    int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"                    bot.markTaskAsDone(id);"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"                }else if(command.equals(\"todo\")) {"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"                    input \u003d input.split(\" \",2)[1];"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"                    ToDo newTask \u003d new ToDo(input);"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"                    bot.addToList(newTask);"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"                    //counter++;"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"                }else if(command.equals(\"event\")){"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"                    input \u003d input.split(\" \",2)[1];"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"                    String content \u003d input.split(\"/at\")[0];"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"                    String at \u003d input.split(\"/at\")[1];"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"                    Event newTask \u003d new Event(content,at);"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"                    bot.addToList(newTask);"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"                }else{"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"                    input \u003d input.split(\" \",2)[1];"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"                    String content \u003d input.split(\"/by\")[0];"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"                    String by\u003d input.split(\"/by\")[1];"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"                    Deadline newTask \u003d new Deadline(content,by);"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"                    bot.addToList(newTask);"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":52}},{"path":"src/main/Level1_9/Level_5.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.*;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"public class Level_5 {"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) throws DukeException {"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"        //int counter \u003d 1;"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        while (!(input.equals(\"bye\"))) {"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"                String command \u003d input.split(\" \")[0];"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"                try {"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"                    if (command.equals(\"done\")) {"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"                        bot.markTaskAsDone(id);"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"todo\")) {"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"                        try {"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"                            input \u003d input.split(\" \", 2)[1];"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"                            ToDo newTask \u003d new ToDo(input);"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"                            bot.addToList(newTask);"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"                            //counter++;"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"                        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"                            throw new DukeException((\"OOPS!!! The description cannot be empty.\"));"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"                        }"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"event\")) {"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"                        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d input.split(\"/at\")[0];"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"                        String at \u003d input.split(\"/at\")[1];"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"                        Event newTask \u003d new Event(content, at);"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"                        bot.addToList(newTask);"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"deadline\")) {"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"                        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d input.split(\"/by\")[0];"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"                        String by \u003d input.split(\"/by\")[1];"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"                        Deadline newTask \u003d new Deadline(content, by);"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"                        bot.addToList(newTask);"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"                    } else {"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"                        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-{\");"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"                    }"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"                } catch (DukeException e1) {"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"                    System.out.println(e1);"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"}"},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":62}},{"path":"src/main/Level1_9/Level_6.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.*;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"public class Level_6 {"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) throws DukeException {"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"        //int counter \u003d 1;"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        while (!(input.equals(\"bye\"))) {"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"                String command \u003d input.split(\" \")[0];"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"                try {"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"                    if (command.equals(\"done\")) {"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"                        bot.markTaskAsDone(id);"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"todo\")) {"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"                        try {"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"                            input \u003d input.split(\" \", 2)[1];"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"                            ToDo newTask \u003d new ToDo(input);"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"                            bot.addToList(newTask);"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"                            //counter++;"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"                        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"                            throw new DukeException((\"OOPS!!! The description cannot be empty.\"));"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"                        }"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"event\")) {"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"                        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d input.split(\"/at\")[0];"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"                        String at \u003d input.split(\"/at\")[1];"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"                        Event newTask \u003d new Event(content, at);"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"                        bot.addToList(newTask);"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"deadline\")) {"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"                        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d input.split(\"/by\")[0];"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"                        String by \u003d input.split(\"/by\")[1];"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"                        Deadline newTask \u003d new Deadline(content, by);"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"                        bot.addToList(newTask);"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"                    }else if(command.equals(\"delete\")){"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"                        bot.deleteTask(id);"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"                    } else {"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"                        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-{\");"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"                    }"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"                } catch (DukeException e1) {"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"                    System.out.println(e1);"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"}"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":68}},{"path":"src/main/Level1_9/Level_7.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.*;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"public class Level_7 {"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    private static void createBot(String filePath, Duke bot) throws FileNotFoundException {"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"        File f \u003d new File(filePath); // create a File for the given file path"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new Task(\"\");"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"        while (s.hasNext()) {"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"            String[] taskData \u003d s.nextLine().split(\" \\\\| \");"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"            String type \u003d taskData[0];"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"            String doneStatus \u003d taskData[1];"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"            if (type.equals(\"T\")) {"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"                String details \u003d taskData[2];"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"                newTask \u003d new ToDo(details);"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"                bot.addToBot(newTask);"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"            } else if (type.equals(\"E\")) {"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"                String content \u003d taskData[2];"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"                String at \u003d taskData[3];"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"                newTask \u003d new Event(content, at);"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"                bot.addToBot(newTask);"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"                String content \u003d taskData[2];"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"                String by \u003d taskData[3];"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"                newTask \u003d new Deadline(content, by);"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"                bot.addToBot(newTask);"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"            if (doneStatus \u003d\u003d \" 1 \") {"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"                newTask.markDone();"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"    private static void updateFile(String filePath, Duke bot) throws IOException {"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"        for(Task element:bot.list.list) {"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"            fw.write(element.toString() + \"\\n\");"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"        fw.close();"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"        try{"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"            File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"            f.getParentFile().mkdirs();"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"            if(f.createNewFile()){"},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"                System.out.println(\"File created\");"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"            }else {"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"                createBot(\"data/duke.txt\", bot);"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"        }catch (IOException e){"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"            System.out.println(\"Error in creating file\");"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"        while (!(input.equals(\"bye\"))) {"},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"                String command \u003d input.split(\" \")[0];"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"                try {"},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"                    if (command.equals(\"done\")) {"},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"                        bot.markTaskAsDone(id);"},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"todo\")) {"},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"                        try {"},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"                            input \u003d input.split(\" \", 2)[1];"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"                            ToDo newTask \u003d new ToDo(input);"},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"                            bot.addToList(newTask);"},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"                            //counter++;"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"                        } catch (Exception e) {"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"                            throw new DukeException((\"OOPS!!! The description cannot be empty.\"));"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"                        }"},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"event\")) {"},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"                        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d input.split(\"/at\")[0];"},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"                        String at \u003d input.split(\"/at\")[1];"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"                        Event newTask \u003d new Event(content, at);"},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"                        bot.addToList(newTask);"},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"deadline\")) {"},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"                        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d input.split(\"/by\")[0];"},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":"                        String by \u003d input.split(\"/by\")[1];"},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"                        Deadline newTask \u003d new Deadline(content, by);"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"                        bot.addToList(newTask);"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"                    }else if(command.equals(\"delete\")){"},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"                        bot.deleteTask(id);"},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"                    } else {"},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":"                        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-{\");"},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"                    }"},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"                } catch (DukeException e1) {"},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"                    System.out.println(e1);"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"                }"},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"            try {"},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":"                updateFile(\"data/duke.txt\", bot);"},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"            }catch (IOException e) {"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":"                System.out.println(\"Unable to update file\");"},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":"}"},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":132,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":133,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":134,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":135,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":135}},{"path":"src/main/Level1_9/Level_8.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.*;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"public class Level_8 {"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    private static void createBot(String filePath, Duke bot) throws FileNotFoundException {"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        File f \u003d new File(filePath); // create a File for the given file path"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new Task(\"\");"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"        while (s.hasNext()) {"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"            String[] taskData \u003d s.nextLine().split(\" \\\\| \");"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"            String type \u003d taskData[0];"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"            String doneStatus \u003d taskData[1];"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"            if (type.equals(\"T\")) {"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"                String details \u003d taskData[2];"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"                newTask \u003d new ToDo(details);"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"                bot.addToBot(newTask);"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"            } else if (type.equals(\"E\")) {"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"                String content \u003d taskData[2];"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"                String at \u003d taskData[3];"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"                newTask \u003d new Event(content, at);"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"                bot.addToBot(newTask);"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"                String content \u003d taskData[2];"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"                String by \u003d taskData[3];"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"                newTask \u003d new Deadline(content, by);"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"                bot.addToBot(newTask);"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"            if (doneStatus \u003d\u003d \" 1 \") {"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"                newTask.markDone();"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"    private static void updateFile(String filePath, Duke bot) throws IOException {"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"        for(Task element:bot.list.list) {"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"            fw.write(element.toString() + \"\\n\");"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"        fw.close();"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) throws DukeException {"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"        try{"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"            File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"            f.getParentFile().mkdirs();"},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"            if(f.createNewFile()){"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"                System.out.println(\"File created\");"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"            }else {"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"                createBot(\"data/duke.txt\", bot);"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"        }catch (IOException e){"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"            System.out.println(\"Error in creating file\");"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"        while (!(input.equals(\"bye\"))) {"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"                String command \u003d input.split(\" \")[0];"},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"                try {"},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"                    if (command.equals(\"done\")) {"},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"                        bot.markTaskAsDone(id);"},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"todo\")) {"},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"                        try {"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"                            input \u003d input.split(\" \", 2)[1];"},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"                            ToDo newTask \u003d new ToDo(input);"},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"                            bot.addToList(newTask);"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"                            //counter++;"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"                        } catch (Exception e) {"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"                            throw new DukeException((\"OOPS!!! The description cannot be empty.\"));"},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":"                        }"},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"event\")) {"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":"                        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d input.split(\"/at\")[0];"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"                        String at \u003d input.split(\" /at \")[1];"},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"                        Event newTask \u003d new Event(content, at);"},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":"                        bot.addToList(newTask);"},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"deadline\")) {"},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"                        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d input.split(\"/by\")[0];"},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"                        String by \u003d input.split(\" /by \")[1];"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"                        System.out.println(by);"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"                        Deadline newTask \u003d new Deadline(content, by);"},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"                        bot.addToList(newTask);"},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"                    }else if(command.equals(\"delete\")){"},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"                        bot.deleteTask(id);"},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"                    } else {"},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"                        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-{\");"},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"                    }"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"                } catch (DukeException e1) {"},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"                    System.out.println(e1);"},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"                }"},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"            try {"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":"                updateFile(\"data/duke.txt\", bot);"},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"            }catch (IOException e) {"},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":"                System.out.println(\"Unable to update file\");"},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":"}"},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":132,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":133,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":134,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":135,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":136,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":137,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":137}},{"path":"src/main/Level1_9/Level_9.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package Level1_9;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.*;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"/** A-More OOP class that demonstrates OOP by having classes such as Task, Event etc."},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"public class Level_9 {"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"    /** Returns a Duke bot that has loaded the tasks from the file given."},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     * @param filePath Location of the file with the tasks information."},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"     * @param bot The Duke bot to be updated with the tasks from the file."},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"     * @throws FileNotFoundException"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"    private static void createBot(String filePath, Duke bot) throws FileNotFoundException {"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"        File f \u003d new File(filePath); // create a File for the given file path"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"        Storage storage \u003d new Storage(filePath, bot);"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new Task(\"\");"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"        while (s.hasNext()) {"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"            storage.loadTask(s.nextLine());"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"     * Overwrites the file with the updated tasks everytime a user gives a command/input."},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"     * @param filePath The location of the file to be updated."},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"     * @param bot The bot with the new tasks to be written to the file."},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"     * @throws IOException"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"    private static void updateFile(String filePath, Duke bot) throws IOException {"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"        Storage storage \u003d new Storage(filePath, bot);"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"        storage.updateFile();"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"        try{"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"            File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"            f.getParentFile().mkdirs();"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"            if(f.createNewFile()){"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"                System.out.println(\"File created\");"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"            }else {"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"                createBot(\"data/duke.txt\", bot);"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"        }catch (IOException e){"},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"            System.out.println(\"Error in creating file\");"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"        Ui ui \u003d new Ui(bot);"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"        while (!(input.equals(\"bye\"))) {"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"                bot.printList();"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"                String command \u003d parser.getCommand(input);"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"                try {"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":"                    if (command.equals(\"done\")) {"},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d parser.getId(input);"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"                        ui.doneCommand(id);"},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"find\")) {"},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"                        String keyword \u003d parser.getKeyword(input);"},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"                        bot.findMatchingTasks(keyword);"},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"todo\")) {"},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"                        try {"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"                            input \u003d parser.toDoTask(input);"},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"                            ui.toDoCommand(input);"},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"                        } catch (Exception e) {"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"                            throw new DukeException((\"OOPS!!! The description cannot be empty.\"));"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"                        }"},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"event\")) {"},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d parser.eventTaskContent(input);"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":"                        String at \u003d parser.eventTaskAt(input);"},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"                        ui.eventCommand(content, at);"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"                    } else if (command.equals(\"deadline\")) {"},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":"                        String content \u003d parser.deadlineTaskContent(input);"},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"                        String by \u003d parser.deadlineTaskBy(input);"},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"                        ui.deadlineCommand(content, by);"},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"                    }else if(command.equals(\"delete\")){"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"                        int id \u003d parser.getId(input);"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"                        ui.deleteCommand(id);"},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"                    } else {"},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":"                        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-{\");"},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"                    }"},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":"                } catch (DukeException e1) {"},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"                    System.out.println(e1);"},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"                }"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"            try {"},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":"                updateFile(\"data/duke.txt\", bot);"},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"            }catch (IOException e) {"},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":"                System.out.println(\"Unable to update file\");"},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":"}"},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":130}},{"path":"src/main/java/ip/src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":" * Command enum class for the different types of commands available  for the Duke bot."},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"    BYE,"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"    DEADLINE,"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"    DELETE,"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    DONE,"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"    EDIT,"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    EVENT,"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    FIND,"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    LIST,"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"    TODO;"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":16}},{"path":"src/main/java/ip/src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.text.DateFormat;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":" * Deadline is a type of Task with attributes String content and a Date stored as a Date object."},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"public class Deadline extends Task{"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    protected Date by;"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"     * Constructor for Deadline Class."},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     * @param content String content given by user."},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"     * @param by_str Deadline date given by user, parsed into a Date object with the format dd/MM/yyyy HH:mm."},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"    public Deadline(String content , String by_str) {"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"        super(content);"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"        DateFormat sourceFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"            Date by \u003d sourceFormat.parse(by_str);"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"            this.by \u003d by;"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"        } catch (ParseException e) {"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"            System.out.println(\"Date and Time is not in correct format DD/MM/YYYY HH:MM\");"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"     *Edits the date and time of the Deadline task by cloning the old Deadline task."},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"     * @param newDate New date given by user."},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"     * @return A clone of the old Deadline task with the new date and time change."},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"    protected Deadline editDate (String newDate) {"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"        String content \u003d this.content;"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"        boolean doneStatus \u003d this.done;"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"        Deadline newDeadlineTask \u003d new Deadline(content , newDate);"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"        newDeadlineTask.done \u003d doneStatus;"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"        return newDeadlineTask;"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"     *Edits the content of the Deadline task by cloning the old Deadline task."},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"     * @param newContent New content given by user."},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"     * @return A clone of the old Deadline task with the new content change."},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"    public Deadline editContent (String newContent) {"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        Deadline newTask \u003d new Deadline(newContent , \"0/0/0 00:00\");"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"        newTask.by \u003d this.by;"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"        newTask.done \u003d this.done;"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"        return newTask;"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"     * toString() of Deadline Class."},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"     * @return toString() representation of a Deadline object with its done status, content and date."},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"        DateFormat sourceFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"        String strDate \u003d sourceFormat.format(this.by);"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"        if (!this.done) {"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"            return \"D | 0 | \" + super.toString() + \" | \" + strDate;"},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"            return \"D | 1 | \" + super.toString() + \" | \" + strDate;"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":80}},{"path":"src/main/java/ip/src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":61}},{"path":"src/main/java/ip/src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":" * Returns a Duke bot that stores the tasks given by the user."},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"    /** Tasks stored in this task list object */"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    TaskList list;"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    public Duke() {"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"        this.list \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"     *Sends a greeting to the user."},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation of the greeting."},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"    public String greet() {"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"Hello! I\u0027m Duke! :) \" + \"\\n\";"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"What can I do for you?\";"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"     * Exits the conversion with the bot."},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"     * Initiates the saving of the new tasklist to the file at the relative filepath (attribute of storage)."},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"     * @param storage Storage object used to save final data to the data file."},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"     * @return A string saying bye to the user."},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"     * @throws DukeException"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"    public String bye(Storage storage) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"            storage.updateFile();"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"            return \"Bye! See you again\";"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"            throw new DukeException(\"Can\u0027t save to file!\");"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"     * Echos the user input."},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"     * @param input User input given."},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"    public void echo(String input) {"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"        System.out.println(input);"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"     * Adds the given task to the Duke bot list, informs the user and prints the number of tasks in the bot list."},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"     * @param task Task object created from user input."},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation that informs the user of the task added and the number of tasks in the tasklist."},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"    public String addToList(Task task) {"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"        this.list.addTask(task);"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"Got it. I\u0027ve added this task: \" + \"\\n\";"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"    \" + task + \"\\n\";"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"Now you have \" + String.valueOf(this.list.size()) + \" tasks in the list.\";"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"     * Adds the given task to the Duke bot list quietly."},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"     * @param task Task object created from user input."},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"    public void addToBot(Task task) {"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":"        this.list.addTask(task);"},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"     *Prints the bot\u0027s tasklist."},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation of the bot\u0027s current tasklist."},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"    public String printList() {"},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"        if (this.list.isEmpty()) {"},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"            output +\u003d \"There are no tasks!\";"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"        } else {"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"            output +\u003d this.list.printTasks();"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"     * Marks a task specified in the bot list as done."},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":"     * @param id The position ,1-th based, of the task to be marked done in the bot list."},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation to inform the user of the task marked done."},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":"    public String markTaskAsDone(int id) {"},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"        Task task \u003d this.list.getTask(id-1);"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"        task.markDone();"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"Nice! I\u0027ve marked this task as done: \\n\";"},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"  [X] \"+ task.content;"},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"     * Deletes a task specified in the bot list."},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"     * @param id The position ,1-th based, of the task to be marked done in the bot list."},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"     * @return  A string representation to inform the user of the deletion of the specified task."},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"    public String deleteTask(int id) {"},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":"        Task task \u003d this.list.getTask(id-1);"},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"        this.list.remove(id-1);"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"Noted. I\u0027ve removed this task: \\n\";"},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"    \" + task + \"\\n\";"},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"Now you have \" + String.valueOf(this.list.size()) + \" tasks in the list.\";"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":"     * Prints all the tasks with content that contain the keyword."},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":"     * @param keyword The keyword given by the user."},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation of all the matching tasks."},{"lineNumber":132,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"chanellNg"},"content":"    public String findMatchingTasks(String keyword) {"},{"lineNumber":134,"author":{"gitId":"chanellNg"},"content":"        TaskList matchingTasks \u003d this.list.findTasks(keyword);"},{"lineNumber":135,"author":{"gitId":"chanellNg"},"content":"        return matchingTasks.printMatchingTasks();"},{"lineNumber":136,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":138,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"chanellNg"},"content":"     * Retrieves a task from the bot\u0027s TaskList at the specified index."},{"lineNumber":140,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"chanellNg"},"content":"     * @param id The specified index of the task in the tasklist to be retrieved."},{"lineNumber":142,"author":{"gitId":"chanellNg"},"content":"     * @return The task at the specified index."},{"lineNumber":143,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"chanellNg"},"content":"    public Task getTask (int id) {"},{"lineNumber":145,"author":{"gitId":"chanellNg"},"content":"        return this.list.getTask(id);"},{"lineNumber":146,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":148,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"chanellNg"},"content":"     *Updates the old task with the new task with the edited task details."},{"lineNumber":150,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"chanellNg"},"content":"     * @param newTask The new task with the new edited task details."},{"lineNumber":152,"author":{"gitId":"chanellNg"},"content":"     * @param id The index of the old task to be updated with the new task."},{"lineNumber":153,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation of the new edited tasklist."},{"lineNumber":154,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"chanellNg"},"content":"    public String editTask(Task newTask , int id) {"},{"lineNumber":156,"author":{"gitId":"chanellNg"},"content":"        this.list.editTask(newTask , id-1);"},{"lineNumber":157,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"Task has been edited. \\n\";"},{"lineNumber":158,"author":{"gitId":"chanellNg"},"content":"        output +\u003d this.list.printEditedTasks();"},{"lineNumber":159,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":160,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":164,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":165,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":166,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":167,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chanellNg":160,"-":10}},{"path":"src/main/java/ip/src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":" * Customized Exception Class for Duke."},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"    public DukeException(String message) {"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        return this.getMessage();"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":16}},{"path":"src/main/java/ip/src/main/java/EditType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":" * Edit enum class shows the different types of edit commands available for the bot."},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"public enum EditType {"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"    EDIT_CONTENT,"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"    EDIT_DATETIME"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":9}},{"path":"src/main/java/ip/src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import java.text.ParseException;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.text.DateFormat;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":" * Event is a type of Task with attributes String content and a Date stored as a Date object."},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    protected Date at;"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"     * Constructor for Event Class."},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"     * @param content String content given by user."},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"     * @param atStr Event date given by user, parsed into a Date object with the format dd/MM/yyyy HH:mm."},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"    public Event(String content , String atStr) {"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"        super(content);"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"        DateFormat sourceFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"            Date at \u003d sourceFormat.parse(atStr);"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"            this.at \u003d at;"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"        } catch (ParseException e) {"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"            System.out.println(\"Date and Time is not in correct format DD/MM/YYYY HH:MM\");"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"     *Edits the date and time of the Event task by cloning the old Event task."},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"     * @param newDate New date given by user."},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"     * @return A clone of the old Event task with the new date and time change."},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"    public Event editDate (String newDate) {"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"        String content \u003d this.content;"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"        boolean doneStatus \u003d this.done;"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"        Event newEventTask \u003d new Event (content , newDate);"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"        newEventTask.done \u003d doneStatus;"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"        return newEventTask;"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"     *Edits the content of the Event task by cloning the old Event task."},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"     * @param newContent New content given by user."},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"     * @return A clone of the old Event task with the new content change."},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"    public Event editContent (String newContent) {"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"        Event newTask \u003d new Event(newContent , \"0/0/0 00:00\");"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"        newTask.at \u003d this.at;"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"        newTask.done \u003d this.done;"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        return newTask;"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"     * toString() of Event Class."},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"     * @return toString() representation of a Event object with its done status, content and date."},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"        DateFormat sourceFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"        String strDate \u003d sourceFormat.format(this.at);"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"        if (!this.done) {"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":"            return \"E | 0 | \" + super.toString() + \" | \" + strDate;"},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"            return \"E | 1 | \" + super.toString() + \" | \" + strDate;"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":75}},{"path":"src/main/java/ip/src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":12}},{"path":"src/main/java/ip/src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.text.TextAlignment;"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":" * A GUI for Duke using FXML."},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"public class Main extends Application {"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"    public void start(Stage stage) {"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"        Storage storage \u003d new Storage(\"data/duke.txt\" , duke);"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"            File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"            f.getParentFile().mkdirs();"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"            if (!f.createNewFile()) {"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"                storage.createBot(\"data/duke.txt\" , duke);"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"            stage.setScene(scene);"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"            stage.show();"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"            String greet \u003d duke.greet();"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"            Label label \u003d new Label(greet);"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"            stage.setTitle(greet);"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"            e.printStackTrace();"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":50}},{"path":"src/main/java/ip/src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.DialogBox;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Duke;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Ui;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/MaskedPikachu.png\"));"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/MaskedSquirtle.png\"));"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"        duke \u003d d;"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"    private void handleUserInput() {"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"        Ui ui \u003d new Ui(duke);"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"        String response \u003d ui.handleUserInput(input);"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":55}},{"path":"src/main/java/ip/src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.util.Locale;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":" * Parser is a class that parsers user input to retrieve user commands, information to create Task objects etc."},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    //static field to standardize the parsing for Edit commands."},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    private static final String EDIT_HEADER \u003d \"EDIT_\";"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"    Parser() {"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     * Retrieves the command entered by the user."},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"     * @param input Input entered by user."},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"     * @return Returns the first word that represents the command given by the user."},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"    public Command getCommand(String input) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"        String commandType \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"            commandType \u003d \"bye\";"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"        } else if (input.equals(\"list\")) {"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"            commandType \u003d \"list\";"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"            assert input.length() \u003e 1;"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"            commandType \u003d input.split(\" \")[0];"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"            Command command \u003d Command.valueOf(commandType.toUpperCase(Locale.ENGLISH));"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"            return command;"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"            throw new DukeException(\"OOPS! I don\u0027t know what this means! :(\");"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"     * Gets the specific edit type from the edit command given."},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"     * @param input The type of edit stated by the user."},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"     * @return EditType command."},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"     * @throws DukeException"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"    protected EditType getEditType (String input) throws DukeException {"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"            String editType \u003d input.split(\" \")[2];"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"            editType \u003d EDIT_HEADER + editType;"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"            EditType edit \u003d EditType.valueOf(editType.toUpperCase(Locale.ENGLISH));"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"            return edit;"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"        } catch (Exception e) {"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"            throw new DukeException(\"OOPS! Invalid edit type! :( \\n Edit format should be: edit {index} {type of edit} {edit details}\");"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"     * Gets the edit details from the edit command given."},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"     * @param input The edit details provided by the users."},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"     * @return Edit details, either new content or new date and time."},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"     * @throws DukeException"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"    protected String getEditDetails (String input) throws DukeException {"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"            input \u003d input.split(\" \", 4)[3];"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":"            return input;"},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"            throw new DukeException((\"OOPS!!! The edit details cannot be empty. \\n Edit format should be: edit {index} {type of edit} {edit details}\"));"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"     * Retrieves the information needed from the user input for a ToDo object."},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"     * @param input User input."},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"     * @return String content needed to create a ToDo Object."},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":"    public String toDoTask(String input) throws DukeException {"},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"            input \u003d input.split(\" \", 2)[1];"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"            return input;"},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"            throw new DukeException((\"OOPS!!! The description cannot be empty.\"));"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":"     * Retrieves the information needed from the user input for a Event object."},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"     * @param input User input."},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"     * @return String content needed to create a Event Object."},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"    public String eventTaskContent(String input) {"},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":"        String content \u003d input.split(\"/at\")[0];"},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"        return content;"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"     * Retrieves the information needed from the user input for a Event object."},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"     * @param input User input."},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":"     * @return String date needed to create a Event Object."},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"    public String eventTaskAt(String input) {"},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"        String at \u003d input.split(\"/at\")[1];"},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"        return at;"},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"     * Retrieves the information needed from the user input for a Deadline object."},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"     * @param input User input."},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":"     * @return String content needed to create a Deadline Object."},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":"    public String deadlineTaskContent(String input) {"},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":"        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":"        String content \u003d input.split(\"/by\")[0];"},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":"        return content;"},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":"     * Retrieves the information needed from the user input for a Deadline object."},{"lineNumber":132,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"chanellNg"},"content":"     * @param input User input."},{"lineNumber":134,"author":{"gitId":"chanellNg"},"content":"     * @return String date needed to create a Deadline Object."},{"lineNumber":135,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"chanellNg"},"content":"    public String deadlineTaskBy(String input) {"},{"lineNumber":137,"author":{"gitId":"chanellNg"},"content":"        input \u003d input.split(\" \", 2)[1];"},{"lineNumber":138,"author":{"gitId":"chanellNg"},"content":"        String by \u003d input.split(\"/by\")[1];"},{"lineNumber":139,"author":{"gitId":"chanellNg"},"content":"        return by;"},{"lineNumber":140,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":142,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"chanellNg"},"content":"     * Gives the ID (position) of the task to be manipulated in the TaskList."},{"lineNumber":144,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"chanellNg"},"content":"     * @param input User input."},{"lineNumber":146,"author":{"gitId":"chanellNg"},"content":"     * @return Integer ID that represents the position (1-th based) of the task in the TaskList."},{"lineNumber":147,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"chanellNg"},"content":"    public int getId(String input) throws DukeException {"},{"lineNumber":149,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"chanellNg"},"content":"            int id \u003d Integer.valueOf(input.split(\" \")[1]);"},{"lineNumber":151,"author":{"gitId":"chanellNg"},"content":"            return id;"},{"lineNumber":152,"author":{"gitId":"chanellNg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":153,"author":{"gitId":"chanellNg"},"content":"            throw new DukeException(\"Invalid input! Please enter in the correct format with the task index!\");"},{"lineNumber":154,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":156,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":158,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"chanellNg"},"content":"     * Retrieves the keyword from the user input to for the find task method."},{"lineNumber":160,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":161,"author":{"gitId":"chanellNg"},"content":"     * @param input User input."},{"lineNumber":162,"author":{"gitId":"chanellNg"},"content":"     * @return The keyword used to find the matching tasks in the Task list."},{"lineNumber":163,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"chanellNg"},"content":"    public String getKeyword(String input) {"},{"lineNumber":165,"author":{"gitId":"chanellNg"},"content":"        String keyword \u003d input.split(\" \", 2)[1];"},{"lineNumber":166,"author":{"gitId":"chanellNg"},"content":"        return keyword;"},{"lineNumber":167,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":168}},{"path":"src/main/java/ip/src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":" * Storage class that deals with loading and updating the tasks in the given file."},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    protected String filePath;"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    protected Duke bot;"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"    Storage (String filePath, Duke bot) {"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"        this.bot \u003d bot;"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"    private Task loadToDoTask (String[] taskDataArr) {"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"        String details \u003d taskDataArr[2];"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new ToDo(details);"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"        bot.addToBot(newTask);"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"        return newTask;"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"    private Task loadEventTask (String[] taskDataArr) {"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"        String content \u003d taskDataArr[2];"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"        String at \u003d taskDataArr[3];"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new Event(content, at);"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"        bot.addToBot(newTask);"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"        return newTask;"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"    private Task loadDeadlineTask (String[] taskDataArr) {"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"        String content \u003d taskDataArr[2];"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"        String by \u003d taskDataArr[3];"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new Deadline(content, by);"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"        bot.addToBot(newTask);"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"        return newTask;"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"     * Updates the Duke bot with the tasks by loading the tasks in the file."},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"     * Task is in the format {type} | {doneStatus} | {details}."},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"     * @param taskData The task from the file."},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"     * @throws FileNotFoundException"},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"    public void loadTasks(String taskData) throws FileNotFoundException {"},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"        // create a File for the given file path"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"        File f \u003d new File(this.filePath);"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"        // create a Scanner using the File as the source"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        String[] taskDataArr \u003d taskData.split(\" \\\\| \");"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"        String type \u003d taskDataArr[0];"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"        String doneStatus \u003d taskDataArr[1];"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new Task(\"\");"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"        if (newTask.isToDoTask(type)) {"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"            newTask \u003d loadToDoTask(taskDataArr);"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"        } else if (newTask.isEventTask(type)) {"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"            newTask \u003d loadEventTask(taskDataArr);"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"            assert type.equals(\"D\");"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"            newTask \u003d loadDeadlineTask(taskDataArr);"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"        if (newTask.isDone(doneStatus)) {"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"            newTask.markDone();"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":"     * Updates the Duke bot with the tasks stored in the file by calling the loadTask method."},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"     * @param filePath The file with the tasks."},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"     * @param bot The duke bot."},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"     * @throws FileNotFoundException"},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"    public void createBot(String filePath, Duke bot) throws FileNotFoundException {"},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":"        // create a File for the given file path"},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"        // create a Scanner using the File as the source"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"        Storage storage \u003d new Storage(filePath, bot);"},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"        while (s.hasNext()) {"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"            storage.loadTasks(s.nextLine());"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"     * Updates the file at the specific relative filepath with the bot\u0027s final tasklist."},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"     * @throws IOException"},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"    public void updateFile() throws IOException {"},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath);"},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":"        for (Task element:this.bot.list.list) {"},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"            fw.write(element.toString() + \"\\n\");"},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"        fw.close();"},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":107}},{"path":"src/main/java/ip/src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":" * Task class that stores Task details and Task status."},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"    //int id;"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    protected String content;"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"    protected boolean done \u003d false;"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    public Task(String content) {"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        //this.id \u003d id;"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        this.content \u003d content;"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"     * Updates the Task Status to completed."},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"    public void markDone() {"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"        this.done \u003d true;"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"    public boolean isDone(String doneStatus) {"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"        return doneStatus.equals(\" 1 \");"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"     * Checks if Task content has matching keyword."},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"     * @return Returns True if task content has keyword."},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"    public boolean isMatch(String keyword) {"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"        return this.content.contains(keyword);"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"    protected boolean isToDoTask(String inputType) {"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"        return inputType.equals(\"T\");"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"    protected boolean isEventTask(String inputType) {"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"        return inputType.equals(\"E\");"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"     *Dummy method for editing the content of the old task."},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":"     * Exact implementations in each child class, utilizing Polymorphism when editContent is called."},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"     * @param newContent New content given by user."},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"     * @return A clone of the old task with the new content change."},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"    protected Task editContent (String newContent) {"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"        Task newTask \u003d new Task(newContent);"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"        newTask.done \u003d this.done;"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        return newTask;"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"     * Dummy method for editDate in Task."},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"     * Exact implementations in each child class, utilizing Polymorphism when editDate is called."},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"     * @param newDate New date given by user."},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"    protected Task editDate (String newDate) {"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"        return this.content;"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"}"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":78}},{"path":"src/main/java/ip/src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":" * TaskList stores and manipulate the tasks in a List."},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    protected List\u003cTask\u003e list;"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    TaskList() {"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"     * Adds a Task to the list."},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     * @param task New Task to be added to list."},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"    public void addTask(Task task) {"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"        this.list.add(task);"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"     * Checks if list is empty."},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"     * @return Boolean to indicate if list is empty."},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"    public boolean isEmpty() {"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"        return this.list.isEmpty();"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"     * Prints the tasks in the bot\u0027s tasklist."},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation of the list of the tasks in the tasklist."},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"    public String printTasks() {"},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"        int counter \u003d 1;"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"        for (Task element : this.list) {"},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"            output +\u003d String.valueOf(counter) + \". \" + element + \"\\n\";"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"            counter++;"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"Now you have \" + String.valueOf(this.list.size()) + \" tasks in the list.\";"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"     * Prints the tasks that contain the keyword/s from the bot\u0027s tasklist."},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation of the list of matching tasks."},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"    public String printMatchingTasks() {"},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"        int counter \u003d 1;"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"        for (Task element : this.list) {"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"            output +\u003d String.valueOf(counter) + \". \" + element + \"\\n\";"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"            counter++;"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"        output +\u003d \"You have \" + String.valueOf(this.list.size()) + \" matching tasks from the list!\";"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"     * Prints the edited bot\u0027s tasklist."},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"     * @return A string representation of the newly edited tasks in the tasklist."},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":"    public String printEditedTasks() {"},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"        int counter \u003d 1;"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"        for (Task element : this.list) {"},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":"            output +\u003d String.valueOf(counter) + \". \" + element + \"\\n\";"},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"            counter++;"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"     * Gets the task at a specified position in the list."},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":"     * @param id The position of the task to be retrieved in the list."},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"     * @return A task in the list."},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"    public Task getTask(int id) {"},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"        return this.list.get(id);"},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"     * Removes a task at a specified position in the list."},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"     * @param id The position of the task to be removed from the list."},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"    public void remove(int id) {"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":"        this.list.remove(id);"},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"     * Returns size of the Task list."},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"     * @return The number of tasks in the list."},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"    public int size() {"},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"        return this.list.size();"},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":"     * Gets the matching tasks that contain the keyword/s."},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"     * @param keyword Keyword/s given by user."},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"     * @return A tasklist of tasks that contain the keyword/s."},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"    public TaskList findTasks(String keyword) {"},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":"        TaskList taskListWithMatches \u003d new TaskList();"},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":"        for (Task task: this.list) {"},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"            if (task.isMatch(keyword)) {"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":"                taskListWithMatches.addTask(task);"},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"        return taskListWithMatches;"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":"    protected void editTask(Task newTask , int id) {"},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":"        this.list.set(id , newTask);"},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":129}},{"path":"src/main/java/ip/src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":" * ToDo class is a type of Task that has attribute String content."},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    public ToDo(String content) {"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"        super(content);"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"     *Edits the content of the ToDo task by cloning the old ToDo task."},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"     * @param newContent New content given by user."},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"     * @return A clone of the old ToDo task with the new content change."},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"    public ToDo editContent (String newContent) {"},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"        ToDo newTask \u003d new ToDo(newContent);"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"        newTask.done \u003d this.done;"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"        return newTask;"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"     * toString() of ToDo Class."},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"     * @return toString() representation of a ToDo object with its done status and content."},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"        if (!this.done) {"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"            return \"T | 0 | \" + super.toString();"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":"            return \"T | 1 | \" + super.toString();"},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":39}},{"path":"src/main/java/ip/src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"package ip.src.main.java;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":" * Ui class deals with user interactions."},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":" *"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":" */"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"    protected Duke bot;"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    public Ui(Duke bot) {"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        this.bot \u003d bot;"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"     * Deals with the done command by the user by telling the bot to mark a specified task as done."},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"     * @param id The specified position of the task which status is to be updated as done in the Task List."},{"lineNumber":21,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chanellNg"},"content":"    public String doneCommand(int id) {"},{"lineNumber":23,"author":{"gitId":"chanellNg"},"content":"        return this.bot.markTaskAsDone(id);"},{"lineNumber":24,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":26,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"chanellNg"},"content":"     * Deals with the ToDo command. Creates a ToDo task from the input"},{"lineNumber":28,"author":{"gitId":"chanellNg"},"content":"     * and tells the bot to add the new task to its Task list."},{"lineNumber":29,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"chanellNg"},"content":"     * @param content Content of the ToDo object."},{"lineNumber":31,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chanellNg"},"content":"    private String toDoCommand(String content) {"},{"lineNumber":33,"author":{"gitId":"chanellNg"},"content":"        ToDo newTask \u003d new ToDo(content);"},{"lineNumber":34,"author":{"gitId":"chanellNg"},"content":"        return this.bot.addToList(newTask);"},{"lineNumber":35,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":37,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"chanellNg"},"content":"     * Deals with the Event command."},{"lineNumber":39,"author":{"gitId":"chanellNg"},"content":"     * Creates a Event task from the input and tells the bot to add the new task to its Task list."},{"lineNumber":40,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"chanellNg"},"content":"     * @param content Content of the Event object."},{"lineNumber":42,"author":{"gitId":"chanellNg"},"content":"     * @param at Date of the Event object."},{"lineNumber":43,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chanellNg"},"content":"    private String eventCommand(String content, String at) {"},{"lineNumber":45,"author":{"gitId":"chanellNg"},"content":"        Event newTask \u003d new Event(content, at);"},{"lineNumber":46,"author":{"gitId":"chanellNg"},"content":"        return this.bot.addToList(newTask);"},{"lineNumber":47,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":48,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":50,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"chanellNg"},"content":"     * Deals with the Deadline command."},{"lineNumber":52,"author":{"gitId":"chanellNg"},"content":"     * Creates a Deadline task from the input and tells the bot to add the new task to its Task list."},{"lineNumber":53,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"chanellNg"},"content":"     * @param content Content of the Event object."},{"lineNumber":55,"author":{"gitId":"chanellNg"},"content":"     * @param by Date of the Event object."},{"lineNumber":56,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"chanellNg"},"content":"    private String deadlineCommand(String content, String by) {"},{"lineNumber":58,"author":{"gitId":"chanellNg"},"content":"        Deadline newTask \u003d new Deadline(content, by);"},{"lineNumber":59,"author":{"gitId":"chanellNg"},"content":"        return this.bot.addToList(newTask);"},{"lineNumber":60,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":62,"author":{"gitId":"chanellNg"},"content":"    private String editCommand(String editDetails , int id , EditType editType) throws DukeException {"},{"lineNumber":63,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"chanellNg"},"content":"            Task oldTask \u003d this.bot.getTask(id-1);"},{"lineNumber":65,"author":{"gitId":"chanellNg"},"content":"            Task newTask \u003d new Task(\"\");"},{"lineNumber":66,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":67,"author":{"gitId":"chanellNg"},"content":"            switch (editType) {"},{"lineNumber":68,"author":{"gitId":"chanellNg"},"content":"                case EDIT_DATETIME:"},{"lineNumber":69,"author":{"gitId":"chanellNg"},"content":"                    newTask \u003d oldTask.editDate(editDetails);"},{"lineNumber":70,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":72,"author":{"gitId":"chanellNg"},"content":"                case EDIT_CONTENT:"},{"lineNumber":73,"author":{"gitId":"chanellNg"},"content":"                    newTask \u003d oldTask.editContent(editDetails);"},{"lineNumber":74,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":75,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":76,"author":{"gitId":"chanellNg"},"content":"                default:"},{"lineNumber":77,"author":{"gitId":"chanellNg"},"content":"                    assert false : editType;"},{"lineNumber":78,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"chanellNg"},"content":"            return this.bot.editTask(newTask , id);"},{"lineNumber":80,"author":{"gitId":"chanellNg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":81,"author":{"gitId":"chanellNg"},"content":"            throw new DukeException(\"Index is out of bounds! \\n Please enter a valid task number!\");"},{"lineNumber":82,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":85,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"chanellNg"},"content":"     * Deals with the Delete command. Tells the bot to remove a task from its Task list."},{"lineNumber":87,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"chanellNg"},"content":"     * @param id The specified position of the task to be removed from the bot Task List."},{"lineNumber":89,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"chanellNg"},"content":"    public String deleteCommand(int id) throws DukeException {"},{"lineNumber":91,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"chanellNg"},"content":"            return this.bot.deleteTask(id-1);"},{"lineNumber":93,"author":{"gitId":"chanellNg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":94,"author":{"gitId":"chanellNg"},"content":"            throw new DukeException(\"Index is out of bounds! \\n Please enter a valid task number!\");"},{"lineNumber":95,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":98,"author":{"gitId":"chanellNg"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"chanellNg"},"content":"     * Handles user input for the different commands given by the user."},{"lineNumber":100,"author":{"gitId":"chanellNg"},"content":"     * Gets the result string to respond to the user."},{"lineNumber":101,"author":{"gitId":"chanellNg"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"chanellNg"},"content":"     * @param input User input."},{"lineNumber":103,"author":{"gitId":"chanellNg"},"content":"     * @return Result string."},{"lineNumber":104,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"chanellNg"},"content":"    public String handleUserInput(String input) {"},{"lineNumber":106,"author":{"gitId":"chanellNg"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":107,"author":{"gitId":"chanellNg"},"content":"        String output \u003d \"\";"},{"lineNumber":108,"author":{"gitId":"chanellNg"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"chanellNg"},"content":"            Command command \u003d parser.getCommand(input);"},{"lineNumber":110,"author":{"gitId":"chanellNg"},"content":"            switch (command) {"},{"lineNumber":111,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":112,"author":{"gitId":"chanellNg"},"content":"                case BYE:"},{"lineNumber":113,"author":{"gitId":"chanellNg"},"content":"                    Storage storage \u003d new Storage(\"data/duke.txt\" , this.bot);"},{"lineNumber":114,"author":{"gitId":"chanellNg"},"content":"                    output \u003d this.bot.bye(storage);"},{"lineNumber":115,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":116,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":117,"author":{"gitId":"chanellNg"},"content":"                case LIST:"},{"lineNumber":118,"author":{"gitId":"chanellNg"},"content":"                    output \u003d this.bot.printList();"},{"lineNumber":119,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":120,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":121,"author":{"gitId":"chanellNg"},"content":"                case DONE:"},{"lineNumber":122,"author":{"gitId":"chanellNg"},"content":"                    int id \u003d parser.getId(input);"},{"lineNumber":123,"author":{"gitId":"chanellNg"},"content":"                    output \u003d doneCommand(id);"},{"lineNumber":124,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":125,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":126,"author":{"gitId":"chanellNg"},"content":"                case FIND:"},{"lineNumber":127,"author":{"gitId":"chanellNg"},"content":"                    String keyword \u003d parser.getKeyword(input);"},{"lineNumber":128,"author":{"gitId":"chanellNg"},"content":"                    output \u003d this.bot.findMatchingTasks(keyword);"},{"lineNumber":129,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":130,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":131,"author":{"gitId":"chanellNg"},"content":"                case TODO:"},{"lineNumber":132,"author":{"gitId":"chanellNg"},"content":"                    input \u003d parser.toDoTask(input);"},{"lineNumber":133,"author":{"gitId":"chanellNg"},"content":"                    output \u003d toDoCommand(input);"},{"lineNumber":134,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":135,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":136,"author":{"gitId":"chanellNg"},"content":"                case EVENT:"},{"lineNumber":137,"author":{"gitId":"chanellNg"},"content":"                    String content \u003d parser.eventTaskContent(input);"},{"lineNumber":138,"author":{"gitId":"chanellNg"},"content":"                    String at \u003d parser.eventTaskAt(input);"},{"lineNumber":139,"author":{"gitId":"chanellNg"},"content":"                    output \u003d eventCommand(content, at);"},{"lineNumber":140,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":141,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":142,"author":{"gitId":"chanellNg"},"content":"                case DEADLINE:"},{"lineNumber":143,"author":{"gitId":"chanellNg"},"content":"                    content \u003d parser.deadlineTaskContent(input);"},{"lineNumber":144,"author":{"gitId":"chanellNg"},"content":"                    String by \u003d parser.deadlineTaskBy(input);"},{"lineNumber":145,"author":{"gitId":"chanellNg"},"content":"                    output \u003d deadlineCommand(content, by);"},{"lineNumber":146,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":147,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":148,"author":{"gitId":"chanellNg"},"content":"                case EDIT:"},{"lineNumber":149,"author":{"gitId":"chanellNg"},"content":"                    id \u003d parser.getId(input);"},{"lineNumber":150,"author":{"gitId":"chanellNg"},"content":"                    EditType editType \u003d parser.getEditType(input);"},{"lineNumber":151,"author":{"gitId":"chanellNg"},"content":"                    String editDetails \u003d parser.getEditDetails(input);"},{"lineNumber":152,"author":{"gitId":"chanellNg"},"content":"                    output \u003d editCommand(editDetails , id , editType);"},{"lineNumber":153,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":154,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":155,"author":{"gitId":"chanellNg"},"content":"                case DELETE:"},{"lineNumber":156,"author":{"gitId":"chanellNg"},"content":"                    id \u003d parser.getId(input);"},{"lineNumber":157,"author":{"gitId":"chanellNg"},"content":"                    output \u003d deleteCommand(id);"},{"lineNumber":158,"author":{"gitId":"chanellNg"},"content":"                    break;"},{"lineNumber":159,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":160,"author":{"gitId":"chanellNg"},"content":"                default:"},{"lineNumber":161,"author":{"gitId":"chanellNg"},"content":"                    assert false : command;"},{"lineNumber":162,"author":{"gitId":"chanellNg"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":164,"author":{"gitId":"chanellNg"},"content":"        } catch (DukeException e1) {"},{"lineNumber":165,"author":{"gitId":"chanellNg"},"content":"            output \u003d e1.getMessage();"},{"lineNumber":166,"author":{"gitId":"chanellNg"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"chanellNg"},"content":"        return output;"},{"lineNumber":168,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":170,"author":{"gitId":"chanellNg"},"content":"}"},{"lineNumber":171,"author":{"gitId":"chanellNg"},"content":""}],"authorContributionMap":{"chanellNg":171}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"chanellNg":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: lavenderblush;\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ip.src.main.java.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: lavender;\" /\u003e"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"chanellNg":19}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Deadline;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    /*"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"      Tests the toString() method of the Deadline class to see if deadline object is represented as expected."},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    public void deadlineToStringTest() {"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        Deadline deadline \u003d new Deadline(\"Test\" , \"12/2/2019 18:00\");"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        String deadlineToString \u003d deadline.toString();"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"        String expectedString \u003d \"D | 0 | \" + \"Test\" + \" | \" + \"12/02/2019 18:00\";"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"        assertEquals(expectedString , deadlineToString);"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":19}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Event;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":"    /*"},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"      Tests the toString() method of the Event class to see if deadline object is represented as expected."},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"    public void eventToStringTest() {"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"        Event event \u003d new Event(\"Test\" , \"12/2/2019 18:00\");"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        String eventToString \u003d event.toString();"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"        String expectedString \u003d \"E | 0 | \" + \"Test\" + \" | \" + \"12/02/2019 18:00\";"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"        assertEquals(expectedString , eventToString);"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":19}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chanellNg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":3,"author":{"gitId":"chanellNg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":5,"author":{"gitId":"chanellNg"},"content":"import ip.src.main.java.Task;"},{"lineNumber":6,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":7,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":8,"author":{"gitId":"chanellNg"},"content":"public class TaskTest {"},{"lineNumber":9,"author":{"gitId":"chanellNg"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":11,"author":{"gitId":"chanellNg"},"content":"    /*"},{"lineNumber":12,"author":{"gitId":"chanellNg"},"content":"      Tests if the markDone() method in the Task class behaves as expected."},{"lineNumber":13,"author":{"gitId":"chanellNg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"chanellNg"},"content":"    public void taskDoneTest() {"},{"lineNumber":15,"author":{"gitId":"chanellNg"},"content":"        Task task \u003d new Task(\"Test\");"},{"lineNumber":16,"author":{"gitId":"chanellNg"},"content":"        task.markDone();"},{"lineNumber":17,"author":{"gitId":"chanellNg"},"content":"        assertEquals(true , task.done);"},{"lineNumber":18,"author":{"gitId":"chanellNg"},"content":""},{"lineNumber":19,"author":{"gitId":"chanellNg"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"chanellNg"},"content":"}"}],"authorContributionMap":{"chanellNg":20}}]
