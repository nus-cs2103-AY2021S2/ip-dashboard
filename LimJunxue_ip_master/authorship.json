[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"# DukeObjects.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"1. After the importing is complete, locate the `src/main/java/DukeObjects.Duke.java` file, right-click it, and choose `Run DukeObjects.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"LimJunxue":2,"-":24}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":" * Represents a task with a deadline specified in the \"by\" argument."},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":" * If deadline is parsable as a LocalDateTime or LocalDate, it will be stored in the variable byDateTime or byDate."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    protected String by;"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    protected LocalDateTime byDateTime;"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    protected LocalDate byDate;"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"     * Creates a task with a deadline specified in the \"by\" argument."},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"     * Tries to parse deadline in various DateTimeFormatter patterns and stores as LocalDateTime object in byDateTime,"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"     * or store as LocalDate object in byDate."},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"     * @param description Describes the task."},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"     * @param by          Specifies the deadline of this task."},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        this.by \u003d by;"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"            byDateTime \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd kkmm\"));"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"        } catch (DateTimeParseException ignored) {"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"            byDateTime \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"dd/MM/yyyy kkmm\"));"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"        } catch (DateTimeParseException ignored) {"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"            byDateTime \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy kkmm\"));"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"        } catch (DateTimeParseException ignored) {"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"            byDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"        } catch (DateTimeParseException ignored) {"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"            byDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"        } catch (DateTimeParseException ignored) {"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"        if (byDateTime \u003d\u003d null \u0026\u0026 byDate \u003d\u003d null) {"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"        } else if (byDateTime !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"            return \"[D]\" + super.toString() +"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"                    \" (by: \" + byDateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, ha\")) + \")\";"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"            return \"[D]\" + super.toString() +"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"                    \" (by: \" + byDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":63}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Encompasses the behavior of the Duke chat-bot. Duke allows users to create different types of tasks in a todo-list,"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" * and can do various functions on the list such as deleting and listing."},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" * The list is saved by the Storage object at \"./data/duke.txt\"."},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"        Ui ui \u003d Ui.startUi();"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"        Storage storage \u003d Storage.createStorage(\"./data/duke.txt\");"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"        if (storage !\u003d null) {"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"            storage.loadTaskList(tasks);"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"        Parser parser \u003d new Parser(tasks, storage);"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"        String command \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"        while (!command.equals(\"bye\")) {"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"            command \u003d ui.readCommand();"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"            Ui.printLine();"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"            parser.parseCommand(command);"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"            Ui.printLine();"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"        ui.close();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"LimJunxue":25,"-":3}},{"path":"src/main/java/duke/DukeActions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents actions that can be used on Duke."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" * Actions are the first word in user input commands."},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"public enum DukeActions {"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"    BYE(\"bye\"),"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    LIST(\"list\"),"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"    DONE(\"done\"),"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    DELETE(\"delete\"),"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    TODO(\"todo\"),"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    DEADLINE(\"deadline\"),"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    EVENT(\"event\");"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"     * The String form of each action."},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    public final String str;"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    DukeActions(String str) {"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"        this.str \u003d str;"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":24}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents unchecked exceptions specific to Duke."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"public class DukeException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"     * Creates a RuntimeException specific to Duke."},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"     * @param errorMessage Message when the exception is thrown."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"        super(errorMessage);"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":15}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents a task with a duration specified in the \"at\" argument."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"    protected String at;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"     * Creates a task with a duration specified in the \"at\" argument."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"     * @param description Describes the task."},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"     * @param at          Specifies the duration of this task."},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    public Event(String description, String at) {"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"        this.at \u003d at;"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":24}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Parser for Duke commands, with access to its task list, and storage."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"    private TaskList tasks;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"    private Storage storage;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"     * Creates a Parser object for the Duke instance."},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"     * @param tasks   The current TaskList used."},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"     * @param storage The current Storage used."},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    public Parser(TaskList tasks, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"        this.storage \u003d storage;"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"     * Passing the command to the relevant methods."},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"     * @param command A string of the command to be carried out."},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    public void parseCommand(String command) {"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        command \u003d command.trim();"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"            switch (command.split(\" \")[0]) {"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"            case \"bye\":"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"            case \"list\":"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"                Ui.printList(tasks);"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"            case \"done\":"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"                handleDone(command);"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"            case \"delete\":"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"                handleDelete(command);"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"            case \"todo\":"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"                // Fallthrough"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"            case \"deadline\":"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"                // Fallthrough"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"            case \"event\":"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"                Task newTask \u003d Task.dispatchTaskCreation(command);"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"                addTask(newTask);"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"                if (storage !\u003d null) {"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"                    storage.storeTask(command);"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"                }"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"            case \"find\":"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"                handleFind(command);"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"            default:"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"                Ui.throwIllegalArgumentEx(command);"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"        } catch (DukeException | IllegalArgumentException e) {"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"            Ui.printErr(e.getMessage());"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":"     * Finds and marks task specified in the command string after calling done."},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":"     * Handles exceptions that include index out of bounds and number format."},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":"     * Saves to storage."},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"     * @param command \"done {task number}\""},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":"    private void handleDone(String command) {"},{"lineNumber":73,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"            int taskNum \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"            Task currTask \u003d tasks.get(taskNum);"},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"            currTask.markDone();"},{"lineNumber":77,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(\"Swee chai. It\u0027s done.\\n\" + currTask);"},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"            if (storage !\u003d null) {"},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"                storage.updateTaskDone(taskNum);"},{"lineNumber":80,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"LimJunxue"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"            Ui.printErr(\"Please enter a number from 1 to \" + tasks.size() + \" after done!\");"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":"            if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"                Ui.printErr(\"Your list is empty!\");"},{"lineNumber":86,"author":{"gitId":"LimJunxue"},"content":"            } else {"},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"                Ui.printErr(\"Please enter a number from 1 to \" + tasks.size() + \" after done!\");"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"     * Deletes the task in the list. Updates storage."},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"     * Handles number format and index out of bounds exceptions."},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":"     * @param command \"delete {task number}\""},{"lineNumber":97,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"LimJunxue"},"content":"    private void handleDelete(String command) {"},{"lineNumber":99,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"LimJunxue"},"content":"            int taskNum \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"},{"lineNumber":101,"author":{"gitId":"LimJunxue"},"content":"            Task currTask \u003d tasks.remove(taskNum);"},{"lineNumber":102,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(\"See la. It\u0027s deleted.\\n\" + currTask +"},{"lineNumber":103,"author":{"gitId":"LimJunxue"},"content":"                    \"\\nYou currently have \" + tasks.size() + \" task(s) in the list.\");"},{"lineNumber":104,"author":{"gitId":"LimJunxue"},"content":"            if (storage !\u003d null) {"},{"lineNumber":105,"author":{"gitId":"LimJunxue"},"content":"                storage.deleteTask(taskNum);"},{"lineNumber":106,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"LimJunxue"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":108,"author":{"gitId":"LimJunxue"},"content":"            Ui.printErr(\"Please enter a number from 1 to \" + tasks.size() + \" after delete!\");"},{"lineNumber":109,"author":{"gitId":"LimJunxue"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":110,"author":{"gitId":"LimJunxue"},"content":"            if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":111,"author":{"gitId":"LimJunxue"},"content":"                Ui.printErr(\"Your list is empty!\");"},{"lineNumber":112,"author":{"gitId":"LimJunxue"},"content":"            } else {"},{"lineNumber":113,"author":{"gitId":"LimJunxue"},"content":"                Ui.printErr(\"Please enter a number from 1 to \" + tasks.size() + \" after delete!\");"},{"lineNumber":114,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":118,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"LimJunxue"},"content":"     * Adds specified task into task list and prints user feedback."},{"lineNumber":120,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"LimJunxue"},"content":"     * @param task Task to be added."},{"lineNumber":122,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"LimJunxue"},"content":"    private void addTask(Task task) {"},{"lineNumber":124,"author":{"gitId":"LimJunxue"},"content":"        tasks.add(task);"},{"lineNumber":125,"author":{"gitId":"LimJunxue"},"content":"        System.out.println(\"Your task has been added: \" + task +"},{"lineNumber":126,"author":{"gitId":"LimJunxue"},"content":"                \"\\nYou currently have \" + tasks.size() + \" task(s) in the list.\");"},{"lineNumber":127,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":129,"author":{"gitId":"LimJunxue"},"content":"    private void handleFind(String command) {"},{"lineNumber":130,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"LimJunxue"},"content":"            String query \u003d command.split(\" \", 2)[1].trim();"},{"lineNumber":132,"author":{"gitId":"LimJunxue"},"content":"            StringBuffer reply \u003d new StringBuffer();"},{"lineNumber":133,"author":{"gitId":"LimJunxue"},"content":"            boolean found \u003d false;"},{"lineNumber":134,"author":{"gitId":"LimJunxue"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":135,"author":{"gitId":"LimJunxue"},"content":"                if (tasks.get(i - 1).toString().contains(query)) {"},{"lineNumber":136,"author":{"gitId":"LimJunxue"},"content":"                    found \u003d true;"},{"lineNumber":137,"author":{"gitId":"LimJunxue"},"content":"                    reply.append(i + \".\" + tasks.get(i - 1) + \"\\n\");"},{"lineNumber":138,"author":{"gitId":"LimJunxue"},"content":"                }"},{"lineNumber":139,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"LimJunxue"},"content":"            if (found) {"},{"lineNumber":141,"author":{"gitId":"LimJunxue"},"content":"                reply.insert(0, \"Here are the matching tasks in your list:\\n\");"},{"lineNumber":142,"author":{"gitId":"LimJunxue"},"content":"                System.out.print(reply);"},{"lineNumber":143,"author":{"gitId":"LimJunxue"},"content":"            } else {"},{"lineNumber":144,"author":{"gitId":"LimJunxue"},"content":"                System.out.println(\"There are no tasks that match \\\"\" + query + \"\\\"!\");"},{"lineNumber":145,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"LimJunxue"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":147,"author":{"gitId":"LimJunxue"},"content":"            Ui.printErr(\"Please type in your query after find!\");"},{"lineNumber":148,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":150}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":" * Encompasses the abstraction of file operations for Duke as a Storage."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":" * Stores tasks as \"{isDone ? 1 : 0} {command to create task}\" in individual lines."},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    private final File file;"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    private Storage(File file) {"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"        this.file \u003d file;"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"     * Hard coded static factory creation of java.io.File at path \"./data/duke.txt\""},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"     * @param filePath Path of the file to store the info."},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"     * @return Storage object to handle all storage changes."},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    public static Storage createStorage(String filePath) {"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        // Hard coded check for valid directory"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"        if (!new File(\"./data\").exists()) {"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"            new File(\"./data\").mkdir();"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"            file.createNewFile();"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"            return new Storage(file);"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(\"Storage file cannot be created. List created will not be saved.\");"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"            return null;"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"     * Reads and creates the tasks from the file to store in the list. List will not change if file is not"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"     * found/created."},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"    public void loadTaskList(TaskList tasks) {"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"            Scanner reader \u003d new Scanner(file);"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"            while (reader.hasNextLine()) {"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"                boolean isDone \u003d reader.nextInt() \u003d\u003d 1;"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"                String command \u003d reader.nextLine();"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"                Task newTask \u003d Task.dispatchTaskCreation(command);"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"                if (isDone) {"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"                    newTask.markDone();"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"                tasks.add(newTask);"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"            reader.close();"},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"     * Updates task specified by the lineNumber according to the type of update."},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":"     * @param lineNumber Refers to the zero-indexed line of the task in the file."},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":"     * @throws IndexOutOfBoundsException if the taskNumber is out of range of the lines in the file."},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"    public void updateTaskDone(int lineNumber) throws IndexOutOfBoundsException {"},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":"            Scanner reader \u003d new Scanner(file);"},{"lineNumber":73,"author":{"gitId":"LimJunxue"},"content":"            StringBuffer buffer \u003d new StringBuffer();"},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"            int currLine \u003d 0;"},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"            while (reader.hasNextLine()) {"},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"                String line \u003d reader.nextLine();"},{"lineNumber":77,"author":{"gitId":"LimJunxue"},"content":"                if (currLine \u003d\u003d lineNumber) {"},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"                    line \u003d line.replaceFirst(\"0\", \"1\");"},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"LimJunxue"},"content":"                buffer.append(line + \"\\n\");"},{"lineNumber":81,"author":{"gitId":"LimJunxue"},"content":"                currLine++;"},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":"            reader.close();"},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"            FileWriter writer \u003d new FileWriter(file);"},{"lineNumber":86,"author":{"gitId":"LimJunxue"},"content":"            writer.append(buffer);"},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"            writer.flush();"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"            if (lineNumber \u003e\u003d currLine || lineNumber \u003c 0) {"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":97,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"LimJunxue"},"content":"     * Deletes the task on the line on lineNumber in this storage\u0027s file."},{"lineNumber":99,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"LimJunxue"},"content":"     * @param lineNumber Refers to the zero-indexed line of the task in the file."},{"lineNumber":101,"author":{"gitId":"LimJunxue"},"content":"     * @throws IndexOutOfBoundsException if the taskNumber is out of range of the lines in the file."},{"lineNumber":102,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"LimJunxue"},"content":"    public void deleteTask(int lineNumber) throws IndexOutOfBoundsException {"},{"lineNumber":104,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"LimJunxue"},"content":"            Scanner reader \u003d new Scanner(file);"},{"lineNumber":106,"author":{"gitId":"LimJunxue"},"content":"            StringBuffer buffer \u003d new StringBuffer();"},{"lineNumber":107,"author":{"gitId":"LimJunxue"},"content":"            int lineNum \u003d 0;"},{"lineNumber":108,"author":{"gitId":"LimJunxue"},"content":"            while (reader.hasNextLine()) {"},{"lineNumber":109,"author":{"gitId":"LimJunxue"},"content":"                String line \u003d reader.nextLine();"},{"lineNumber":110,"author":{"gitId":"LimJunxue"},"content":"                if (lineNum !\u003d lineNumber) {"},{"lineNumber":111,"author":{"gitId":"LimJunxue"},"content":"                    buffer.append(line + \"\\n\");"},{"lineNumber":112,"author":{"gitId":"LimJunxue"},"content":"                }"},{"lineNumber":113,"author":{"gitId":"LimJunxue"},"content":"                lineNum++;"},{"lineNumber":114,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"LimJunxue"},"content":"            reader.close();"},{"lineNumber":116,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":117,"author":{"gitId":"LimJunxue"},"content":"            FileWriter writer \u003d new FileWriter(file);"},{"lineNumber":118,"author":{"gitId":"LimJunxue"},"content":"            writer.append(buffer);"},{"lineNumber":119,"author":{"gitId":"LimJunxue"},"content":"            writer.flush();"},{"lineNumber":120,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":121,"author":{"gitId":"LimJunxue"},"content":"            if (lineNumber \u003e\u003d lineNum || lineNumber \u003c 0) {"},{"lineNumber":122,"author":{"gitId":"LimJunxue"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":123,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":125,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":126,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":129,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"LimJunxue"},"content":"     * Store the task to the back of this storage\u0027s file."},{"lineNumber":131,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"LimJunxue"},"content":"     * @param task Task to be added into the file."},{"lineNumber":133,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"LimJunxue"},"content":"    public void storeTask(String task) throws IndexOutOfBoundsException {"},{"lineNumber":135,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"LimJunxue"},"content":"            FileWriter writer \u003d new FileWriter(file, true);"},{"lineNumber":137,"author":{"gitId":"LimJunxue"},"content":"            writer.append(\"0 \" + task + \"\\n\");"},{"lineNumber":138,"author":{"gitId":"LimJunxue"},"content":"            writer.flush();"},{"lineNumber":139,"author":{"gitId":"LimJunxue"},"content":"            writer.close();"},{"lineNumber":140,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":141,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":142,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":144}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents a task listed in Duke and can be marked as done. Can statically create subclasses of Task, namely:"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" * Event, Deadline, ToDo"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"     * Creates a task with the specified description."},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"     * @param description The task\u0027s description."},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"     * Marks this task as done."},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"    public void markDone() {"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"        this.isDone \u003d true;"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"     * Passes the command to the relevant task creation methods, namely:"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"     * createEvent, createDeadline, createToDo"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"     * @param taskCommand String of command that describes the task to be created."},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if task creation is invalid."},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"    public static Task dispatchTaskCreation(String taskCommand) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"        Task newTask;"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"        taskCommand \u003d taskCommand.trim();"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"        switch (taskCommand.split(\" \")[0]) {"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"        case \"todo\":"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"            newTask \u003d createToDo(taskCommand);"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"        case \"deadline\":"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"            newTask \u003d createDeadline(taskCommand);"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"            break;"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"        case \"event\":"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"            newTask \u003d createEvent(taskCommand);"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"        default:"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"DukeObjects.Duke.Task cannot be created: \" + taskCommand);"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"        return newTask;"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"     * Creates ToDo Task from a command with todo."},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"     * @param command User input with the word todo."},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"     * @return Task created."},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no description of the task."},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"    private static Task createToDo(String command) throws DukeException {"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"        if (command.substring(4).trim().length() \u003d\u003d 0) {"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument describing task after \\\"todo\\\"\");"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"        return new ToDo(command.substring(5));"},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"     * Creates Task from a command with deadline."},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":"     * @param command User input with the word deadline."},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":"     * @return Task created."},{"lineNumber":73,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no description of the task."},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no deadline specified by \"/by\"."},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"    private static Task createDeadline(String command) throws DukeException {"},{"lineNumber":77,"author":{"gitId":"LimJunxue"},"content":"        String[] splitCommand \u003d command.substring(8).split(\"/by\");"},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"        if (splitCommand[0].trim().length() \u003d\u003d 0) {"},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument describing task after \\\"deadline\\\"\");"},{"lineNumber":80,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"LimJunxue"},"content":"        if (splitCommand.length \u003d\u003d 1 || splitCommand[1].trim().length() \u003d\u003d 0) {"},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument \\\"/by\\\" specifying deadline of task for \\\"deadline\\\"\");"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":"        return new Deadline(splitCommand[0].trim(), splitCommand[1].trim());"},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":"     * Creates Task from a command with event."},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":"     * @param command User input with the word event."},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":"     * @return Task created."},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no description of the task."},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no duration specified by \"/at\"."},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"    private static Task createEvent(String command) throws DukeException {"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":"        String[] splitCommand \u003d command.substring(5).split(\"/at\");"},{"lineNumber":97,"author":{"gitId":"LimJunxue"},"content":"        if (splitCommand[0].trim().length() \u003d\u003d 0) {"},{"lineNumber":98,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument describing task after \\\"event\\\"\");"},{"lineNumber":99,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"LimJunxue"},"content":"        if (splitCommand.length \u003d\u003d 1 || splitCommand[1].trim().length() \u003d\u003d 0) {"},{"lineNumber":101,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument \\\"/at\\\" specifying duration of task for \\\"event\\\"\");"},{"lineNumber":102,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"LimJunxue"},"content":"        return new Event(splitCommand[0].trim(), splitCommand[1].trim());"},{"lineNumber":104,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":106,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"LimJunxue"},"content":"    public String toString() {"},{"lineNumber":108,"author":{"gitId":"LimJunxue"},"content":"        String symbol \u003d \" \";"},{"lineNumber":109,"author":{"gitId":"LimJunxue"},"content":"        if (isDone) {"},{"lineNumber":110,"author":{"gitId":"LimJunxue"},"content":"            symbol \u003d \"X\";"},{"lineNumber":111,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"LimJunxue"},"content":"        return \"[\" + symbol + \"] \" + this.description;"},{"lineNumber":113,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":114}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" * Wraps an ArrayList as a TaskList meant for Duke."},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    public TaskList() {"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":14}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents a task without any date/time attached."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"     * Creates a task to be done, without any date/time attached."},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"     * @param description Describes the task."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    public ToDo(String description) {"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":20}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" * Encompasses interactions with the user using Scanner to get input and outputs to the default System.out."},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    private final Scanner scanner;"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    private Ui() {"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"     * Static factory creation of Ui."},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"     * @return DukeObjects.Duke.Ui object started."},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    public static Ui startUi() {"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\n\" +"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"                \"What can I do for you?\");"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        return new Ui();"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"     * Reads a line of user input, returns null if there is no input."},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"     * @return String read."},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"    public String readCommand() {"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"        if (scanner.hasNextLine()) {"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"            return scanner.nextLine();"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"            return null;"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"     * Closes this Ui and its underlying Scanner."},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"    public void close() {"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"        scanner.close();"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"     * Prints error message."},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"     * @param err Error message."},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"    public static void printErr(String err) {"},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"        System.out.println(err);"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"    public static void printLine() {"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"        System.out.println(\"------------------------------\");"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":"     * Prints each Task in the list with its index, and remarks if the list is empty."},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"     * @param tasks List of Tasks to be printed."},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":"    public static void printList(TaskList tasks) {"},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":73,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(\"Your list is empty!\");"},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":77,"author":{"gitId":"LimJunxue"},"content":"                System.out.println(i + \".\" + tasks.get(i - 1));"},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":"     * Throws IllegalArgumentException if the first word of the command is wrong or absent."},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"     * @param command User input provided."},{"lineNumber":86,"author":{"gitId":"LimJunxue"},"content":"     * @throws IllegalArgumentException if the first word of the command is wrong or absent."},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":"    public static void throwIllegalArgumentEx(String command) throws IllegalArgumentException {"},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"        if (command.length() \u003e 0) {"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":"            throw new IllegalArgumentException(\"That is not a valid command!\\n\" +"},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":"                    \"These are the possible commands:\\n\" +"},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"                    \"\\\"list\\\" \\\"done\\\" \\\"delete\\\" \\\"todo\\\" \\\"deadline\\\" \\\"event\\\" \\\"bye\\\"\");"},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"            throw new IllegalArgumentException(\"What are you trying to say?\\n\" +"},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"                    \"Please enter something ...\");"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":98}},{"path":"src/test/data/JUnitTesting.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"0 stored task successfully"}],"authorContributionMap":{"LimJunxue":1}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import duke.Parser;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"import duke.Task;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"class ParserTest {"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    static TaskList tl;"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    static Parser p;"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    @BeforeAll"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    static void setup() {"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"        tl \u003d new TaskList();"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"        p \u003d new Parser(tl, null);"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    void test_parsing_delete_command() {"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"        tl.add(new Task(\"tester\"));"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"        p.parseCommand(\"delete 1\");"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"        assertEquals(0, tl.size());"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"    void test_parsing_event_command() {"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"        p.parseCommand(\"event test /at 4\");"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"        assertEquals(\"[E][ ] test (at: 4)\", tl.get(0).toString());"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        tl.remove(0);"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":32}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"import duke.Storage;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"public class StorageTest {"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    String path \u003d \"./data/JUnitTesting.txt\";"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    File file \u003d new File(path);"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    @BeforeEach"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    void setup() {"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"        if (file.exists()) {"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"            file.delete();"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"    void create_new_file() {"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"        Storage.createStorage(path);"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        assertTrue(new File(path).exists());"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"    void store_task_in_file() throws FileNotFoundException {"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"        Storage storage \u003d Storage.createStorage(path);"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"        storage.storeTask(\"stored task successfully\");"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"        Scanner sc \u003d new Scanner(new File(path));"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"        String content \u003d \"\";"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"        if (sc.hasNextLine()) {"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"            content \u003d sc.nextLine();"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"        assertEquals(\"0 stored task successfully\", content);"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"    @AfterEach"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"    void teardown() {"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"        if (file.exists()) {"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"            file.delete();"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":48}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"1 todo hustle"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":"1 deadline profit /by 2022"},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"1 deadline profit again /by 2023-01-28 1800"}],"authorContributionMap":{"LimJunxue":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"hi"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":"list"},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"done"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"delete"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"todo hustle"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"todo"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"event grinding"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"event grinding /at"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"event"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"event grinding /at all day err day"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"deadline profit"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"deadline profit /by 2022"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"deadline profit again /by 2023-01-28 1800"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"deadline"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"deadline profit /by"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"list"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"done 2"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"done 3"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"done 4"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"find"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"find profit"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"list"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"done 1"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"done ah"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"delete"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"delete ah"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"delete 2"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"list"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"can i yolo"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"bye"}],"authorContributionMap":{"LimJunxue":31}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"LimJunxue":2,"-":19}}]
