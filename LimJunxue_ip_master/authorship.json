[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"LimJunxue":1,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"LimJunxue":16,"-":45}},{"path":"data/JUnitTesting.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"0 stored task successfully"}],"authorContributionMap":{"LimJunxue":1}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"0 todo betterGUI"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":"1 deadline UserGuide /by 17/02/2021"},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"1 event tP meeting /at 10-11pm"}],"authorContributionMap":{"LimJunxue":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"### 1. Add tasks"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"Adds a task to the list, as well as stores it in your disk."},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"* `todo` : A task with a to-do description."},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"* `deadline` : A task with a description and deadline."},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"* `event` : A task with a description and duration."},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"### 2. Mark tasks as done"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"Marks individual tasks as done with an [x]."},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"### 3. List the tasks"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"Retrieves and lists all tasks currently stored."},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"### 4. Delete tasks"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"Deletes individual tasks."},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"### 5. Find tasks using keywords"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"Retrieves all tasks that match given arguments."},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"### 6. Get reminders"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"Shows all deadline tasks."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"### 1. `todo` - Create a todo task"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"Format:"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"`todo {description}`"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"Example of usage:"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"`todo something`"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"Expected outcome:"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"Your task has been added: [T][] something"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"You currently have 1 task(s) in the list."},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"### 2. `deadline` - Create a deadline task"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"Format:"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"`deadline {description} /by {dateTimeFormat}`"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"Possible `{dateTimeFormat}`:"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"* dd/MM/yyyy"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"* dd-MM-yyyy"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"* yyyy-MM-dd hhmm"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"* dd/MM/yyyy hhmm"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"* dd-MM-yyyy hhmm"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"Example of usage:"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"`deadline workz /by 12/02/2021 1800`"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"Expected outcome:"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"Your task has been added: [D][] workz (by: 12 Feb 2021, 6PM)"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"You currently have 2 task(s) in the list."},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"### 3. `event` - Create an event task"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"Format:"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"`event {description} /at {duration}`"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"Example of usage:"},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":"`event party /at 12 to 2`"},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":"Expected outcome:"},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"Your task has been added: [E][] party (at: 12 to 2)"},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":"You currently have 3 task(s) in the list."},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"### 4. `done` - Mark task as done"},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"Format:"},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"`done {task number}`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"Example of usage:"},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"`done 1`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":"Noice. It\u0027s done."},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":"[T][x] something"},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"### 5. `list` - Lists all tasks stored"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":"Format:"},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"`list`"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":"Expected outcome:"},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"Here are the tasks in your list:"},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"1.[T][x] something"},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"2.[D][] workz (by: 12 Feb 2021, 6PM)"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":"3.[E][] party (at: 12 to 2)"},{"lineNumber":97,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"LimJunxue"},"content":"### 6. `delete` - Deletes a task"},{"lineNumber":100,"author":{"gitId":"LimJunxue"},"content":"Format:"},{"lineNumber":101,"author":{"gitId":"LimJunxue"},"content":"`delete {task number}`"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":104,"author":{"gitId":"LimJunxue"},"content":"`delete 3`"},{"lineNumber":105,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":106,"author":{"gitId":"LimJunxue"},"content":"Expected outcome:"},{"lineNumber":107,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":108,"author":{"gitId":"LimJunxue"},"content":"See la. It\u0027s deleted."},{"lineNumber":109,"author":{"gitId":"LimJunxue"},"content":"[E][] party (at: 12 to 2)"},{"lineNumber":110,"author":{"gitId":"LimJunxue"},"content":"You currently have 2 task(s) in the list."},{"lineNumber":111,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"LimJunxue"},"content":"### 7. `find` - Finds matching tasks"},{"lineNumber":114,"author":{"gitId":"LimJunxue"},"content":"Format:"},{"lineNumber":115,"author":{"gitId":"LimJunxue"},"content":"`find {description}`"},{"lineNumber":116,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":117,"author":{"gitId":"LimJunxue"},"content":"Example of usage:"},{"lineNumber":118,"author":{"gitId":"LimJunxue"},"content":"`find thing`"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":121,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":122,"author":{"gitId":"LimJunxue"},"content":"Here are the matching tasks in your list:"},{"lineNumber":123,"author":{"gitId":"LimJunxue"},"content":"1.[T][x] something"},{"lineNumber":124,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"LimJunxue"},"content":"### 8. `reminders` - Gets deadline tasks as reminders"},{"lineNumber":127,"author":{"gitId":"LimJunxue"},"content":"Format:"},{"lineNumber":128,"author":{"gitId":"LimJunxue"},"content":"`reminders`"},{"lineNumber":129,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":130,"author":{"gitId":"LimJunxue"},"content":"Expected outcome:"},{"lineNumber":131,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":132,"author":{"gitId":"LimJunxue"},"content":"Here are the tasks with deadlines in your list:"},{"lineNumber":133,"author":{"gitId":"LimJunxue"},"content":"2.[D][] workz (by: 12 Feb 2021, 6PM)"},{"lineNumber":134,"author":{"gitId":"LimJunxue"},"content":"```"},{"lineNumber":135,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":136,"author":{"gitId":"LimJunxue"},"content":"### 9. `bye` - Closes the app"},{"lineNumber":137,"author":{"gitId":"LimJunxue"},"content":"Expected outcome:"},{"lineNumber":138,"author":{"gitId":"LimJunxue"},"content":"Window closes without replying."}],"authorContributionMap":{"LimJunxue":118,"-":20}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"import javafx.geometry.Insets;"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":" * Encompasses a dialog, part of a conversation."},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    private Label dialog;"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"    private ImageView displayPicture;"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"     * Creates a DialogBox controller using FXML."},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"     * @param text Text to be put in the label node."},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"    private DialogBox(String text) {"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"            fxmlLoader.load();"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"            e.printStackTrace();"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"        dialog.setText(text);"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"        dialog.setPadding(new Insets(10, 10, 10, 10));"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"     * Creates a DialogBox specific to Duke\u0027s messages."},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"     * @param text  Text to be put in the label node."},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"     * @param image Image to be put into the ImageView node."},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"     * @return Duke\u0027s DialogBox."},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"    public static DialogBox getDukeDialog(String text, Image image) {"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"        var dukeDialogBox \u003d new DialogBox(text);"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"        dukeDialogBox.dialog.setBackground(new Background(new BackgroundFill("},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"                Color.rgb(255, 255, 255),"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"                new CornerRadii(5.0),"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"                new Insets(0, 5, 0, 5))));"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"        ImageView imageNode \u003d new ImageView(image);"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"        imageNode.setFitWidth(50.0);"},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"        imageNode.setFitHeight(50.0);"},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":"        dukeDialogBox.getChildren().add(imageNode);"},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":"        dukeDialogBox.flip();"},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"        return dukeDialogBox;"},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"LimJunxue"},"content":"     * Creates a DialogBox specific to the user\u0027s messages."},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"     * @param text Text to be put in the Label node."},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"     * @return User\u0027s DialogBox."},{"lineNumber":77,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"    public static DialogBox getUserDialog(String text) {"},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"        var userDialogBox \u003d new DialogBox(text);"},{"lineNumber":80,"author":{"gitId":"LimJunxue"},"content":"        userDialogBox.dialog.setBackground(new Background(new BackgroundFill("},{"lineNumber":81,"author":{"gitId":"LimJunxue"},"content":"                Color.rgb(102, 255, 204),"},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"                new CornerRadii(5.0),"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":"                null)));"},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":"        return userDialogBox;"},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":"    private void flip() {"},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":"        this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":96}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Encompasses the behavior of the Duke chat-bot. Duke allows users to create"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" * different types of tasks in a todo-list, and can do various functions on the"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" * list such as deleting and listing. The list is saved by the Storage object at"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":" * \"./data/duke.txt\"."},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"    private final Parser parser;"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"     * Starts Duke with instance of Ui, Storage, TaskList, and Parser to receive"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"     * input and serve output."},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    public Duke() {"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"        Storage storage \u003d Storage.createStorage(\"./data/duke.txt\");"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"        if (storage !\u003d null) {"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"            storage.loadTaskList(tasks);"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"        parser \u003d new Parser(tasks, storage);"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    public String showWelcome() {"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        return Ui.showWelcome();"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"     * Returns a response to the input given by parsing the input."},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"     * @param input User input into text field of Duke."},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"     * @return string response."},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"    public String getResponse(String input) {"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"        return parser.parseCommand(input);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"LimJunxue":36,"-":3}},{"path":"src/main/java/duke/DukeActions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents actions that can be used on Duke."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" * Actions are the first word in user input commands."},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"public enum DukeActions {"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"    BYE(\"bye\"),"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    LIST(\"list\"),"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"    DONE(\"done\"),"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    DELETE(\"delete\"),"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    TODO(\"todo\"),"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    DEADLINE(\"deadline\"),"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    EVENT(\"event\");"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"     * The String form of each action."},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    public final String action;"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    DukeActions(String action) {"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"        this.action \u003d action;"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":24}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents unchecked exceptions specific to Duke."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"public class DukeException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"     * Creates a RuntimeException specific to Duke."},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"     * @param errorMessage Message when the exception is thrown."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"        super(errorMessage);"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":15}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"        // Solution below adapted from https://se-education.org/guides/tutorials/javaFxPart4.html"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"            AnchorPane anchorPane \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"            Scene scene \u003d new Scene(anchorPane);"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showWelcome();"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":34}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/squareface.png\"));"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"     * Creates a Duke DialogBox showing the welcome message."},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"    public void showWelcome() {"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"        assert duke !\u003d null : \"Duke called to show welcome before being set.\";"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"                DialogBox.getDukeDialog(duke.showWelcome(), dukeImage)"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"        );"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"            Platform.exit();"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"            System.exit(0);"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"                DialogBox.getUserDialog(input),"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"        );"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"        userInput.clear();"},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":66}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":" * Parser for Duke commands, with access to its task list, and storage."},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"    private final TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    private final Storage storage;"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"     * Creates a Parser object for the Duke instance."},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"     * @param tasks   The current TaskList used."},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"     * @param storage The current Storage used."},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    public Parser(TaskList tasks, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"        this.storage \u003d storage;"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"     * Passes the command to the relevant methods."},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"     * @param command A string of the command to be carried out."},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"     * @return response to the command."},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"    public String parseCommand(String command) {"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"        String response \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"        command \u003d command.trim();"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"            switch (command.split(\" \")[0]) {"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"            case \"list\":"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"                response \u003d Ui.printList(tasks);"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"            case \"done\":"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"                response \u003d handleDone(command);"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"            case \"delete\":"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"                response \u003d handleDelete(command);"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"            case \"todo\":"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"                // Fallthrough"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"            case \"deadline\":"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"                // Fallthrough"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"            case \"event\":"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"                response \u003d handleTaskCommand(command);"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"            case \"find\":"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"                response \u003d handleFind(command);"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"            case \"reminders\":"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"                response \u003d handleReminders();"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"            default:"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"                Ui.throwIllegalArgumentEx(command);"},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"                break;"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"        } catch (DukeException | IllegalArgumentException e) {"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"            response \u003d e.getMessage();"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"        return response;"},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":"     * Finds and marks task specified in the command string after calling done."},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"     * Handles exceptions that include index out of bounds and number format. Saves"},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"     * to storage."},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":"     * @param command \"done {task number}\"."},{"lineNumber":73,"author":{"gitId":"LimJunxue"},"content":"     * @return feedback whether task is marked done successfully or not."},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"    private String handleDone(String command) {"},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"        assert command.split(\" \")[0].equals(\"done\") : \"handleDone() called without done command.\";"},{"lineNumber":77,"author":{"gitId":"LimJunxue"},"content":"        String reply;"},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"            int taskNumber \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"},{"lineNumber":80,"author":{"gitId":"LimJunxue"},"content":"            Task currentTask \u003d tasks.get(taskNumber);"},{"lineNumber":81,"author":{"gitId":"LimJunxue"},"content":"            currentTask.markDone();"},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"            reply \u003d \"Noice. It\u0027s done. \\n\" + currentTask;"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":"            if (storage !\u003d null) {"},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":"                storage.updateTaskDone(taskNumber);"},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"LimJunxue"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"            reply \u003d \"Please enter a number from 1 to \" + tasks.size() + \" after done!\";"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"            if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":"                reply \u003d \"Your list is empty!\";"},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":"            } else {"},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"                reply \u003d \"Please enter a number from 1 to \" + tasks.size() + \" after done!\";"},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"        return reply;"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":98,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"LimJunxue"},"content":"     * Deletes the task in the list. Updates storage. Handles number format and"},{"lineNumber":100,"author":{"gitId":"LimJunxue"},"content":"     * index out of bounds exceptions."},{"lineNumber":101,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"LimJunxue"},"content":"     * @param command \"delete {task number}\"."},{"lineNumber":103,"author":{"gitId":"LimJunxue"},"content":"     * @return feedback whether the task is deleted successfully."},{"lineNumber":104,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"LimJunxue"},"content":"    private String handleDelete(String command) {"},{"lineNumber":106,"author":{"gitId":"LimJunxue"},"content":"        assert command.split(\" \")[0].equals(\"delete\") : \"handleDelete() called without delete command.\";"},{"lineNumber":107,"author":{"gitId":"LimJunxue"},"content":"        String reply;"},{"lineNumber":108,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"LimJunxue"},"content":"            int taskNumber \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"},{"lineNumber":110,"author":{"gitId":"LimJunxue"},"content":"            Task currentTask \u003d tasks.remove(taskNumber);"},{"lineNumber":111,"author":{"gitId":"LimJunxue"},"content":"            reply \u003d \"See la. It\u0027s deleted. \\n\" + currentTask + \"\\nYou currently have \" + tasks.size()"},{"lineNumber":112,"author":{"gitId":"LimJunxue"},"content":"                    + \" task(s) in the list.\";"},{"lineNumber":113,"author":{"gitId":"LimJunxue"},"content":"            if (storage !\u003d null) {"},{"lineNumber":114,"author":{"gitId":"LimJunxue"},"content":"                storage.deleteTask(taskNumber);"},{"lineNumber":115,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"LimJunxue"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":117,"author":{"gitId":"LimJunxue"},"content":"            reply \u003d \"Please enter a number from 1 to \" + tasks.size() + \" after delete!\";"},{"lineNumber":118,"author":{"gitId":"LimJunxue"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":119,"author":{"gitId":"LimJunxue"},"content":"            if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":120,"author":{"gitId":"LimJunxue"},"content":"                reply \u003d \"Your list is empty!\";"},{"lineNumber":121,"author":{"gitId":"LimJunxue"},"content":"            } else {"},{"lineNumber":122,"author":{"gitId":"LimJunxue"},"content":"                reply \u003d \"Please enter a number from 1 to \" + tasks.size() + \" after delete!\";"},{"lineNumber":123,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"LimJunxue"},"content":"        return reply;"},{"lineNumber":126,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":128,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"LimJunxue"},"content":"     * Creates task by calling task creation from the Task class and adds the task created to the TaskList."},{"lineNumber":130,"author":{"gitId":"LimJunxue"},"content":"     * Stores the task command in storage if storage exists."},{"lineNumber":131,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"LimJunxue"},"content":"     * @param command \"{task type} {task description}\""},{"lineNumber":133,"author":{"gitId":"LimJunxue"},"content":"     * @return feedback for adding task successfully."},{"lineNumber":134,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if task was not created successfully."},{"lineNumber":135,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"LimJunxue"},"content":"    private String handleTaskCommand(String command) throws DukeException {"},{"lineNumber":137,"author":{"gitId":"LimJunxue"},"content":"        Task newTask \u003d Task.dispatchTaskCreation(command);"},{"lineNumber":138,"author":{"gitId":"LimJunxue"},"content":"        tasks.add(newTask);"},{"lineNumber":139,"author":{"gitId":"LimJunxue"},"content":"        if (storage !\u003d null) {"},{"lineNumber":140,"author":{"gitId":"LimJunxue"},"content":"            storage.storeTaskCommand(command);"},{"lineNumber":141,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"LimJunxue"},"content":"        return \"Your task has been added: \" + newTask + \"\\n\""},{"lineNumber":143,"author":{"gitId":"LimJunxue"},"content":"                + \"You currently have \" + tasks.size() + \" task(s) in the list.\";"},{"lineNumber":144,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":146,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"LimJunxue"},"content":"     * Loops through the existing TaskList and finds all tasks that match the given"},{"lineNumber":148,"author":{"gitId":"LimJunxue"},"content":"     * argument."},{"lineNumber":149,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"LimJunxue"},"content":"     * @param command \"find {string to match}\"."},{"lineNumber":151,"author":{"gitId":"LimJunxue"},"content":"     * @return string of tasks matching argument."},{"lineNumber":152,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"LimJunxue"},"content":"    private String handleFind(String command) {"},{"lineNumber":154,"author":{"gitId":"LimJunxue"},"content":"        assert command.split(\" \", 2)[0].equals(\"find\") : \"handleFind() called without find command.\";"},{"lineNumber":155,"author":{"gitId":"LimJunxue"},"content":"        String query;"},{"lineNumber":156,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":157,"author":{"gitId":"LimJunxue"},"content":"            query \u003d command.split(\" \", 2)[1].trim();"},{"lineNumber":158,"author":{"gitId":"LimJunxue"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":159,"author":{"gitId":"LimJunxue"},"content":"            return \"Please type in your query after find!\";"},{"lineNumber":160,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":162,"author":{"gitId":"LimJunxue"},"content":"        StringBuilder reply \u003d new StringBuilder();"},{"lineNumber":163,"author":{"gitId":"LimJunxue"},"content":"        boolean isFound \u003d false;"},{"lineNumber":164,"author":{"gitId":"LimJunxue"},"content":"        // Loop through tasks to find descriptions matching given argument."},{"lineNumber":165,"author":{"gitId":"LimJunxue"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":166,"author":{"gitId":"LimJunxue"},"content":"            if (tasks.get(i - 1).toString().contains(query)) {"},{"lineNumber":167,"author":{"gitId":"LimJunxue"},"content":"                isFound \u003d true;"},{"lineNumber":168,"author":{"gitId":"LimJunxue"},"content":"                reply.append(i + \".\" + tasks.get(i - 1) + \"\\n\");"},{"lineNumber":169,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":170,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":172,"author":{"gitId":"LimJunxue"},"content":"        if (isFound) {"},{"lineNumber":173,"author":{"gitId":"LimJunxue"},"content":"            reply.insert(0, \"Here are the matching tasks in your list:\\n\");"},{"lineNumber":174,"author":{"gitId":"LimJunxue"},"content":"            return reply.toString();"},{"lineNumber":175,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":176,"author":{"gitId":"LimJunxue"},"content":"            return \"There are no tasks that match \\\"\" + query + \"\\\"!\";"},{"lineNumber":177,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":180,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"LimJunxue"},"content":"     * Finds all Deadline tasks in the current TaskList and lists them."},{"lineNumber":182,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"LimJunxue"},"content":"     * @return string of tasks that have deadlines."},{"lineNumber":184,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"LimJunxue"},"content":"    private String handleReminders() {"},{"lineNumber":186,"author":{"gitId":"LimJunxue"},"content":"        StringBuilder reply \u003d new StringBuilder();"},{"lineNumber":187,"author":{"gitId":"LimJunxue"},"content":"        boolean isFound \u003d false;"},{"lineNumber":188,"author":{"gitId":"LimJunxue"},"content":"        // Loop through tasks to find all deadlines."},{"lineNumber":189,"author":{"gitId":"LimJunxue"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":190,"author":{"gitId":"LimJunxue"},"content":"            if (tasks.get(i - 1) instanceof Deadline) {"},{"lineNumber":191,"author":{"gitId":"LimJunxue"},"content":"                isFound \u003d true;"},{"lineNumber":192,"author":{"gitId":"LimJunxue"},"content":"                reply.append(i + \".\" + tasks.get(i - 1) + \"\\n\");"},{"lineNumber":193,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":194,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":196,"author":{"gitId":"LimJunxue"},"content":"        if (isFound) {"},{"lineNumber":197,"author":{"gitId":"LimJunxue"},"content":"            reply.insert(0, \"Here are the tasks with deadlines in your list:\\n\");"},{"lineNumber":198,"author":{"gitId":"LimJunxue"},"content":"            return reply.toString();"},{"lineNumber":199,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":200,"author":{"gitId":"LimJunxue"},"content":"            return \"There are no tasks with deadlines! Yay!\";"},{"lineNumber":201,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":203}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":" * Encompasses the abstraction of file operations for Duke as a Storage."},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":" * Stores tasks as \"{isDone ? 1 : 0} {command to create task}\" in individual lines."},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    private final File file;"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    private Storage(File file) {"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"        this.file \u003d file;"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"     * Hard coded static factory creation of java.io.File at path \"./data/duke.txt\""},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"     * @param filePath Path of the file to store the info."},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"     * @return Storage object to handle all storage changes."},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"    public static Storage createStorage(String filePath) {"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"        // Hard coded check for valid directory"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        if (!new File(\"./data\").exists()) {"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"            new File(\"./data\").mkdir();"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"            file.createNewFile();"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"            return new Storage(file);"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(\"Storage file cannot be created. List created will not be saved.\");"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"            return null;"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"     * Reads and creates the tasks from the file to store in the list. List will not change if file is not"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"     * found/created."},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"    public void loadTaskList(TaskList tasks) {"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"        Scanner reader;"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"            reader \u003d new Scanner(file);"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"            return;"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"        while (reader.hasNextLine()) {"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"            boolean isDone \u003d reader.nextInt() \u003d\u003d 1;"},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"            String command \u003d reader.nextLine();"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"            Task newTask \u003d Task.dispatchTaskCreation(command);"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"            if (isDone) {"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"                newTask.markDone();"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"            tasks.add(newTask);"},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":"        reader.close();"},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"     * Updates task specified by the targetLineNumber to be done."},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":"     * @param targetLineNumber Refers to the zero-indexed line of the task in the file to be updated."},{"lineNumber":73,"author":{"gitId":"LimJunxue"},"content":"     * @throws IndexOutOfBoundsException if the taskNumber is out of range of the lines in the file."},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"    public void updateTaskDone(int targetLineNumber) throws IndexOutOfBoundsException {"},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"        Scanner reader;"},{"lineNumber":77,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"            reader \u003d new Scanner(file);"},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":80,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":81,"author":{"gitId":"LimJunxue"},"content":"            return;"},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":"        StringBuffer buffer \u003d new StringBuffer();"},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"        int currentLineNumber \u003d 0;"},{"lineNumber":86,"author":{"gitId":"LimJunxue"},"content":"        while (reader.hasNextLine()) {"},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"            String line \u003d reader.nextLine();"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":"            // Replace first character indicating isDone of task if currentLine is the targetLine."},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"            if (currentLineNumber \u003d\u003d targetLineNumber) {"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":"                line \u003d line.replaceFirst(\"0\", \"1\");"},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"            // Append all lines"},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"            buffer.append(line + \"\\n\");"},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"            currentLineNumber++;"},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":"        reader.close();"},{"lineNumber":97,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":98,"author":{"gitId":"LimJunxue"},"content":"        if (targetLineNumber \u003e\u003d currentLineNumber || targetLineNumber \u003c 0) {"},{"lineNumber":99,"author":{"gitId":"LimJunxue"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":100,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"LimJunxue"},"content":"        // lineNumber is valid, then write to file"},{"lineNumber":102,"author":{"gitId":"LimJunxue"},"content":"        writeCharSequenceToFile(file, buffer);"},{"lineNumber":103,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":105,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"LimJunxue"},"content":"     * Deletes the task on the line on targetLineNumber in this storage\u0027s file."},{"lineNumber":107,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"LimJunxue"},"content":"     * @param targetLineNumber Refers to the zero-indexed line of the task in the file to be deleted."},{"lineNumber":109,"author":{"gitId":"LimJunxue"},"content":"     * @throws IndexOutOfBoundsException if the taskNumber is out of range of the lines in the file."},{"lineNumber":110,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"LimJunxue"},"content":"    public void deleteTask(int targetLineNumber) throws IndexOutOfBoundsException {"},{"lineNumber":112,"author":{"gitId":"LimJunxue"},"content":"        Scanner reader;"},{"lineNumber":113,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":114,"author":{"gitId":"LimJunxue"},"content":"            reader \u003d new Scanner(file);"},{"lineNumber":115,"author":{"gitId":"LimJunxue"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":116,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":117,"author":{"gitId":"LimJunxue"},"content":"            return;"},{"lineNumber":118,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":120,"author":{"gitId":"LimJunxue"},"content":"        StringBuffer buffer \u003d new StringBuffer();"},{"lineNumber":121,"author":{"gitId":"LimJunxue"},"content":"        int currentLineNumber \u003d 0;"},{"lineNumber":122,"author":{"gitId":"LimJunxue"},"content":"        while (reader.hasNextLine()) {"},{"lineNumber":123,"author":{"gitId":"LimJunxue"},"content":"            String line \u003d reader.nextLine();"},{"lineNumber":124,"author":{"gitId":"LimJunxue"},"content":"            // Append all lines except the line that matches lineNumber"},{"lineNumber":125,"author":{"gitId":"LimJunxue"},"content":"            if (currentLineNumber !\u003d targetLineNumber) {"},{"lineNumber":126,"author":{"gitId":"LimJunxue"},"content":"                buffer.append(line + \"\\n\");"},{"lineNumber":127,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"LimJunxue"},"content":"            currentLineNumber++;"},{"lineNumber":129,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"LimJunxue"},"content":"        reader.close();"},{"lineNumber":131,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":132,"author":{"gitId":"LimJunxue"},"content":"        if (targetLineNumber \u003e\u003d currentLineNumber || targetLineNumber \u003c 0) {"},{"lineNumber":133,"author":{"gitId":"LimJunxue"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":134,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"LimJunxue"},"content":"        // lineNumber is valid, then write to file."},{"lineNumber":136,"author":{"gitId":"LimJunxue"},"content":"        writeCharSequenceToFile(file, buffer);"},{"lineNumber":137,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":139,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"LimJunxue"},"content":"     * Store the command that creates a task to the back of this storage\u0027s file,"},{"lineNumber":141,"author":{"gitId":"LimJunxue"},"content":"     * such that it can be called to create a Task directly upon an instantiation of storage."},{"lineNumber":142,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"LimJunxue"},"content":"     * @param command Command that creates a Task to be added into the file."},{"lineNumber":144,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"LimJunxue"},"content":"    public void storeTaskCommand(String command) {"},{"lineNumber":146,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"LimJunxue"},"content":"            FileWriter writer \u003d new FileWriter(file, true);"},{"lineNumber":148,"author":{"gitId":"LimJunxue"},"content":"            String line \u003d \"0 \" + command + \"\\n\";"},{"lineNumber":149,"author":{"gitId":"LimJunxue"},"content":"            writer.append(line);"},{"lineNumber":150,"author":{"gitId":"LimJunxue"},"content":"            writer.flush();"},{"lineNumber":151,"author":{"gitId":"LimJunxue"},"content":"            writer.close();"},{"lineNumber":152,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":153,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":154,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":157,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"LimJunxue"},"content":"     * Writes CharSequence to File using a FileWriter."},{"lineNumber":159,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"LimJunxue"},"content":"     * @param file File to be written to."},{"lineNumber":161,"author":{"gitId":"LimJunxue"},"content":"     * @param chars CharSequence that holds the content to be written to the file."},{"lineNumber":162,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"LimJunxue"},"content":"    private void writeCharSequenceToFile(File file, CharSequence chars) {"},{"lineNumber":164,"author":{"gitId":"LimJunxue"},"content":"        try {"},{"lineNumber":165,"author":{"gitId":"LimJunxue"},"content":"            FileWriter writer \u003d new FileWriter(file);"},{"lineNumber":166,"author":{"gitId":"LimJunxue"},"content":"            writer.append(chars);"},{"lineNumber":167,"author":{"gitId":"LimJunxue"},"content":"            writer.flush();"},{"lineNumber":168,"author":{"gitId":"LimJunxue"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitId":"LimJunxue"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":170,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":172}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":" * Wraps an ArrayList as a TaskList meant for Duke."},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":16}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Encompasses interactions with the user by returning Strings."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"     * Returns the custom welcome message to the user."},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"     * @return welcome message."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    public static String showWelcome() {"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"        return \"Hello from\\n\""},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"                + \" ____        _        \\n\""},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\""},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"                + \"Hello! I\u0027m Duke\\n\""},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"                + \"What can I do for you?\";"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"     * Prints each Task in the list with its index, and remarks if the list is empty."},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"     * @param tasks The existing list of tasks."},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"     * @return string of listed entries."},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"    public static String printList(TaskList tasks) {"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"            return \"Your list is empty!\";"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"            String result \u003d \"Here are the tasks in your list: \\n\";"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"                result \u003d result.concat(i + \".\" + tasks.get(i - 1) + \"\\n\");"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"            return result;"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"     * Throws IllegalArgumentException if the first word of the command is wrong or absent."},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"     * @param command User input provided."},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"     * @throws IllegalArgumentException if the first word of the command is wrong or absent."},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"    public static void throwIllegalArgumentEx(String command) throws IllegalArgumentException {"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"        if (command.length() \u003e 0) {"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"            throw new IllegalArgumentException(\"That is not a valid command!\\n\""},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"                    + \"These are the possible commands:\\n\""},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"                    + \"\\\"list\\\" \\\"done\\\" \\\"delete\\\" \\\"todo\\\" \\\"deadline\\\" \\\"event\\\" \\\"reminders\\\" \\\"find\\\" \\\"bye\\\" \");"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"            throw new IllegalArgumentException(\"What are you trying to say?\\n\""},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"                    + \"Please enter something ...\");"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":57}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":" * Represents a task with a deadline specified in the \"by\" argument."},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":" * If deadline is parsable as a LocalDateTime or LocalDate, it will be stored in the variable byDateTime or byDate."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    protected String inputAfterBy;"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    protected LocalDateTime byDateTime;"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    protected LocalDate byDate;"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"     * Creates a task with a deadline specified in the \"by\" argument."},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"     * Tries to parse deadline in various DateTimeFormatter patterns and stores as LocalDateTime object in byDateTime,"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"     * or store as LocalDate object in byDate."},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"     * @param description  Describes the task."},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"     * @param inputAfterBy Specifies the deadline of this task."},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"    public Deadline(String description, String inputAfterBy) {"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        this.inputAfterBy \u003d inputAfterBy;"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"        String[] dateTimePatterns \u003d {\"yyyy-MM-dd kkmm\", \"dd/MM/yyyy kkmm\", \"dd-MM-yyyy kkmm\"};"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        String[] datePatterns \u003d {\"dd-MM-yyyy\", \"dd/MM/yyyy\"};"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"        // Try parsing inputAfterBy as LocalDateTime"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"        for (String dateTimePattern : dateTimePatterns) {"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"                byDateTime \u003d LocalDateTime.parse(inputAfterBy, DateTimeFormatter.ofPattern(dateTimePattern));"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"                System.out.println(\"Input after \\\"/by\\\" not of \" + dateTimePattern + \" format.\");"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"        // Try parsing inputAfterBy as LocalDate"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"        for (String datePattern : datePatterns) {"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"                byDate \u003d LocalDate.parse(inputAfterBy, DateTimeFormatter.ofPattern(datePattern));"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"                System.out.println(\"Input after \\\"/by\\\" not of \" + datePattern + \" format.\");"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"        if (byDateTime \u003d\u003d null \u0026\u0026 byDate \u003d\u003d null) {"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + this.inputAfterBy + \")\";"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":"        } else if (byDateTime !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"            return \"[D]\" + super.toString()"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"                    + \" (by: \" + byDateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, ha\")) + \")\";"},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"            // byDate is not null"},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"            return \"[D]\" + super.toString()"},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"                    + \" (by: \" + byDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":64}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents a task with a duration specified in the \"at\" argument."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"    protected String inputAfterAt;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"     * Creates a task with a duration specified in the \"at\" argument."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"     * @param description  Describes the task."},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"     * @param inputAfterAt Specifies the duration of this task."},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    public Event(String description, String inputAfterAt) {"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"        this.inputAfterAt \u003d inputAfterAt;"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + inputAfterAt + \")\";"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":24}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":" * Represents a task listed in Duke and can be marked as done. Can statically"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":" * create subclasses of Task, namely: Event, Deadline, ToDo"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"public class Task {"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    protected String description;"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"     * Creates a task with the specified description."},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"     * @param description The task\u0027s description."},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    public Task(String description) {"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"     * Marks this task as done."},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    public void markDone() {"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        this.isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"     * Passes the command to the relevant task creation methods, namely:"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"     * createEvent, createDeadline, createToDo"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"     * @param taskCommand String of command that describes the task to be created."},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if task creation is invalid."},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"    public static Task dispatchTaskCreation(String taskCommand) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"        Task newTask;"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"        taskCommand \u003d taskCommand.trim();"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"        switch (taskCommand.split(\" \")[0]) {"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"        case \"todo\":"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"            newTask \u003d createToDo(taskCommand);"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":"        case \"deadline\":"},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"            newTask \u003d createDeadline(taskCommand);"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"        case \"event\":"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"            newTask \u003d createEvent(taskCommand);"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"        default:"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Task cannot be created: \" + taskCommand);"},{"lineNumber":52,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"LimJunxue"},"content":"        return newTask;"},{"lineNumber":54,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":56,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"LimJunxue"},"content":"     * Creates ToDo Task from a command with todo."},{"lineNumber":58,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"LimJunxue"},"content":"     * @param command User input with the word todo."},{"lineNumber":60,"author":{"gitId":"LimJunxue"},"content":"     * @return Task created."},{"lineNumber":61,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no description of the task."},{"lineNumber":62,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"LimJunxue"},"content":"    private static Task createToDo(String command) throws DukeException {"},{"lineNumber":64,"author":{"gitId":"LimJunxue"},"content":"        int charactersInTodo \u003d 4;"},{"lineNumber":65,"author":{"gitId":"LimJunxue"},"content":"        String commandDescription \u003d command.substring(charactersInTodo);"},{"lineNumber":66,"author":{"gitId":"LimJunxue"},"content":"        if (commandDescription.trim().length() \u003d\u003d 0) {"},{"lineNumber":67,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument describing task after \\\"todo\\\"\");"},{"lineNumber":68,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"LimJunxue"},"content":"        String descriptionOfTodo \u003d command.split(\" \", 2)[1];"},{"lineNumber":70,"author":{"gitId":"LimJunxue"},"content":"        return new ToDo(descriptionOfTodo);"},{"lineNumber":71,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":73,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"LimJunxue"},"content":"     * Creates Task from a command with deadline."},{"lineNumber":75,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"LimJunxue"},"content":"     * @param command User input with the word deadline."},{"lineNumber":77,"author":{"gitId":"LimJunxue"},"content":"     * @return Task created."},{"lineNumber":78,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no description of the task."},{"lineNumber":79,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no deadline specified by \"/by\"."},{"lineNumber":80,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there are multiple \"/by\"."},{"lineNumber":81,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"LimJunxue"},"content":"    private static Task createDeadline(String command) throws DukeException {"},{"lineNumber":83,"author":{"gitId":"LimJunxue"},"content":"        int charactersInDeadline \u003d 8;"},{"lineNumber":84,"author":{"gitId":"LimJunxue"},"content":"        String commandDescription \u003d command.substring(charactersInDeadline);"},{"lineNumber":85,"author":{"gitId":"LimJunxue"},"content":"        String[] splitDescription \u003d commandDescription.split(\"/by\");"},{"lineNumber":86,"author":{"gitId":"LimJunxue"},"content":"        if (splitDescription[0].trim().length() \u003d\u003d 0) {"},{"lineNumber":87,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument describing task after \\\"deadline\\\"\");"},{"lineNumber":88,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"LimJunxue"},"content":"        // If there is only the description of the task and no deadline,"},{"lineNumber":90,"author":{"gitId":"LimJunxue"},"content":"        // or if the deadline is whitespace, throw DukeException."},{"lineNumber":91,"author":{"gitId":"LimJunxue"},"content":"        // Must check length before checking 2nd argument or else nullPointerException."},{"lineNumber":92,"author":{"gitId":"LimJunxue"},"content":"        if (splitDescription.length \u003d\u003d 1 || splitDescription[1].trim().length() \u003d\u003d 0) {"},{"lineNumber":93,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument \\\"/by\\\" specifying deadline of task for \\\"deadline\\\"\");"},{"lineNumber":94,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"LimJunxue"},"content":"        if (splitDescription.length !\u003d 2) {"},{"lineNumber":96,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Multiple \\\"/by\\\" not allowed in for \\\"deadline\\\"\");"},{"lineNumber":97,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"LimJunxue"},"content":"        return new Deadline(splitDescription[0].trim(), splitDescription[1].trim());"},{"lineNumber":99,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":101,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"LimJunxue"},"content":"     * Creates Task from a command with event."},{"lineNumber":103,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"LimJunxue"},"content":"     * @param command User input with the word event."},{"lineNumber":105,"author":{"gitId":"LimJunxue"},"content":"     * @return Task created."},{"lineNumber":106,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no description of the task."},{"lineNumber":107,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there is no duration specified by \"/at\"."},{"lineNumber":108,"author":{"gitId":"LimJunxue"},"content":"     * @throws DukeException if there are multiple \"/at\"."},{"lineNumber":109,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"LimJunxue"},"content":"    private static Task createEvent(String command) throws DukeException {"},{"lineNumber":111,"author":{"gitId":"LimJunxue"},"content":"        int charactersInEvent \u003d 5;"},{"lineNumber":112,"author":{"gitId":"LimJunxue"},"content":"        String commandDescription \u003d command.substring(charactersInEvent);"},{"lineNumber":113,"author":{"gitId":"LimJunxue"},"content":"        String[] splitDescription \u003d commandDescription.split(\"/at\");"},{"lineNumber":114,"author":{"gitId":"LimJunxue"},"content":"        if (splitDescription[0].trim().length() \u003d\u003d 0) {"},{"lineNumber":115,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument describing task after \\\"event\\\"\");"},{"lineNumber":116,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"LimJunxue"},"content":"        // If there is only the description of the task and no event time,"},{"lineNumber":118,"author":{"gitId":"LimJunxue"},"content":"        // or if the event time is whitespace, throw DukeException."},{"lineNumber":119,"author":{"gitId":"LimJunxue"},"content":"        // Must check length before checking 2nd argument or else nullPointerException."},{"lineNumber":120,"author":{"gitId":"LimJunxue"},"content":"        if (splitDescription.length \u003d\u003d 1 || splitDescription[1].trim().length() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Expected argument \\\"/at\\\" specifying duration of task for \\\"event\\\"\");"},{"lineNumber":122,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"LimJunxue"},"content":"        if (splitDescription.length !\u003d 2) {"},{"lineNumber":124,"author":{"gitId":"LimJunxue"},"content":"            throw new DukeException(\"Multiple \\\"/at\\\" not allowed in for \\\"event\\\"\");"},{"lineNumber":125,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"LimJunxue"},"content":"        return new Event(splitDescription[0].trim(), splitDescription[1].trim());"},{"lineNumber":127,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":129,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":130,"author":{"gitId":"LimJunxue"},"content":"    public String toString() {"},{"lineNumber":131,"author":{"gitId":"LimJunxue"},"content":"        String symbol \u003d \" \";"},{"lineNumber":132,"author":{"gitId":"LimJunxue"},"content":"        if (isDone) {"},{"lineNumber":133,"author":{"gitId":"LimJunxue"},"content":"            symbol \u003d \"X\";"},{"lineNumber":134,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"LimJunxue"},"content":"        return \"[\" + symbol + \"] \" + this.description;"},{"lineNumber":136,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":137}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":" * Represents a task without any date/time attached."},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":" */"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"     * Creates a task to be done, without any date/time attached."},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"     * @param description Describes the task."},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    public ToDo(String description) {"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":20}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\""},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"               HBox.hgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"LimJunxue":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"            fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"                    vvalue\u003d\"1.0\"\u003e"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"            \u003ccontent\u003e"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"            \u003c/content\u003e"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    \u003c/children\u003e"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"LimJunxue":24}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import duke.Parser;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"class ParserTest {"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"    private static TaskList tl;"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"    private static Parser p;"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"    @BeforeAll"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"    static void setup() {"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"        tl \u003d new TaskList();"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"        p \u003d new Parser(tl, null);"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"    void testParsingDeleteCommand() {"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"        tl.add(new Task(\"tester\"));"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"        p.parseCommand(\"delete 1\");"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"        assertEquals(0, tl.size());"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"    void testParsingEventCommand() {"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"        p.parseCommand(\"event test /at 4\");"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"        assertEquals(\"[E][ ] test (at: 4)\", tl.get(0).toString());"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"        tl.remove(0);"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":32}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"import duke.Storage;"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"public class StorageTest {"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"    private final String path \u003d \"./data/JUnitTesting.txt\";"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"    private final File file \u003d new File(path);"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"    @BeforeEach"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"    void setup() {"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"        if (file.exists()) {"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"            file.delete();"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"    void createNewFile() {"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"        Storage.createStorage(path);"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"        assertTrue(new File(path).exists());"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"LimJunxue"},"content":"    void storeTaskInFile() throws FileNotFoundException {"},{"lineNumber":33,"author":{"gitId":"LimJunxue"},"content":"        Storage storage \u003d Storage.createStorage(path);"},{"lineNumber":34,"author":{"gitId":"LimJunxue"},"content":"        assert storage !\u003d null;"},{"lineNumber":35,"author":{"gitId":"LimJunxue"},"content":"        String dummyTaskCommand \u003d \"stored task successfully\";"},{"lineNumber":36,"author":{"gitId":"LimJunxue"},"content":"        storage.storeTaskCommand(dummyTaskCommand);"},{"lineNumber":37,"author":{"gitId":"LimJunxue"},"content":"        Scanner sc \u003d new Scanner(new File(path));"},{"lineNumber":38,"author":{"gitId":"LimJunxue"},"content":"        String content \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"LimJunxue"},"content":"        if (sc.hasNextLine()) {"},{"lineNumber":40,"author":{"gitId":"LimJunxue"},"content":"            content \u003d sc.nextLine();"},{"lineNumber":41,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"LimJunxue"},"content":"        assertEquals(\"0 stored task successfully\", content);"},{"lineNumber":43,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"LimJunxue"},"content":""},{"lineNumber":45,"author":{"gitId":"LimJunxue"},"content":"    @AfterEach"},{"lineNumber":46,"author":{"gitId":"LimJunxue"},"content":"    void teardown() {"},{"lineNumber":47,"author":{"gitId":"LimJunxue"},"content":"        if (file.exists()) {"},{"lineNumber":48,"author":{"gitId":"LimJunxue"},"content":"            file.delete();"},{"lineNumber":49,"author":{"gitId":"LimJunxue"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"LimJunxue"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"LimJunxue"},"content":"}"}],"authorContributionMap":{"LimJunxue":51}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"1 todo hustle"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":"1 deadline profit /by 2022"},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"1 deadline profit again /by 2023-01-28 1800"}],"authorContributionMap":{"LimJunxue":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJunxue"},"content":"hi"},{"lineNumber":2,"author":{"gitId":"LimJunxue"},"content":"list"},{"lineNumber":3,"author":{"gitId":"LimJunxue"},"content":"done"},{"lineNumber":4,"author":{"gitId":"LimJunxue"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"LimJunxue"},"content":"delete"},{"lineNumber":6,"author":{"gitId":"LimJunxue"},"content":"todo hustle"},{"lineNumber":7,"author":{"gitId":"LimJunxue"},"content":"todo"},{"lineNumber":8,"author":{"gitId":"LimJunxue"},"content":"event grinding"},{"lineNumber":9,"author":{"gitId":"LimJunxue"},"content":"event grinding /at"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"event"},{"lineNumber":11,"author":{"gitId":"LimJunxue"},"content":"event grinding /at all day err day"},{"lineNumber":12,"author":{"gitId":"LimJunxue"},"content":"deadline profit"},{"lineNumber":13,"author":{"gitId":"LimJunxue"},"content":"deadline profit /by 2022"},{"lineNumber":14,"author":{"gitId":"LimJunxue"},"content":"deadline profit again /by 2023-01-28 1800"},{"lineNumber":15,"author":{"gitId":"LimJunxue"},"content":"deadline"},{"lineNumber":16,"author":{"gitId":"LimJunxue"},"content":"deadline profit /by"},{"lineNumber":17,"author":{"gitId":"LimJunxue"},"content":"list"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"done 2"},{"lineNumber":19,"author":{"gitId":"LimJunxue"},"content":"done 3"},{"lineNumber":20,"author":{"gitId":"LimJunxue"},"content":"done 4"},{"lineNumber":21,"author":{"gitId":"LimJunxue"},"content":"find"},{"lineNumber":22,"author":{"gitId":"LimJunxue"},"content":"find profit"},{"lineNumber":23,"author":{"gitId":"LimJunxue"},"content":"list"},{"lineNumber":24,"author":{"gitId":"LimJunxue"},"content":"done 1"},{"lineNumber":25,"author":{"gitId":"LimJunxue"},"content":"done ah"},{"lineNumber":26,"author":{"gitId":"LimJunxue"},"content":"delete"},{"lineNumber":27,"author":{"gitId":"LimJunxue"},"content":"delete ah"},{"lineNumber":28,"author":{"gitId":"LimJunxue"},"content":"delete 2"},{"lineNumber":29,"author":{"gitId":"LimJunxue"},"content":"list"},{"lineNumber":30,"author":{"gitId":"LimJunxue"},"content":"can i yolo"},{"lineNumber":31,"author":{"gitId":"LimJunxue"},"content":"bye"}],"authorContributionMap":{"LimJunxue":31}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"LimJunxue"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"LimJunxue"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"LimJunxue":2,"-":19}}]
