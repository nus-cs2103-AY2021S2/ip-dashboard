[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"# duke.duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"1. After the importing is complete, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"marcusleeeugene":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"checkstyleMain {"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"    source \u003d\u0027src/main/java\u0027"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"}"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"checkstyleTest {"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"    source \u003d\u0027src/test/java\u0027"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"}"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":23,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" * Duke information consisting of storage and tasks"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    private static Storage storage;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    private static TaskList tasks;"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for Duke"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    public Duke() {"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        initializeDuke(System.getProperty(\"user.dir\") + \"/data/duke.txt\");"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets up the data file storage path"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     * @param filePath File path directory"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    public void initializeDuke(String filePath) {"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException dukeEx) {"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     * Receives response from duke, depending on command"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"     * @param input Input from user"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"     * @return A string response from Duke"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws DukeException If there is parsing errors"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"            c.execute(tasks, storage);"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"            return \"Duke:\\n\" + c.getResponse();"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException dukeEx) {"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"            return \"Duke:\\n\" + dukeEx.toString();"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"    public String welcomeMessage() {"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        String output \u003d \"Duke:\\n Hello! I\u0027m Duke\\n\""},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"                + \"What can I do for you?\";"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"        return output;"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":55,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.controller.MainWindow;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"     * Sets up program to run MainWindow on start"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     * @param stage Stage to show"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    public void start(Stage stage) {"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"            stage.setScene(scene);"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().welcomeUser();"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"            stage.show();"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":38}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.command.ByeCommand;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import duke.command.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeExceptionType;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":" * Handles all parsing of input by user into commands, description and date (if applicable)"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"     * Determines command given by user input"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"     * @param text Input given by user"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     * @return Command to be supplied to be executed"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws DukeException If given an empty description, empty selection, invalid integer, unrecognized command"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    public static Command parse(String text) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"        String command \u003d command(text);"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        String description \u003d description(text);"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        Command commandType;"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        // Throws exception for ToDo, find, Event and Deadline commands"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"        if (command.equals(\"todo\") || command.equals(\"event\") || command.equals(\"deadline\")) {"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"            if (description.equals(command)) {"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"                //Empty description"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"                throw new DukeException(command, DukeExceptionType.EMPTY_DESCRIPTION);"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        // Throws exception for find command"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        if (command.equals(\"find\")) {"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"            if (description.equals(command)) {"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"                //Empty keyword"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"                throw new DukeException(command, DukeExceptionType.EMPTY_KEYWORD);"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        // Throws exception for done and delete commands"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        if (command.equals(\"done\") || command.equals(\"delete\")) {"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"            if (description.equals(command)) {"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"                throw new DukeException(command, DukeExceptionType.EMPTY_SELECTION);"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"            } else if (!Utility.isNumeric(description)) {"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"                // Selection not numeric"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"                throw new DukeException(command, DukeExceptionType.INVALID_INTEGER);"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"        switch (command) {"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"        case \"find\":"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"            commandType \u003d new FindCommand(command, description);"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"        case \"list\":"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"            commandType \u003d new ListCommand(command);"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"        case \"done\":"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"            commandType \u003d new DoneCommand(command, description);"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"        case \"delete\":"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"            commandType \u003d new DeleteCommand(command, description);"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"        case \"bye\":"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"            commandType \u003d new ByeCommand(command);"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"        case \"todo\":"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"            commandType \u003d new AddCommand(command, description);"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"        case \"event\":"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"        case \"deadline\":"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"            String date \u003d date(text);"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"            commandType \u003d new AddCommand(command, description, date);"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"        default:"},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"            throw new DukeException(DukeExceptionType.UNKNOWN_INPUT);"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"        return commandType;"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"    private static String command(String text) {"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"        String[] commandLine \u003d text.split(\" \");"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"        return commandLine[0];"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"    private static String description(String text) {"},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":"        String command \u003d command(text);"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"        text \u003d text.replaceFirst(command + \" \", \"\");"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"        String description \u003d \"\";"},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"        switch (command) {"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"        case \"find\":"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":"        case \"delete\":"},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":"        case \"done\":"},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"        case \"todo\":"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"            description \u003d text;"},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"        case \"event\":"},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":"            description \u003d text.split(\" /at\")[0].replaceFirst(\"event \", \"\");"},{"lineNumber":105,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":106,"author":{"gitId":"marcusleeeugene"},"content":"        case \"deadline\":"},{"lineNumber":107,"author":{"gitId":"marcusleeeugene"},"content":"            description \u003d text.split(\" /by\")[0].replaceFirst(\"deadline \", \"\");"},{"lineNumber":108,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":109,"author":{"gitId":"marcusleeeugene"},"content":"        default:"},{"lineNumber":110,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":111,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"        return description;"},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"    private static String date(String text) {"},{"lineNumber":117,"author":{"gitId":"marcusleeeugene"},"content":"        String command \u003d command(text);"},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"        text \u003d text.replaceFirst(command + \" \", \"\");"},{"lineNumber":119,"author":{"gitId":"marcusleeeugene"},"content":"        String date \u003d \"\";"},{"lineNumber":120,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":121,"author":{"gitId":"marcusleeeugene"},"content":"        switch (command) {"},{"lineNumber":122,"author":{"gitId":"marcusleeeugene"},"content":"        case \"event\":"},{"lineNumber":123,"author":{"gitId":"marcusleeeugene"},"content":"            date \u003d text.split(\" /at \")[1];"},{"lineNumber":124,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":125,"author":{"gitId":"marcusleeeugene"},"content":"        case \"deadline\":"},{"lineNumber":126,"author":{"gitId":"marcusleeeugene"},"content":"            date \u003d text.split(\" /by \")[1];"},{"lineNumber":127,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":128,"author":{"gitId":"marcusleeeugene"},"content":"        default:"},{"lineNumber":129,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":130,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":132,"author":{"gitId":"marcusleeeugene"},"content":"        return date;"},{"lineNumber":133,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":135,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":135}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeExceptionType;"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Task;"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.ToDo;"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":" * Handles storing and retrieving of TaskList contents"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"public class Storage {"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    private final String filePath;"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    private final String dirPath;"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for storage"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"     * @param filePath Path of where data will be stored at"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    public Storage(String filePath) {"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        dirPath \u003d filePath.replace(\"/duke.txt\", \"\");"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"     * Loads file content from storage file"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"     * @return List of Task from storage file"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws DukeException If unable to load file"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"            File file \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"            File dir \u003d new File(dirPath);"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"            handleNonExistentFiles(file, dir);"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"            while (sc.hasNext()) {"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"                String[] taskInfo \u003d sc.nextLine().split(\" \\\\| \");"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"                Task task \u003d new Task(\"\");"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"                switch(taskInfo[0]) {"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"                case \"T\":"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"                    // Duke.Tasks.ToDo task"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"                    task \u003d new ToDo(taskInfo[2]);"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"                    break;"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"                case \"D\":"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"                    // Duke.Tasks.Deadline task"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"                    task \u003d new Deadline(taskInfo[2], LocalDate.parse(taskInfo[3]));"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"                    break;"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"                case \"E\":"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"                    // Duke.Tasks.Event task"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"                    task \u003d new Event(taskInfo[2], LocalDate.parse(taskInfo[3]));"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"                    break;"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"                default:"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"                    break;"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"                }"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"                // Previously marked as done"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"                if (Integer.parseInt(taskInfo[1]) \u003d\u003d 1) {"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"                    task.markAsDone();"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"                }"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"                taskList.add(task);"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"            return taskList;"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (IOException ex) {"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"            throw new DukeException(DukeExceptionType.LOAD_ERROR);"},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"     * Save specified tasks into storage file"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tasks List of tasks to save"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws DukeException If unable to save to file"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"    public void save(TaskList tasks) throws DukeException {"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":"        File dir \u003d new File(dirPath);"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"        handleNonExistentFiles(file, dir);"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"            FileWriter fileWriter \u003d new FileWriter(file, false);"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":"                Task task \u003d tasks.get(i);"},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":"                fileWriter.write(task.writeContentFormat() + System.lineSeparator());"},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"            fileWriter.close();"},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (IOException ex) {"},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"            throw new DukeException(DukeExceptionType.SAVE_ERROR);"},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":107,"author":{"gitId":"marcusleeeugene"},"content":"    private void handleNonExistentFiles(File file, File dir) throws DukeException {"},{"lineNumber":108,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"marcusleeeugene"},"content":"            if (!Files.isDirectory(Paths.get(dirPath))) {"},{"lineNumber":110,"author":{"gitId":"marcusleeeugene"},"content":"                // Create data folder and duke.txt if do not exist"},{"lineNumber":111,"author":{"gitId":"marcusleeeugene"},"content":"                dir.mkdir();"},{"lineNumber":112,"author":{"gitId":"marcusleeeugene"},"content":"                file.createNewFile();"},{"lineNumber":113,"author":{"gitId":"marcusleeeugene"},"content":"            } else if (!file.exists()) {"},{"lineNumber":114,"author":{"gitId":"marcusleeeugene"},"content":"                // Create duke.txt if do not exist"},{"lineNumber":115,"author":{"gitId":"marcusleeeugene"},"content":"                file.createNewFile();"},{"lineNumber":116,"author":{"gitId":"marcusleeeugene"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (IOException ex) {"},{"lineNumber":118,"author":{"gitId":"marcusleeeugene"},"content":"            throw new DukeException(DukeExceptionType.FILE_CREATION_ERROR);"},{"lineNumber":119,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":122,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":122}},{"path":"src/main/java/duke/Utility.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" * Utility with methods to be used in multiple classes"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"public class Utility {"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * Used for DukeException handling, to check if user provides valid numeric selection when necessary"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * @param text String to check for numeric value"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     * @return True if valid numeric, false if invalid"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    public static boolean isNumeric(String text) {"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"            Integer.parseInt(text);"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"            return false;"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"        return true;"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"     * Used for DukeException handling, to check if user provides valid date"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"     * @param date Date in string format of yyyy-MM-dd"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"     * @return True if valid, false if invalid"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    public static boolean isValidDate(String date) {"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"            LocalDate localDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"            return false;"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        return true;"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":41}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Utility;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeExceptionType;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Event;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.ToDo;"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":" * Handles adding of ToDo, Event and Deadline tasks"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"public class AddCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for AddCommand, for ToDo task"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     * @param command ToDo command"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     * @param description Task name of ToDo"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    public AddCommand(String command, String description) {"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        super.command \u003d command;"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        super.description \u003d description;"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        super.date \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"     * Overloaded constructor for AddCommand, for Event and Deadline tasks"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     * @param command Event or Deadline command"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"     * @param description Task name of Event or Deadline"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    public AddCommand(String command, String description, String date) {"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"        super.command \u003d command;"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        super.description \u003d description;"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"        super.date \u003d date;"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    private void todoProcess(String taskName, TaskList tasks) {"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"        Task task \u003d new ToDo(taskName);"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        tasks.add(task);"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        output \u003d \"Got it. I\u0027ve added this task: \\n\""},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"                + task.toString() + getRemainingTasks(tasks);"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    private void eventProcess(String description, String date, TaskList tasks) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        if (!Utility.isValidDate(date)) {"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"            throw new DukeException(DukeExceptionType.INVALID_DATE_FORMAT);"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"        Task task \u003d new Event(description, LocalDate.parse(date));"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"        tasks.add(task);"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"        output \u003d \"Got it. I\u0027ve added this task: \\n\""},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"                + task.toString() + getRemainingTasks(tasks);"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    private void deadlineProcess(String description, String date, TaskList tasks) throws DukeException {"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"        if (!Utility.isValidDate(date)) {"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"            throw new DukeException(DukeExceptionType.INVALID_DATE_FORMAT);"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"        Task task \u003d new Deadline(description, LocalDate.parse(date));"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"        tasks.add(task);"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"        output \u003d \"Got it. I\u0027ve added this task: \\n\""},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"                + task.toString() + getRemainingTasks(tasks);"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"    private String getRemainingTasks(TaskList tasks) {"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"        return \"\\nNow you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"     * Adds task to TaskList, saves to storage file and outputs response to terminal"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tasks TaskList"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"     * @param storage Storage instance"},{"lineNumber":80,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws DukeException If invalid date given for event or deadline task"},{"lineNumber":81,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"marcusleeeugene"},"content":"        switch (command) {"},{"lineNumber":85,"author":{"gitId":"marcusleeeugene"},"content":"        case \"todo\":"},{"lineNumber":86,"author":{"gitId":"marcusleeeugene"},"content":"            todoProcess(description, tasks);"},{"lineNumber":87,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":88,"author":{"gitId":"marcusleeeugene"},"content":"        case \"event\":"},{"lineNumber":89,"author":{"gitId":"marcusleeeugene"},"content":"            eventProcess(description, date, tasks);"},{"lineNumber":90,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"marcusleeeugene"},"content":"        case \"deadline\":"},{"lineNumber":92,"author":{"gitId":"marcusleeeugene"},"content":"            deadlineProcess(description, date, tasks);"},{"lineNumber":93,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":94,"author":{"gitId":"marcusleeeugene"},"content":"        default:"},{"lineNumber":95,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"marcusleeeugene"},"content":"        storage.save(tasks);"},{"lineNumber":98,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":100,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"marcusleeeugene"},"content":"     * Determines if Exit is called by user"},{"lineNumber":102,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"marcusleeeugene"},"content":"     * @return false"},{"lineNumber":104,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isExit() {"},{"lineNumber":107,"author":{"gitId":"marcusleeeugene"},"content":"        return false;"},{"lineNumber":108,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":109}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":" * Handles user request to exit program"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for DeleteCommand"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     * @param command Bye command"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    public ByeCommand(String command) {"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        super.command \u003d command;"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        super.description \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        super.date \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     * Outputs response to terminal"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tasks TaskList"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"     * @param storage Storage instance"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute(TaskList tasks, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        output \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * Determines if Exit is called by user"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"     * @return true"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isExit() {"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        return true;"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":42}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" * Abstract class to be inherited by different commands"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    protected String command;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    protected String description;"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    protected String date;"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"    protected String output;"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"     * Used for JUnit test"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"     * @return Information of command, description, date"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    public String getTaskInfo() {"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"        return String.format(\"%s %s %s\", command, description, date);"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    public abstract void execute(TaskList tasks, Storage storage) throws DukeException;"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    public abstract boolean isExit();"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    public String getResponse() {"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        return output;"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":31}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeExceptionType;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":" * Handles deletion of task"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for DeleteCommand"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"     * @param command Delete command"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"     * @param selection Selected task"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    public DeleteCommand(String command, String selection) {"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"        this.command \u003d command;"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"        this.description \u003d selection;"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"        this.date \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    private void deleteProcess(String selection, TaskList tasks) {"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        int taskNum \u003d Integer.parseInt(selection);"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        Task task \u003d tasks.get(taskNum);"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        tasks.remove(task);"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        output \u003d \"Noted. I\u0027ve removed this task: \\n\""},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"                + task.toString() + getRemainingTasks(tasks);"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    private String getRemainingTasks(TaskList tasks) {"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        return \"\\nNow you have \" + tasks.size() + \" tasks in the list.\";"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"     * Deletes task from TaskList, saves to storage file and outputs response to terminal"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tasks TaskList"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"     * @param storage Storage instance"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws DukeException If invalid selection given"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        if (Integer.parseInt(description) \u003e tasks.size() || Integer.parseInt(description) \u003c\u003d 0) {"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"            // Selection out of taskList range"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"            throw new DukeException(command, DukeExceptionType.SELECTION_EXCEED_RANGE);"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"        deleteProcess(description, tasks);"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        storage.save(tasks);"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"     * Determines if Exit is called by user"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"     * @return false"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isExit() {"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"        return false;"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":64}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeExceptionType;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":" * Handles marking a task as done"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for DoneCommand"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"     * @param command Done command"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"     * @param selection Selected task"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    public DoneCommand(String command, String selection) {"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"        this.command \u003d command;"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"        this.description \u003d selection;"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"        this.date \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    private void doneProcess(String selection, TaskList tasks) {"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        int taskNum \u003d Integer.parseInt(selection);"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        Task task \u003d tasks.get(taskNum);"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        task.markAsDone();"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        output \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t  \""},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"                + task.toString();"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     * Marks task as done TaskList, saves to storage file and outputs response to terminal"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tasks TaskList"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"     * @param storage Storage instance"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"     * @throws DukeException If invalid selection given"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        if (Integer.parseInt(description) \u003e tasks.size() || Integer.parseInt(description) \u003c\u003d 0) {"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"            // Selection out of taskList range"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"            throw new DukeException(command, DukeExceptionType.SELECTION_EXCEED_RANGE);"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        doneProcess(description, tasks);"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        storage.save(tasks);"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"     * Determines if Exit is called by user"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"     * @return false"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isExit() {"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"        return false;"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":60}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" * Handles finding matching keywords of a task name"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for FindCommand"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     * @param command Find command"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * @param keyword Keyword to match"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    public FindCommand(String command, String keyword) {"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        super.command \u003d command;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        super.description \u003d keyword;"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     * Searches for keyword specified and filter out only tasks with description matches"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tasks TaskList"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"     * @return List of keyword-matched tasks to output"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    private String getMatchedTaskListContents(TaskList tasks) {"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        String contents \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        // Tracks index of previously matched task"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"        int prevIndex \u003d 1;"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"            if (task.getDescription().toLowerCase().contains(description.toLowerCase())) {"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"                contents +\u003d String.format(\"\\n\\t%d.%s\", prevIndex, task.toString());"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"                prevIndex++;"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        return contents;"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"     * Outputs list of keyword-matched tasks"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tasks TaskList"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"     * @param storage Storage instance"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute(TaskList tasks, Storage storage) {"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"        output \u003d getMatchedTaskListContents(tasks);"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"     * Determines if Exit is called by user"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"     * @return false"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isExit() {"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"        return false;"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":63}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" * Handles listing of tasks in TaskList"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for ListCommand"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     * @param command List command"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    public ListCommand(String command) {"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        super.command \u003d command;"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        super.description \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        super.date \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    private String getTaskListContents(TaskList tasks) {"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"        String contents \u003d \"Here are the tasks in your list:\";"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"            contents +\u003d String.format(\"\\n\\t%d.%s\", i, task.toString());"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        return contents;"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * Outputs list of tasks to terminal"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"     * @param tasks TaskList"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     * @param storage Storage instance"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"    public void execute(TaskList tasks, Storage storage) {"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"        output \u003d getTaskListContents(tasks);"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"     * Determines if Exit is called by user"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"     * @return false"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"    public boolean isExit() {"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"        return false;"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":53}},{"path":"src/main/java/duke/controller/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":" * containing text from the speaker."},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"public class DialogBox extends HBox {"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    private Label dialog;"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    private ImageView displayPicture;"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"            fxmlLoader.load();"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"        dialog.setText(text);"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"        displayPicture.setImage(img);"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    private void flip() {"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        Collections.reverse(tmp);"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a user dialog box"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"     * @param text Input from user"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"     * @param img User display picture"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"     * @return DialogBox with User input and display picture"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"        return new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a duke dialog box"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"     * @param text Response from duke"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"     * @param img Duke display picture"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"     * @return DialogBox with Duke input and display picture"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"        db.flip();"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"        return db;"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":74}},{"path":"src/main/java/duke/controller/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"     * Initialize MainWindow.fxml"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"    public void initialize() {"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"     * Receives duke object and sets up for MainWindow"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"     * @param d Duke object"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"        duke \u003d d;"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates a dialog box where Duke welcomes user"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"    public void welcomeUser() {"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"                DialogBox.getDukeDialog(duke.welcomeMessage(), dukeImage)"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"    private void handleUserInput() {"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"            String input \u003d userInput.getText();"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"            String response \u003d duke.getResponse(input);"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"                    DialogBox.getUserDialog(\"You:\\n\" + input, userImage),"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"            );"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"            userInput.clear();"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException dukeEx) {"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"                    DialogBox.getDukeDialog(dukeEx.toString(), dukeImage)"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"            );"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"            userInput.clear();"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":78}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":" * Custom Exception handling for DukeBot when handling commands"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"    private String command;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"    private DukeExceptionType exceptionType;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for DukeException"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * @param exceptionType Type of exception"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    public DukeException(DukeExceptionType exceptionType) {"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"        super();"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        this.command \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"        this.exceptionType \u003d exceptionType;"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for DukeException"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     * @param command Command given by user"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"     * @param exceptionType Type of exception that is caught"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    public DukeException(String command, DukeExceptionType exceptionType) {"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        super();"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"        this.command \u003d command;"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        this.exceptionType \u003d exceptionType;"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns the correct error message depending on exception"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"     * @return Error message"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        String errMsg \u003d \"\";"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"        switch (exceptionType) {"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        case EMPTY_SELECTION:"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! The selection for \" + command + \" cannot be empty.\";"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        case EMPTY_DESCRIPTION:"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! The description of a \" + command + \" cannot be empty.\";"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"        case EMPTY_KEYWORD:"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! The keyword for \" + command + \" cannot be empty.\";"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"        case INVALID_INTEGER:"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! The selection for \" + command + \" should be a valid Integer.\";"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"        case UNKNOWN_INPUT:"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"        case SELECTION_EXCEED_RANGE:"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! The selection for \" + command + \" is not within the list\u0027s range.\";"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"        case INVALID_DATE_FORMAT:"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! Please key in a valid date format (e.g. 2021-12-01) in yyyy-mm-dd format.\";"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"        case LOAD_ERROR:"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! The contents of the loaded file is corrupted, a new file will be created.\";"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":"        case SAVE_ERROR:"},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! Unable to write to Duke.Duke.txt, please try again.\";"},{"lineNumber":69,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"marcusleeeugene"},"content":"        case FILE_CREATION_ERROR:"},{"lineNumber":71,"author":{"gitId":"marcusleeeugene"},"content":"            errMsg \u003d \"☹ OOPS!!! Unable to create file, please restart the program.\";"},{"lineNumber":72,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"marcusleeeugene"},"content":"        default:"},{"lineNumber":74,"author":{"gitId":"marcusleeeugene"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":77,"author":{"gitId":"marcusleeeugene"},"content":"        return errMsg;"},{"lineNumber":78,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":79}},{"path":"src/main/java/duke/exception/DukeExceptionType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":" * Enum class to differentiate DukeException types"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"public enum DukeExceptionType {"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"    EMPTY_SELECTION, EMPTY_DESCRIPTION, EMPTY_KEYWORD,"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"    INVALID_INTEGER, UNKNOWN_INPUT, SELECTION_EXCEED_RANGE, INVALID_DATE_FORMAT,"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"    LOAD_ERROR, SAVE_ERROR, FILE_CREATION_ERROR"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":10}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":" * A task for deadline"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    protected LocalDate by;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for deadline"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * @param description Task name"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     * @param by Specific date/time which task is to be done by"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"        this.by \u003d by;"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     * Content to write into storage file"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"     * @return String format for task information"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    public String writeContentFormat() {"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        return String.format(\"D | %s | %s\", super.writeContentFormat(), by);"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns task type, status icon, task name and due date"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"     * @return String format specific to deadline task"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":42}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":" * A task for event"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    protected LocalDate at;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for event"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"     * @param description Task name"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"     * @param at Start at a specific time and ends at a specific time"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"        this.at \u003d at;"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     * Content to write into storage file"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"     * @return String format for task information"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    public String writeContentFormat() {"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        return String.format(\"E | %s | %s\", super.writeContentFormat(), at);"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns task type, status icon, task name and specific start and end time"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"     * @return String format specific to event task"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":" * Duke.Tasks.Task created by user"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for Task"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * @param description Task Name"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"     * Marks a task as done"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    public void markAsDone() {"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"     * Gets a task status"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"     * @return Tick if marked as done, empty string if not done"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    public String getStatusIcon() {"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"        // Return tick if done"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns task name"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"     * @return Task name"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"    public String getDescription() {"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"        return String.format(\"%s\", description);"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"    public String writeContentFormat() {"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"        return String.format(\"%d | %s\", isDone ? 1 : 0, getDescription());"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns status icon and task name"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"     * @return Status icon and task name"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":60}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":" * TaskList keeps all information of task for the session"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for TaskList"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        taskList.add(null);"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"     * Overloaded constructor for TaskList for loading from storage file"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"     * @param taskList"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"        this.taskList.add(null);"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        this.taskList.addAll(taskList);"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"     * Size of TaskList, excluding index 0"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"     * @return Size of TaskList"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"    public int size() {"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"        return taskList.size() - 1;"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"     * Adds task to TaskList"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"     * @param task Task to be added"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"    public void add(Task task) {"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        taskList.add(task);"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"     * Removes specified task from TaskList"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"     * @param task Task to be removed"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":"    public void remove(Task task) {"},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"        taskList.remove(task);"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"     * Retrieves Task from TaskList"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"     * @param i Index of task in TaskList"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"     * @return Task to be retrieved"},{"lineNumber":63,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"marcusleeeugene"},"content":"    public Task get(int i) {"},{"lineNumber":65,"author":{"gitId":"marcusleeeugene"},"content":"        return taskList.get(i);"},{"lineNumber":66,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":68,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":68}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":" * A task for ToDo"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":" */"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"     * Constructor for ToDo"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"     * @param description Task name"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"     * Content to write into storage file"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"     * @return String format for task information"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"    public String writeContentFormat() {"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"        return String.format(\"T | %s\", super.writeContentFormat());"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"     * Returns task type, status icon and task name"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"     * @return String format specific to ToDo task"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":36}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"marcusleeeugene":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controller.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"marcusleeeugene":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    public void parseTest() throws DukeException {"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(\"todo test1 \", Parser.parse(\"todo test1\").getTaskInfo());"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(\"deadline hello 2018-10-01\", Parser.parse(\"deadline hello /by 2018-10-01\").getTaskInfo());"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(\"event hello 2018-10-01\", Parser.parse(\"event hello /at 2018-10-01\").getTaskInfo());"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(\"list  \", Parser.parse(\"list\").getTaskInfo());"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(\"bye  \", Parser.parse(\"bye\").getTaskInfo());"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(\"done 1 \", Parser.parse(\"done 1\").getTaskInfo());"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":19}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"public class StorageTest {"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"    public void loadTest_exceptionThrown() {"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/xD.txt\").load();"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"            fail();"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException ex) {"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"            assertEquals(\"☹ OOPS!!! The contents of the loaded file is corrupted, a new file will be created.\","},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"                    ex.toString());"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/\").load();"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"            fail();"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException ex) {"},{"lineNumber":26,"author":{"gitId":"marcusleeeugene"},"content":"            assertEquals(\"☹ OOPS!!! The contents of the loaded file is corrupted, a new file will be created.\","},{"lineNumber":27,"author":{"gitId":"marcusleeeugene"},"content":"                    ex.toString());"},{"lineNumber":28,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":30,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"marcusleeeugene"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/Duke.txt\").load();"},{"lineNumber":32,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException ex) {"},{"lineNumber":33,"author":{"gitId":"marcusleeeugene"},"content":"            fail();"},{"lineNumber":34,"author":{"gitId":"marcusleeeugene"},"content":"            assertEquals(\"☹ OOPS!!! The contents of the loaded file is corrupted, a new file will be created.\","},{"lineNumber":35,"author":{"gitId":"marcusleeeugene"},"content":"                    ex.toString());"},{"lineNumber":36,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":39,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"marcusleeeugene"},"content":"    public void saveTest_exceptionThrown() {"},{"lineNumber":41,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"marcusleeeugene"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/xD.txt\").save(new TaskList());"},{"lineNumber":43,"author":{"gitId":"marcusleeeugene"},"content":"            fail();"},{"lineNumber":44,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException ex) {"},{"lineNumber":45,"author":{"gitId":"marcusleeeugene"},"content":"            assertEquals(\"☹ OOPS!!! Unable to write to Duke.Duke.txt, please try again.\", ex.toString());"},{"lineNumber":46,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":48,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"marcusleeeugene"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/\").save(new TaskList());"},{"lineNumber":50,"author":{"gitId":"marcusleeeugene"},"content":"            fail();"},{"lineNumber":51,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException ex) {"},{"lineNumber":52,"author":{"gitId":"marcusleeeugene"},"content":"            assertEquals(\"☹ OOPS!!! Unable to write to Duke.Duke.txt, please try again.\", ex.toString());"},{"lineNumber":53,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":55,"author":{"gitId":"marcusleeeugene"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"marcusleeeugene"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/Duke.txt\").save(new TaskList());"},{"lineNumber":57,"author":{"gitId":"marcusleeeugene"},"content":"        } catch (DukeException ex) {"},{"lineNumber":58,"author":{"gitId":"marcusleeeugene"},"content":"            fail();"},{"lineNumber":59,"author":{"gitId":"marcusleeeugene"},"content":"            assertEquals(\"☹ OOPS!!! Unable to write to Duke.Duke.txt, please try again.\", ex.toString());"},{"lineNumber":60,"author":{"gitId":"marcusleeeugene"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":62}},{"path":"src/test/java/duke/UtilityTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"import static duke.Utility.isNumeric;"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"import static duke.Utility.isValidDate;"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"public class UtilityTest {"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"    public void isNumericTest() {"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(true, isNumeric(\"10\"));"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(true, isNumeric(\"-1\"));"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(false, isNumeric(\"ten\"));"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(false, isNumeric(\"10sad10\"));"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"marcusleeeugene"},"content":""},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"marcusleeeugene"},"content":"    public void isValidDateTest() {"},{"lineNumber":20,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(true, isValidDate(\"2018-10-02\"));"},{"lineNumber":21,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(false, isValidDate(\"02-10-2019\"));"},{"lineNumber":22,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(false, isValidDate(\"21 October 2021\"));"},{"lineNumber":23,"author":{"gitId":"marcusleeeugene"},"content":"        assertEquals(false, isValidDate(\"2018-10-02 19sx\"));"},{"lineNumber":24,"author":{"gitId":"marcusleeeugene"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"marcusleeeugene"},"content":"}"}],"authorContributionMap":{"marcusleeeugene":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marcusleeeugene"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"marcusleeeugene"},"content":"deadline return book /by 2021-01-02"},{"lineNumber":3,"author":{"gitId":"marcusleeeugene"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"marcusleeeugene"},"content":"event project meeting /at 2021-02-01"},{"lineNumber":5,"author":{"gitId":"marcusleeeugene"},"content":"list"},{"lineNumber":6,"author":{"gitId":"marcusleeeugene"},"content":"blah"},{"lineNumber":7,"author":{"gitId":"marcusleeeugene"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"marcusleeeugene"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"marcusleeeugene"},"content":"list"},{"lineNumber":10,"author":{"gitId":"marcusleeeugene"},"content":"todo"},{"lineNumber":11,"author":{"gitId":"marcusleeeugene"},"content":"event"},{"lineNumber":12,"author":{"gitId":"marcusleeeugene"},"content":"deadline"},{"lineNumber":13,"author":{"gitId":"marcusleeeugene"},"content":"delete"},{"lineNumber":14,"author":{"gitId":"marcusleeeugene"},"content":"delete 2"},{"lineNumber":15,"author":{"gitId":"marcusleeeugene"},"content":"list"},{"lineNumber":16,"author":{"gitId":"marcusleeeugene"},"content":"bye"}],"authorContributionMap":{"marcusleeeugene":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"marcusleeeugene"},"content":"java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"marcusleeeugene":1,"-":20}}]
