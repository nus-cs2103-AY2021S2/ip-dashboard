[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    protected String by;"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    public Deadline(String name, String by) {"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"        super(name);"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"        this.by \u003d by;"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":"    public Deadline(String input) throws DukeDeadlineException {"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":"        super(input.split(\" /by \", 2)[0]);"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":12,"author":{"gitId":"oeiyiping"},"content":"        String[] split \u003d input.split(\" /by \", 2);"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":"        if (split.length !\u003d 2) {"},{"lineNumber":14,"author":{"gitId":"oeiyiping"},"content":"            throw new DukeDeadlineException();"},{"lineNumber":15,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":"        this.by \u003d split[1];"},{"lineNumber":18,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":20,"author":{"gitId":"oeiyiping"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"oeiyiping"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":22,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":23}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"    private final Scanner scanner;"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":15,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":16,"author":{"gitId":"oeiyiping"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":18,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":20,"author":{"gitId":"oeiyiping"},"content":"    public Duke() {"},{"lineNumber":21,"author":{"gitId":"oeiyiping"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":22,"author":{"gitId":"oeiyiping"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":24,"author":{"gitId":"oeiyiping"},"content":"        greet();"},{"lineNumber":25,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":26,"author":{"gitId":"oeiyiping"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":27,"author":{"gitId":"oeiyiping"},"content":"            try {"},{"lineNumber":28,"author":{"gitId":"oeiyiping"},"content":"                String command \u003d scanner.next();"},{"lineNumber":29,"author":{"gitId":"oeiyiping"},"content":"                listen(command);"},{"lineNumber":30,"author":{"gitId":"oeiyiping"},"content":"            } catch (DukeInvalidCommandException e) {"},{"lineNumber":31,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"Sorry I don\u0027t understand, please key in a valid command!\\n\");"},{"lineNumber":32,"author":{"gitId":"oeiyiping"},"content":"            } catch (DukeToDoException e) {"},{"lineNumber":33,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"ToDo description cannot be blank!\\n\");"},{"lineNumber":34,"author":{"gitId":"oeiyiping"},"content":"            } catch (DukeEventException e) {"},{"lineNumber":35,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"Event command must follow the format: description /at time\\n\");"},{"lineNumber":36,"author":{"gitId":"oeiyiping"},"content":"            } catch (DukeDeadlineException e) {"},{"lineNumber":37,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"Deadline command must follow the format: description /by time\\n\");"},{"lineNumber":38,"author":{"gitId":"oeiyiping"},"content":"            } finally {"},{"lineNumber":39,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"Hit me up boss.\");"},{"lineNumber":40,"author":{"gitId":"oeiyiping"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":44,"author":{"gitId":"oeiyiping"},"content":"    private void greet() {"},{"lineNumber":45,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"Hello, I\u0027m Duke!\\n\" + \"What can I do for you?\\n\");"},{"lineNumber":46,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":48,"author":{"gitId":"oeiyiping"},"content":"    private void listen(String command) throws"},{"lineNumber":49,"author":{"gitId":"oeiyiping"},"content":"            DukeInvalidCommandException, DukeToDoException, DukeEventException, DukeDeadlineException {"},{"lineNumber":50,"author":{"gitId":"oeiyiping"},"content":"        switch (command) {"},{"lineNumber":51,"author":{"gitId":"oeiyiping"},"content":"        case \"bye\":"},{"lineNumber":52,"author":{"gitId":"oeiyiping"},"content":"            shutDown();"},{"lineNumber":53,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"oeiyiping"},"content":"        case \"deadline\":"},{"lineNumber":55,"author":{"gitId":"oeiyiping"},"content":"            // substring from index\u003d1 to ignore the whitespace following \"deadline\", at index \u003d 0."},{"lineNumber":56,"author":{"gitId":"oeiyiping"},"content":"            addToList(new Deadline(scanner.nextLine().substring(1)));"},{"lineNumber":57,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"oeiyiping"},"content":"        case \"delete\":"},{"lineNumber":59,"author":{"gitId":"oeiyiping"},"content":"            deleteTask(scanner.nextInt());"},{"lineNumber":60,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"oeiyiping"},"content":"        case \"done\":"},{"lineNumber":62,"author":{"gitId":"oeiyiping"},"content":"            taskDone(scanner.nextInt());"},{"lineNumber":63,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"oeiyiping"},"content":"        case \"event\":"},{"lineNumber":65,"author":{"gitId":"oeiyiping"},"content":"            // substring from index\u003d1 to ignore the whitespace following \"event\", at index \u003d 0."},{"lineNumber":66,"author":{"gitId":"oeiyiping"},"content":"            addToList(new Event(scanner.nextLine().substring(1)));"},{"lineNumber":67,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":68,"author":{"gitId":"oeiyiping"},"content":"        case \"list\":"},{"lineNumber":69,"author":{"gitId":"oeiyiping"},"content":"            printList();"},{"lineNumber":70,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":71,"author":{"gitId":"oeiyiping"},"content":"        case \"todo\":"},{"lineNumber":72,"author":{"gitId":"oeiyiping"},"content":"            // substring from index\u003d1 to ignore the whitespace at index \u003d 0."},{"lineNumber":73,"author":{"gitId":"oeiyiping"},"content":"            addToList(new ToDo(scanner.nextLine().substring(1)));"},{"lineNumber":74,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"oeiyiping"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"oeiyiping"},"content":"            throw new DukeInvalidCommandException();"},{"lineNumber":77,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":80,"author":{"gitId":"oeiyiping"},"content":"    private void addToList(Task task) {"},{"lineNumber":81,"author":{"gitId":"oeiyiping"},"content":"        tasks.add(task);"},{"lineNumber":82,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"A new challenger has appeared: \" + task + \"\\n\");"},{"lineNumber":83,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":85,"author":{"gitId":"oeiyiping"},"content":"    private void printList() {"},{"lineNumber":86,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"You have \" + tasks.size() + \" task(s) in the list:\");"},{"lineNumber":87,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":88,"author":{"gitId":"oeiyiping"},"content":"        int i \u003d 1;"},{"lineNumber":89,"author":{"gitId":"oeiyiping"},"content":"        for (Task t : tasks) {"},{"lineNumber":90,"author":{"gitId":"oeiyiping"},"content":"            System.out.println(i + \". \" + t);"},{"lineNumber":91,"author":{"gitId":"oeiyiping"},"content":"            i++;"},{"lineNumber":92,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"oeiyiping"},"content":"        System.out.println();"},{"lineNumber":94,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":96,"author":{"gitId":"oeiyiping"},"content":"    private void taskDone(int index) {"},{"lineNumber":97,"author":{"gitId":"oeiyiping"},"content":"        Task task \u003d tasks.get(index - 1);"},{"lineNumber":98,"author":{"gitId":"oeiyiping"},"content":"        task.markAsDone();"},{"lineNumber":99,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"Impressive, yet another task has been done: \\n\""},{"lineNumber":100,"author":{"gitId":"oeiyiping"},"content":"                + task"},{"lineNumber":101,"author":{"gitId":"oeiyiping"},"content":"                + \"\\nOne step closer to freedom now boss.\\n\");"},{"lineNumber":102,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":104,"author":{"gitId":"oeiyiping"},"content":"    private void deleteTask(int index) {"},{"lineNumber":105,"author":{"gitId":"oeiyiping"},"content":"        Task task \u003d tasks.get(index - 1);"},{"lineNumber":106,"author":{"gitId":"oeiyiping"},"content":"        tasks.remove(index - 1);"},{"lineNumber":107,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"Alrighty bossman. I shall wipe this task off the face of the earth: \\n\""},{"lineNumber":108,"author":{"gitId":"oeiyiping"},"content":"                + task"},{"lineNumber":109,"author":{"gitId":"oeiyiping"},"content":"                + \"\\nGood riddance.\\n\");"},{"lineNumber":110,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":112,"author":{"gitId":"oeiyiping"},"content":"    private void shutDown() {"},{"lineNumber":113,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"See you soon boss!\\n\");"},{"lineNumber":114,"author":{"gitId":"oeiyiping"},"content":"        System.exit(0);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"oeiyiping":105,"-":11}},{"path":"src/main/java/DukeDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class DukeDeadlineException extends DukeException{"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    public DukeDeadlineException() {"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"        super(\"Input does not comply with deadline command format\");"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":5}},{"path":"src/main/java/DukeEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class DukeEventException extends DukeException{"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    public DukeEventException() {"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"        super(\"Input does not comply with event command format\");"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":5}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class DukeException extends Exception{"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    public DukeException(String s) {"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"        super(s);"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":5}},{"path":"src/main/java/DukeInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class DukeInvalidCommandException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    public DukeInvalidCommandException() {"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"        super(\"Invalid command\");"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":5}},{"path":"src/main/java/DukeToDoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class DukeToDoException extends DukeException {"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    public DukeToDoException() {"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"        super(\"ToDo description cannot be empty\");"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    protected String at;"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    public Event(String name, String at) {"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"        super(name);"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"        this.at \u003d at;"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":"    public Event(String input) throws DukeEventException {"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":"        super(input.split(\" /at \", 2)[0]);"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":12,"author":{"gitId":"oeiyiping"},"content":"        String[] split \u003d input.split(\" /at \", 2);"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":"        if (split.length !\u003d 2) {"},{"lineNumber":14,"author":{"gitId":"oeiyiping"},"content":"            throw new DukeEventException();"},{"lineNumber":15,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":"        this.at \u003d split[1];"},{"lineNumber":18,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":20,"author":{"gitId":"oeiyiping"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"oeiyiping"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":22,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":23}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    protected String name;"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"    public Task(String name) {"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"        this.name \u003d name;"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"        isDone \u003d false;"},{"lineNumber":8,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":"    public void markAsDone() {"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":"        this.isDone \u003d true;"},{"lineNumber":12,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":14,"author":{"gitId":"oeiyiping"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"oeiyiping"},"content":"        String status \u003d isDone ? \"[X]\" : \"[ ]\";"},{"lineNumber":16,"author":{"gitId":"oeiyiping"},"content":"        return status + \" \" + this.name;"},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":18}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    public ToDo(String name) throws DukeToDoException {"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"        super(name);"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"        if (name.isBlank()) {"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"            throw new DukeToDoException();"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"todo buy bread"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"event have breakfast /at 9am"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"deadline wash the dishes /by 10am"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"list"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"list"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"bye"}],"authorContributionMap":{"oeiyiping":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"oeiyiping":1,"-":20}}]
