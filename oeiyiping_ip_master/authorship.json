[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"public class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"    protected LocalDateTime by;"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"    protected final static DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, HH:mm\");"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":8,"author":{"gitId":"oeiyiping"},"content":"    public Deadline(String input) throws DukeException {"},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":"        super(input.split(\" /by \", 2)[0], \"D\");"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":"        String[] split \u003d input.split(\" /by \", 2);"},{"lineNumber":12,"author":{"gitId":"oeiyiping"},"content":"        if (split.length !\u003d 2) {"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":"            throw new DukeException(\"Deadline command must follow the format: description /by time\");"},{"lineNumber":14,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":16,"author":{"gitId":"oeiyiping"},"content":"        String[] datetime \u003d split[1].split(\" \");"},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":"        String date \u003d datetime[0];"},{"lineNumber":18,"author":{"gitId":"oeiyiping"},"content":"        String time \u003d datetime.length \u003e 1 // if time is not provided, default time is 23:59:59"},{"lineNumber":19,"author":{"gitId":"oeiyiping"},"content":"                ? datetime[1].substring(0, 2) + \":\" + datetime[1].substring(2, 4)"},{"lineNumber":20,"author":{"gitId":"oeiyiping"},"content":"                : \"23:59:59\";"},{"lineNumber":21,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":22,"author":{"gitId":"oeiyiping"},"content":"        this.by \u003d LocalDateTime.parse(date + \"T\" + time);"},{"lineNumber":23,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":25,"author":{"gitId":"oeiyiping"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"oeiyiping"},"content":"        return super.toString() + \" (by: \" + by.format(DATE_TIME_FORMAT) + \")\";"},{"lineNumber":27,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":29,"author":{"gitId":"oeiyiping"},"content":"    public String toLog() {"},{"lineNumber":30,"author":{"gitId":"oeiyiping"},"content":"        return super.toLog() + \" | \" + by;"},{"lineNumber":31,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":32}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"import java.io.BufferedWriter;"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"import java.io.FileWriter;"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":"    private final Scanner scanner;"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":"        String logo \u003d"},{"lineNumber":14,"author":{"gitId":"oeiyiping"},"content":"                \"$$    $$                                $$\\n\" +"},{"lineNumber":15,"author":{"gitId":"oeiyiping"},"content":"                \"$$    $$                                $$\\n\" +"},{"lineNumber":16,"author":{"gitId":"oeiyiping"},"content":"                \"$$    $$   $$$$$$   $$$$$$$    $$$$$$$  $$$$$$$   $$$$$$ $$$$    $$$$$$   $$$$$$$\\n\" +"},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":"                \"$$$$$$$$  $$    $$  $$    $$  $$        $$    $$  $$   $$   $$        $$  $$    $$\\n\" +"},{"lineNumber":18,"author":{"gitId":"oeiyiping"},"content":"                \"$$    $$  $$$$$$$$  $$    $$  $$        $$    $$  $$   $$   $$   $$$$$$$  $$    $$\\n\" +"},{"lineNumber":19,"author":{"gitId":"oeiyiping"},"content":"                \"$$    $$  $$        $$    $$  $$        $$    $$  $$   $$   $$  $$    $$  $$    $$\\n\" +"},{"lineNumber":20,"author":{"gitId":"oeiyiping"},"content":"                \"$$    $$   $$$$$$$  $$    $$   $$$$$$$  $$    $$  $$   $$   $$   $$$$$$$  $$    $$\\n\";"},{"lineNumber":21,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":23,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":24,"author":{"gitId":"oeiyiping"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":25,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":26,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":28,"author":{"gitId":"oeiyiping"},"content":"    public Duke() {"},{"lineNumber":29,"author":{"gitId":"oeiyiping"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":30,"author":{"gitId":"oeiyiping"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":32,"author":{"gitId":"oeiyiping"},"content":"        greet();"},{"lineNumber":33,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":34,"author":{"gitId":"oeiyiping"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":35,"author":{"gitId":"oeiyiping"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"oeiyiping"},"content":"                String command \u003d scanner.next();"},{"lineNumber":37,"author":{"gitId":"oeiyiping"},"content":"                listen(command);"},{"lineNumber":38,"author":{"gitId":"oeiyiping"},"content":"            } catch (DukeException e) {"},{"lineNumber":39,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"Sorry boss something went wrong: \");"},{"lineNumber":40,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(e.getMessage());"},{"lineNumber":41,"author":{"gitId":"oeiyiping"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":42,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"Sorry boss something went wrong: \");"},{"lineNumber":43,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"Please follow the Date-Time format: YYYY-MM-DD TIME\");"},{"lineNumber":44,"author":{"gitId":"oeiyiping"},"content":"            } finally {"},{"lineNumber":45,"author":{"gitId":"oeiyiping"},"content":"                System.out.println(\"\\nHit me up boss.\");"},{"lineNumber":46,"author":{"gitId":"oeiyiping"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":50,"author":{"gitId":"oeiyiping"},"content":"    private void greet() {"},{"lineNumber":51,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"Greetings Boss, I\u0027m your top henchman.\\n\" + \"What can I do for you?\\n\");"},{"lineNumber":52,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":54,"author":{"gitId":"oeiyiping"},"content":"    private void listen(String command) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"oeiyiping"},"content":"        switch (command) {"},{"lineNumber":56,"author":{"gitId":"oeiyiping"},"content":"        case \"bye\":"},{"lineNumber":57,"author":{"gitId":"oeiyiping"},"content":"            shutDown();"},{"lineNumber":58,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"oeiyiping"},"content":"        case \"deadline\":"},{"lineNumber":60,"author":{"gitId":"oeiyiping"},"content":"            // substring from index\u003d1 to ignore the whitespace following \"deadline\", at index \u003d 0."},{"lineNumber":61,"author":{"gitId":"oeiyiping"},"content":"            addTask(new Deadline(scanner.nextLine().substring(1)));"},{"lineNumber":62,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":63,"author":{"gitId":"oeiyiping"},"content":"        case \"delete\":"},{"lineNumber":64,"author":{"gitId":"oeiyiping"},"content":"            deleteTask(scanner.nextInt());"},{"lineNumber":65,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"oeiyiping"},"content":"        case \"done\":"},{"lineNumber":67,"author":{"gitId":"oeiyiping"},"content":"            doneTask(scanner.nextInt());"},{"lineNumber":68,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"oeiyiping"},"content":"        case \"event\":"},{"lineNumber":70,"author":{"gitId":"oeiyiping"},"content":"            // substring from index\u003d1 to ignore the whitespace following \"event\", at index \u003d 0."},{"lineNumber":71,"author":{"gitId":"oeiyiping"},"content":"            addTask(new Event(scanner.nextLine().substring(1)));"},{"lineNumber":72,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"oeiyiping"},"content":"        case \"list\":"},{"lineNumber":74,"author":{"gitId":"oeiyiping"},"content":"            printTasks();"},{"lineNumber":75,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"oeiyiping"},"content":"        case \"todo\":"},{"lineNumber":77,"author":{"gitId":"oeiyiping"},"content":"            // substring from index\u003d1 to ignore the whitespace at index \u003d 0."},{"lineNumber":78,"author":{"gitId":"oeiyiping"},"content":"            addTask(new ToDo(scanner.nextLine().substring(1)));"},{"lineNumber":79,"author":{"gitId":"oeiyiping"},"content":"            break;"},{"lineNumber":80,"author":{"gitId":"oeiyiping"},"content":"        default:"},{"lineNumber":81,"author":{"gitId":"oeiyiping"},"content":"            throw new DukeException(\"Invalid command, please provide a supported command.\");"},{"lineNumber":82,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":85,"author":{"gitId":"oeiyiping"},"content":"    private void addTask(Task task) {"},{"lineNumber":86,"author":{"gitId":"oeiyiping"},"content":"        tasks.add(task);"},{"lineNumber":87,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"Here\u0027s a new task: \" + task);"},{"lineNumber":88,"author":{"gitId":"oeiyiping"},"content":"        saveList();"},{"lineNumber":89,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":91,"author":{"gitId":"oeiyiping"},"content":"    private void deleteTask(int index) {"},{"lineNumber":92,"author":{"gitId":"oeiyiping"},"content":"        Task task \u003d tasks.get(index - 1);"},{"lineNumber":93,"author":{"gitId":"oeiyiping"},"content":"        tasks.remove(index - 1);"},{"lineNumber":94,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"Alrighty bossman. I shall wipe this task off the face of the earth: \\n\""},{"lineNumber":95,"author":{"gitId":"oeiyiping"},"content":"                + task"},{"lineNumber":96,"author":{"gitId":"oeiyiping"},"content":"                + \"\\nGood riddance.\");"},{"lineNumber":97,"author":{"gitId":"oeiyiping"},"content":"        saveList();"},{"lineNumber":98,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":100,"author":{"gitId":"oeiyiping"},"content":"    private void doneTask(int index) {"},{"lineNumber":101,"author":{"gitId":"oeiyiping"},"content":"        Task task \u003d tasks.get(index - 1);"},{"lineNumber":102,"author":{"gitId":"oeiyiping"},"content":"        task.markAsDone();"},{"lineNumber":103,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"Impressive, yet another task has been done: \\n\""},{"lineNumber":104,"author":{"gitId":"oeiyiping"},"content":"                + task"},{"lineNumber":105,"author":{"gitId":"oeiyiping"},"content":"                + \"\\nOne step closer to freedom now boss.\");"},{"lineNumber":106,"author":{"gitId":"oeiyiping"},"content":"        saveList();"},{"lineNumber":107,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":109,"author":{"gitId":"oeiyiping"},"content":"    private void printTasks() {"},{"lineNumber":110,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"You have \" + tasks.size() + \" task(s) in the list:\");"},{"lineNumber":111,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":112,"author":{"gitId":"oeiyiping"},"content":"        int i \u003d 1;"},{"lineNumber":113,"author":{"gitId":"oeiyiping"},"content":"        for (Task t : tasks) {"},{"lineNumber":114,"author":{"gitId":"oeiyiping"},"content":"            System.out.println(i + \". \" + t);"},{"lineNumber":115,"author":{"gitId":"oeiyiping"},"content":"            i++;"},{"lineNumber":116,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":119,"author":{"gitId":"oeiyiping"},"content":"    private void saveList() {"},{"lineNumber":120,"author":{"gitId":"oeiyiping"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"oeiyiping"},"content":"            FileWriter fw \u003d new FileWriter(\"duke_saved_tasks\");"},{"lineNumber":122,"author":{"gitId":"oeiyiping"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":123,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":124,"author":{"gitId":"oeiyiping"},"content":"            for (Task t : tasks) {"},{"lineNumber":125,"author":{"gitId":"oeiyiping"},"content":"                bw.write(t.toLog() + \"\\n\");"},{"lineNumber":126,"author":{"gitId":"oeiyiping"},"content":"//                System.out.println(t.toLog());"},{"lineNumber":127,"author":{"gitId":"oeiyiping"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":129,"author":{"gitId":"oeiyiping"},"content":"            bw.close();"},{"lineNumber":130,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":131,"author":{"gitId":"oeiyiping"},"content":"        } catch (IOException e) {"},{"lineNumber":132,"author":{"gitId":"oeiyiping"},"content":"            System.out.println(e);"},{"lineNumber":133,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":136,"author":{"gitId":"oeiyiping"},"content":"    private void shutDown() {"},{"lineNumber":137,"author":{"gitId":"oeiyiping"},"content":"        System.out.println(\"See you soon boss!\");"},{"lineNumber":138,"author":{"gitId":"oeiyiping"},"content":"        System.exit(0);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"oeiyiping":134,"-":6}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class DukeException extends Exception{"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    public DukeException(String s) {"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"        super(s);"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"    protected LocalDateTime at;"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"    protected final static DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, HH:mm\");"},{"lineNumber":8,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":"    public Event(String input) throws DukeException, DateTimeParseException {"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":"        super(input.split(\" /at \", 2)[0], \"E\");"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":12,"author":{"gitId":"oeiyiping"},"content":"        String[] split \u003d input.split(\" /at \", 2);"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":"        if (split.length !\u003d 2) {"},{"lineNumber":14,"author":{"gitId":"oeiyiping"},"content":"            throw new DukeException(\"Event command must follow the format: description /at time\");"},{"lineNumber":15,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":"        String[] datetime \u003d split[1].split(\" \");"},{"lineNumber":18,"author":{"gitId":"oeiyiping"},"content":"        String date \u003d datetime[0];"},{"lineNumber":19,"author":{"gitId":"oeiyiping"},"content":"        String time \u003d datetime.length \u003e 1 // if time is not provided, default time is 23:59:59"},{"lineNumber":20,"author":{"gitId":"oeiyiping"},"content":"                ? datetime[1].substring(0, 2) + \":\" + datetime[1].substring(2, 4)"},{"lineNumber":21,"author":{"gitId":"oeiyiping"},"content":"                : \"23:59:59\";"},{"lineNumber":22,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":23,"author":{"gitId":"oeiyiping"},"content":"        this.at \u003d LocalDateTime.parse(date + \"T\" + time);"},{"lineNumber":24,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":26,"author":{"gitId":"oeiyiping"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"oeiyiping"},"content":"        return super.toString() + \" (at: \" + at.format(DATE_TIME_FORMAT) + \")\";"},{"lineNumber":28,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":30,"author":{"gitId":"oeiyiping"},"content":"    public String toLog() {"},{"lineNumber":31,"author":{"gitId":"oeiyiping"},"content":"        return super.toLog() + \" | \" + at;"},{"lineNumber":32,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":33}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public abstract class Task {"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    protected String name;"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"    protected final String icon;"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"    protected Task(String name, String icon) {"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"        this.name \u003d name;"},{"lineNumber":8,"author":{"gitId":"oeiyiping"},"content":"        this.icon \u003d icon;"},{"lineNumber":9,"author":{"gitId":"oeiyiping"},"content":"        isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":12,"author":{"gitId":"oeiyiping"},"content":"    public void markAsDone() {"},{"lineNumber":13,"author":{"gitId":"oeiyiping"},"content":"        this.isDone \u003d true;"},{"lineNumber":14,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":16,"author":{"gitId":"oeiyiping"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"oeiyiping"},"content":"        String doneIcon \u003d isDone ? \"[X]\" : \"[ ]\";"},{"lineNumber":18,"author":{"gitId":"oeiyiping"},"content":"        return \"[\" + icon + \"]\" + doneIcon + \" \" + this.name;"},{"lineNumber":19,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"oeiyiping"},"content":""},{"lineNumber":21,"author":{"gitId":"oeiyiping"},"content":"    public String toLog() {"},{"lineNumber":22,"author":{"gitId":"oeiyiping"},"content":"        String doneIcon \u003d isDone ? \"T\" : \"F\";"},{"lineNumber":23,"author":{"gitId":"oeiyiping"},"content":"        return icon + \" | \" + doneIcon + \" | \" + this.name;"},{"lineNumber":24,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":25}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"    public ToDo(String name) throws DukeException {"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"        super(name, \"T\");"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"        if (name.isBlank()) {"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"            throw new DukeException(\"ToDo description cannot be blank!\");"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"        }"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"oeiyiping"},"content":"}"}],"authorContributionMap":{"oeiyiping":8}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"oeiyiping"},"content":"todo buy bread"},{"lineNumber":2,"author":{"gitId":"oeiyiping"},"content":"event have breakfast /at 9am"},{"lineNumber":3,"author":{"gitId":"oeiyiping"},"content":"deadline wash the dishes /by 10am"},{"lineNumber":4,"author":{"gitId":"oeiyiping"},"content":"list"},{"lineNumber":5,"author":{"gitId":"oeiyiping"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"oeiyiping"},"content":"list"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"bye"}],"authorContributionMap":{"oeiyiping":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"oeiyiping"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"oeiyiping":1,"-":20}}]
