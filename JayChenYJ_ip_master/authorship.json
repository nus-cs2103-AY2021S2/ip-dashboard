[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":" * A Deadline task that inherits Task."},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"public class Deadline extends Task{"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    /** Date/Timing information for task to be completed by. */"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"    protected String by;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public Deadline(String description, String by, boolean isDone, boolean existing) {"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"        if (existing) {"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"            this.by \u003d by;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"        } else {"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"            LocalDate date \u003d LocalDate.parse(by);"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"            this.by \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"     * A toString unique for Deadline Task."},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"     * @return Label for Deadline - \"D\", the description of the task, followed by the deadline."},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":31}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":" * The Duke project."},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"    private final Ui ui;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    private final Storage storage;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"    private final Parser parser;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public Duke() {"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"        ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"        storage \u003d new Storage();"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"        parser \u003d new Parser();"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"     * Main logic for the Duke project to run."},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"     * @throws IOException Throws IO exception."},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    public void run() throws IOException {"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"        ui.showWelcomeMsg();"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        ui.showNameMsg();"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        storage.readOrCreateFile();"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"        while(parser.canContinue) {"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"            ui.getPrompt();"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"            parser.processInput(Storage.tasks, ui);"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"        storage.writeListIntoFile();"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"        new Duke().run();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":""}],"authorContributionMap":{"JayChenYJ":34,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":" * Custom exception class for Duke project."},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"public class DukeException extends Exception{"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"    public DukeException(String message) {"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"        super(message);"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":9}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":" * An Event task that inherits Task."},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"public class Event extends Task{"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    /** Date/Timing information for task to be carried out at. */"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"    protected String at;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public Event(String description, String at, boolean isDone, boolean existing) {"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"        if (existing) {"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"            this.at \u003d at;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"        } else {"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"            LocalDate date \u003d LocalDate.parse(at);"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"            this.at \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"     * A toString uniquely for Event Task."},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"     * @return Label for Event - \"E\", the description of the task, followed by the timing."},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":31}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"import java.io.InputStream;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"import java.io.PrintStream;"},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"    private final Scanner in;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    private final PrintStream out;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"    /** The number of tasks at the start of the program. */"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public static int totalTasks \u003d 0;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"    /** A boolean function to check if the user decides to terminate the program. */"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    public boolean canContinue \u003d true;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    public Parser() {"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"        this(System.in, System.out);"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"    public Parser(InputStream in, PrintStream out) {"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"        this.out \u003d out;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"     * Process the user input to make sense for the system."},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"     * @param ui UI structure to show the user correct display."},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    public void processInput(ArrayList\u003cTask\u003e tasks, Ui ui) {"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        String nextInput \u003d in.nextLine();"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"        String command \u003d nextInput.contains(\" \") ? nextInput.split(\" \")[0] : nextInput;"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"            switch (command) {"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"                case \"todo\" -\u003e todo(nextInput, tasks, ui);"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"                case \"deadline\" -\u003e deadline(nextInput, tasks, ui);"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"                case \"event\" -\u003e event(nextInput, tasks, ui);"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"                case \"done\" -\u003e done(nextInput, tasks, totalTasks, ui);"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"                case \"delete\" -\u003e delete(nextInput, tasks, totalTasks, ui);"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"                case \"list\" -\u003e list(tasks, totalTasks, ui);"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"                case \"find\" -\u003e find(nextInput, tasks, totalTasks, ui);"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"                case \"bye\" -\u003e byeCommand(ui);"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"                default -\u003e wrongCommand();"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"        } catch (DukeException e) {"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"            out.println(e);"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"     * Signal termination of the program."},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"    public void terminate() {"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"        this.canContinue \u003d false;"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"     * Increase the total number of tasks in the list by 1."},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"    public static void taskAdded() {"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":"        totalTasks++;"},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"     * Decrease the total number of tasks in the list by 1."},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":"    public static void taskDeleted() {"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"        totalTasks--;"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"     * Adds a Todo task."},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"     * @param nextInput The description of the task."},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"     * @param ui UI structure to show the user correct display."},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DukeException Exception thrown if the command given is invalid."},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"    public void todo(String nextInput, ArrayList\u003cTask\u003e tasks, Ui ui) throws DukeException{"},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":"        if (nextInput.length() \u003c 6) {"},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"JayChenYJ"},"content":"        String command \u003d nextInput.substring(5);"},{"lineNumber":83,"author":{"gitId":"JayChenYJ"},"content":"        tasks.add(new Todo(command, false));"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"        taskAdded();"},{"lineNumber":85,"author":{"gitId":"JayChenYJ"},"content":"        ui.showTodoMsg(tasks, totalTasks);"},{"lineNumber":86,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"JayChenYJ"},"content":"     * Adds a Deadline task."},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"     * @param nextInput The description of the task."},{"lineNumber":91,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":92,"author":{"gitId":"JayChenYJ"},"content":"     * @param ui UI structure to show the user correct display."},{"lineNumber":93,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DukeException Exception thrown if the command given is invalid."},{"lineNumber":94,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"JayChenYJ"},"content":"    public void deadline(String nextInput, ArrayList\u003cTask\u003e tasks, Ui ui) throws DukeException{"},{"lineNumber":96,"author":{"gitId":"JayChenYJ"},"content":"        if (nextInput.length() \u003c 10) {"},{"lineNumber":97,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":98,"author":{"gitId":"JayChenYJ"},"content":"        } else if (!nextInput.contains(\"/\")){"},{"lineNumber":99,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"OOPS!!! The date information of a deadline cannot be empty.\");"},{"lineNumber":100,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"JayChenYJ"},"content":"        String command \u003d nextInput.substring(9, nextInput.indexOf(\"/\") - 1);"},{"lineNumber":102,"author":{"gitId":"JayChenYJ"},"content":"        String dateInfo \u003d nextInput.substring(nextInput.indexOf(\"/\") + 4);"},{"lineNumber":103,"author":{"gitId":"JayChenYJ"},"content":"        tasks.add(new Deadline(command, dateInfo, false, false));"},{"lineNumber":104,"author":{"gitId":"JayChenYJ"},"content":"        taskAdded();"},{"lineNumber":105,"author":{"gitId":"JayChenYJ"},"content":"        ui.showDeadlineMsg(tasks, totalTasks);"},{"lineNumber":106,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":108,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"JayChenYJ"},"content":"     * Adds a Event task."},{"lineNumber":110,"author":{"gitId":"JayChenYJ"},"content":"     * @param nextInput The description of the task."},{"lineNumber":111,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":112,"author":{"gitId":"JayChenYJ"},"content":"     * @param ui UI structure to show the user correct display."},{"lineNumber":113,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DukeException Exception thrown if the command given is invalid."},{"lineNumber":114,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"JayChenYJ"},"content":"    public void event(String nextInput, ArrayList\u003cTask\u003e tasks, Ui ui) throws DukeException{"},{"lineNumber":116,"author":{"gitId":"JayChenYJ"},"content":"        if (nextInput.length() \u003c 7) {"},{"lineNumber":117,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":118,"author":{"gitId":"JayChenYJ"},"content":"        } else if (!nextInput.contains(\"/\")) {"},{"lineNumber":119,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"OOPS!!! The date information of an event cannot be empty.\");"},{"lineNumber":120,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"JayChenYJ"},"content":"        String command \u003d nextInput.substring(6, nextInput.indexOf(\"/\") - 1);"},{"lineNumber":122,"author":{"gitId":"JayChenYJ"},"content":"        String dateInfo \u003d nextInput.substring(nextInput.indexOf(\"/\") + 4);"},{"lineNumber":123,"author":{"gitId":"JayChenYJ"},"content":"        tasks.add(new Event(command, dateInfo, false, false));"},{"lineNumber":124,"author":{"gitId":"JayChenYJ"},"content":"        taskAdded();"},{"lineNumber":125,"author":{"gitId":"JayChenYJ"},"content":"        ui.showEventMsg(tasks, totalTasks);"},{"lineNumber":126,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":128,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"JayChenYJ"},"content":"     * Mark the task in the given task number as done."},{"lineNumber":130,"author":{"gitId":"JayChenYJ"},"content":"     * @param command The command given by user input."},{"lineNumber":131,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":132,"author":{"gitId":"JayChenYJ"},"content":"     * @param count The current number of tasks stored inside the Task Arraylist."},{"lineNumber":133,"author":{"gitId":"JayChenYJ"},"content":"     * @param ui UI structure to show the user correct display."},{"lineNumber":134,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DukeException Exception thrown if the number given is out of range."},{"lineNumber":135,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"JayChenYJ"},"content":"    public void done(String command, ArrayList\u003cTask\u003e tasks, int count, Ui ui) throws DukeException{"},{"lineNumber":137,"author":{"gitId":"JayChenYJ"},"content":"        if (command.length() \u003c 6) {"},{"lineNumber":138,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"OOPS!!! The item number cannot be empty.\");"},{"lineNumber":139,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"JayChenYJ"},"content":"        String[] commandToWords \u003d command.split(\" \");"},{"lineNumber":141,"author":{"gitId":"JayChenYJ"},"content":"        int itemNum \u003d Integer.parseInt(commandToWords[1]);"},{"lineNumber":142,"author":{"gitId":"JayChenYJ"},"content":"        if (itemNum \u003e count || itemNum \u003c 1) {"},{"lineNumber":143,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"Item number selected is out of range.\");"},{"lineNumber":144,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"JayChenYJ"},"content":"        tasks.get(itemNum - 1).makeDone();"},{"lineNumber":146,"author":{"gitId":"JayChenYJ"},"content":"        ui.showDoneMsg(tasks, itemNum);"},{"lineNumber":147,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":149,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"JayChenYJ"},"content":"     * Delete the task corresponding to the number input by the user."},{"lineNumber":151,"author":{"gitId":"JayChenYJ"},"content":"     * @param command The command given by user input."},{"lineNumber":152,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":153,"author":{"gitId":"JayChenYJ"},"content":"     * @param count The current number of tasks stored inside the Task Arraylist."},{"lineNumber":154,"author":{"gitId":"JayChenYJ"},"content":"     * @param ui UI structure to show the user correct display."},{"lineNumber":155,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DukeException Exception thrown if the number given is out of range."},{"lineNumber":156,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"JayChenYJ"},"content":"    public void delete(String command, ArrayList\u003cTask\u003e tasks, int count, Ui ui) throws DukeException {"},{"lineNumber":158,"author":{"gitId":"JayChenYJ"},"content":"        if (command.length() \u003c 8) {"},{"lineNumber":159,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"OOPS!!! The item number cannot be empty.\");"},{"lineNumber":160,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"JayChenYJ"},"content":"        String[] commandToWords \u003d command.split(\" \");"},{"lineNumber":162,"author":{"gitId":"JayChenYJ"},"content":"        int itemNum \u003d Integer.parseInt(commandToWords[1]);"},{"lineNumber":163,"author":{"gitId":"JayChenYJ"},"content":"        if (itemNum \u003e count || itemNum \u003c 1) {"},{"lineNumber":164,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"Item number selected is out of range.\");"},{"lineNumber":165,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"JayChenYJ"},"content":"        String taskRemoved \u003d tasks.get(itemNum - 1).toString();"},{"lineNumber":167,"author":{"gitId":"JayChenYJ"},"content":"        tasks.remove(itemNum - 1);"},{"lineNumber":168,"author":{"gitId":"JayChenYJ"},"content":"        taskDeleted();"},{"lineNumber":169,"author":{"gitId":"JayChenYJ"},"content":"        ui.showDeleteMsg(taskRemoved, totalTasks);"},{"lineNumber":170,"author":{"gitId":"JayChenYJ"},"content":"   }"},{"lineNumber":171,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":172,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"JayChenYJ"},"content":"     * List out all user inputs in sequence."},{"lineNumber":174,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":175,"author":{"gitId":"JayChenYJ"},"content":"     * @param totalTasks The current number of tasks stored inside the Task Arraylist."},{"lineNumber":176,"author":{"gitId":"JayChenYJ"},"content":"     * @param ui UI structure to show the user correct display."},{"lineNumber":177,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"JayChenYJ"},"content":"    public void list(ArrayList\u003cTask\u003e tasks, int totalTasks, Ui ui) {"},{"lineNumber":179,"author":{"gitId":"JayChenYJ"},"content":"        ui.showListMsg(tasks, totalTasks);"},{"lineNumber":180,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":182,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"JayChenYJ"},"content":"     * Find tasks matching the keyword in the command given by the user."},{"lineNumber":184,"author":{"gitId":"JayChenYJ"},"content":"     * @param command The command given by user input."},{"lineNumber":185,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":186,"author":{"gitId":"JayChenYJ"},"content":"     * @param totalTasks The current number of tasks stored inside the Task Arraylist."},{"lineNumber":187,"author":{"gitId":"JayChenYJ"},"content":"     * @param ui UI structure to show the user correct display."},{"lineNumber":188,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DukeException"},{"lineNumber":189,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"JayChenYJ"},"content":"    public void find(String command, ArrayList\u003cTask\u003e tasks, int totalTasks, Ui ui) throws DukeException {"},{"lineNumber":191,"author":{"gitId":"JayChenYJ"},"content":"        if (command.length() \u003c 6) {"},{"lineNumber":192,"author":{"gitId":"JayChenYJ"},"content":"            throw new DukeException(\"OOPS!!! The keyword cannot be empty.\");"},{"lineNumber":193,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"JayChenYJ"},"content":"        String keyword \u003d command.split(\" \")[1];"},{"lineNumber":195,"author":{"gitId":"JayChenYJ"},"content":"        ui.showFindMsg(keyword, tasks, totalTasks);"},{"lineNumber":196,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":198,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"JayChenYJ"},"content":"     * Tells the user that the input given is invalid."},{"lineNumber":200,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DukeException Exception thrown if the user input is invalid."},{"lineNumber":201,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"JayChenYJ"},"content":"    public void wrongCommand() throws DukeException {"},{"lineNumber":203,"author":{"gitId":"JayChenYJ"},"content":"        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":204,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":206,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"JayChenYJ"},"content":"     * Saying bye to the user when the user decides to quit."},{"lineNumber":208,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"JayChenYJ"},"content":"    public void byeCommand(Ui ui) {"},{"lineNumber":210,"author":{"gitId":"JayChenYJ"},"content":"        ui.showByeMsg();"},{"lineNumber":211,"author":{"gitId":"JayChenYJ"},"content":"        terminate();"},{"lineNumber":212,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":213}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.io.PrintWriter;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    /** Default path to store the user tasks. */"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"duke.txt\";"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    public static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"    public Storage() {"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"     * Read file if it exist, else will create a new file with the name."},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"     * @throws IOException Throw IO exception."},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"    public void readOrCreateFile() throws IOException {"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        File myObj \u003d new File(DEFAULT_STORAGE_FILEPATH);"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"        if (myObj.exists()) {"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"            readFileIntoList(DEFAULT_STORAGE_FILEPATH, tasks);"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"            //noinspection ResultOfMethodCallIgnored"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"            myObj.createNewFile();"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"     * Read the existing task file and create the list of tasks when the program is run."},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"     * @param file The name of the file."},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"    public void readFileIntoList(String file, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"        List\u003cString\u003e lines \u003d Collections.emptyList();"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"            lines \u003d Files.readAllLines(Paths.get(file), StandardCharsets.UTF_8);"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"            e.printStackTrace();"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"        for (String object: lines) {"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"            if (object.charAt(1) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"                if (object.charAt(4) \u003d\u003d \u0027-\u0027) {"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"                    tasks.add(new Todo(object.substring(7), true));"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"                } else {"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"                    tasks.add(new Todo(object.substring(7), false));"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"            } else {"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"                String dateInfo \u003d object.substring(object.indexOf(\"(\") + 5, object.indexOf(\")\"));"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"                if (object.charAt(1) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"                    if (object.charAt(4) \u003d\u003d \u0027-\u0027) {"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":"                        tasks.add(new Deadline(object.substring(7, object.indexOf(\"(\") - 1), dateInfo, true, true));"},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"                    } else {"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"                        tasks.add(new Deadline(object.substring(7, object.indexOf(\"(\") - 1), dateInfo, false, true));"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"                    }"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"                } else if (object.charAt(1) \u003d\u003d \u0027E\u0027) {"},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":"                    if (object.charAt(4) \u003d\u003d \u0027-\u0027) {"},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":"                        tasks.add(new Event(object.substring(7, object.indexOf(\"(\") - 1), dateInfo, true, true));"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"                    } else {"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"                        tasks.add(new Event(object.substring(7, object.indexOf(\"(\") - 1), dateInfo, false, true));"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"                    }"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"            Parser.taskAdded();"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"     * Update the tasks into the file at the end of the program."},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":"     * @throws FileNotFoundException Throw exception if file does not exist, should not happen."},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"    public void writeListIntoFile() throws FileNotFoundException {"},{"lineNumber":82,"author":{"gitId":"JayChenYJ"},"content":"        PrintWriter writer \u003d new PrintWriter(DEFAULT_STORAGE_FILEPATH);"},{"lineNumber":83,"author":{"gitId":"JayChenYJ"},"content":"        for (Task item: tasks) {"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"            writer.println(item.toString());"},{"lineNumber":85,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"JayChenYJ"},"content":"        writer.close();"},{"lineNumber":87,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":88}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":" * Represent a task added by a user."},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"     * The content of the task."},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"     * A boolean deciding whether a task has been completed."},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"     * Task completion is triggered by the user."},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    protected boolean isDone;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"     * Creates a new task with a given input by the user."},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"     * Task is initially not done at creation."},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"     * @param description The input description for the task."},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"     * @param isDone The input to see if the task has been completed."},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"     * Get the status icon of the task."},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"     * @return Return an icon, cross if done, empty space if not done."},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    public String getStatusIcon() {"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"        return (isDone ? \"-\" : \" \");"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"     * Change the status of the the task completion to true when the task has been completed."},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"    public void makeDone() {"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"        this.isDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"     * A toString to show the task information."},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"     * @return Show the status of the task, together with its description."},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"            return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":51}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":" * A Todo task that inherits Task."},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"public class Todo extends Task{"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"        super(description, isDone);"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"     * A toString uniquely for Todo Task."},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"     * @return Label for Todo - \"T\" and the description of the task."},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":18}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"import java.io.InputStream;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"import java.io.PrintStream;"},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"    private static final String DIVIDER \u003d \"---------------------------------------------------------------------------\";"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    private final Scanner in;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"    private final PrintStream out;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    /** The username of the user running the program. */"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"    public String username;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    public Ui() {"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"        this(System.in, System.out);"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    public Ui(InputStream in, PrintStream out) {"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"        this.out \u003d out;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"     * Greets the user when the Duke is launched."},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    public void showWelcomeMsg() {"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Hello! I\u0027m Jay!\\n\" + \"What is your name!\");"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"     * Greets the user again after knowing the user\u0027s name."},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"    public void showNameMsg() {"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"        this.username \u003d in.nextLine();"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Hi \" + this.username + \"!\");"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"What can I do for you?\");"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"     * Prompt for user to key in the next input."},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"    public void getPrompt() {"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"        out.print(this.username + \": \");"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"     * Show the user that a todo task has been added."},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"     * @param totalTasks Total number of tasks in the list."},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"    public void showTodoMsg(ArrayList\u003cTask\u003e tasks, int totalTasks) {"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Got it. I\u0027ve added this task:\\n\" + \"    \" + tasks.get(totalTasks - 1).toString());"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Now you have \" + totalTasks + \" tasks in the list.\");"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"     * Show the user that a deadline task has been added."},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":"     * @param totalTasks Total number of tasks in the list."},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"    public void showDeadlineMsg(ArrayList\u003cTask\u003e tasks, int totalTasks) {"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Got it. I\u0027ve added this task:\\n\" + \"    \" + tasks.get(totalTasks - 1).toString());"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Now you have \" + totalTasks + \" tasks in the list.\");"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"     * Show the user that a event task has been added."},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"     * @param totalTasks Total number of tasks in the list."},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"    public void showEventMsg(ArrayList\u003cTask\u003e tasks, int totalTasks) {"},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":82,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Got it. I\u0027ve added this task:\\n\" + \"    \" + tasks.get(totalTasks - 1).toString());"},{"lineNumber":83,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Now you have \" + totalTasks + \" tasks in the list.\");"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":85,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":87,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"     * Show the user that a task of choice has been deleted."},{"lineNumber":89,"author":{"gitId":"JayChenYJ"},"content":"     * @param taskRemoved The description of the task deleted."},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"     * @param totalTasks Total number of tasks in the list."},{"lineNumber":91,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"JayChenYJ"},"content":"    public void showDeleteMsg(String taskRemoved, int totalTasks) {"},{"lineNumber":93,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":94,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Noted. I\u0027ve removed this task:\\n\" + \"    \" + taskRemoved);"},{"lineNumber":95,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Now you have \" + totalTasks + \" tasks in the list.\");"},{"lineNumber":96,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":97,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":99,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"JayChenYJ"},"content":"     * Show the user that a task has been marked done."},{"lineNumber":101,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":102,"author":{"gitId":"JayChenYJ"},"content":"     * @param itemNum The item number that is marked done."},{"lineNumber":103,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"JayChenYJ"},"content":"    public void showDoneMsg(ArrayList\u003cTask\u003e tasks, int itemNum) {"},{"lineNumber":105,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":106,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + \"    \" + tasks.get(itemNum - 1).toString());"},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":108,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":110,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"JayChenYJ"},"content":"     * Show the user the list of tasks."},{"lineNumber":112,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":113,"author":{"gitId":"JayChenYJ"},"content":"     * @param totalTasks Total number of tasks in the list."},{"lineNumber":114,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"JayChenYJ"},"content":"    public void showListMsg(ArrayList\u003cTask\u003e tasks, int totalTasks) {"},{"lineNumber":116,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":117,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Here are the tasks in your list:\");"},{"lineNumber":118,"author":{"gitId":"JayChenYJ"},"content":"        for (int i \u003d 0; i \u003c totalTasks; i++){"},{"lineNumber":119,"author":{"gitId":"JayChenYJ"},"content":"            int listNum \u003d i + 1;"},{"lineNumber":120,"author":{"gitId":"JayChenYJ"},"content":"            out.println(listNum + \". \" + tasks.get(i).toString());"},{"lineNumber":121,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":123,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":125,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"JayChenYJ"},"content":"     * Show the user the list of tasks with matching keyword."},{"lineNumber":127,"author":{"gitId":"JayChenYJ"},"content":"     * @param keyword The keyword to search for match."},{"lineNumber":128,"author":{"gitId":"JayChenYJ"},"content":"     * @param tasks The Task Arraylist containing user tasks in sequence."},{"lineNumber":129,"author":{"gitId":"JayChenYJ"},"content":"     * @param totalTasks Total number of tasks in the list."},{"lineNumber":130,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"JayChenYJ"},"content":"    public void showFindMsg(String keyword, ArrayList\u003cTask\u003e tasks, int totalTasks) {"},{"lineNumber":132,"author":{"gitId":"JayChenYJ"},"content":"        int listNum \u003d 1;"},{"lineNumber":133,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":134,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":135,"author":{"gitId":"JayChenYJ"},"content":"        for (int i \u003d 0; i \u003c totalTasks; i++){"},{"lineNumber":136,"author":{"gitId":"JayChenYJ"},"content":"            if (tasks.get(i).toString().contains(keyword)) {"},{"lineNumber":137,"author":{"gitId":"JayChenYJ"},"content":"                out.println(listNum + \". \" + tasks.get(i).toString());"},{"lineNumber":138,"author":{"gitId":"JayChenYJ"},"content":"                listNum++;"},{"lineNumber":139,"author":{"gitId":"JayChenYJ"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":142,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":144,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"JayChenYJ"},"content":"     * Showing user bye message when user ends the program."},{"lineNumber":146,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"JayChenYJ"},"content":"    public void showByeMsg() {"},{"lineNumber":148,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":149,"author":{"gitId":"JayChenYJ"},"content":"        out.println(\"Bye \" + this.username + \"! Hope to see you again soon!\");"},{"lineNumber":150,"author":{"gitId":"JayChenYJ"},"content":"        out.println(DIVIDER);"},{"lineNumber":151,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":152}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"public class DukeTest {"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"    public void dummyTest(){"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(2, 2);"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public void createNewTodoTask() {"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"        Task task \u003d new Todo(\"read book\", false);"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(\"[T][ ] read book\", task.toString());"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"    public void createNewDeadlineTask() {"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"        Task task \u003d new Deadline(\"return book\", \"2020-02-04\", false, false);"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(\"[D][ ] return book (by: Feb 4 2020)\", task.toString() );"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    public void createNewEventTask() {"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        Task task \u003d new Event(\"project meeting\", \"2020-02-05\", false, false);"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(\"[E][ ] project meeting (at: Feb 5 2020)\", task.toString());"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"Gordon"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"todo borrow book"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"deadline"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"deadline return book"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"deadline return book /by Sunday"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"event"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"event project meeting"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"list"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"done 1"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"done 3"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"list"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"delete 3"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"delete 3"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"list"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"blah"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"bye"}],"authorContributionMap":{"JayChenYJ":18}}]
