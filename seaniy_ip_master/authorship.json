[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"1. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"seaniy":1,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":1,"-":45}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":" * Commands recognised by the application"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"    BYE,"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"    LIST,"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"    DONE,"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"    DELETE,"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"    TODO,"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"    DEADLINE,"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"    EVENT,"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    FIND,"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    HELP"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":16}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":" * A child of \u003ccode\u003eTask\u003c/code\u003e object, corresponds to a deadline task with"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":" * description supplied by the user. eg., \u003ccode\u003ebuy cake /by 2019-10-19\u003c/code\u003e"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":" * @see Task"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"    private LocalDate date;"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    public Deadline(String description, LocalDate date) {"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"        return \"D | \" + super.toString() + \" | \" + date.format(DateTimeFormatter.ofPattern(\"dd MMM YYYY\"));"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":23}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":" * \u003ch1\u003eDuke\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":" * The Duke program implements an application that is able to"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":" * read user inputs to record and save user\u0027s tasks."},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":" *"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":" * @author A0200357R Sean Iau Yang"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":" * @version A-JavaDoc"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    public static final String filePath \u003d \"data/duke.txt\";"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"    private Storage storage;"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"    private TaskList tasks;"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    private Parser parser;"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    public Duke(String filePath) {"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        parser \u003d new Parser();"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"        storage \u003d new Storage(filePath, ui);"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"        } catch(DukeException error) {"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"            ui.showLoadingError();"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"    public void run() {"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"        ui.showWelcome();"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"        boolean isRunning \u003d true;"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"        while(isRunning) {"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"                Command command \u003d parser.parseCommand(input);"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"                switch(command) {"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"                    case BYE:"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"                        ui.showGoodbye();"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"                        storage.save(tasks);"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"                        sc.close();"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"                        isRunning \u003d false;"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"                    case LIST:"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"                        ui.showTasks(tasks);"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"                    case DONE:"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"                        int taskToMarkAsDone \u003d parser.parseDoneCommand(input);"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"                        ui.showMessage(\"Nice! I\u0027ve marked this task as done:\\n  \" + tasks.markTaskAsDone(taskToMarkAsDone));"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"                        storage.save(tasks);"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"                    case DELETE:"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"                        int taskToDelete \u003d parser.parseDeleteCommand(input);"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"                        ui.showMessage(\"Noted. I\u0027ve removed this task:\\n  \" + tasks.deleteTask(taskToDelete) + \"\\nNow you have \" + tasks.getSize() + \" tasks in the list.\");"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"                        storage.save(tasks);"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"                    case TODO:"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"                        Todo newTodo \u003d parser.parseTodoCommand(input);"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"                        tasks.addTask(newTodo);"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"                        ui.showMessage(\"Got it. I\u0027ve added this task:\\n  \" + newTodo + \"\\nNow you have \" + tasks.getSize() + \" tasks in the list.\");"},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":"                        storage.save(tasks);"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"                    case DEADLINE:"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"                        try {"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"                            Deadline curr \u003d parser.parseDeadlineCommand(input);"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":"                            tasks.addTask(curr);"},{"lineNumber":73,"author":{"gitId":"seaniy"},"content":"                            ui.showMessage(\"Got it. I\u0027ve added this task:\\n  \" + curr + \"\\nNow you have \" + tasks.getSize() + \" tasks in the list.\");"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":"                            storage.save(tasks);"},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"                        } catch (DukeException error) {"},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"                            ui.showErrorMessage(\"The description of a deadline cannot be empty.\");"},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":78,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":79,"author":{"gitId":"seaniy"},"content":"                    case EVENT:"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"                        try {"},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"                            Event curr \u003d parser.parseEventCommand(input);"},{"lineNumber":82,"author":{"gitId":"seaniy"},"content":"                            tasks.addTask(curr);"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"                            ui.showMessage(\"Got it. I\u0027ve added this task:\\n  \" + curr + \"\\nNow you have \" + tasks.getSize() + \" tasks in the list.\");"},{"lineNumber":84,"author":{"gitId":"seaniy"},"content":"                            storage.save(tasks);"},{"lineNumber":85,"author":{"gitId":"seaniy"},"content":"                        } catch (DukeException error) {"},{"lineNumber":86,"author":{"gitId":"seaniy"},"content":"                            ui.showErrorMessage(\"The description of an event cannot be empty.\");"},{"lineNumber":87,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":88,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":89,"author":{"gitId":"seaniy"},"content":"                    case FIND:"},{"lineNumber":90,"author":{"gitId":"seaniy"},"content":"                        try {"},{"lineNumber":91,"author":{"gitId":"seaniy"},"content":"                            String keywords \u003d parser.parseFindCommand(input);"},{"lineNumber":92,"author":{"gitId":"seaniy"},"content":"                            TaskList foundTasks \u003d tasks.findTasks(keywords);"},{"lineNumber":93,"author":{"gitId":"seaniy"},"content":"                            ui.showFoundTasks(foundTasks);"},{"lineNumber":94,"author":{"gitId":"seaniy"},"content":"                        } catch (DukeException error) {"},{"lineNumber":95,"author":{"gitId":"seaniy"},"content":"                            ui.showErrorMessage(\"No task with specified keywords can be found.\");"},{"lineNumber":96,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":97,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":98,"author":{"gitId":"seaniy"},"content":"                    case HELP:"},{"lineNumber":99,"author":{"gitId":"seaniy"},"content":"                        ui.showHelpMessage();"},{"lineNumber":100,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":101,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":102,"author":{"gitId":"seaniy"},"content":"            } catch(DukeException error) {"},{"lineNumber":103,"author":{"gitId":"seaniy"},"content":"                ui.showInputError();"},{"lineNumber":104,"author":{"gitId":"seaniy"},"content":"            } catch(DateTimeParseException error) {"},{"lineNumber":105,"author":{"gitId":"seaniy"},"content":"                ui.showErrorMessage(\"The date provided is invalid.\");"},{"lineNumber":106,"author":{"gitId":"seaniy"},"content":"            } catch (IndexOutOfBoundsException error) {"},{"lineNumber":107,"author":{"gitId":"seaniy"},"content":"                ui.showErrorMessage(\"Selected item does not exist.\");"},{"lineNumber":108,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":112,"author":{"gitId":"seaniy"},"content":"    public static void main(String[] args) {"},{"lineNumber":113,"author":{"gitId":"seaniy"},"content":"        new Duke(filePath).run();"},{"lineNumber":114,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":115}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":" * Custom exception class"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":7}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":" * A child of \u003ccode\u003eTask\u003c/code\u003e object, corresponds to an event task with"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":" * description supplied by the user. eg., \u003ccode\u003ealan\u0027s birthday /at 6 Aug 6-8pm\u003c/code\u003e"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":" * @see Task"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"    private LocalDate date;"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    public Event(String description, LocalDate date) {"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"        return \"E | \" + super.toString() + \" | \" + date.format(DateTimeFormatter.ofPattern(\"dd MMM YYYY\"));"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":23}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"    public Command parseCommand(String input) throws DukeException {"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"        String[] inputBreakdown \u003d input.split(\" \", 2);"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"            return Command.valueOf(inputBreakdown[0].toUpperCase());"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"        } catch (IllegalArgumentException error) {"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"            throw new DukeException();"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    public int parseDoneCommand(String input) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"        String[] inputBreakdown \u003d input.split(\" \");"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"        if(inputBreakdown.length !\u003d 2) {"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"            throw new DukeException();"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"        return Integer.parseInt(inputBreakdown[1]) - 1;"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"    public int parseDeleteCommand(String input) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        String[] inputBreakdown \u003d input.split(\" \");"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"        if(inputBreakdown.length !\u003d 2) {"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"            throw new DukeException();"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"        return Integer.parseInt(inputBreakdown[1]) - 1;"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"    public Todo parseTodoCommand(String input) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"        checkEmptyInput(input);"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"        return new Todo(input.substring(5));"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"    public Deadline parseDeadlineCommand(String input) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"        checkEmptyInput(input);"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"        String[] args \u003d input.substring(9).split(\" /by \");"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"        return new Deadline(args[0], LocalDate.parse(args[1]));"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"    public Event parseEventCommand(String input) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"        checkEmptyInput(input);"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"        String[] args \u003d input.substring(6).split(\" /on \");"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"        return new Event(args[0], LocalDate.parse(args[1]));"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"    public String parseFindCommand(String input) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"        checkEmptyInput(input);"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"        String keywords \u003d input.substring(5);"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"        return keywords;"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"    public boolean checkEmptyInput(String input) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"        String[] inputBreakdown \u003d input.split(\" \");"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"        if(inputBreakdown.length \u003c\u003d 1) {"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"            throw new DukeException();"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"        return true;"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":61}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    private String filePath;"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"    public Storage(String filePath, Ui ui) {"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"        this.ui \u003d ui;"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"    public void save(TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"        StringBuilder data \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"            FileWriter writer \u003d new FileWriter(filePath);"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"            for(int i \u003d 0; i \u003c taskList.getSize(); i++) {"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"                data.append(taskList.getTask(i));"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"                if(i \u003c taskList.getSize() - 1) {"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"                    data.append(\"\\n\");"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"            writer.write(data.toString());"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"            writer.close();"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"        } catch(IOException error) {"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"            ui.showSavingError();"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"        List\u003cTask\u003e data \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"            File file \u003d new File(this.filePath);"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"            if(!file.exists()) {"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"                File parentDirectory \u003d file.getParentFile();"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"                if(!parentDirectory.exists()) {"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"                    parentDirectory.mkdir();"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"                file.createNewFile();"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"            Scanner fileReader \u003d new Scanner(file);"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"            while(fileReader.hasNextLine()) {"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"                String[] taskInfo \u003d fileReader.nextLine().split(\" \\\\| \");"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"                Task currentTask;"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"                switch(taskInfo[0]) {"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"                    case \"T\":"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"                        currentTask \u003d new Todo(taskInfo[2]);"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"                        if(taskInfo[1].equals(\"\\u2713\")) {"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"                            currentTask.markAsDone();"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"                        data.add(currentTask);"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"                    case \"D\":"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"                        String deadlineDate \u003d taskInfo[3].replaceAll(\" \", \"-\");"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"                        currentTask \u003d new Deadline(taskInfo[2], LocalDate.parse(deadlineDate, DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\")));"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"                        if(taskInfo[1].equals(\"\\u2713\")) {"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"                            currentTask.markAsDone();"},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"                        data.add(currentTask);"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"                    case \"E\":"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"                        String eventDate \u003d taskInfo[3].replaceAll(\" \", \"-\");"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":"                        currentTask \u003d new Event(taskInfo[2], LocalDate.parse(eventDate, DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\")));"},{"lineNumber":73,"author":{"gitId":"seaniy"},"content":"                        if(taskInfo[1].equals(\"\\u2713\")) {"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":"                            currentTask.markAsDone();"},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"                        data.add(currentTask);"},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":78,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"        } catch(IOException | DateTimeParseException error) {"},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"            ui.showLoadingError();"},{"lineNumber":82,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"        return data;"},{"lineNumber":84,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":85}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":" * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to a task"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":" * description supplied by the user. eg., \u003ccode\u003erunning\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"    private String description;"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"    private boolean isDone;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"    public Task(String description) {"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"        this.description \u003d description;"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"     * This method is used to return the status icon of the task."},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"     * If the task is done, ✓ is returned. Else, ✘ is returned."},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"     * @return String representation for the status icon."},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    public String getStatusIcon() {"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"     * This method is used to return the \u003ccode\u003eTask\u003c/code\u003e object after setting isDone to true."},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"     * @return Current instance of \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"    public Task markAsDone() {"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"        isDone \u003d true;"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"        return this;"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"     * This method is used to return the description of the \u003ccode\u003eTask\u003c/code\u003e."},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"     * @return Description of the current instance of \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"    public String getDescription() {"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"        return description;"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"        return getStatusIcon() + \" | \" + description;"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":46}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":" * Represents a list of \u003ccode\u003eTask\u003c/code\u003e objects."},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":" * @see Task"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"     * This method adds a Task object to the list."},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"     * @param task A \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"    public void addTask(Task task) {"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"        tasks.add(task);"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"     * This method deletes the selected \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"     * @param index The index of the selected \u003ccode\u003eTask\u003c/code\u003e to delete."},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"     * @return The deleted \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"    public Task deleteTask(int index) {"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"        return tasks.remove(index);"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"     * This method is used to mark the selected \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"     * as done."},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"     * @param index The index of \u003ccode\u003eTask\u003c/code\u003e to mark as done."},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"     * @return The selected \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"    public Task markTaskAsDone(int index) {"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"        return tasks.get(index).markAsDone();"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"     * This method is used to get the selected \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"     * @param index The index of \u003ccode\u003eTask\u003c/code\u003e to get."},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"     * @return The selected \u003ccode\u003eTask\u003c/code\u003e object."},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"    public Task getTask(int index) {"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"        return tasks.get(index);"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"     * This method is used to find a list of tasks that match the specified keywords."},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"     * @param keywords The specified keywords to find tasks."},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"     * @return \u003ccode\u003eTaskList\u003c/code\u003e of tasks that match the specified keywords."},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"     * @see TaskList"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"    public TaskList findTasks(String keywords) {"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"        TaskList foundTasks \u003d new TaskList();"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"        for(Task task : tasks) {"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"            if(task.getDescription().contains(keywords)) {"},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":"                foundTasks.addTask(task);"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"        return foundTasks;"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":73,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":"     * This method is used to check whether the list is empty."},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"     * @return True if list is empty. Else, false."},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"    public boolean isEmpty() {"},{"lineNumber":78,"author":{"gitId":"seaniy"},"content":"        return tasks.isEmpty();"},{"lineNumber":79,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"seaniy"},"content":"     * This method is used to get size of list."},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"     * @return Size of the list."},{"lineNumber":84,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"seaniy"},"content":"    public int getSize() {"},{"lineNumber":86,"author":{"gitId":"seaniy"},"content":"        return tasks.size();"},{"lineNumber":87,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":88}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":" * A child of \u003ccode\u003eTask\u003c/code\u003e object, corresponds to a todo task with"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":" * description supplied by the user. eg., \u003ccode\u003ebuy cake\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":" * @see Task"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"    public Todo(String description) {"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"        return \"T | \" + super.toString();"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":17}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":" * Handles interactions with the user using a \u003ccode\u003eUi\u003c/code\u003e object."},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":" */"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"    public static final String logo \u003d \" ____        _\\n\""},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    public static final String divider \u003d \"____________________________________________________________\\n\";"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"     * This method is used to output an input error message."},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    public void showInputError() {"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"        showMessage(\"I\u0027m sorry, but I don\u0027t know what that means.\");"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"     * This method is used to output a loading file error message."},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"    public void showLoadingError() {"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"        showMessage(\"Failed to load file. Exiting...\");"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"     * This method is used to output a saving file error message."},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"    public void showSavingError() {"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"        showMessage(\"Failed to save file. Exiting...\");"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"     * This method is used to output the welcome message."},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"    public void showWelcome() {"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"        showMessage(logo + \"\\nHello! I\u0027m Duke!\\n\" +"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"                \"What can I do for you?\\n\" +"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"                \"Type \\\"help\\\" to view the list of available commands.\");"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"     * This method is used to output the goodbye message."},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"    public void showGoodbye() {"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"        showMessage(\"Bye. Hope to see you again soon!\");"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"     * This method is used to output the list of commands available"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"     * on the application."},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"    public void showHelpMessage() {"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"        showMessage(\"List of Available Commands:\\n\" +"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"                \"bye -\u003e To exit application\\n\" +"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"                \"list -\u003e To list tasks\\n\" +"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"                \"done [index] -\u003e To mark task as done \\n\" +"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"                \"delete [index] -\u003e To delete task\\n\" +"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"                \"todo [description] -\u003e To create todo\\n\" +"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"                \"deadline [description] /by [date] -\u003e To create deadline\\n\" +"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"                \"event [description] /on [date] -\u003e To create event\");"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"     * This method is used to output the list of tasks in the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"     * @see TaskList"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"seaniy"},"content":"    public void showTasks(TaskList tasks) {"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"        if(tasks.isEmpty()) {"},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"            message.append(\"List is empty.\");"},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"seaniy"},"content":"            message.append(\"Here are your list of tasks:\\n\");"},{"lineNumber":79,"author":{"gitId":"seaniy"},"content":"            for(int i \u003d 1; i \u003c\u003d tasks.getSize(); i++) {"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"                message.append(\"  \" + i + \". \" + tasks.getTask(i - 1));"},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"                if(i \u003c tasks.getSize()) {"},{"lineNumber":82,"author":{"gitId":"seaniy"},"content":"                    message.append(\"\\n\");"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":84,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"seaniy"},"content":"        showMessage(message.toString());"},{"lineNumber":87,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":89,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"seaniy"},"content":"     * This method is used to output the list of found tasks in the \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":91,"author":{"gitId":"seaniy"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e object."},{"lineNumber":92,"author":{"gitId":"seaniy"},"content":"     * @see TaskList"},{"lineNumber":93,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"seaniy"},"content":"    public void showFoundTasks(TaskList tasks) {"},{"lineNumber":95,"author":{"gitId":"seaniy"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":96,"author":{"gitId":"seaniy"},"content":"        if(tasks.isEmpty()) {"},{"lineNumber":97,"author":{"gitId":"seaniy"},"content":"            message.append(\"Sorry! Task not found.\");"},{"lineNumber":98,"author":{"gitId":"seaniy"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"seaniy"},"content":"            message.append(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":100,"author":{"gitId":"seaniy"},"content":"            for(int i \u003d 1; i \u003c\u003d tasks.getSize(); i++) {"},{"lineNumber":101,"author":{"gitId":"seaniy"},"content":"                message.append(\"  \" + i + \". \" + tasks.getTask(i - 1));"},{"lineNumber":102,"author":{"gitId":"seaniy"},"content":"                if(i \u003c tasks.getSize()) {"},{"lineNumber":103,"author":{"gitId":"seaniy"},"content":"                    message.append(\"\\n\");"},{"lineNumber":104,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":105,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"seaniy"},"content":"        showMessage(message.toString());"},{"lineNumber":108,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":110,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"seaniy"},"content":"     * This method is used to output the message provided in a standardized"},{"lineNumber":112,"author":{"gitId":"seaniy"},"content":"     * styling with a divider before and after the message."},{"lineNumber":113,"author":{"gitId":"seaniy"},"content":"     * @param message The message to display within the dividers."},{"lineNumber":114,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"seaniy"},"content":"    public void showMessage(String message) {"},{"lineNumber":116,"author":{"gitId":"seaniy"},"content":"        System.out.println(divider + message + \"\\n\" + divider);"},{"lineNumber":117,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":119,"author":{"gitId":"seaniy"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"seaniy"},"content":"     * This method is used to output the generic error message."},{"lineNumber":121,"author":{"gitId":"seaniy"},"content":"     * @param errorMessage The error message to display."},{"lineNumber":122,"author":{"gitId":"seaniy"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"seaniy"},"content":"    public void showErrorMessage(String errorMessage) {"},{"lineNumber":124,"author":{"gitId":"seaniy"},"content":"        showMessage(\"Error! \" + errorMessage);"},{"lineNumber":125,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":126}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"    private final Parser parser \u003d new Parser();"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    public void parseCommandTest_success() throws Exception {"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"        assertEquals(2, parser.parseCommand(\"todo\"));"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    public void parseCommandTest_exceptionThrown() {"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"            assertEquals(2, parser.parseCommand(\"gg\"));"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"            fail();"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"        } catch (DukeException error) {"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"            assertEquals(null, error.getMessage());"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"    public void parseDoneCommandTest_success() throws Exception {"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"        assertEquals(2, parser.parseDoneCommand(\"done 2\"));"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"    public void parseDoneCommandTest_exceptionThrown() {"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"            assertEquals(2, parser.parseDoneCommand(\"done\"));"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"            fail();"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"        } catch (DukeException error) {"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"            assertEquals(null, error.getMessage());"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":42}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import java.io.PrintStream;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"public class UiTest {"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"    private final Ui ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    @BeforeEach"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    public void setUp() {"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));"},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    public void showInputErrorTest() {"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"        ui.showInputError();"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":"        assertEquals(Ui.divider + \"I\u0027m sorry, but I don\u0027t know what that means.\\n\" + Ui.divider + \"\\n\", outputStreamCaptor.toString());"},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"    public void showLoadingErrorTest() {"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"        ui.showLoadingError();"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"        assertEquals(Ui.divider + \"Failed to load file. Exiting...\\n\" + Ui.divider + \"\\n\", outputStreamCaptor.toString());"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"    public void showMessage() {"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"        ui.showMessage(\"\");"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"        assertEquals(Ui.divider + \"\\n\" + Ui.divider + \"\\n\", outputStreamCaptor.toString());"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"done"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"done 8"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"list"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"deadline return book /by Sunday"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"delete"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"delete 10"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"bye"}],"authorContributionMap":{"seaniy":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"seaniy":1,"-":20}}]
