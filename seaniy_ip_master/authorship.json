[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"public class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"    protected LocalDate date;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"    public Deadline(String description, LocalDate date) {"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"        this.date \u003d date;"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"        return \"D | \" + super.toString() + \" | \" + date.format(DateTimeFormatter.ofPattern(\"dd MMM YYYY\"));"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":16}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"import java.io.FileWriter;"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"import java.util.*;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"    public static final String logo \u003d \" ____        _\\n\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"    public static final String divider \u003d \"____________________________________________________________\\n\";"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    public static final String filePath \u003d \"data/duke.txt\";"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"        printMessage(logo + \"\\nHello! I\u0027m Duke\\nWhat can I do for you?\");"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"        List\u003cTask\u003e list \u003d readFromFile();"},{"lineNumber":23,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":24,"author":{"gitId":"seaniy"},"content":"        while(sc.hasNextLine()) {"},{"lineNumber":25,"author":{"gitId":"seaniy"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":26,"author":{"gitId":"seaniy"},"content":"            String[] check \u003d input.split(\" \");"},{"lineNumber":27,"author":{"gitId":"seaniy"},"content":"            if(input.equals(\"bye\")) {"},{"lineNumber":28,"author":{"gitId":"seaniy"},"content":"                printMessage(\"Bye. Hope to see you again soon!\");"},{"lineNumber":29,"author":{"gitId":"seaniy"},"content":"                writeToFile(list);"},{"lineNumber":30,"author":{"gitId":"seaniy"},"content":"                break;"},{"lineNumber":31,"author":{"gitId":"seaniy"},"content":"            } else if(input.equals(\"list\")) {"},{"lineNumber":32,"author":{"gitId":"seaniy"},"content":"                StringBuilder message \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"seaniy"},"content":"                if(list.isEmpty()) {"},{"lineNumber":34,"author":{"gitId":"seaniy"},"content":"                    message.append(\"List is empty.\");"},{"lineNumber":35,"author":{"gitId":"seaniy"},"content":"                } else {"},{"lineNumber":36,"author":{"gitId":"seaniy"},"content":"                    for(int i \u003d 1; i \u003c\u003d list.size(); i++) {"},{"lineNumber":37,"author":{"gitId":"seaniy"},"content":"                        message.append(\"  \" + i + \". \" + list.get(i-1));"},{"lineNumber":38,"author":{"gitId":"seaniy"},"content":"                        if(i \u003c list.size()) {"},{"lineNumber":39,"author":{"gitId":"seaniy"},"content":"                            message.append(\"\\n\");"},{"lineNumber":40,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":41,"author":{"gitId":"seaniy"},"content":"                    }"},{"lineNumber":42,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":43,"author":{"gitId":"seaniy"},"content":"                printMessage(message.toString());"},{"lineNumber":44,"author":{"gitId":"seaniy"},"content":"            } else if(check[0].equals(\"done\")) {"},{"lineNumber":45,"author":{"gitId":"seaniy"},"content":"                try {"},{"lineNumber":46,"author":{"gitId":"seaniy"},"content":"                    checkEmptyInput(check);"},{"lineNumber":47,"author":{"gitId":"seaniy"},"content":"                    list.get(Integer.parseInt(check[1])-1).markAsDone();"},{"lineNumber":48,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"Nice! I\u0027ve marked this task as done:\\n  \" + list.get(Integer.parseInt(check[1])-1));"},{"lineNumber":49,"author":{"gitId":"seaniy"},"content":"                    writeToFile(list);"},{"lineNumber":50,"author":{"gitId":"seaniy"},"content":"                } catch (DukeException error) {"},{"lineNumber":51,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"OOPS!!! Please select an item to mark as done.\");"},{"lineNumber":52,"author":{"gitId":"seaniy"},"content":"                } catch (IndexOutOfBoundsException error) {"},{"lineNumber":53,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"OOPS!!! Selected item does not exist.\");"},{"lineNumber":54,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"seaniy"},"content":"            } else if(check[0].equals(\"delete\")) {"},{"lineNumber":56,"author":{"gitId":"seaniy"},"content":"                try {"},{"lineNumber":57,"author":{"gitId":"seaniy"},"content":"                    checkEmptyInput(check);"},{"lineNumber":58,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"Noted. I\u0027ve removed this task:\\n  \" + list.remove(Integer.parseInt(check[1])-1) + \"\\nNow you have \" + list.size() + \" tasks in the list.\");"},{"lineNumber":59,"author":{"gitId":"seaniy"},"content":"                    writeToFile(list);"},{"lineNumber":60,"author":{"gitId":"seaniy"},"content":"                } catch (DukeException error) {"},{"lineNumber":61,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"OOPS!!! Please select an item to delete.\");"},{"lineNumber":62,"author":{"gitId":"seaniy"},"content":"                } catch (IndexOutOfBoundsException error) {"},{"lineNumber":63,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"OOPS!!! Selected item does not exist.\");"},{"lineNumber":64,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"seaniy"},"content":"            } else if(check[0].equals(\"todo\")) {"},{"lineNumber":66,"author":{"gitId":"seaniy"},"content":"                try {"},{"lineNumber":67,"author":{"gitId":"seaniy"},"content":"                    checkEmptyInput(check);"},{"lineNumber":68,"author":{"gitId":"seaniy"},"content":"                    Todo curr \u003d new Todo(input.substring(5,input.length()));"},{"lineNumber":69,"author":{"gitId":"seaniy"},"content":"                    list.add(curr);"},{"lineNumber":70,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"Got it. I\u0027ve added this task:\\n  \" + curr + \"\\nNow you have \" + list.size() + \" tasks in the list.\");"},{"lineNumber":71,"author":{"gitId":"seaniy"},"content":"                    writeToFile(list);"},{"lineNumber":72,"author":{"gitId":"seaniy"},"content":"                } catch (DukeException error) {"},{"lineNumber":73,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":74,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"seaniy"},"content":"            } else if(check[0].equals(\"deadline\")) {"},{"lineNumber":76,"author":{"gitId":"seaniy"},"content":"                try {"},{"lineNumber":77,"author":{"gitId":"seaniy"},"content":"                    checkEmptyInput(check);"},{"lineNumber":78,"author":{"gitId":"seaniy"},"content":"                    String[] temp \u003d input.substring(9, input.length()).split(\" /by \");"},{"lineNumber":79,"author":{"gitId":"seaniy"},"content":"                    Deadline curr \u003d new Deadline(temp[0], LocalDate.parse(temp[1]));"},{"lineNumber":80,"author":{"gitId":"seaniy"},"content":"                    list.add(curr);"},{"lineNumber":81,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"Got it. I\u0027ve added this task:\\n  \" + curr + \"\\nNow you have \" + list.size() + \" tasks in the list.\");"},{"lineNumber":82,"author":{"gitId":"seaniy"},"content":"                    writeToFile(list);"},{"lineNumber":83,"author":{"gitId":"seaniy"},"content":"                } catch (DukeException error) {"},{"lineNumber":84,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"OOPS!!! The description of a deadline cannot be empty\");"},{"lineNumber":85,"author":{"gitId":"seaniy"},"content":"                } catch(DateTimeParseException error) {"},{"lineNumber":86,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"OOPS!!! The date provided is invalid\");"},{"lineNumber":87,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":88,"author":{"gitId":"seaniy"},"content":"            } else if(check[0].equals(\"event\")) {"},{"lineNumber":89,"author":{"gitId":"seaniy"},"content":"                try {"},{"lineNumber":90,"author":{"gitId":"seaniy"},"content":"                    checkEmptyInput(check);"},{"lineNumber":91,"author":{"gitId":"seaniy"},"content":"                    String[] temp \u003d input.substring(6, input.length()).split(\" /at \");"},{"lineNumber":92,"author":{"gitId":"seaniy"},"content":"                    Event curr \u003d new Event(temp[0], temp[1]);"},{"lineNumber":93,"author":{"gitId":"seaniy"},"content":"                    list.add(curr);"},{"lineNumber":94,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"Got it. I\u0027ve added this task:\\n  \" + curr + \"\\nNow you have \" + list.size() + \" tasks in the list.\");"},{"lineNumber":95,"author":{"gitId":"seaniy"},"content":"                    writeToFile(list);"},{"lineNumber":96,"author":{"gitId":"seaniy"},"content":"                } catch (DukeException error) {"},{"lineNumber":97,"author":{"gitId":"seaniy"},"content":"                    printMessage(\"OOPS!!! The description of an event cannot be empty\");"},{"lineNumber":98,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":99,"author":{"gitId":"seaniy"},"content":"            } else {"},{"lineNumber":100,"author":{"gitId":"seaniy"},"content":"                printMessage(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":101,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":105,"author":{"gitId":"seaniy"},"content":"    private static void printMessage(String message) {"},{"lineNumber":106,"author":{"gitId":"seaniy"},"content":"        System.out.println(divider + message + \"\\n\" + divider);"},{"lineNumber":107,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":109,"author":{"gitId":"seaniy"},"content":"    private static List\u003cTask\u003e readFromFile() {"},{"lineNumber":110,"author":{"gitId":"seaniy"},"content":"        List\u003cTask\u003e data \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":112,"author":{"gitId":"seaniy"},"content":"            File txt \u003d new File(filePath);"},{"lineNumber":113,"author":{"gitId":"seaniy"},"content":"            if(!txt.exists()) {"},{"lineNumber":114,"author":{"gitId":"seaniy"},"content":"                File parentDir \u003d txt.getParentFile();"},{"lineNumber":115,"author":{"gitId":"seaniy"},"content":"                if(!parentDir.exists()) {"},{"lineNumber":116,"author":{"gitId":"seaniy"},"content":"                    parentDir.mkdir();"},{"lineNumber":117,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":118,"author":{"gitId":"seaniy"},"content":"                txt.createNewFile();"},{"lineNumber":119,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"seaniy"},"content":"            Scanner myReader \u003d new Scanner(txt);"},{"lineNumber":121,"author":{"gitId":"seaniy"},"content":"            while(myReader.hasNextLine()) {"},{"lineNumber":122,"author":{"gitId":"seaniy"},"content":"                String[] taskInfo \u003d myReader.nextLine().split(\" \\\\| \");"},{"lineNumber":123,"author":{"gitId":"seaniy"},"content":"                Task curr;"},{"lineNumber":124,"author":{"gitId":"seaniy"},"content":"                switch(taskInfo[0]) {"},{"lineNumber":125,"author":{"gitId":"seaniy"},"content":"                    case \"T\":"},{"lineNumber":126,"author":{"gitId":"seaniy"},"content":"                        curr \u003d new Todo(taskInfo[2]);"},{"lineNumber":127,"author":{"gitId":"seaniy"},"content":"                        if(taskInfo[1].equals(\"\\u2713\")) {"},{"lineNumber":128,"author":{"gitId":"seaniy"},"content":"                            curr.markAsDone();"},{"lineNumber":129,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":130,"author":{"gitId":"seaniy"},"content":"                        data.add(curr);"},{"lineNumber":131,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":132,"author":{"gitId":"seaniy"},"content":"                    case \"D\":"},{"lineNumber":133,"author":{"gitId":"seaniy"},"content":"                        String[] localDate \u003d taskInfo[3].split(\" \");"},{"lineNumber":134,"author":{"gitId":"seaniy"},"content":"                        String date \u003d localDate[0] + \"-\" + localDate[1] + \"-\" + localDate[2];"},{"lineNumber":135,"author":{"gitId":"seaniy"},"content":"                        curr \u003d new Deadline(taskInfo[2], LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\")));"},{"lineNumber":136,"author":{"gitId":"seaniy"},"content":"                        if(taskInfo[1].equals(\"\\u2713\")) {"},{"lineNumber":137,"author":{"gitId":"seaniy"},"content":"                            curr.markAsDone();"},{"lineNumber":138,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":139,"author":{"gitId":"seaniy"},"content":"                        data.add(curr);"},{"lineNumber":140,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":141,"author":{"gitId":"seaniy"},"content":"                    case \"E\":"},{"lineNumber":142,"author":{"gitId":"seaniy"},"content":"                        curr \u003d new Event(taskInfo[2], taskInfo[3]);"},{"lineNumber":143,"author":{"gitId":"seaniy"},"content":"                        if(taskInfo[1].equals(\"\\u2713\")) {"},{"lineNumber":144,"author":{"gitId":"seaniy"},"content":"                            curr.markAsDone();"},{"lineNumber":145,"author":{"gitId":"seaniy"},"content":"                        }"},{"lineNumber":146,"author":{"gitId":"seaniy"},"content":"                        data.add(curr);"},{"lineNumber":147,"author":{"gitId":"seaniy"},"content":"                        break;"},{"lineNumber":148,"author":{"gitId":"seaniy"},"content":"                }"},{"lineNumber":149,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"seaniy"},"content":"        } catch(IOException | DateTimeParseException error) {"},{"lineNumber":151,"author":{"gitId":"seaniy"},"content":"            printMessage(\"OOPS!!! It seems I\u0027ve encountered an error. Please try again :-(\");"},{"lineNumber":152,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"seaniy"},"content":"        return data;"},{"lineNumber":154,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":156,"author":{"gitId":"seaniy"},"content":"    private static void writeToFile(List\u003cTask\u003e list) {"},{"lineNumber":157,"author":{"gitId":"seaniy"},"content":"        StringBuilder data \u003d new StringBuilder();"},{"lineNumber":158,"author":{"gitId":"seaniy"},"content":"        try {"},{"lineNumber":159,"author":{"gitId":"seaniy"},"content":"            FileWriter writer \u003d new FileWriter(filePath);"},{"lineNumber":160,"author":{"gitId":"seaniy"},"content":"            for(Task task : list) {"},{"lineNumber":161,"author":{"gitId":"seaniy"},"content":"                data.append(task.toString() + \"\\n\");"},{"lineNumber":162,"author":{"gitId":"seaniy"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"seaniy"},"content":"            writer.write(data.toString());"},{"lineNumber":164,"author":{"gitId":"seaniy"},"content":"            writer.close();"},{"lineNumber":165,"author":{"gitId":"seaniy"},"content":"        } catch(IOException error) {"},{"lineNumber":166,"author":{"gitId":"seaniy"},"content":"            printMessage(\"OOPS!!! It seems I\u0027ve encountered an error. Please try again :-(\");"},{"lineNumber":167,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":170,"author":{"gitId":"seaniy"},"content":"    private static boolean checkEmptyInput(String[] input) throws DukeException {"},{"lineNumber":171,"author":{"gitId":"seaniy"},"content":"        if(input.length \u003c\u003d 1) {"},{"lineNumber":172,"author":{"gitId":"seaniy"},"content":"            throw new DukeException();"},{"lineNumber":173,"author":{"gitId":"seaniy"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"seaniy"},"content":"        return true;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"seaniy":167,"-":9}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":2}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"    protected String location;"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"    public Event(String description, String location) {"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"        this.location \u003d location;"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"        return \"E | \" + super.toString() + \" | \" + location;"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":13}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"    public Task(String description) {"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"        this.description \u003d description;"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"        this.isDone \u003d false;"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"    public String getStatusIcon() {"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"    public void markAsDone() {"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"        this.isDone \u003d true;"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":18,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"seaniy"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"seaniy"},"content":"        return getStatusIcon() + \" | \" + description;"},{"lineNumber":21,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":22}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"    public Todo(String description) {"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"        super(description);"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":""},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"    public String toString() {"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"        return \"T | \" + super.toString();"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"}"}],"authorContributionMap":{"seaniy":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"seaniy"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"seaniy"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"seaniy"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"seaniy"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"seaniy"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"seaniy"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"seaniy"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"seaniy"},"content":"done"},{"lineNumber":9,"author":{"gitId":"seaniy"},"content":"done 8"},{"lineNumber":10,"author":{"gitId":"seaniy"},"content":"list"},{"lineNumber":11,"author":{"gitId":"seaniy"},"content":"deadline return book /by Sunday"},{"lineNumber":12,"author":{"gitId":"seaniy"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":13,"author":{"gitId":"seaniy"},"content":"delete"},{"lineNumber":14,"author":{"gitId":"seaniy"},"content":"delete 10"},{"lineNumber":15,"author":{"gitId":"seaniy"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"seaniy"},"content":"bye"}],"authorContributionMap":{"seaniy":16}}]
