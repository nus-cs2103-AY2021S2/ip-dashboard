[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.Command;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.StorageException;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskParseException;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import duke.ui.TextUi;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private final Storage storage;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    private final Ui ui;"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private final Parser parser;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public Duke(String filePath) {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (StorageException | TaskParseException e) {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"            // if the loading fails for any reason, just make a new empty list"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        parser \u003d new Parser();"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        ui \u003d new TextUi();"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public static void main(String[] args) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        final String dataFilePath \u003d \"data/duke.dat\";"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        new Duke(dataFilePath).run();"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    public void run() {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        ui.showGreeting();"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isExit \u003d false;"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        do {"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"            String input \u003d ui.readCommand();"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"            Command cmd \u003d parser.parseCmd(input);"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"            CommandResult cmdResult \u003d cmd.execute(tasks, storage);"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"            ui.showCommandResult(cmdResult);"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"            isExit \u003d cmdResult.isExit();"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"                storage.save(tasks.serialize());"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"            } catch (StorageException e) {"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"                ui.showError(\"Warning: failed to save tasks!\");"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        } while (!isExit);"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        ui.showFarewell();"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":54,"-":1}},{"path":"src/main/java/duke/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"public class AddDeadlineCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_DEADLINE_KEYWORD \u003d Pattern.compile(\"(?i)deadline\\\\b\");"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_DEADLINE_DESC \u003d Pattern.compile(\"(?i)deadline\\\\s+(\\\\w.*)\");"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_DEADLINE_DATE \u003d Pattern.compile(\"(?i)deadline\\\\s+(\\\\w.*)\\\\s+/by\\\\s+(\\\\w.*)\");"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private final String taskDesc;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private final LocalDate date;"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    private AddDeadlineCommand(String taskDesc, LocalDate date) {"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        this.taskDesc \u003d taskDesc;"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isAddDeadlineCommand(String input) {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        return ADD_DEADLINE_KEYWORD.matcher(input).find();"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    public static AddDeadlineCommand parseAddDeadlineCommand(String input) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        // check description exists"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher descMatcher \u003d ADD_DEADLINE_DESC.matcher(input);"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        if (!descMatcher.find()) {"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty!\\n\""},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: deadline \u003cDESCRIPTION\u003e /by \u003cDATE\u003e\");"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        // check date exists"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher dateMatcher \u003d ADD_DEADLINE_DATE.matcher(input);"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        if (!dateMatcher.find()) {"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"A deadline must have a date!\\n\""},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: deadline \u003cDESCRIPTION\u003e /by \u003cDATE\u003e\");"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        String taskDesc \u003d dateMatcher.group(1);"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        String dateStr \u003d dateMatcher.group(2);"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, Deadline.INPUT_DATE_FORMATTER);"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"            return new AddDeadlineCommand(taskDesc, date);"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(String.format(\"Sorry, I don\u0027t recognize this date: \u0027%s\u0027\\n\""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Use this format please: %s\", dateStr, Deadline.INPUT_DATE_FORMAT));"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        Deadline deadline \u003d new Deadline(taskDesc, date);"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.add(deadline);"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback \u003d String.format(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"%s\\n\""},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Now you have %d task(s) in the list.\","},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"                deadline.toString(), tasks.taskCount());"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":66}},{"path":"src/main/java/duke/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class AddEventCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_EVENT_KEYWORD \u003d Pattern.compile(\"(?i)event\\\\b\");"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_EVENT_DESC \u003d Pattern.compile(\"(?i)event\\\\s+(\\\\w.*)\");"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_EVENT_PERIOD \u003d Pattern.compile(\"(?i)event\\\\s+(\\\\w.*)\\\\s+/at\\\\s+(\\\\w.*)\");"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    private final String taskDesc;"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private final String period;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private AddEventCommand(String taskDesc, String period) {"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        this.taskDesc \u003d taskDesc;"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        this.period \u003d period;"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isAddEventCommand(String input) {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        return ADD_EVENT_KEYWORD.matcher(input).find();"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    public static AddEventCommand parseAddEventCommand(String input) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        // check description exists"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher descMatcher \u003d ADD_EVENT_DESC.matcher(input);"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        if (!descMatcher.find()) {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"The description of an event cannot be empty!\\n\""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: event \u003cDESCRIPTION\u003e /at \u003cPERIOD\u003e\");"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        // check period exists"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher periodMatcher \u003d ADD_EVENT_PERIOD.matcher(input);"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        if (!periodMatcher.find()) {"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"An event must have a period!\\n\""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: event \u003cDESCRIPTION\u003e /at \u003cPERIOD\u003e\");"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        String taskDesc \u003d periodMatcher.group(1);"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        String period \u003d periodMatcher.group(2);"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        return new AddEventCommand(taskDesc, period);"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        Event event \u003d new Event(taskDesc, period);"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.add(event);"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback \u003d String.format(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"%s\\n\""},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Now you have %d task(s) in the list.\","},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"                event.toString(), tasks.taskCount());"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":58}},{"path":"src/main/java/duke/commands/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.ToDo;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class AddToDoCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_TODO_KEYWORD \u003d Pattern.compile(\"(?i)todo\\\\b\");"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_TODO_DESC \u003d Pattern.compile(\"(?i)todo\\\\s+(\\\\w.*)\");"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private final String taskDesc;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private AddToDoCommand(String taskDesc) {"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        this.taskDesc \u003d taskDesc;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isAddToDoCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        return ADD_TODO_KEYWORD.matcher(input).find();"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public static AddToDoCommand parseAddToDoCommand(String input) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher toDoMatcher \u003d ADD_TODO_DESC.matcher(input);"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        if (!toDoMatcher.find()) {"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"            // Matched command but invalid argument"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"The description of a todo cannot be empty!\\n\""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: todo \u003cDESCRIPTION\u003e\");"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        String taskDesc \u003d toDoMatcher.group(1);"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        return new AddToDoCommand(taskDesc);"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        ToDo toDo \u003d new ToDo(taskDesc);"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.add(toDo);"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback \u003d String.format(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"%s\\n\""},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Now you have %d task(s) in the list.\","},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"                toDo.toString(), tasks.taskCount());"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":47}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"public abstract class Command {"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    public abstract CommandResult execute(TaskList tasks, Storage storage);"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":8}},{"path":"src/main/java/duke/commands/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandResult {"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"    protected String feedback;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"    protected boolean isExit;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult(String feedback) {"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"        this(feedback, false);"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult(String feedback, boolean isExit) {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"        this.feedback \u003d feedback;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    public String getFeedback() {"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        return feedback;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean hasFeedback() {"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        return feedback !\u003d null;"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        return isExit;"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":27}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern DELETE_KEYWORD \u003d Pattern.compile(\"(?i)delete\\\\b\");"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern DELETE_INDEX \u003d Pattern.compile(\"(?i)delete\\\\s+(\\\\d+)$\");"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private final String argStr;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private DeleteCommand(String argStr) {"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        this.argStr \u003d argStr;"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isDeleteCommand(String input) {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        return DELETE_KEYWORD.matcher(input).find();"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    public static DeleteCommand parseDeleteCommand(String input) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher deleteMatcher \u003d DELETE_INDEX.matcher(input);"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        if (!deleteMatcher.find()) {"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"A delete command must specify a task number.\\n\""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: delete \u003cTASK NUMBER\u003e\");"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        String argStr \u003d deleteMatcher.group(1);"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        return new DeleteCommand(argStr);"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback;"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"            int arg \u003d Integer.parseInt(argStr);"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"            if (arg \u003c 1 || arg \u003e tasks.taskCount()) {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"                // Argument out of range"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"                feedback \u003d String.format(\"Task %d does not exist!\\n\""},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Valid task numbers are 1 to %d.\", arg, tasks.taskCount());"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"                // Valid argument in range"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"                int index \u003d arg - 1;"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"                Task t \u003d tasks.getAt(index);"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"                tasks.removeAt(index);"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"                feedback \u003d String.format(\"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"                                + \"%s\\n\""},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"                                + \"Now you have %d task(s) in the list.\","},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"                        t.toString(), tasks.taskCount());"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"            // Argument of wrong type"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"            feedback \u003d String.format(\"Illegal argument: \u0027%s\u0027. Expected integer.\\n\""},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Valid task numbers are 1 to %d.\", argStr, tasks.taskCount());"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":65}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern DONE_KEYWORD \u003d Pattern.compile(\"(?i)done\\\\b\");"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern DONE_INDEX \u003d Pattern.compile(\"(?i)done\\\\s+(\\\\d+)$\");"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private final String argStr;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private DoneCommand(String argStr) {"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        this.argStr \u003d argStr;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isDoneCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        return DONE_KEYWORD.matcher(input).find();"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public static DoneCommand parseDoneCommand(String input) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher doneMatcher \u003d DONE_INDEX.matcher(input);"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        if (!doneMatcher.find()) {"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"A done command must specify a task number.\\n\""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: done \u003cTASK NUMBER\u003e\");"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        String argStr \u003d doneMatcher.group(1);"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        return new DoneCommand(argStr);"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback;"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"            int arg \u003d Integer.parseInt(argStr);"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"            if (arg \u003c 1 || arg \u003e tasks.taskCount()) {"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"                // Argument out of range"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"                feedback \u003d String.format(\"Task %d does not exist!\\n\""},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Valid task numbers are 1 to %d.\", arg, tasks.taskCount());"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"            } else {"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"                // Valid argument in range"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"                int index \u003d arg - 1;"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"                Task t \u003d tasks.getAt(index);"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"                t.markAsDone();"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"                feedback \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"%s\", t.toString());"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"            // Argument of wrong type"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"            feedback \u003d String.format(\"Illegal argument: \u0027%s\u0027. Expected integer.\\n\""},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Valid task numbers are 1 to %d.\", argStr, tasks.taskCount());"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":62}},{"path":"src/main/java/duke/commands/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"        return getMessage();"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":12}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern EXIT_KEYWORD \u003d Pattern.compile(\"(?i)bye\\\\b\");"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public ExitCommand() {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isExitCommand(String input) {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        return EXIT_KEYWORD.matcher(input).find();"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(null, true);"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":22}},{"path":"src/main/java/duke/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"    private final String feedbackMsg;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    public InvalidCommand(String feedbackMsg) {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"        this.feedbackMsg \u003d feedbackMsg;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedbackMsg);"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":17}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern LIST_KEYWORD \u003d Pattern.compile(\"(?i)list\\\\b\");"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern LIST_ONLY \u003d Pattern.compile(\"(?i)list(\\\\s*)$\");"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private ListCommand() {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isListCommand(String input) {"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        return LIST_KEYWORD.matcher(input).find();"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    public static ListCommand parseListCommand(String input) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher listMatcher \u003d LIST_ONLY.matcher(input);"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        if (!listMatcher.find()) {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"Please do not include any arguments after the list command.\\n\""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: list\");"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        return new ListCommand();"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder feedback \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        if (tasks.taskCount() \u003d\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"            feedback.append(\"No tasks currently!\");"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"            for (int i \u003d 0; i \u003c tasks.taskCount(); i++) {"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"                Task t \u003d tasks.getAt(i);"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"                int index \u003d i + 1;"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"                feedback.append(String.format(\"%d.%s\", index, t));"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"                if (i \u003c tasks.taskCount() - 1) {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"                    feedback.append(\"\\n\");"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback.toString());"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":50}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.AddDeadlineCommand;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.AddEventCommand;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.AddToDoCommand;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.Command;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.DukeException;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.ExitCommand;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.InvalidCommand;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.ListCommand;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    public Command parseCmd(String rawInput) {"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"        String cmd \u003d rawInput.trim();"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"            if (ExitCommand.isExitCommand(cmd)) {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"                return new ExitCommand();"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (AddToDoCommand.isAddToDoCommand(cmd)) {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"                return AddToDoCommand.parseAddToDoCommand(cmd);"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (AddDeadlineCommand.isAddDeadlineCommand(cmd)) {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"                return AddDeadlineCommand.parseAddDeadlineCommand(cmd);"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (AddEventCommand.isAddEventCommand(cmd)) {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"                return AddEventCommand.parseAddEventCommand(cmd);"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (ListCommand.isListCommand(cmd)) {"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"                return ListCommand.parseListCommand(cmd);"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (DoneCommand.isDoneCommand(cmd)) {"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"                return DoneCommand.parseDoneCommand(cmd);"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (DeleteCommand.isDeleteCommand(cmd)) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"                return DeleteCommand.parseDeleteCommand(cmd);"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"            } else {"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"                return new InvalidCommand(String.format(\"Sorry, I don\u0027t know what \u0027%s\u0027 means\", cmd));"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (DukeException ex) {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"            return new InvalidCommand(ex.getMessage());"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":40}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class Storage {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private final Path dirPath;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private final Path filePath;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public Storage(String path) {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        filePath \u003d Path.of(path).toAbsolutePath();"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"        dirPath \u003d filePath.getParent();"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public String load() throws StorageException {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"            return Files.readString(filePath);"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException ex) {"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"            throw new StorageException(String.format(\"Failed to load from %s\", filePath.toString()));"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    public void save(String data) throws StorageException {"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        // Solution below adapted from https://tinyurl.com/y35nn2nl"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        // create folders if necessary"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        File directory \u003d new File(dirPath.toString());"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        if (!directory.exists()) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"            directory.mkdirs();"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        // open/create file"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        File file \u003d new File(filePath.toString());"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile(), false);"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"            bw.write(data);"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"            bw.close();"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException ex) {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"            throw new StorageException(String.format(\"Failed to save to %s\", filePath.toString()));"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":46}},{"path":"src/main/java/duke/storage/StorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"public class StorageException extends Exception {"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"    public StorageException(String message) {"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"        return getMessage();"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":12}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String INPUT_DATE_FORMAT \u003d \"yyyy-MM-dd\";"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    public static final DateTimeFormatter INPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(INPUT_DATE_FORMAT);"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    public static final DateTimeFormatter OUTPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String TYPE \u003d \"D\";"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String SEPARATOR \u003d \"\\\\|\";"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    private static final int FIELD_COUNT \u003d 4;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    protected LocalDate date;"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public Deadline(String description, LocalDate date) {"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        this(description, date, false);"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    public Deadline(String description, LocalDate date, boolean isDone) {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        super(description, TYPE, isDone);"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    public static Deadline deserialize(String serialized) throws TaskParseException {"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        final TaskParseException parseEx \u003d new TaskParseException(\"Invalid deadline!\");"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003c FIELD_COUNT) {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        String type \u003d fields[0];"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        if (!type.equals(TYPE)) {"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d Boolean.parseBoolean(fields[1]);"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d fields[2];"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        String dateStr \u003d fields[3];"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        LocalDate date;"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"            date \u003d LocalDate.parse(dateStr, INPUT_DATE_FORMATTER);"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        return new Deadline(description, date, isDone);"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isDeadline(String serialized) {"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003e 0) {"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"            String type \u003d fields[0];"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"            return type.equals(TYPE);"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        return false;"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"    public LocalDate getDate() {"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        return date;"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    public String serialize() {"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"%s|%b|%s|%s\", getType(), isDone, getDescription(),"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"                date.format(INPUT_DATE_FORMATTER));"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"[%s][%s] %s (by: %s)\", getType(), getStatusIcon(), getDescription(),"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"                date.format(OUTPUT_DATE_FORMATTER));"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":76}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String TYPE \u003d \"E\";"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String SEPARATOR \u003d \"\\\\|\";"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"    private static final int FIELD_COUNT \u003d 4;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    protected String period;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    public Event(String description, String period) {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"        this(description, period, false);"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public Event(String description, String period, boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        super(description, TYPE, isDone);"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"        this.period \u003d period;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public static Event deserialize(String serialized) throws TaskParseException {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        final TaskParseException parseEx \u003d new TaskParseException(\"Invalid event!\");"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003c FIELD_COUNT) {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        String type \u003d fields[0];"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        if (!type.equals(TYPE)) {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d Boolean.parseBoolean(fields[1]);"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d fields[2];"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        String period \u003d fields[3];"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        return new Event(description, period, isDone);"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isEvent(String serialized) {"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003e 0) {"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"            String type \u003d fields[0];"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"            return type.equals(TYPE);"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        return false;"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    public String getPeriod() {"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        return period;"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    public String serialize() {"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"%s|%b|%s|%s\", getType(), isDone, getDescription(), period);"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"[%s][%s] %s (at: %s)\", getType(), getStatusIcon(), getDescription(), period);"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":61}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"    protected String type;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    protected Task(String description, String type) {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"        this(description, type, false);"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    protected Task(String description, String type, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        this.type \u003d type;"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public String getDescription() {"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        return description;"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    public String getStatusIcon() {"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        if (isDone) {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"            return \"\\u2713\";"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            return \" \";"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    public String getType() {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        return type;"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    public void markAsDone() {"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        isDone \u003d true;"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    public abstract String serialize();"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    public abstract String toString();"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":41}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    public TaskList() {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public TaskList(String serialized) throws TaskParseException {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        tasks \u003d deserialize(serialized);"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private static List\u003cTask\u003e deserialize(String serialized) throws TaskParseException {"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cTask\u003e ts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        Scanner sc \u003d new Scanner(serialized);"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"            String taskSerial \u003d sc.nextLine();"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"            Task t;"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            if (ToDo.isToDo(taskSerial)) {"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"                t \u003d ToDo.deserialize(taskSerial);"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (Event.isEvent(taskSerial)) {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"                t \u003d Event.deserialize(taskSerial);"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (Deadline.isDeadline(taskSerial)) {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"                t \u003d Deadline.deserialize(taskSerial);"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"            } else {"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"                throw new TaskParseException(\"Warning: invalid type. Aborting!\");"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"            ts.add(t);"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        return ts;"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    public void add(Task t) {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.add(t);"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    public Task getAt(int index) {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        return tasks.get(index);"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    public void removeAt(int index) {"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.remove(index);"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    public String serialize() {"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder serial \u003d new StringBuilder();"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        for (Task t : tasks) {"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"            serial.append(t.serialize()).append(\"\\n\");"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        return serial.toString();"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    public int taskCount() {"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"        return tasks.size();"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":65}},{"path":"src/main/java/duke/task/TaskParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"public class TaskParseException extends Exception {"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"    public TaskParseException(String message) {"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"        return getMessage();"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":12}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String TYPE \u003d \"T\";"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String SEPARATOR \u003d \"\\\\|\";"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"    private static final int FIELD_COUNT \u003d 3;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    public ToDo(String description) {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"        this(description, false);"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    public ToDo(String description, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"        super(description, TYPE, isDone);"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    public static ToDo deserialize(String serialized) throws TaskParseException {"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        final TaskParseException parseEx \u003d new TaskParseException(\"Invalid ToDo!\");"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003c FIELD_COUNT) {"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        String type \u003d fields[0];"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        if (!type.equals(TYPE)) {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d Boolean.parseBoolean(fields[1]);"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d fields[2];"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        return new ToDo(description, isDone);"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isToDo(String serialized) {"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003e 0) {"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"            String type \u003d fields[0];"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"            return type.equals(TYPE);"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        return false;"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    public String serialize() {"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"%s|%b|%s\", getType(), isDone, getDescription());"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"[%s][%s] %s\", getType(), getStatusIcon(), getDescription());"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":53}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.PrintStream;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public class TextUi implements Ui {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String COMMAND_PROMPT \u003d \"Type Command\u003e \";"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private final Scanner in;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private final PrintStream out;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public TextUi() {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        in \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"        out \u003d System.out;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    public String readCommand() {"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        String line;"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        do {"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"            out.print(COMMAND_PROMPT);"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"            line \u003d in.nextLine();"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        } while (isInvalid(line));"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        return line;"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    public void showCommandResult(CommandResult result) {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        if (result.hasFeedback()) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"            out.println(result.getFeedback());"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    public void showError(String errMsg) {"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(errMsg);"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    public void showFarewell() {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(\"Goodbye, cruel world!\");"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    public void showGreeting() {"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        final String logo \u003d \"███      ███                             ███                      \\n\""},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"                + \" ███    ███   ██                         ███                      \\n\""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"                + \"  ███ ███        ███ ███    █████        ███     ███     ███ ███  \\n\""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"                + \"    ███      ███  ███  ███ ███  ███      ███   ██   ███   ███  ███\\n\""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"                + \"    ███      ███  ███  ███ ██   ███      ███  █████████   ███  ███\\n\""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"                + \"    ███      ███  ███  ███ ████ ███ ██   ███  ██          ███  ███\\n\""},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"                + \"    ███      ███ ████  ███     ███   █████      █████    ████  ███\\n\""},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"                + \"                             ████                                 \\n\";"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(\"Hi there. I am\");"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(logo);"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(\"How may I help you?\");"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    public void showMessage(String msg) {"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(msg);"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    private boolean isInvalid(String input) {"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        return input.isBlank();"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":69}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"public interface Ui {"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"    String readCommand();"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"    void showCommandResult(CommandResult result);"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    void showError(String errMsg);"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    void showFarewell();"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    void showGreeting();"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    void showMessage(String msg);"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":17}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.AddToDoCommand;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.InvalidCommand;"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public void parser_addToDoCmdEmptyDescription_returnsInvalidCommand() {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"        Parser p \u003d new Parser();"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(p.parseCmd(\"todo\") instanceof InvalidCommand);"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public void parser_addToDoCmdProper_returnsAddToDoCmd() {"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        Parser p \u003d new Parser();"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(p.parseCmd(\"todo something big\") instanceof AddToDoCommand);"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":22}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskParseException;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.ToDo;"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"public class ToDoTest {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public void toDo_deserializeBadlySerializedToDo_throwsTaskParseException() {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d \"a random description\";"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d true;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        String badlySerializedToDo \u003d new ToDo(description, isDone).serialize().substring(1);"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(TaskParseException.class, () -\u003e {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"            ToDo.deserialize(badlySerializedToDo);"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        });"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    public void toDo_deserializeSerializedToDo_correctlyDeserialized() {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d \"something\";"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        ToDo toDo \u003d new ToDo(description, isDone);"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"            ToDo deserialized \u003d ToDo.deserialize(toDo.serialize());"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(deserialized.getDescription(), toDo.getDescription());"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(deserialized.getType(), toDo.getType());"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(deserialized.getStatusIcon(), toDo.getStatusIcon());"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        });"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    public void toDo_serializedToDo_recognizedAsToDo() {"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d \"something else\";"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d false;"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        String toDo \u003d new ToDo(description, isDone).serialize();"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(ToDo.isToDo(toDo));"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"todo buy milo"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"todo buy milk"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"todo          a"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"deadline drink milo /by Thursday"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"deadline drink milo /by 2021-11-01"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"deadline"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"deadline"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"deadline   asd"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"deadline homework /by"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"event milo party /at 2pm - 6pm"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"event"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"event"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"event birthday"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"event birthday /at"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"delete 10"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"done 3"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"done 1"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"delete"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"delete 1"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"delete -1"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"done 5"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"done 2"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"done"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"done 10"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"todo something"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"done 10"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"done asd"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"done         1"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"list e80righj"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"bye"}],"authorContributionMap":{"benedictkhoomw":39}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":3,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":4,"author":{"gitId":"-"},"content":"then"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":6,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"then"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":12,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"if ! javac -cp ../src/duke -Xlint:none -d ../bin $(find ../src/duke/* | grep .java)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"then"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":19,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":25,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":26,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":29,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":30,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"then"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":34,"author":{"gitId":"-"},"content":"else"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":37,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"benedictkhoomw":1,"-":36}}]
