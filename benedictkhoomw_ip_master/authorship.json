[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":16,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.Command;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.StorageException;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskParseException;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import duke.ui.Gui;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.application.Application;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.application.Platform;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":" * A personal task list app."},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"public class Duke extends Application {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    private Storage storage;"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    private Ui ui;"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    private Parser parser;"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    private TaskList tasks;"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * Called by JavaFX to initialize the app."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * @param stage The stage used."},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    public void start(Stage stage) {"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        final String dataFilePath \u003d \"data/duke.dat\";"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        storage \u003d new Storage(dataFilePath);"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (StorageException | TaskParseException e) {"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"            // if the loading fails for any reason, just make a new empty list"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        parser \u003d new Parser();"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        Gui gui \u003d new Gui(this::handleInput);"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        gui.start(stage);"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        ui \u003d gui;"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        ui.showGreeting();"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"     * Called by JavaFX when the app is closed."},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws Exception If something goes wrong."},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    public void stop() throws Exception {"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        super.stop();"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"    private void handleInput(String input) {"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        Command cmd \u003d parser.parseCmd(input);"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"        CommandResult cmdResult \u003d cmd.execute(tasks, storage);"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        ui.showCommandResult(cmdResult);"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"            storage.save(tasks.serialize());"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (StorageException e) {"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"            ui.showError(\"Warning: failed to save tasks!\");"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        if (cmdResult.isExit()) {"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"            Platform.exit();"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":74,"-":1}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * Entry point of the program."},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public class Main {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"     * Launches the Duke application."},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * @param args Ignored command line arguments."},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    public static void main(String[] args) {"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        Application.launch(Duke.class, args);"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":19}},{"path":"src/main/java/duke/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * Adds a deadline to the task list."},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"public class AddDeadlineCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_DEADLINE_KEYWORD \u003d Pattern.compile(\"(?i)deadline\\\\b\");"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_DEADLINE_DESC \u003d Pattern.compile(\"(?i)deadline\\\\s+(\\\\w.*)\");"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_DEADLINE_DATE \u003d Pattern.compile(\"(?i)deadline\\\\s+(\\\\w.*)\\\\s+/by\\\\s+(\\\\w.*)\");"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    private final String taskDesc;"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    private final LocalDate date;"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    private AddDeadlineCommand(String taskDesc, LocalDate date) {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        this.taskDesc \u003d taskDesc;"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        this.date \u003d date;"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string starts with the keyword deadline. False otherwise."},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     * @return true if the input string starts with the keyword deadline. False otherwise."},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isAddDeadlineCommand(String input) {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        return ADD_DEADLINE_KEYWORD.matcher(input).find();"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the input command string as an add deadline command and returns an AddDeadlineCommand if successful."},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a DukeException with a relevant message if parsing fails."},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed AddDeadlineCommand."},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws DukeException If parsing fails."},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    public static AddDeadlineCommand parseAddDeadlineCommand(String input) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        // check description exists"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher descMatcher \u003d ADD_DEADLINE_DESC.matcher(input);"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        if (!descMatcher.find()) {"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty!\\n\""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: deadline \u003cDESCRIPTION\u003e /by \u003cDATE\u003e\");"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        // check date exists"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher dateMatcher \u003d ADD_DEADLINE_DATE.matcher(input);"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        if (!dateMatcher.find()) {"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"A deadline must have a date!\\n\""},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: deadline \u003cDESCRIPTION\u003e /by \u003cDATE\u003e\");"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"        String taskDesc \u003d dateMatcher.group(1);"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        String dateStr \u003d dateMatcher.group(2);"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, Deadline.INPUT_DATE_FORMATTER);"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"            return new AddDeadlineCommand(taskDesc, date);"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(String.format(\"Sorry, I don\u0027t recognize this date: \u0027%s\u0027\\n\""},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Use this format please: %s\", dateStr, Deadline.INPUT_DATE_FORMAT));"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"     * Adds a deadline to tasks and returns a CommandResult indicating success."},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list to add to."},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult indicating success."},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        Deadline deadline \u003d new Deadline(taskDesc, date);"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.add(deadline);"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback \u003d String.format(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"%s\\n\""},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Now you have %d task(s) in the list.\","},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"                deadline.toString(), tasks.taskCount());"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":92}},{"path":"src/main/java/duke/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * Adds an event to the task list."},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class AddEventCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_EVENT_KEYWORD \u003d Pattern.compile(\"(?i)event\\\\b\");"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_EVENT_DESC \u003d Pattern.compile(\"(?i)event\\\\s+(\\\\w.*)\");"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_EVENT_PERIOD \u003d Pattern.compile(\"(?i)event\\\\s+(\\\\w.*)\\\\s+/at\\\\s+(\\\\w.*)\");"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    private final String taskDesc;"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private final String period;"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    private AddEventCommand(String taskDesc, String period) {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        this.taskDesc \u003d taskDesc;"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        this.period \u003d period;"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string starts with the keyword event. False otherwise."},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     * @return true if the input string starts with the keyword event. False otherwise."},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isAddEventCommand(String input) {"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        return ADD_EVENT_KEYWORD.matcher(input).find();"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the input command string as an add event command and returns an AddEventCommand if successful."},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a DukeException with a relevant message if parsing fails."},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed AddEventCommand."},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws DukeException If parsing fails."},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    public static AddEventCommand parseAddEventCommand(String input) throws DukeException {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        // check description exists"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher descMatcher \u003d ADD_EVENT_DESC.matcher(input);"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        if (!descMatcher.find()) {"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"The description of an event cannot be empty!\\n\""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: event \u003cDESCRIPTION\u003e /at \u003cPERIOD\u003e\");"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        // check period exists"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher periodMatcher \u003d ADD_EVENT_PERIOD.matcher(input);"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        if (!periodMatcher.find()) {"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"An event must have a period!\\n\""},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: event \u003cDESCRIPTION\u003e /at \u003cPERIOD\u003e\");"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        String taskDesc \u003d periodMatcher.group(1);"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        String period \u003d periodMatcher.group(2);"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        return new AddEventCommand(taskDesc, period);"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"     * Adds an event to tasks and returns a CommandResult indicating success."},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list to add to."},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult indicating success."},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        Event event \u003d new Event(taskDesc, period);"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.add(event);"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback \u003d String.format(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"%s\\n\""},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Now you have %d task(s) in the list.\","},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"                event.toString(), tasks.taskCount());"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":84}},{"path":"src/main/java/duke/commands/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.ToDo;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * Adds a ToDo to the task list."},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class AddToDoCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_TODO_KEYWORD \u003d Pattern.compile(\"(?i)todo\\\\b\");"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern ADD_TODO_DESC \u003d Pattern.compile(\"(?i)todo\\\\s+(\\\\w.*)\");"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private final String taskDesc;"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private AddToDoCommand(String taskDesc) {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        this.taskDesc \u003d taskDesc;"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string starts with the keyword todo. False otherwise."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @return true if the input string starts with the keyword todo. False otherwise."},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isAddToDoCommand(String input) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        return ADD_TODO_KEYWORD.matcher(input).find();"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the input command string as an add todo command and returns an AddToDoCommand if successful."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a DukeException with a relevant message if parsing fails."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed AddToDoCommand."},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws DukeException If parsing fails."},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    public static AddToDoCommand parseAddToDoCommand(String input) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher toDoMatcher \u003d ADD_TODO_DESC.matcher(input);"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        if (!toDoMatcher.find()) {"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            // Matched command but invalid argument"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"The description of a todo cannot be empty!\\n\""},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: todo \u003cDESCRIPTION\u003e\");"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        String taskDesc \u003d toDoMatcher.group(1);"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        return new AddToDoCommand(taskDesc);"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"     * Adds a todo to tasks and returns a CommandResult indicating success."},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list to add to."},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult indicating success."},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        ToDo toDo \u003d new ToDo(taskDesc);"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.add(toDo);"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback \u003d String.format(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"%s\\n\""},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Now you have %d task(s) in the list.\","},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"                toDo.toString(), tasks.taskCount());"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":73}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" * Represents an executable command."},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"     * Executes the command with the input Duke context (task list and storage)."},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list used by Duke."},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The result of executing the command."},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public abstract CommandResult execute(TaskList tasks, Storage storage);"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":20}},{"path":"src/main/java/duke/commands/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Represents the result of executing a command."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public class CommandResult {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    protected String feedback;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    protected boolean isExit;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a CommandResult with the given feedback message and a signal to Duke not to exit."},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     * @param feedback The feedback message for the user."},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult(String feedback) {"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"        this(feedback, false);"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a CommandResult with the given feedback message and a signal to Duke to exit or not."},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     * @param feedback The feedback message for the user."},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     * @param isExit   True if Duke should exit after the current command. False otherwise."},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult(String feedback, boolean isExit) {"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        this.feedback \u003d feedback;"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the feedback message."},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The feedback message."},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    public String getFeedback() {"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        return feedback;"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if there is feedback for the user. False otherwise."},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if there is feedback for the user. False otherwise."},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean hasFeedback() {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        return feedback !\u003d null;"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if Duke should exit. False otherwise."},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if Duke should exit. False otherwise."},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    public boolean isExit() {"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        return isExit;"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":58}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * Deletes a task from the task list."},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern DELETE_KEYWORD \u003d Pattern.compile(\"(?i)delete\\\\b\");"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern DELETE_INDEX \u003d Pattern.compile(\"(?i)delete\\\\s+(\\\\d+)$\");"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private final String argStr;"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private DeleteCommand(String argStr) {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        this.argStr \u003d argStr;"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string starts with the keyword delete. False otherwise."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @return true if the input string starts with the keyword delete. False otherwise."},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isDeleteCommand(String input) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        return DELETE_KEYWORD.matcher(input).find();"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the input command string as a delete command and returns a DeleteCommand if successful."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a DukeException with a relevant message if parsing fails."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed DeleteCommand."},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws DukeException If parsing fails."},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    public static DeleteCommand parseDeleteCommand(String input) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher deleteMatcher \u003d DELETE_INDEX.matcher(input);"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        if (!deleteMatcher.find()) {"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"A delete command must specify a task number.\\n\""},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: delete \u003cTASK NUMBER\u003e\");"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        String argStr \u003d deleteMatcher.group(1);"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        return new DeleteCommand(argStr);"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"     * Deletes a task from tasks and returns a CommandResult indicating success or failure."},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list to delete from."},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult indicating success or failure."},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback;"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"            int arg \u003d Integer.parseInt(argStr);"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"            if (arg \u003c 1 || arg \u003e tasks.taskCount()) {"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"                // Argument out of range"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"                feedback \u003d String.format(\"Task %d does not exist!\\n\""},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Valid task numbers are 1 to %d.\", arg, tasks.taskCount());"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"            } else {"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"                // Valid argument in range"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"                int index \u003d arg - 1;"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"                Task t \u003d tasks.getAt(index);"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"                tasks.removeAt(index);"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"                feedback \u003d String.format(\"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"                                + \"%s\\n\""},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"                                + \"Now you have %d task(s) in the list.\","},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"                        t.toString(), tasks.taskCount());"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"            // Argument of wrong type"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"            feedback \u003d String.format(\"Illegal argument: \u0027%s\u0027. Expected integer.\\n\""},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Valid task numbers are 1 to %d.\", argStr, tasks.taskCount());"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":90}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * Marks a task as done."},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class DoneCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern DONE_KEYWORD \u003d Pattern.compile(\"(?i)done\\\\b\");"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern DONE_INDEX \u003d Pattern.compile(\"(?i)done\\\\s+(\\\\d+)$\");"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private final String argStr;"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private DoneCommand(String argStr) {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        this.argStr \u003d argStr;"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string starts with the keyword done. False otherwise."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @return true if the input string starts with the keyword done. False otherwise."},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isDoneCommand(String input) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        return DONE_KEYWORD.matcher(input).find();"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the input command string as a done command and returns a DoneCommand if successful."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a DukeException with a relevant message if parsing fails."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed DoneCommand."},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws DukeException If parsing fails."},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    public static DoneCommand parseDoneCommand(String input) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher doneMatcher \u003d DONE_INDEX.matcher(input);"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        if (!doneMatcher.find()) {"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"A done command must specify a task number.\\n\""},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: done \u003cTASK NUMBER\u003e\");"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"        String argStr \u003d doneMatcher.group(1);"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        return new DoneCommand(argStr);"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"     * Marks a task in tasks as done and returns a CommandResult indicating success or failure."},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list to get the task from."},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult indicating success or failure."},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        String feedback;"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"            int arg \u003d Integer.parseInt(argStr);"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"            if (arg \u003c 1 || arg \u003e tasks.taskCount()) {"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"                // Argument out of range"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"                feedback \u003d String.format(\"Task %d does not exist!\\n\""},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"Valid task numbers are 1 to %d.\", arg, tasks.taskCount());"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"            } else {"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"                // Valid argument in range"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"                int index \u003d arg - 1;"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"                Task t \u003d tasks.getAt(index);"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"                t.markAsDone();"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"                feedback \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"%s\", t.toString());"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"            // Argument of wrong type"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"            feedback \u003d String.format(\"Illegal argument: \u0027%s\u0027. Expected integer.\\n\""},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Valid task numbers are 1 to %d.\", argStr, tasks.taskCount());"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback);"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":88}},{"path":"src/main/java/duke/commands/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Represents exceptional behavior when executing Duke."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a DukeException containing the input message."},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"     * @param message The exception message."},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public DukeException(String message) {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the DukeException message."},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The DukeException message."},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        return getMessage();"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":27}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" * Signals Duke to exit."},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"public class ExitCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern EXIT_KEYWORD \u003d Pattern.compile(\"(?i)bye\\\\b\");"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs an exit command."},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public ExitCommand() {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string starts with the keyword exit. False otherwise."},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * @return true if the input string starts with the keyword exit. False otherwise."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isExitCommand(String input) {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        return EXIT_KEYWORD.matcher(input).find();"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a new CommandResult that signals Duke to exit."},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list used by Duke (unused)."},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult that signals Duke to exit."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(null, true);"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":43}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * Searches (case-sensitive) for tasks containing a search term."},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class FindCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern FIND_KEYWORD \u003d Pattern.compile(\"(?i)find\\\\b\");"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern FIND_TERM \u003d Pattern.compile(\"(?i)find\\\\s+(\\\\w.*)\");"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private final String term;"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    private FindCommand(String term) {"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"        this.term \u003d term;"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string starts with the keyword find. False otherwise."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if the input string starts with the keyword find. False otherwise."},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isFindCommand(String input) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        return FIND_KEYWORD.matcher(input).find();"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the input command string as a find command and returns a FindCommand if successful."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a DukeException with a relevant message if parsing fails."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed FindCommand."},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws DukeException If parsing fails."},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    public static FindCommand parseFindCommand(String input) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher findMatcher \u003d FIND_TERM.matcher(input);"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        if (!findMatcher.find()) {"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            // Matched command but invalid argument"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"The search term of a find command cannot be empty!\\n\""},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: find \u003cSEARCH TERM\u003e\");"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        String term \u003d findMatcher.group(1);"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        return new FindCommand(term);"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a CommandResult with the matching tasks as a message for the user."},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list to search."},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult with the matching tasks as a message for the user."},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder feedback \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        int matchCount \u003d 0;"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        for (int i \u003d 0; i \u003c tasks.taskCount(); i++) {"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"            Task t \u003d tasks.getAt(i);"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"            if (t.getDescription().contains(term)) {"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"                matchCount++;"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"                int index \u003d i + 1;"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"                feedback.append(String.format(\"%d.%s\\n\", index, t));"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        if (matchCount \u003d\u003d 0) {"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"            feedback.setLength(0);"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"            feedback.append(\"No matching tasks found!\");"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"        } else {"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"            // delete last newline"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"            feedback.deleteCharAt(feedback.length() - 1);"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback.toString());"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":87}},{"path":"src/main/java/duke/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a bad or unrecognized command."},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    private final String feedbackMsg;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs an InvalidCommand with the input message to feedback to the user."},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * @param feedbackMsg The feedback message for the user."},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public InvalidCommand(String feedbackMsg) {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        this.feedbackMsg \u003d feedbackMsg;"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a CommandResult with a feedback message for the user."},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list used by Duke (unused)."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult with a feedback message for the user."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedbackMsg);"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":34}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * Lists the tasks in the task list."},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class ListCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern LIST_KEYWORD \u003d Pattern.compile(\"(?i)list\\\\b\");"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final Pattern LIST_ONLY \u003d Pattern.compile(\"(?i)list(\\\\s*)$\");"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    private ListCommand() {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string starts with the keyword list. False otherwise."},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * @return true if the input string starts with the keyword list. False otherwise."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isListCommand(String input) {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        return LIST_KEYWORD.matcher(input).find();"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the input command string as a list command and returns a ListCommand if successful."},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a DukeException with a relevant message if parsing fails."},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * @param input Command as a string."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed ListCommand."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws DukeException If parsing fails."},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    public static ListCommand parseListCommand(String input) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        Matcher listMatcher \u003d LIST_ONLY.matcher(input);"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        if (!listMatcher.find()) {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"            throw new DukeException(\"Please do not include any arguments after the list command.\\n\""},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"                    + \"Expected format: list\");"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"        return new ListCommand();"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a CommandResult with the list of tasks as a message for the user."},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"     * @param tasks   The task list to list."},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"     * @param storage The storage used by Duke (unused)."},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A CommandResult with the list of tasks as a message for the user."},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"    public CommandResult execute(TaskList tasks, Storage storage) {"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder feedback \u003d new StringBuilder();"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        if (tasks.taskCount() \u003d\u003d 0) {"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"            feedback.append(\"No tasks currently!\");"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"            feedback.append(\"Here are your current tasks:\\n\");"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"            for (int i \u003d 0; i \u003c tasks.taskCount(); i++) {"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"                Task t \u003d tasks.getAt(i);"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"                int index \u003d i + 1;"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"                feedback.append(String.format(\"%d.%s\", index, t));"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"                if (i \u003c tasks.taskCount() - 1) {"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"                    feedback.append(\"\\n\");"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"        return new CommandResult(feedback.toString());"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":77}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.AddDeadlineCommand;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.AddEventCommand;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.AddToDoCommand;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.Command;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.DukeException;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.ExitCommand;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.InvalidCommand;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.ListCommand;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":" * Parses Duke commands."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * Parses the raw input string and returns an appropriate command. If the command is invalid, an InvalidCommand"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * is returned."},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     * @param rawInput The string of user input."},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The relevant command."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public Command parseCmd(String rawInput) {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        String cmd \u003d rawInput.trim();"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"            if (ExitCommand.isExitCommand(cmd)) {"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"                return new ExitCommand();"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (AddToDoCommand.isAddToDoCommand(cmd)) {"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"                return AddToDoCommand.parseAddToDoCommand(cmd);"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (AddDeadlineCommand.isAddDeadlineCommand(cmd)) {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"                return AddDeadlineCommand.parseAddDeadlineCommand(cmd);"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (AddEventCommand.isAddEventCommand(cmd)) {"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"                return AddEventCommand.parseAddEventCommand(cmd);"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (ListCommand.isListCommand(cmd)) {"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"                return ListCommand.parseListCommand(cmd);"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (DoneCommand.isDoneCommand(cmd)) {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"                return DoneCommand.parseDoneCommand(cmd);"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (DeleteCommand.isDeleteCommand(cmd)) {"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"                return DeleteCommand.parseDeleteCommand(cmd);"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (FindCommand.isFindCommand(cmd)) {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"                return FindCommand.parseFindCommand(cmd);"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"            } else {"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"                return new InvalidCommand(String.format(\"Sorry, I don\u0027t know what \u0027%s\u0027 means\", cmd));"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (DukeException ex) {"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"            return new InvalidCommand(ex.getMessage());"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":55}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * Abstracts saving and loading a string to and from a file."},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private final Path dirPath;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private final Path filePath;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a Storage with the given file path."},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * @param path The file path to use for saving and loading."},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public Storage(String path) {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        filePath \u003d Path.of(path).toAbsolutePath();"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        dirPath \u003d filePath.getParent();"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * Attempts to load text from the configured file path. Throws a StorageException if it fails to load."},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The text read from the configured file path."},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws StorageException If it fails to load."},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    public String load() throws StorageException {"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"            return Files.readString(filePath);"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException ex) {"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"            throw new StorageException(String.format(\"Failed to load from %s\", filePath.toString()));"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     * Attempts to save text to the configured file path. Throws a StorageException if it fails to save."},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * If the configured file path specifies non-existent folders or a non-existent file, this method"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     * attempts to create them."},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"     * @param data The text to be saved."},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws StorageException If it fails to save."},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    public void save(String data) throws StorageException {"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        // Solution below adapted from https://tinyurl.com/y35nn2nl"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        // create folders if necessary"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        File directory \u003d new File(dirPath.toString());"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        if (!directory.exists()) {"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"            directory.mkdirs();"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        // open/create file"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"        File file \u003d new File(filePath.toString());"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile(), false);"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"            bw.write(data);"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"            bw.close();"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException ex) {"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"            throw new StorageException(String.format(\"Failed to save to %s\", filePath.toString()));"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":70}},{"path":"src/main/java/duke/storage/StorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a failure to load or store something."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public class StorageException extends Exception {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    public StorageException(String message) {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the exception message."},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The exception message."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        return getMessage();"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":22}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a task with a deadline."},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    public static final String INPUT_DATE_FORMAT \u003d \"yyyy-MM-dd\";"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public static final DateTimeFormatter INPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(INPUT_DATE_FORMAT);"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    public static final DateTimeFormatter OUTPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String TYPE \u003d \"D\";"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String SEPARATOR \u003d \"\\\\|\";"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    private static final int FIELD_COUNT \u003d 4;"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * The deadline date."},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    protected LocalDate date;"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a Deadline with the given description and due date."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * @param description The task description."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * @param date        The due date."},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    public Deadline(String description, LocalDate date) {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        this(description, date, false);"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a Deadline with the given description, due date and done status."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     * @param description The task description."},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * @param date        The due date."},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     * @param isDone      The done status."},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    public Deadline(String description, LocalDate date, boolean isDone) {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        super(description, TYPE, isDone);"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        this.date \u003d date;"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"     * Attempts to parse the given string as a Deadline. Returns the Deadline if successful."},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a TaskParseException if it fails."},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"     * @param serialized The string to parse."},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed Deadline if successful."},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws TaskParseException If parsing fails."},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"    public static Deadline deserialize(String serialized) throws TaskParseException {"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        final TaskParseException parseEx \u003d new TaskParseException(\"Invalid deadline!\");"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003c FIELD_COUNT) {"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"        String type \u003d fields[0];"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        if (!type.equals(TYPE)) {"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d Boolean.parseBoolean(fields[1]);"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d fields[2];"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        String dateStr \u003d fields[3];"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        LocalDate date;"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"            date \u003d LocalDate.parse(dateStr, INPUT_DATE_FORMATTER);"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"        return new Deadline(description, date, isDone);"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string contains the type of a Deadline in the right place."},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"     * False otherwise."},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"     * @param serialized The input string to test."},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if type matches. False otherwise."},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isDeadline(String serialized) {"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003e 0) {"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"            String type \u003d fields[0];"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"            return type.equals(TYPE);"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"        return false;"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the due date of the Deadline."},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The due date."},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"    public LocalDate getDate() {"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        return date;"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the Deadline serialized as a string."},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The Deadline serialized as a string."},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"    public String serialize() {"},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"%s|%b|%s|%s\", getType(), isDone, getDescription(),"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"                date.format(INPUT_DATE_FORMATTER));"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a string representation of the Deadline suitable for display to the user."},{"lineNumber":119,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A user-friendly representation of this Deadline."},{"lineNumber":121,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":124,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"[%s][%s] %s (by: %s)\", getType(), getStatusIcon(), getDescription(),"},{"lineNumber":125,"author":{"gitId":"benedictkhoomw"},"content":"                date.format(OUTPUT_DATE_FORMATTER));"},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":127}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a task with a period/duration."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String TYPE \u003d \"E\";"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String SEPARATOR \u003d \"\\\\|\";"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private static final int FIELD_COUNT \u003d 4;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * The period of this event."},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    protected String period;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs an Event with the given description and period."},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * @param description The task description."},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     * @param period      The period during which the event takes place."},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    public Event(String description, String period) {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"        this(description, period, false);"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs an Event with the given description, period and done status."},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     * @param description The task description."},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"     * @param period      The period during which the event takes place."},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * @param isDone      The done status of this event."},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    public Event(String description, String period, boolean isDone) {"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        super(description, TYPE, isDone);"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"        this.period \u003d period;"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     * Attempts to parse the given string as an Event. Returns the Event if successful."},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a TaskParseException if it fails."},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     * @param serialized The string to parse."},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed Event if successful."},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws TaskParseException If parsing fails."},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    public static Event deserialize(String serialized) throws TaskParseException {"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        final TaskParseException parseEx \u003d new TaskParseException(\"Invalid event!\");"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003c FIELD_COUNT) {"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        String type \u003d fields[0];"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        if (!type.equals(TYPE)) {"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d Boolean.parseBoolean(fields[1]);"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d fields[2];"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"        String period \u003d fields[3];"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"        return new Event(description, period, isDone);"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string contains the type of an Event in the right place."},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"     * False otherwise."},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"     * @param serialized The input string to test."},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if type matches. False otherwise."},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isEvent(String serialized) {"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003e 0) {"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"            String type \u003d fields[0];"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"            return type.equals(TYPE);"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        return false;"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the period of this event."},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The period."},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    public String getPeriod() {"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        return period;"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the Event serialized as a string."},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The Event serialized as a string."},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"    public String serialize() {"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"%s|%b|%s|%s\", getType(), isDone, getDescription(), period);"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a string representation of the Event suitable for display to the user."},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A user-friendly representation of this Event."},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"[%s][%s] %s (at: %s)\", getType(), getStatusIcon(), getDescription(), period);"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":112}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a generic task."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    protected String type;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a Task with the given description and type."},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * @param description The task description."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     * @param type        The task type."},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    protected Task(String description, String type) {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        this(description, type, false);"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a Task with the given description and type."},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * @param description The task description."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     * @param type        The task type."},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * @param isDone      The done status."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    protected Task(String description, String type, boolean isDone) {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        this.description \u003d description;"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        this.type \u003d type;"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the task description."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The task description."},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"    public String getDescription() {"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        return description;"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a status icon indicating the done status of this task."},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A status icon indicating the done status of this task."},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"    public String getStatusIcon() {"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        if (isDone) {"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"            return \"\\u2713\";"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"            return \" \";"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the type of this task."},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The type of this task."},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    public String getType() {"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"        return type;"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"     * Sets the done status of this task to done."},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"    public void markAsDone() {"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        isDone \u003d true;"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a serialized string representing this task."},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A serialized string representing this task."},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"    public abstract String serialize();"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a string representation of this task suitable for display to the user."},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A user-friendly representation of this task."},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"    public abstract String toString();"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":87}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a list of tasks."},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs an empty task list."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public TaskList() {"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * Attempts to construct a task list by parsing the input string. Throws a TaskParseException if parsing fails."},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     * @param serialized The task list in serialized form."},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws TaskParseException If parsing fails."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public TaskList(String serialized) throws TaskParseException {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        tasks \u003d deserialize(serialized);"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    private static List\u003cTask\u003e deserialize(String serialized) throws TaskParseException {"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"        List\u003cTask\u003e ts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        Scanner sc \u003d new Scanner(serialized);"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"            String taskSerial \u003d sc.nextLine();"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"            Task t;"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"            if (ToDo.isToDo(taskSerial)) {"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"                t \u003d ToDo.deserialize(taskSerial);"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (Event.isEvent(taskSerial)) {"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"                t \u003d Event.deserialize(taskSerial);"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"            } else if (Deadline.isDeadline(taskSerial)) {"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"                t \u003d Deadline.deserialize(taskSerial);"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"                throw new TaskParseException(\"Warning: invalid type. Aborting!\");"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"            ts.add(t);"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        return ts;"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"     * Adds a task to the list."},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"     * @param t The task to add."},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"    public void add(Task t) {"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.add(t);"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the task at the given index."},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"     * @param index The task index."},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The task at index."},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"    public Task getAt(int index) {"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        return tasks.get(index);"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"     * Removes the task at the given index."},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"     * @param index The index of the task to remove."},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"    public void removeAt(int index) {"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        tasks.remove(index);"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a serialized string of this task list."},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A serialized string of this task list."},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    public String serialize() {"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"        StringBuilder serial \u003d new StringBuilder();"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        for (Task t : tasks) {"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"            serial.append(t.serialize()).append(\"\\n\");"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"        return serial.toString();"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the number of tasks in this list."},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The number of tasks in this list."},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"    public int taskCount() {"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        return tasks.size();"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":105}},{"path":"src/main/java/duke/task/TaskParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a failure to parse a task."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public class TaskParseException extends Exception {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    public TaskParseException(String message) {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the message of this exception."},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The message of this exception."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"        return getMessage();"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":22}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a simple todo task."},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String TYPE \u003d \"T\";"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String SEPARATOR \u003d \"\\\\|\";"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    private static final int FIELD_COUNT \u003d 3;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a ToDo with the given description."},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"     * @param description The task description."},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public ToDo(String description) {"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        this(description, false);"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a ToDo with the given description and done status."},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"     * @param description The task description."},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * @param isDone The done status."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    public ToDo(String description, boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"        super(description, TYPE, isDone);"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * Attempts to parse the given string as a ToDo. Returns the ToDo if successful."},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     * Throws a TaskParseException if it fails."},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"     * @param serialized The string to parse."},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The parsed ToDo if successful."},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws TaskParseException If parsing fails."},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    public static ToDo deserialize(String serialized) throws TaskParseException {"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        final TaskParseException parseEx \u003d new TaskParseException(\"Invalid ToDo!\");"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003c FIELD_COUNT) {"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"        String type \u003d fields[0];"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        if (!type.equals(TYPE)) {"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"            throw parseEx;"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d Boolean.parseBoolean(fields[1]);"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d fields[2];"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        return new ToDo(description, isDone);"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns true if the input string contains the type of a ToDo in the right place."},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     * False otherwise."},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     * @param serialized The input string to test."},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"     * @return True if type matches. False otherwise."},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    public static boolean isToDo(String serialized) {"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        String[] fields \u003d serialized.split(SEPARATOR);"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"        if (fields.length \u003e 0) {"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"            String type \u003d fields[0];"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"            return type.equals(TYPE);"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"        return false;"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns the ToDo serialized as a string."},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The ToDo serialized as a string."},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"    public String serialize() {"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"%s|%b|%s\", getType(), isDone, getDescription());"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a string representation of the ToDo suitable for display to the user."},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"     * @return A user-friendly representation of this ToDo."},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"        return String.format(\"[%s][%s] %s\", getType(), getStatusIcon(), getDescription());"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":94}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a chat message style control."},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    private Circle circleMask;"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"            fxmlLoader.load();"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        dialog.setText(text);"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        displayPicture.setImage(img);"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        double centerX \u003d displayPicture.getFitWidth() / 2.0;"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"        double centerY \u003d displayPicture.getFitHeight() / 2.0;"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        double radius \u003d Math.min(displayPicture.getFitWidth(), displayPicture.getFitHeight()) / 2.0;"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        circleMask \u003d new Circle(centerX, centerY, radius);"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"        displayPicture.setClip(circleMask);"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a new DialogBox that is left-aligned."},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"     * @param text The text to display."},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"     * @param img  The profile picture to display."},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The resulting DialogBox."},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     * Returns a new DialogBox that is right-aligned."},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"     * @param text The text to display."},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"     * @param img  The profile picture to display."},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The resulting DialogBox."},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"        return new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"    private void flip() {"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"        Collections.reverse(tmp);"},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":82}},{"path":"src/main/java/duke/ui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.function.Consumer;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.Scene;"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.control.Button;"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a graphical UI with a chat-bot style interface for Duke."},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"public class Gui extends AnchorPane implements Ui {"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/YingJen.jpg\"));"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    private final Image appIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/YingJen.jpg\"));"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"    private final Consumer\u003cString\u003e inputHandler;"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    private VBox dialogContainer;"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    private TextField userInput;"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    private Button sendButton;"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"     * Creates a new GUI with a specified callback to handle user input."},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"     * @param inputHandler The callback to execute when a user input is received."},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"    public Gui(Consumer\u003cString\u003e inputHandler) {"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"        this.inputHandler \u003d inputHandler;"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"     * Initializes the GUI elements; called by JavaFX"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"    public void initialize() {"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":"        System.out.println(\"init\");"},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"        userInput.setOnAction(this::handleUserInput);"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"        sendButton.setOnAction(this::handleUserInput);"},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"     * NOT SUPPORTED by this GUI implementation. This uses an event-driven model."},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"     * @throws UnsupportedOperationException When called."},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":"     * @#return Never. It always throws an exception."},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"    public String readCommand() {"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"        throw new UnsupportedOperationException(\"GUI uses an event-driven model!\");"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the given result as a \u0027chat message\u0027 from Duke."},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"     * @param result The result to display."},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"    public void showCommandResult(CommandResult result) {"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        if (result.hasFeedback()) {"},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"            dialogContainer.getChildren().add("},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"                    DialogBox.getDukeDialog(result.getFeedback(), dukeImage)"},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"            );"},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the error message as a \u0027chat message\u0027 from Duke."},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":"     * @param errMsg The error message to display."},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"    public void showError(String errMsg) {"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"                DialogBox.getDukeDialog(errMsg, dukeImage)"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"        );"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays a farewell message as a \u0027chat message\u0027 from Duke."},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"    public void showFarewell() {"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":102,"author":{"gitId":"benedictkhoomw"},"content":"                DialogBox.getDukeDialog(\"Goodbye, cruel world!\", dukeImage)"},{"lineNumber":103,"author":{"gitId":"benedictkhoomw"},"content":"        );"},{"lineNumber":104,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":106,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays a welcome message as a \u0027chat message\u0027 from Duke."},{"lineNumber":108,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"benedictkhoomw"},"content":"    public void showGreeting() {"},{"lineNumber":111,"author":{"gitId":"benedictkhoomw"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":112,"author":{"gitId":"benedictkhoomw"},"content":"                DialogBox.getDukeDialog(\"Hello, I am Ying Jen.\\n\""},{"lineNumber":113,"author":{"gitId":"benedictkhoomw"},"content":"                        + \"How may I help you?\", dukeImage)"},{"lineNumber":114,"author":{"gitId":"benedictkhoomw"},"content":"        );"},{"lineNumber":115,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":117,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the given message as a \u0027chat message\u0027 from Duke."},{"lineNumber":119,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"benedictkhoomw"},"content":"     * @param msg The message to display."},{"lineNumber":121,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"benedictkhoomw"},"content":"    public void showMessage(String msg) {"},{"lineNumber":124,"author":{"gitId":"benedictkhoomw"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":125,"author":{"gitId":"benedictkhoomw"},"content":"                DialogBox.getDukeDialog(msg, dukeImage)"},{"lineNumber":126,"author":{"gitId":"benedictkhoomw"},"content":"        );"},{"lineNumber":127,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":129,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"benedictkhoomw"},"content":"     * Sets up the JavaFX structure for the GUI."},{"lineNumber":131,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"benedictkhoomw"},"content":"     * @param stage The JavaFX stage to use."},{"lineNumber":133,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"benedictkhoomw"},"content":"    public void start(Stage stage) {"},{"lineNumber":135,"author":{"gitId":"benedictkhoomw"},"content":"        System.out.println(\"start\");"},{"lineNumber":136,"author":{"gitId":"benedictkhoomw"},"content":"        try {"},{"lineNumber":137,"author":{"gitId":"benedictkhoomw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":138,"author":{"gitId":"benedictkhoomw"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":139,"author":{"gitId":"benedictkhoomw"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":140,"author":{"gitId":"benedictkhoomw"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":141,"author":{"gitId":"benedictkhoomw"},"content":"            stage.setScene(scene);"},{"lineNumber":142,"author":{"gitId":"benedictkhoomw"},"content":"            stage.setTitle(\"Ying Jen: Your Personal Assistant\");"},{"lineNumber":143,"author":{"gitId":"benedictkhoomw"},"content":"            stage.getIcons().add(appIcon);"},{"lineNumber":144,"author":{"gitId":"benedictkhoomw"},"content":"            stage.show();"},{"lineNumber":145,"author":{"gitId":"benedictkhoomw"},"content":"        } catch (IOException e) {"},{"lineNumber":146,"author":{"gitId":"benedictkhoomw"},"content":"            e.printStackTrace();"},{"lineNumber":147,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":150,"author":{"gitId":"benedictkhoomw"},"content":"    @FXML"},{"lineNumber":151,"author":{"gitId":"benedictkhoomw"},"content":"    private void handleUserInput(ActionEvent event) {"},{"lineNumber":152,"author":{"gitId":"benedictkhoomw"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":153,"author":{"gitId":"benedictkhoomw"},"content":"        if (!isValid(input)) {"},{"lineNumber":154,"author":{"gitId":"benedictkhoomw"},"content":"            return;"},{"lineNumber":155,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":157,"author":{"gitId":"benedictkhoomw"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));"},{"lineNumber":158,"author":{"gitId":"benedictkhoomw"},"content":"        userInput.clear();"},{"lineNumber":159,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":160,"author":{"gitId":"benedictkhoomw"},"content":"        inputHandler.accept(input);"},{"lineNumber":161,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":163,"author":{"gitId":"benedictkhoomw"},"content":"    private boolean isValid(String input) {"},{"lineNumber":164,"author":{"gitId":"benedictkhoomw"},"content":"        return !input.isBlank();"},{"lineNumber":165,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":166}},{"path":"src/main/java/duke/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import java.io.PrintStream;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a text UI that uses the standard input and outputs."},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"public class TextUi implements Ui {"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    private static final String COMMAND_PROMPT \u003d \"Type Command\u003e \";"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    private final Scanner in;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    private final PrintStream out;"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     * Constructs a text UI that uses the standard input and outputs."},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    public TextUi() {"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"        in \u003d new Scanner(System.in);"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"        out \u003d System.out;"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * Prompts the user then reads a line of user input and returns it as a string. Ignores blank input."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"     * @return Non-blank user input."},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"    public String readCommand() {"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"        String line;"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        do {"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"            out.print(COMMAND_PROMPT);"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"            line \u003d in.nextLine();"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"        } while (isInvalid(line));"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"        return line;"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * Prints the feedback of the given command result if it has any."},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * @param result The result to display."},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"    public void showCommandResult(CommandResult result) {"},{"lineNumber":49,"author":{"gitId":"benedictkhoomw"},"content":"        if (result.hasFeedback()) {"},{"lineNumber":50,"author":{"gitId":"benedictkhoomw"},"content":"            out.println(result.getFeedback());"},{"lineNumber":51,"author":{"gitId":"benedictkhoomw"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":54,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"benedictkhoomw"},"content":"     * Prints the given error message."},{"lineNumber":56,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"benedictkhoomw"},"content":"     * @param errMsg The error message to display."},{"lineNumber":58,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"benedictkhoomw"},"content":"    public void showError(String errMsg) {"},{"lineNumber":61,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(errMsg);"},{"lineNumber":62,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":64,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"benedictkhoomw"},"content":"     * Prints a farewell message to the user."},{"lineNumber":66,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"benedictkhoomw"},"content":"    public void showFarewell() {"},{"lineNumber":69,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(\"Goodbye, cruel world!\");"},{"lineNumber":70,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":72,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"benedictkhoomw"},"content":"     * Prints a greeting message to the user."},{"lineNumber":74,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"benedictkhoomw"},"content":"    public void showGreeting() {"},{"lineNumber":77,"author":{"gitId":"benedictkhoomw"},"content":"        final String logo \u003d \" ____  ____ _____ ____  _____   ______         _____ _________ ____  _____ \\n\""},{"lineNumber":78,"author":{"gitId":"benedictkhoomw"},"content":"                + \"|_  _||_  _|_   _|_   \\\\|_   _|.\u0027 ___  |       |_   _|_   ___  |_   \\\\|_   _|\\n\""},{"lineNumber":79,"author":{"gitId":"benedictkhoomw"},"content":"                + \"  \\\\ \\\\  / /   | |   |   \\\\ | | / .\u0027   \\\\_|         | |   | |_  \\\\_| |   \\\\ | |  \\n\""},{"lineNumber":80,"author":{"gitId":"benedictkhoomw"},"content":"                + \"   \\\\ \\\\/ /    | |   | |\\\\ \\\\| | | |    ____     _  | |   |  _|  _  | |\\\\ \\\\| |  \\n\""},{"lineNumber":81,"author":{"gitId":"benedictkhoomw"},"content":"                + \"   _|  |_   _| |_ _| |_\\\\   |_\\\\ \\\\.___]  _|   | |_| |  _| |___/ |_| |_\\\\   |_ \\n\""},{"lineNumber":82,"author":{"gitId":"benedictkhoomw"},"content":"                + \"  |______| |_____|_____|\\\\____|\\\\._____.\u0027     \\\\.___.\u0027 |_________|_____|\\\\____|\\n\";"},{"lineNumber":83,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(\"Hi there. I am\");"},{"lineNumber":84,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(logo);"},{"lineNumber":85,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(\"How may I help you?\");"},{"lineNumber":86,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":88,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"benedictkhoomw"},"content":"     * Prints the given message to the user."},{"lineNumber":90,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"benedictkhoomw"},"content":"     * @param msg The message to display."},{"lineNumber":92,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"benedictkhoomw"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"benedictkhoomw"},"content":"    public void showMessage(String msg) {"},{"lineNumber":95,"author":{"gitId":"benedictkhoomw"},"content":"        out.println(msg);"},{"lineNumber":96,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":98,"author":{"gitId":"benedictkhoomw"},"content":"    private boolean isInvalid(String input) {"},{"lineNumber":99,"author":{"gitId":"benedictkhoomw"},"content":"        return input.isBlank();"},{"lineNumber":100,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":101}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":" * Represents a generic user interface."},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":" *"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":" * @author Benedict Khoo"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"public interface Ui {"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"     * Reads the command input by the user and returns it as a string."},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"     * @return The user input."},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"    String readCommand();"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the given CommandResult to the user."},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"     * @param result The result to display."},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"    void showCommandResult(CommandResult result);"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays the given error message to the user."},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"     * @param errMsg The error message to display."},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"    void showError(String errMsg);"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays a farewell to the user."},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"    void showFarewell();"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays a greeting to the user."},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"    void showGreeting();"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":"     * Displays a normal message to the user."},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"     * @param msg The message to display."},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"benedictkhoomw"},"content":"    void showMessage(String msg);"},{"lineNumber":48,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":48}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" spacing\u003d\"10\"\u003e"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"benedictkhoomw":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"benedictkhoomw":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.AddToDoCommand;"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import duke.commands.InvalidCommand;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"    public void parser_addToDoCmdEmptyDescription_returnsInvalidCommand() {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"        Parser p \u003d new Parser();"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(p.parseCmd(\"todo\") instanceof InvalidCommand);"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"    public void parser_addToDoCmdProper_returnsAddToDoCmd() {"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        Parser p \u003d new Parser();"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(p.parseCmd(\"todo something big\") instanceof AddToDoCommand);"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":23}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.TaskParseException;"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"public class ToDoTest {"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"    public void toDo_deserializeBadlySerializedToDo_throwsTaskParseException() {"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d \"a random description\";"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d true;"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"        String badlySerializedToDo \u003d new ToDo(description, isDone).serialize().substring(1);"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"        assertThrows(TaskParseException.class, () -\u003e {"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"            ToDo.deserialize(badlySerializedToDo);"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"        });"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"    public void toDo_deserializeSerializedToDo_correctlyDeserialized() {"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d \"something\";"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"        ToDo toDo \u003d new ToDo(description, isDone);"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"        assertDoesNotThrow(() -\u003e {"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"            ToDo deserialized \u003d ToDo.deserialize(toDo.serialize());"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(deserialized.getDescription(), toDo.getDescription());"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(deserialized.getType(), toDo.getType());"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"            assertEquals(deserialized.getStatusIcon(), toDo.getStatusIcon());"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"        });"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"    public void toDo_serializedToDo_recognizedAsToDo() {"},{"lineNumber":40,"author":{"gitId":"benedictkhoomw"},"content":"        String description \u003d \"something else\";"},{"lineNumber":41,"author":{"gitId":"benedictkhoomw"},"content":"        boolean isDone \u003d false;"},{"lineNumber":42,"author":{"gitId":"benedictkhoomw"},"content":"        String toDo \u003d new ToDo(description, isDone).serialize();"},{"lineNumber":43,"author":{"gitId":"benedictkhoomw"},"content":""},{"lineNumber":44,"author":{"gitId":"benedictkhoomw"},"content":"        assertTrue(ToDo.isToDo(toDo));"},{"lineNumber":45,"author":{"gitId":"benedictkhoomw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"benedictkhoomw"},"content":"}"}],"authorContributionMap":{"benedictkhoomw":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"benedictkhoomw"},"content":"todo buy milo"},{"lineNumber":2,"author":{"gitId":"benedictkhoomw"},"content":"todo buy milk"},{"lineNumber":3,"author":{"gitId":"benedictkhoomw"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"benedictkhoomw"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"benedictkhoomw"},"content":"todo          a"},{"lineNumber":6,"author":{"gitId":"benedictkhoomw"},"content":"deadline drink milo /by Thursday"},{"lineNumber":7,"author":{"gitId":"benedictkhoomw"},"content":"deadline drink milo /by 2021-11-01"},{"lineNumber":8,"author":{"gitId":"benedictkhoomw"},"content":"deadline"},{"lineNumber":9,"author":{"gitId":"benedictkhoomw"},"content":"deadline"},{"lineNumber":10,"author":{"gitId":"benedictkhoomw"},"content":"deadline   asd"},{"lineNumber":11,"author":{"gitId":"benedictkhoomw"},"content":"deadline homework /by"},{"lineNumber":12,"author":{"gitId":"benedictkhoomw"},"content":"event milo party /at 2pm - 6pm"},{"lineNumber":13,"author":{"gitId":"benedictkhoomw"},"content":"event"},{"lineNumber":14,"author":{"gitId":"benedictkhoomw"},"content":"event"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"event birthday"},{"lineNumber":16,"author":{"gitId":"benedictkhoomw"},"content":"event birthday /at"},{"lineNumber":17,"author":{"gitId":"benedictkhoomw"},"content":"delete 10"},{"lineNumber":18,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":19,"author":{"gitId":"benedictkhoomw"},"content":"done 3"},{"lineNumber":20,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":21,"author":{"gitId":"benedictkhoomw"},"content":"done 1"},{"lineNumber":22,"author":{"gitId":"benedictkhoomw"},"content":"delete"},{"lineNumber":23,"author":{"gitId":"benedictkhoomw"},"content":"delete 1"},{"lineNumber":24,"author":{"gitId":"benedictkhoomw"},"content":"delete -1"},{"lineNumber":25,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":26,"author":{"gitId":"benedictkhoomw"},"content":"done 5"},{"lineNumber":27,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":28,"author":{"gitId":"benedictkhoomw"},"content":"done 2"},{"lineNumber":29,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":30,"author":{"gitId":"benedictkhoomw"},"content":"done"},{"lineNumber":31,"author":{"gitId":"benedictkhoomw"},"content":"done 10"},{"lineNumber":32,"author":{"gitId":"benedictkhoomw"},"content":"todo something"},{"lineNumber":33,"author":{"gitId":"benedictkhoomw"},"content":"done 10"},{"lineNumber":34,"author":{"gitId":"benedictkhoomw"},"content":"done asd"},{"lineNumber":35,"author":{"gitId":"benedictkhoomw"},"content":"done         1"},{"lineNumber":36,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":37,"author":{"gitId":"benedictkhoomw"},"content":"list"},{"lineNumber":38,"author":{"gitId":"benedictkhoomw"},"content":"list e80righj"},{"lineNumber":39,"author":{"gitId":"benedictkhoomw"},"content":"bye"}],"authorContributionMap":{"benedictkhoomw":39}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":3,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":4,"author":{"gitId":"-"},"content":"then"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":6,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"then"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":12,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":15,"author":{"gitId":"benedictkhoomw"},"content":"if ! javac -cp ../src/duke -Xlint:none -d ../bin $(find ../src/duke/* | grep .java)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"then"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":19,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":25,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":26,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":29,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":30,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"then"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":34,"author":{"gitId":"-"},"content":"else"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":37,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"benedictkhoomw":1,"-":36}}]
