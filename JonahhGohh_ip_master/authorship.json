[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JonahhGohh":17,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"E|1|meet with Elon Musk|2021-02-14"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":"D|0|become a millionaire|2023-08-31"},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"E|0|Meet with Elon Musk|2021-02-21"}],"authorContributionMap":{"JonahhGohh":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"Need a productivity task manager application and love stonks at the same time?"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"Duke is perfect for you."},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"![Screenshot](./Ui.png)"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"## Recommended for:"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"* Users who can type fast"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"* Users who love productivity"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"* Users who hate wall street"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"## Installation"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"* Ensure that you have Java 11 installed in your computer"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"* Download the jar file from the [latest release](https://github.com/JonahhGohh/ip/releases)"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"* Double click the jar file to run the program"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"- [Add tasks](#add-tasks)"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"- [Delete tasks](#delete-tasks)"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"- [Mark tasks as done](#mark-tasks-as-done)"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"- [List tasks](#list-tasks)"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"- [Find tasks](#find-tasks)"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"### Add Tasks"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"Duke can help you to manage 3 different types of tasks:"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"* Todos"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"* Deadlines"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"* Events"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"#### Todos"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"Todos are the simplest form of tasks, they only contain the description of the task"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"How to use: `todo [description]`"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"Example: `todo Browse wallstreetbets subreddit` - Creates a \u0027Browse wallstreetbets subreddit\u0027 task"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"Expected outcome: "},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"[T][] Browse wallstreetbets subreddit"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"Now you have 1 task in the list."},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"#### Deadlines"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"Deadlines contains the description of the task and the date of the deadline of the task"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"How to use: `deadline [description] /by YYYY-MM-DD`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"Example: `deadline Read GME latest 10Q filing /by 2021-02-20` - Creates a \u0027Read $GME latest 10Q filing\u0027 task with a"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"deadline on 20 February 2021"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"Expected outcome:"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"[D][] Read GME latest 10Q filing (by: Sat Feb 20 2021)"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"Now you have 2 tasks in the list."},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"#### Events"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"Events contain the description of the task and the date of the event"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"How to use: `event [description] /at YYYY-MM-DD`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"Example: `event Meet with Elon Musk /at 2021-02-21` - Creates an \u0027event Meet with Elon Musk\u0027 event on 20 February 2021"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"Expected outcome:"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"[E][] Meet with Elon Musk (at: Sat Feb 21 2021)"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"Now you have 3 tasks in the list."},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"### Delete Tasks"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"Duke can delete tasks you specify individually"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"How to use: `delete [task number]`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"Example: `delete 1` - deletes your first task"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"The following task has been removed:"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"[T][] Browse wallstreetbets subreddit"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"Now you have 2 tasks in the list"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":"### Mark tasks as done"},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"Duke allows you to mark tasks that you have completed"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"How to use: `done [task number]`"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"Example: `done 1` - marks your first task as completed"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"You have completed the following task:"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":"[D][X] Read GME latest 10Q filing (by: Sat Feb 20 2021)"},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"Keep up the good work!"},{"lineNumber":101,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":102,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":103,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":104,"author":{"gitId":"JonahhGohh"},"content":"### List tasks"},{"lineNumber":105,"author":{"gitId":"JonahhGohh"},"content":"Duke allows you to list all tasks that you have entered"},{"lineNumber":106,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":107,"author":{"gitId":"JonahhGohh"},"content":"How to use: `list`"},{"lineNumber":108,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":109,"author":{"gitId":"JonahhGohh"},"content":"Example: `list` - list all tasks"},{"lineNumber":110,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":111,"author":{"gitId":"JonahhGohh"},"content":"Expected outcome:"},{"lineNumber":112,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":113,"author":{"gitId":"JonahhGohh"},"content":"Here are the tasks in your list:"},{"lineNumber":114,"author":{"gitId":"JonahhGohh"},"content":"1. [D][X] Read GME latest 10Q filing (by: Sat Feb 20 2021)"},{"lineNumber":115,"author":{"gitId":"JonahhGohh"},"content":"2. [E][] Meet with Elon Musk (at: Sat Feb 21 2021)"},{"lineNumber":116,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":117,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":118,"author":{"gitId":"JonahhGohh"},"content":"### Find tasks"},{"lineNumber":119,"author":{"gitId":"JonahhGohh"},"content":"Duke allows you to find tasks that matches with your input"},{"lineNumber":120,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":121,"author":{"gitId":"JonahhGohh"},"content":"How to use: `find [keyword]`"},{"lineNumber":122,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":123,"author":{"gitId":"JonahhGohh"},"content":"Example: `find Elon` - displays the tasks with \u0027Elon\u0027 string in the description if any"},{"lineNumber":124,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":125,"author":{"gitId":"JonahhGohh"},"content":"Expected outcome:"},{"lineNumber":126,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":127,"author":{"gitId":"JonahhGohh"},"content":"Here are the matching results on your list:"},{"lineNumber":128,"author":{"gitId":"JonahhGohh"},"content":"1. [E][] Meet with Elon Musk (at: Sun Feb 21 2021)"},{"lineNumber":129,"author":{"gitId":"JonahhGohh"},"content":"```"},{"lineNumber":130,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":131,"author":{"gitId":"JonahhGohh"},"content":"## Accepted Date and Time Formats"},{"lineNumber":132,"author":{"gitId":"JonahhGohh"},"content":"* `YYYY-MM-DD`"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"JonahhGohh"},"content":"## Uninstall Duke"},{"lineNumber":135,"author":{"gitId":"JonahhGohh"},"content":"To uninstall Duke, simply delete the `duke.jar` file at its current location"}],"authorContributionMap":{"JonahhGohh":116,"-":19}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"import duke.Main;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"public class Launcher {"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":11}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":" * Handles the core logic of the Duke application"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    private TaskList taskList;"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    public Duke(String filePath) {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        this.ui \u003d new Ui(new Scanner(System.in));"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"        // loads the internal storage tasks into task list of program"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        this.taskList \u003d storage.load();"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    public TaskList getTaskList() {"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"        return this.taskList;"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"     * Runs the entire logic for Duke"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"    public String runEachInput(String fullInput) {"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"        assert storage !\u003d null : \"Storage not valid\";"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"        assert taskList !\u003d null : \"Task List is not instantiated\";"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"        // do something"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"            Command c \u003d Parser.parseCommand(fullInput);"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"            Task task \u003d Parser.parseTask(fullInput, taskList);"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"            String taskDescription \u003d Parser.parseDescription(fullInput);"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"            return c.execute(taskDescription, task, taskList, storage);"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"        } catch (EmptyTaskDukeException e) {"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"            return e.getMessage();"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"            return e.getMessage()"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"                    + \"\\nPlease enter a valid task number.\";"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"            return e.getMessage()"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"                    + \"\\nPlease enter a valid task number.\";"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"            return e.getMessage()"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"                    + \"\\nPlease enter the date in the correct format.\";"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":59}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.controller.MainWindow;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    private Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":33}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for todo, event, deadline input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Adds the task into the task list, saves the task list in the internal storage and prints success message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the task to be added into the task list"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage the storage instance used to save files into internal storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public String execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // Add task to task list"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        taskList.addTask(task);"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // Update Storage"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        storage.saveTasksToStorage(taskList);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        // Print success message"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        return Ui.taskAddedMessage(task);"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":" * Parent command class"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"    public abstract String execute(String taskDescription, Task task, TaskList taskList, Storage storage);"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    public boolean isDukeOnline() {"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        return true;"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":17}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for delete input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Deletes the task from the task list, saves the task list in the internal storage and prints success message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the task to be deleted"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage the storage instance used to save files into internal storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public String execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // delete task"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        taskList.removeTask(task);"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // update storage"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        storage.saveTasksToStorage(taskList);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        // print message"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        return Ui.taskRemovedMessage(task);"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":30}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for done input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Mark the task as done and prints success message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the task to be set done"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public String execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // update task to done"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        task.setDone();"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // print message"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        return Ui.taskDoneMessage(task);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":27}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for exit input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Saves storage one last time and prints exit message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage the storage instance used to save files into internal storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public String execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // do one final save of task list into storage"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        storage.saveTasksToStorage(taskList);"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // print exit message"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        return Ui.dukeExitMessage();"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"     * Returns false since Duke is shutting down"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"     * @return false"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"    public boolean isDukeOnline() {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        return false;"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":37}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":" * Command for find input"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * Filters search string in task list and prints all matching tasks"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param searchString the description to search for"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    public String execute(String searchString, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // filter tasks that contains the search string"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        List\u003cTask\u003e searchResult \u003d taskList.filterTasks(searchString);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        // print the search result"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        return Ui.matchingList(searchResult);"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":30}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for help input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class HelpCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Prints help message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public String execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // print custom help message"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        String allCommands \u003d \"todo\\n\""},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"                + \"deadline *text* /by yyyy-mm-dd\\n\""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"                + \"event *text* /at yyyy-mm-dd\\n\""},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"                + \"done *number*\\n\""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"                + \"list\\n\""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"                + \"delete *number*\\n\""},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"                + \"bye\";"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        return Ui.message(allCommands);"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":31}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for invalid input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Prints invalid message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public String execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // print invalid task message"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        return Ui.invalidCommandMessage();"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":24}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for list input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Prints current list of tasks to user"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public String execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // print taskList"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        return Ui.message(\"Here are the tasks in your list:\\n\" + taskList.toString());"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":24}},{"path":"src/main/java/duke/controller/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import javafx.geometry.Insets;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":" * containing text from the speaker."},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"public class DialogBox extends HBox {"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    private Label dialog;"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    private ImageView displayPicture;"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    private static final BackgroundFill BACKGROUND_FILL_USER \u003d"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"            new BackgroundFill(Color.DARKGRAY, CornerRadii.EMPTY, Insets.EMPTY);"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"    private static final BackgroundFill BACKGROUND_FILL_DUKE \u003d"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"            new BackgroundFill(Color.LIGHTGRAY, CornerRadii.EMPTY, Insets.EMPTY);"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"            fxmlLoader.load();"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"        } catch (IOException e) {"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"            e.printStackTrace();"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"        dialog.setText(text);"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"        final Circle clip \u003d new Circle(50, 50, 45);"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"        displayPicture.setImage(img);"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"    private void flip() {"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"        Collections.reverse(tmp);"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"     * gets the dialog box for users"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"     * @param text the text input by the user"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"     * @param img input user image, predetermined by the program"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"     * @return a Hbox containing an ImageView and a Label"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        DialogBox userDialog \u003d new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        userDialog.setBackground(new Background(BACKGROUND_FILL_USER));"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"        return userDialog;"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"     * gets the dialog box for duke"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"     * @param text the text output by duke"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"     * @param img duke image, predetermined by the program"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"     * @return a Hbox containing an ImageView and a Label"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"        db.flip();"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"        db.setBackground(new Background(BACKGROUND_FILL_DUKE));"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"        return db;"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":87}},{"path":"src/main/java/duke/controller/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    private ScrollPane reminderScrollPane;"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    private VBox reminderContainer;"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    private Duke duke;"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"        reminderScrollPane.vvalueProperty().bind(reminderContainer.heightProperty());"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        showMessage(\"Welcome to Duke! What can I do for you today?\");"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"        duke \u003d d;"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"        TaskList taskList \u003d duke.getTaskList();"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"        showReminder(\"Reminders:\");"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"        showAllReminder(taskList);"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"    private void showMessage(String message) {"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage));"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"    private void showReminder(String message) {"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"        reminderContainer.getChildren().add(ReminderBox.getReminder(message));"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    private void showAllReminder(TaskList taskList) {"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"        for (Task task : taskList.getTaskList()) {"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"            showReminder(task.toString());"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"    private void handleUserInput() {"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"        String outputMessage \u003d duke.runEachInput(input);"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"                DialogBox.getUserDialog(input, userImage)"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"        );"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"        userInput.clear();"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"        showMessage(outputMessage);"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"            System.exit(0);"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":81}},{"path":"src/main/java/duke/controller/ReminderBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":" * Represents the reminder box at the top of the duke GUI to remind users of their latest tasks added to the list"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"public class ReminderBox extends HBox {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    private Label reminder;"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    private ReminderBox(String taskDescription) {"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ReminderBox.fxml\"));"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"            fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        } catch (IOException e) {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"            e.printStackTrace();"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"        reminder.setText(taskDescription);"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskDescription description of task"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"     * @return a Hbox object to store reminders"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"    public static ReminderBox getReminder(String taskDescription) {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        return new ReminderBox(taskDescription);"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":36}},{"path":"src/main/java/duke/exceptions/EmptyTaskDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":" * Exception for when user enters a task with no task description"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"public class EmptyTaskDukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"     * Describes the error message when user enters task with no task description"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    public EmptyTaskDukeException() {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"        super(\"Description of a task cannot be empty!\\n\""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"                + \"Please enter a valid input.\");"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":15}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.HelpCommand;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.InvalidCommand;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Todo;"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":" * Parses input from Duke"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"public class Parser {"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"     * Parses user input to return the corresponding command"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"     * @param input the corresponding command type"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    public static Command parseCommand(String input) {"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"        String commandString \u003d parseCommandString(input);"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"        String commandHelper \u003d commandString.toUpperCase();"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"        switch (commandHelper) {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        case \"TODO\":"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"        case \"DEADLINE\":"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"        case \"EVENT\":"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"            return new AddCommand();"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"        case \"DONE\":"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"            return new DoneCommand();"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"        case \"LIST\":"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"            return new ListCommand();"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"        case \"DELETE\":"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"            return new DeleteCommand();"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"        case \"FIND\":"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"            return new FindCommand();"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"        case \"HELP\":"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"            return new HelpCommand();"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"        case \"BYE\":"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"            return new ExitCommand();"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"            return new InvalidCommand();"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"     * Parses user input to return the task"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"     * @param input the input given by the user"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"     * @return a task object as described in the input"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"     * @throws EmptyTaskDukeException when there is an empty description"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"     * @throws IndexOutOfBoundsException when user enters a number in the description that does not match the task list"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"     * @throws NumberFormatException when user enters a non number into the number field in the description"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"     * @throws DateTimeParseException when user enters a bad date format in the description"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    public static Task parseTask(String input, TaskList taskList) throws"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"            EmptyTaskDukeException, IndexOutOfBoundsException,"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"            NumberFormatException, DateTimeParseException {"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"        String taskDescription \u003d parseDescription(input);"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"        String commandString \u003d parseCommandString(input);"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        String commandHelper \u003d commandString.toUpperCase();"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        switch (commandHelper) {"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"        case \"TODO\":"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"            return new Todo(taskDescription);"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":"        case \"DEADLINE\":"},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"            return new Deadline(taskDescription);"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"        case \"EVENT\":"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"            return new Event(taskDescription);"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"        case \"DONE\":"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"        case \"DELETE\":"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"            if (taskDescription.equals(\"\")) {"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":"                throw new EmptyTaskDukeException();"},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"            int index \u003d Integer.parseInt(taskDescription) - 1;"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"            return taskList.getTaskList().get(index);"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"            return null;"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"    private static String parseCommandString(String input) {"},{"lineNumber":91,"author":{"gitId":"JonahhGohh"},"content":"        return input.split(\" \")[0];"},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"    public static String parseDescription(String input) {"},{"lineNumber":95,"author":{"gitId":"JonahhGohh"},"content":"        if (input.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":96,"author":{"gitId":"JonahhGohh"},"content":"            return \"\";"},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"        return input.substring(parseCommandString(input).length() + 1);"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":100}},{"path":"src/main/java/duke/storage/DukeFileReader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":" * Reads file input from internal storage"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"public class DukeFileReader {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    private static final String TODO_IDENTIFIER \u003d \"T\";"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"    private static final String DEADLINE_IDENTIFIER \u003d \"D\";"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    private static final String EVENT_IDENTIFIER \u003d \"E\";"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    private static final String TASK_COMPLETED_NUM \u003d \"1\";"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    private static final int TASK_TYPE_INDEX \u003d 0;"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    private static final int TASK_COMPLETION_INDEX \u003d 1;"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    private static final int TASK_DESCRIPTION_INDEX \u003d 2;"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    private static final int TASK_DATE_INDEX \u003d 3;"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"     * loads tasks from internal storage"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"     * @return a task list containing all the tasks from internal storage"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    public static TaskList loadTasks(String filePath) {"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"            TaskList taskList \u003d readTaskListFromInternalStorage(filePath);"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"            return taskList;"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"            Ui.printError(e.getMessage());"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"        return new TaskList();"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"    private static TaskList readTaskListFromInternalStorage(String filePath) throws FileNotFoundException {"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"        FileDirectoryChecker.prepareFile(filePath);"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"        Scanner sc \u003d new Scanner(f);"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"            String taskString \u003d sc.nextLine();"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"            String[] taskBreakdown \u003d getTaskBreakdownInArray(taskString);"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"            boolean isTaskDone \u003d taskBreakdown[TASK_COMPLETION_INDEX].equals(TASK_COMPLETED_NUM);"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"            String taskDescription \u003d taskBreakdown[TASK_DESCRIPTION_INDEX];"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"            addTasksToTaskList(taskList, taskBreakdown, isTaskDone, taskDescription);"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"        sc.close();"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"        return taskList;"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"    private static void addTasksToTaskList(TaskList taskList, String[] taskBreakdown, boolean isTaskDone, String taskDescription) {"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"            // An empty task that will be override later"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"            Task task \u003d new Task(\"dummy task\");"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"            if (isTaskTypeOf(TODO_IDENTIFIER, taskBreakdown)) {"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"                task \u003d new Todo(taskDescription);"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"            } else if (isTaskTypeOf(DEADLINE_IDENTIFIER, taskBreakdown)) {"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"                task \u003d new Deadline(taskDescription, taskBreakdown[TASK_DATE_INDEX]);"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"            } else if (isTaskTypeOf(EVENT_IDENTIFIER, taskBreakdown)) {"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"                task \u003d new Event(taskDescription, taskBreakdown[TASK_DATE_INDEX]);"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"            if (isTaskDone) {"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":"                task.setDone();"},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"            taskList.addTask(task);"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"        } catch (EmptyTaskDukeException e) {"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"            Ui.printError(e.getMessage());"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"    private static String[] getTaskBreakdownInArray(String taskString) {"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"        return taskString.split(\"\\\\|\");"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"    private static boolean isTaskTypeOf(String t, String[] taskBreakdown) {"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"        return taskBreakdown[TASK_TYPE_INDEX].equals(t);"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":89}},{"path":"src/main/java/duke/storage/DukeFileWriter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":" * Writes file input into internal storage"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"public class DukeFileWriter {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     * Saves the task list into internal storage"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"     * @param filePath the file path of the internal storage to save at"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    public static void saveTaskListInInternalStorage(List\u003cTask\u003e taskList, String filePath) {"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"            String toBeSavedTaskListString \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"                String currentLine \u003d \"\";"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"                Task task \u003d taskList.get(i);"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"                currentLine +\u003d task.getFileWriterIdentifier()"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"                        + getTaskCompletedStringIndicator(task)"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"                        + task.getTaskName()"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"                        + getTaskDate(task);"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"                toBeSavedTaskListString \u003d (i \u003c taskList.size() - 1)"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"                        ? toBeSavedTaskListString + currentLine + \"\\n\""},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"                        : toBeSavedTaskListString + currentLine;"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"            writeToFile(toBeSavedTaskListString, filePath);"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"            Ui.printError(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"    private static String getTaskDate(Task task) {"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"        if (task instanceof Event) {"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"            return \"|\" + ((Event) task).getDueAt();"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"            return \"|\" + ((Deadline) task).getDueBy();"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"            return \"\";"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"    private static String getTaskCompletedStringIndicator(Task task) {"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"        if (task.getIsTaskCompleted()) {"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"            return \"1|\";"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"            return \"0|\";"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"    private static void writeToFile(String textToAdd, String filePath) throws IOException {"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"        FileDirectoryChecker.prepareFile(filePath);"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"        fw.write(textToAdd);"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"        fw.close();"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":66}},{"path":"src/main/java/duke/storage/FileDirectoryChecker.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":" * Checks and prepares the directory for Duke"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"public class FileDirectoryChecker {"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"     * Checks if the directory exists and creates a new directory and file if they do not exist"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"     * @param dir the file path of the internal storage"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    public static void prepareFile(String dir) {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"        File directory \u003d new File(dir);"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"        File pathDir \u003d directory.getParentFile();"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"        checkPath(pathDir);"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"            checkFile(directory);"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        } catch (IOException e) {"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    private static void checkPath(File dir) {"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        if (!dir.exists()) {"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"            dir.mkdir();"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    private static void checkFile(File dir) throws IOException {"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"        dir.createNewFile();"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":35}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":" * Handles storage for Duke"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"public class Storage {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"    private String filePath;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    public Storage(String filePath) {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"        FileDirectoryChecker.prepareFile(filePath);"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * Loads all tasks from internal storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     * @return the task list containing all the tasks from internal storage"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public TaskList load() {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        return DukeFileReader.loadTasks(filePath);"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"     * Saves the tasks in task list into internal storage"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    public void saveTasksToStorage(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        DukeFileWriter.saveTaskListInInternalStorage(taskList.getTaskList(), filePath);"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":31}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import java.time.DayOfWeek;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import java.time.Month;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":" * Deadline task for tasks that are due by a certain date"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    private LocalDate dueBy;"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    private final static String DUE_COMMAND \u003d \"/by\";"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    private final String DEADLINE_IDENTIFIER \u003d \"[D]\";"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    private final String FILE_WRITER_IDENTIFIER \u003d \"D|\";"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    public Deadline(String input) throws EmptyTaskDukeException, DateTimeParseException {"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"        super(getTaskNameFromInput(input));"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        dueBy \u003d LocalDate.parse(getDueDateFromInput(input));"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    public Deadline(String name, String dueBy) throws EmptyTaskDukeException {"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        super(name);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"        this.dueBy \u003d LocalDate.parse(dueBy);"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"     * Parses the task name from the input"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"     * @param input the input entered by the user"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"     * @return trimmed input of the task description"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"    private static String getTaskNameFromInput(String input) {"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"        if (input.contains(DUE_COMMAND)) {"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"            return input.split(DUE_COMMAND)[0].trim();"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"            return input;"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"    private static String getDueDateFromInput(String input) {"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"        if (input.contains(DUE_COMMAND)) {"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"            return removeStartingWhiteSpace(input.split(DUE_COMMAND)[1]);"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"            return \"not specified\";"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"    private static String removeStartingWhiteSpace(String input) {"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"        if (input.substring(0, 1).equals(\" \")) {"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"            return input.substring(1);"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        return input;"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"    public String getDueBy() {"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"        return this.dueBy.toString();"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"        String taskStringCheck \u003d super.getIsTaskCompleted() ? super.COMPLETED_TEXT : \" \";"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"        return DEADLINE_IDENTIFIER + \"[\" + taskStringCheck + \"] \" + super.getTaskName()"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"                + \" (by: \" + formatDate(dueBy) + \")\";"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"    private String formatDate(LocalDate date) {"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"        DayOfWeek day \u003d date.getDayOfWeek();"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        Month mth \u003d date.getMonth();"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        String dateString \u003d \"\";"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"        dateString \u003d getDayString(day) + \" \" + getMthString(mth) + \" \""},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"                + date.getDayOfMonth() + \" \" + date.getYear();"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":"        return dateString;"},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"    public String getFileWriterIdentifier() {"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"        return FILE_WRITER_IDENTIFIER;"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":"    private String getDayString(DayOfWeek day) {"},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"        switch (day) {"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"        case MONDAY:"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"            return \"Mon\";"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"        case TUESDAY:"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"            return \"Tue\";"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"        case WEDNESDAY:"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"            return \"Wed\";"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":"        case THURSDAY:"},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"            return \"Thu\";"},{"lineNumber":91,"author":{"gitId":"JonahhGohh"},"content":"        case FRIDAY:"},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"            return \"Fri\";"},{"lineNumber":93,"author":{"gitId":"JonahhGohh"},"content":"        case SATURDAY:"},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sat\";"},{"lineNumber":95,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":96,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sun\";"},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"    private String getMthString(Month mth) {"},{"lineNumber":101,"author":{"gitId":"JonahhGohh"},"content":"        switch (mth) {"},{"lineNumber":102,"author":{"gitId":"JonahhGohh"},"content":"        case JANUARY:"},{"lineNumber":103,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jan\";"},{"lineNumber":104,"author":{"gitId":"JonahhGohh"},"content":"        case FEBRUARY:"},{"lineNumber":105,"author":{"gitId":"JonahhGohh"},"content":"            return \"Feb\";"},{"lineNumber":106,"author":{"gitId":"JonahhGohh"},"content":"        case MARCH:"},{"lineNumber":107,"author":{"gitId":"JonahhGohh"},"content":"            return \"Mar\";"},{"lineNumber":108,"author":{"gitId":"JonahhGohh"},"content":"        case APRIL:"},{"lineNumber":109,"author":{"gitId":"JonahhGohh"},"content":"            return \"Apr\";"},{"lineNumber":110,"author":{"gitId":"JonahhGohh"},"content":"        case MAY:"},{"lineNumber":111,"author":{"gitId":"JonahhGohh"},"content":"            return \"May\";"},{"lineNumber":112,"author":{"gitId":"JonahhGohh"},"content":"        case JUNE:"},{"lineNumber":113,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jun\";"},{"lineNumber":114,"author":{"gitId":"JonahhGohh"},"content":"        case JULY:"},{"lineNumber":115,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jul\";"},{"lineNumber":116,"author":{"gitId":"JonahhGohh"},"content":"        case AUGUST:"},{"lineNumber":117,"author":{"gitId":"JonahhGohh"},"content":"            return \"Aug\";"},{"lineNumber":118,"author":{"gitId":"JonahhGohh"},"content":"        case SEPTEMBER:"},{"lineNumber":119,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sep\";"},{"lineNumber":120,"author":{"gitId":"JonahhGohh"},"content":"        case OCTOBER:"},{"lineNumber":121,"author":{"gitId":"JonahhGohh"},"content":"            return \"Oct\";"},{"lineNumber":122,"author":{"gitId":"JonahhGohh"},"content":"        case NOVEMBER:"},{"lineNumber":123,"author":{"gitId":"JonahhGohh"},"content":"            return \"Nov\";"},{"lineNumber":124,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":125,"author":{"gitId":"JonahhGohh"},"content":"            return \"Dec\";"},{"lineNumber":126,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":128}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import java.time.DayOfWeek;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import java.time.Month;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":" * Event task for tasks that are due on a certain date"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    private LocalDate dueAt;"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    private final static String DUE_COMMAND \u003d \"/at\";"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    private final String EVENT_IDENTIFIER \u003d \"[E]\";"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    private final String FILE_WRITER_IDENTIFIER \u003d \"E|\";"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public Event(String input) throws EmptyTaskDukeException, DateTimeParseException {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        super(getTaskNameFromInput(input));"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        dueAt \u003d LocalDate.parse(getDueDateFromInput(input));"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"    public Event(String name, String dueAt) throws EmptyTaskDukeException {"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"        super(name);"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        this.dueAt \u003d LocalDate.parse(dueAt);"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    private static String getTaskNameFromInput(String input) {"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"        if (input.contains(DUE_COMMAND)) {"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"            return input.split(DUE_COMMAND)[0].trim();"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"            return input;"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    private static String getDueDateFromInput(String input) {"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"        if (input.contains(DUE_COMMAND)) {"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"            return removeStartingWhiteSpace(input.split(DUE_COMMAND)[1]);"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"            return \"not specified\";"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"    private static String removeStartingWhiteSpace(String input) {"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"        if (input.substring(0, 1).equals(\" \")) {"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"            return input.substring(1);"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"        return input;"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    public String getDueAt() {"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        return this.dueAt.toString();"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"        String taskStringCheck \u003d super.getIsTaskCompleted() ? super.COMPLETED_TEXT : \" \";"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"        return EVENT_IDENTIFIER"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"                + \"[\" + taskStringCheck + \"] \""},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"                + super.getTaskName()"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"                + \" (at: \" + formatDate(dueAt)"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"                + \")\";"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"    private String formatDate(LocalDate date) {"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"        DayOfWeek day \u003d date.getDayOfWeek();"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"        Month mth \u003d date.getMonth();"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        String dateString \u003d \"\";"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        dateString \u003d getDayString(day)"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"                + \" \""},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"                + getMthString(mth)"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":"                + \" \""},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"                + date.getDayOfMonth()"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"                + \" \" + date.getYear();"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"        return dateString;"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"    public String getFileWriterIdentifier() {"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":"        return FILE_WRITER_IDENTIFIER;"},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"    private String getDayString(DayOfWeek day) {"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"        switch (day) {"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"        case MONDAY:"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"            return \"Mon\";"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"        case TUESDAY:"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":"            return \"Tue\";"},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"        case WEDNESDAY:"},{"lineNumber":91,"author":{"gitId":"JonahhGohh"},"content":"            return \"Wed\";"},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"        case THURSDAY:"},{"lineNumber":93,"author":{"gitId":"JonahhGohh"},"content":"            return \"Thu\";"},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"        case FRIDAY:"},{"lineNumber":95,"author":{"gitId":"JonahhGohh"},"content":"            return \"Fri\";"},{"lineNumber":96,"author":{"gitId":"JonahhGohh"},"content":"        case SATURDAY:"},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sat\";"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sun\";"},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":103,"author":{"gitId":"JonahhGohh"},"content":"    private String getMthString(Month mth) {"},{"lineNumber":104,"author":{"gitId":"JonahhGohh"},"content":"        switch (mth) {"},{"lineNumber":105,"author":{"gitId":"JonahhGohh"},"content":"        case JANUARY:"},{"lineNumber":106,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jan\";"},{"lineNumber":107,"author":{"gitId":"JonahhGohh"},"content":"        case FEBRUARY:"},{"lineNumber":108,"author":{"gitId":"JonahhGohh"},"content":"            return \"Feb\";"},{"lineNumber":109,"author":{"gitId":"JonahhGohh"},"content":"        case MARCH:"},{"lineNumber":110,"author":{"gitId":"JonahhGohh"},"content":"            return \"Mar\";"},{"lineNumber":111,"author":{"gitId":"JonahhGohh"},"content":"        case APRIL:"},{"lineNumber":112,"author":{"gitId":"JonahhGohh"},"content":"            return \"Apr\";"},{"lineNumber":113,"author":{"gitId":"JonahhGohh"},"content":"        case MAY:"},{"lineNumber":114,"author":{"gitId":"JonahhGohh"},"content":"            return \"May\";"},{"lineNumber":115,"author":{"gitId":"JonahhGohh"},"content":"        case JUNE:"},{"lineNumber":116,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jun\";"},{"lineNumber":117,"author":{"gitId":"JonahhGohh"},"content":"        case JULY:"},{"lineNumber":118,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jul\";"},{"lineNumber":119,"author":{"gitId":"JonahhGohh"},"content":"        case AUGUST:"},{"lineNumber":120,"author":{"gitId":"JonahhGohh"},"content":"            return \"Aug\";"},{"lineNumber":121,"author":{"gitId":"JonahhGohh"},"content":"        case SEPTEMBER:"},{"lineNumber":122,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sep\";"},{"lineNumber":123,"author":{"gitId":"JonahhGohh"},"content":"        case OCTOBER:"},{"lineNumber":124,"author":{"gitId":"JonahhGohh"},"content":"            return \"Oct\";"},{"lineNumber":125,"author":{"gitId":"JonahhGohh"},"content":"        case NOVEMBER:"},{"lineNumber":126,"author":{"gitId":"JonahhGohh"},"content":"            return \"Nov\";"},{"lineNumber":127,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":128,"author":{"gitId":"JonahhGohh"},"content":"            return \"Dec\";"},{"lineNumber":129,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":131}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":" * Parent class for different types of tasks"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"    private static int numOfTasks;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"    private String taskName;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    private boolean isTaskCompleted;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"    private final String FILE_WRITER_IDENTIFIER \u003d \"\";"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    protected final String COMPLETED_TEXT \u003d \"X\";"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    public Task(String input) throws EmptyTaskDukeException {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"        if (input.replaceAll(\"\\\\s+\",\"\").equals(\"\")) {"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"            throw new EmptyTaskDukeException();"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"            this.taskName \u003d input;"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"            isTaskCompleted \u003d false;"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"     * Sets task to completed"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    public void setDone() {"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        isTaskCompleted \u003d true;"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"    public boolean getIsTaskCompleted() {"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"        return isTaskCompleted;"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    public String getTaskName() {"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"        return taskName;"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"    private static int getNumOfTasks() {"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"        return numOfTasks;"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"     * Increments the total number of task by 1"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"    public static void incrementNumOfTask() {"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"        numOfTasks++;"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"     * Decrements the total number of task by 1"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    public static void decrementNumOfTask() {"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        numOfTasks--;"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"    public String getFileWriterIdentifier() {"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"        return FILE_WRITER_IDENTIFIER;"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"    public static String getNumOfTasksString() {"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"        return \"Now you have \" + getNumOfTasks()"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"                + (getNumOfTasks() \u003d\u003d 1 ? \" task\" : \" tasks\")"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"                + \" in the list.\";"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":66}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":" * Todo task for tasks that have no fixed due date"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"    private final String TODO_IDENTIFIER \u003d \"[T]\";"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    private final String FILE_WRITER_IDENTIFIER \u003d \"T|\";"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    public Todo(String input) throws EmptyTaskDukeException {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"        super(input);"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    public String getFileWriterIdentifier() {"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"        return FILE_WRITER_IDENTIFIER;"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        String taskStringCheck \u003d super.getIsTaskCompleted() ? super.COMPLETED_TEXT : \" \";"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        return TODO_IDENTIFIER + \"[\" + taskStringCheck + \"] \" + super.getTaskName();"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":26}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Stores all the tasks"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"     * Adds a task into the task list"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the current instance of task list used by Duke"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    public void addTask(Task task) {"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        taskList.add(task);"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        Task.incrementNumOfTask();"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"     * Removes the task from task list"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskNumber the current instance of task list used by Duke"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    public void removeTask(int taskNumber) {"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"        taskList.remove(taskNumber - 1);"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        Task.decrementNumOfTask();"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"     * Removes the task from task list"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the current instance of task list used by Duke"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"    public void removeTask(Task task) {"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        taskList.remove(task);"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"        Task.decrementNumOfTask();"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"     * Returns a filtered task list that only contains keywords from searchString"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"     * @param searchString string passed in from user input"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"     * @return a filtered task list that contains keywords from searchString"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"    public List\u003cTask\u003e filterTasks(String searchString) {"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"        List\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"        for (Task task : this.taskList) {"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"            if (task.getTaskName().contains(searchString)) {"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"                filteredTaskList.add(task);"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"        return filteredTaskList;"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"        return this.taskList;"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        String taskListString \u003d \"\";"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"            String taskString \u003d (i + 1) + \". \" + taskList.get(i);"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"            taskListString \u003d taskListString + taskString"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":"                    + (i \u003d\u003d taskList.size() - 1 ? \"\" : \"\\n\");"},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"        return taskListString;"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":78}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Handles the User Interface of Duke"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"    private Scanner sc;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    public Ui(Scanner sc) {"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        this.sc \u003d sc;"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    public String readCommand() {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        return sc.nextLine();"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    public void close() {"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        sc.close();"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"     * Prints the welcome message"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    public static void printWelcomeMessage() {"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"        String greetingMessage \u003d \"Hello! I\u0027m a Chat bot and my name \""},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"                + \"is Joe\" + \"\\nHow may I help you?\";"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(logo + \"\\n\" + greetingMessage));"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom message when tasks are added"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"    public static String taskAddedMessage(Task task) {"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        return formatMessage(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"                + task + \"\\n\" + Task.getNumOfTasksString());"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom message when tasks are removed"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    public static String taskRemovedMessage(Task task) {"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        return formatMessage(\"The following task has been removed:\\n\""},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"                + task + \"\\n\" + Task.getNumOfTasksString());"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom message when tasks are set to done"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"    public static String taskDoneMessage(Task task) {"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"        return formatMessage(\"You have completed the following task:\\n\""},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"                + task + \"\\n\" + \"Keep up the good work!\");"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom error message when an invalid command is received"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"    public static String invalidCommandMessage() {"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        return formatMessage(\"Please enter a valid command! \\n\""},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"                + \"Type help for a list of commands\");"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom message when Duke is shutting down"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"    public static String dukeExitMessage() {"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"        return formatMessage(\"Thanks for using Duke, have a great day ahead!\");"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"    public static String matchingList(List\u003cTask\u003e taskList) {"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"        String taskListString \u003d \"Here are the matching results on your list:\\n\";"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"            String taskString \u003d (i + 1) + \". \" + taskList.get(i);"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"            taskListString \u003d taskListString + taskString"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"                    + (i \u003d\u003d taskList.size() - 1 ? \"\" : \"\\n\");"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":"        return formatMessage(taskListString);"},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"JonahhGohh"},"content":"     * Prints information to user"},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"     * @param message the message to print"},{"lineNumber":95,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"JonahhGohh"},"content":"    public static String message(String message) {"},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"        return formatMessage(message);"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"JonahhGohh"},"content":"     * Prints error message information to user"},{"lineNumber":102,"author":{"gitId":"JonahhGohh"},"content":"     * @param errorMessage the error message to print"},{"lineNumber":103,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"JonahhGohh"},"content":"    public static void printError(String errorMessage) {"},{"lineNumber":105,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(\"Error: \" + errorMessage));"},{"lineNumber":106,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":108,"author":{"gitId":"JonahhGohh"},"content":"    private static String formatMessage(String str) {"},{"lineNumber":109,"author":{"gitId":"JonahhGohh"},"content":"        return str;"},{"lineNumber":110,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":111}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"JonahhGohh":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"666.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controller.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"623.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"65.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"553.0\" prefWidth\u003d\"385.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"      \u003cScrollPane fx:id\u003d\"reminderScrollPane\"  prefHeight\u003d\"66.0\" prefWidth\u003d\"400.0\"\u003e"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"         \u003ccontent\u003e"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"            \u003cVBox fx:id\u003d\"reminderContainer\" prefHeight\u003d\"64.0\" prefWidth\u003d\"383.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"         \u003c/content\u003e"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"      \u003c/ScrollPane\u003e"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    \u003c/children\u003e"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"JonahhGohh":24}},{"path":"src/main/resources/view/ReminderBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"\u003cfx:root alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"    \u003cpadding\u003e"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"        \u003cInsets bottom\u003d\"1.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"1.0\" /\u003e"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"    \u003c/padding\u003e"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"   \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"      \u003cLabel fx:id\u003d\"reminder\" alignment\u003d\"CENTER\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" /\u003e"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"   \u003c/children\u003e"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"JonahhGohh":14}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.DoneCommand;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.ExitCommand;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.HelpCommand;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.InvalidCommand;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"public class ParserTest {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_todoString_AddCommand() {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new AddCommand()).getClass(), (Parser.parseCommand(\"todo\")).getClass());"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_eventString_AddCommand() {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new AddCommand()).getClass(), (Parser.parseCommand(\"event\")).getClass());"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_deadlineString_AddCommand() {"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new AddCommand()).getClass(), (Parser.parseCommand(\"deadline\")).getClass());"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_doneString_DoneCommand() {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new DoneCommand()).getClass(), (Parser.parseCommand(\"done\")).getClass());"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_deleteString_DeleteCommand() {"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new DeleteCommand()).getClass(), (Parser.parseCommand(\"delete\")).getClass());"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_listString_ListCommand() {"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new ListCommand()).getClass(), (Parser.parseCommand(\"list\")).getClass());"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_helpString_HelpCommand() {"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new HelpCommand()).getClass(), (Parser.parseCommand(\"help\")).getClass());"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_byeString_ExitCommand() {"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new ExitCommand()).getClass(), (Parser.parseCommand(\"bye\")).getClass());"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_randomString_InvalidCommand() {"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new InvalidCommand()).getClass(), (Parser.parseCommand(\"asdf\")).getClass());"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":61}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"public class StorageTest {"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":4}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"public class TaskTest {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    public void getIsTaskCompleted_incompleteTask_false() {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"            Task task \u003d new Task(\"task name\");"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"            assertEquals(false, task.getIsTaskCompleted());"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        } catch (EmptyTaskDukeException e) {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"            e.printStackTrace();"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"    public void getIsTaskCompleted_completedTask_true() {"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"            Task task \u003d new Task(\"task name\");"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"            task.setDone();"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"            assertEquals(true, task.getIsTaskCompleted());"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"        } catch (EmptyTaskDukeException e) {"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"todo do homework"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":"event eat with friends /at Sat 2-4pm"},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"event eat with friends /at 2020-01-28"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"deadline 3230 assignment /by Sun 12am"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"deadline 3230 assignment /by 2020-01-29"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"event play games with friends"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"list"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"event play games with friends /by asdf"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"list"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"delete 2"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"list"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"help"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"delete 1"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"bye"}],"authorContributionMap":{"JonahhGohh":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"FC ACTUAL.TXT EXPECTED.TXT /W"}],"authorContributionMap":{"JonahhGohh":1,"-":20}}]
