[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"E|0|aewfw|2021-12-12"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":"T|0|do homework"},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"E|0|asdfasfeioj|2021-01-12"}],"authorContributionMap":{"JonahhGohh":3}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"public class Main {"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"        Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"        duke.run();"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":8}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":" * Handles the core logic of the Duke application"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    private TaskList taskList;"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    public Duke(String filePath) {"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        this.ui \u003d new Ui(new Scanner(System.in));"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        // loads the internal storage tasks into task list of program"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"        this.taskList \u003d storage.load();"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"     * Runs the entire logic for Duke"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    public void run() {"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"        // show welcome message"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        ui.printWelcomeMessage();"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"        boolean isDukeOnline \u003d true;"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        while (isDukeOnline) {"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"            // do something"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"                String fullInput \u003d ui.readCommand();"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"                Command c \u003d Parser.parseCommand(fullInput);"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"                Task task \u003d Parser.parseTask(fullInput, taskList);"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"                String taskDescription \u003d Parser.parseDescription(fullInput);"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"                c.execute(taskDescription, task, taskList, storage);"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"                // check online condition"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"                isDukeOnline \u003d c.isDukeOnline();"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"            } catch (EmptyTaskDukeException e) {"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"                Ui.printError(e.getMessage());"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"                Ui.printError(e.getMessage()"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"                        + \"\\nPlease enter a valid task number.\");"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"                Ui.printError(e.getMessage()"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"                        + \"\\nPlease enter a valid task number.\");"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"                Ui.printError(e.getMessage()"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"                        + \"\\nPlease enter the date in the correct format.\");"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"        ui.close();"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":63}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for todo, event, deadline input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Adds the task into the task list, saves the task list in the internal storage and prints success message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the task to be added into the task list"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage the storage instance used to save files into internal storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public void execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // Add task to task list"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        taskList.addTask(task);"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // Update Storage"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        storage.saveTasksToStorage(taskList);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        // Print success message"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        Ui.printTaskAddedMessage(task);"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":" * Parent command class"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"    public abstract void execute(String taskDescription, Task task, TaskList taskList, Storage storage);"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    public boolean isDukeOnline() {"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        return true;"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":17}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for delete input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Deletes the task from the task list, saves the task list in the internal storage and prints success message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the task to be deleted"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage the storage instance used to save files into internal storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public void execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // delete task"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        taskList.removeTask(task);"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // update storage"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        storage.saveTasksToStorage(taskList);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        // print message"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        Ui.printTaskRemovedMessage(task);"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":30}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for done input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Mark the task as done and prints success message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the task to be set done"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public void execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // update task to done"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        task.setDone();"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // print message"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        Ui.printTaskDoneMessage(task);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":27}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for exit input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Saves storage one last time and prints exit message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage the storage instance used to save files into internal storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public void execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // do one final save of task list into storage"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        storage.saveTasksToStorage(taskList);"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // print exit message"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        Ui.printDukeExitMessage();"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"     * Returns false since Duke is shutting down"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"     * @return false"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"    public boolean isDukeOnline() {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        return false;"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":37}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":" * Command for find input"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * Filters search string in task list and prints all matching tasks"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param searchString the description to search for"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    public void execute(String searchString, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        // filter tasks that contains the search string"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        List\u003cTask\u003e searchResult \u003d taskList.filterTasks(searchString);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        // print the search result"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        Ui.printMatchingList(searchResult);"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":30}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for help input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class HelpCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Prints help message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public void execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // print custom help message"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        String allCommands \u003d \"todo\\n\""},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"                + \"deadline *text* /by yyyy-mm-dd\\n\""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"                + \"event *text* /at yyyy-mm-dd\\n\""},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"                + \"done *number*\\n\""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"                + \"list\\n\""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"                + \"delete *number*\\n\""},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"                + \"bye\";"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        Ui.printMessage(allCommands);"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":31}},{"path":"src/main/java/duke/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for invalid input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class InvalidCommand extends Command{"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Prints invalid message"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public void execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // print invalid task message"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        Ui.printInvalidCommandMessage();"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":24}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Command for list input"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     * Prints current list of tasks to user"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * @param storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public void execute(String taskDescription, Task task, TaskList taskList, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        // print taskList"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        Ui.printMessage(\"Here are the tasks in your list:\\n\" + taskList.toString());"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":24}},{"path":"src/main/java/duke/exceptions/EmptyTaskDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":" * Exception for when user enters a task with no task description"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"public class EmptyTaskDukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"     * Describes the error message when user enters task with no task description"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    public EmptyTaskDukeException() {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"        super(\"Description of a task cannot be empty!\\n\""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"                + \"Please enter a valid input.\");"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":15}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.HelpCommand;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.InvalidCommand;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Todo;"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":" * Parses input from Duke"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"public class Parser {"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"     * Parses user input to return the corresponding command"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"     * @param input the corresponding command type"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    public static Command parseCommand(String input) {"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"        String commandString \u003d parseCommandString(input);"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"        String commandHelper \u003d commandString.toUpperCase();"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"        switch (commandHelper) {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        case \"TODO\":"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"        case \"DEADLINE\":"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"        case \"EVENT\":"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"            return new AddCommand();"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"        case \"DONE\":"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"            return new DoneCommand();"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"        case \"LIST\":"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"            return new ListCommand();"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"        case \"DELETE\":"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"            return new DeleteCommand();"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"        case \"FIND\":"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"            return new FindCommand();"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"        case \"HELP\":"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"            return new HelpCommand();"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"        case \"BYE\":"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"            return new ExitCommand();"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"            return new InvalidCommand();"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"     * Parses user input to return the task"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"     * @param input the input given by the user"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"     * @return a task object as described in the input"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"     * @throws EmptyTaskDukeException when there is an empty description"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"     * @throws IndexOutOfBoundsException when user enters a number in the description that does not match the task list"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"     * @throws NumberFormatException when user enters a non number into the number field in the description"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"     * @throws DateTimeParseException when user enters a bad date format in the description"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    public static Task parseTask(String input, TaskList taskList) throws"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"            EmptyTaskDukeException, IndexOutOfBoundsException,"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"            NumberFormatException, DateTimeParseException {"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"        String taskDescription \u003d parseDescription(input);"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"        String commandString \u003d parseCommandString(input);"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        String commandHelper \u003d commandString.toUpperCase();"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        switch (commandHelper) {"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"        case \"TODO\":"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"            return new Todo(taskDescription);"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":"        case \"DEADLINE\":"},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"            return new Deadline(taskDescription);"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"        case \"EVENT\":"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"            return new Event(taskDescription);"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"        case \"DONE\":"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"        case \"DELETE\":"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"            if (taskDescription.equals(\"\")) {"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":"                throw new EmptyTaskDukeException();"},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"            int index \u003d Integer.parseInt(taskDescription) - 1;"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"            return taskList.getTaskList().get(index);"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"            return null;"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"    private static String parseCommandString(String input) {"},{"lineNumber":91,"author":{"gitId":"JonahhGohh"},"content":"        return input.split(\" \")[0];"},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"    public static String parseDescription(String input) {"},{"lineNumber":95,"author":{"gitId":"JonahhGohh"},"content":"        if (input.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":96,"author":{"gitId":"JonahhGohh"},"content":"            return \"\";"},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"        return input.substring(parseCommandString(input).length() + 1);"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":100}},{"path":"src/main/java/duke/storage/DukeFileReader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":" * Reads file input from internal storage"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"public class DukeFileReader {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    private static TaskList readTaskListFromInternalStorage(String filePath) throws FileNotFoundException {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        FileDirectoryChecker.prepareFile(filePath);"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        Scanner sc \u003d new Scanner(f);"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"            String taskString \u003d sc.nextLine();"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"            String[] taskBreakdown \u003d taskString.split(\"\\\\|\");"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"            boolean isTaskDone \u003d taskBreakdown[1].equals(\"1\") ? true : false;"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"            String taskName \u003d taskBreakdown[2];"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"            if (taskBreakdown[0].equals(\"T\")) {"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"                try {"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"                    Task task \u003d new Todo(taskName);"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"                    if (isTaskDone) {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"                        task.setDone();"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"                    }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"                    taskList.addTask(task);"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"                } catch (EmptyTaskDukeException e) {"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"                    Ui.printError(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"            } else if (taskBreakdown[0].equals(\"D\")) {"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"                try {"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"                    Task task \u003d new Deadline(taskName, taskBreakdown[3]);"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"                    if (isTaskDone) {"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"                        task.setDone();"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"                    }"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"                    taskList.addTask(task);"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"                } catch (EmptyTaskDukeException e) {"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"                    Ui.printError(e.getMessage());"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"            } else if (taskBreakdown[0].equals(\"E\")) {"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"                try {"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"                    Task task \u003d new Event(taskName, taskBreakdown[3]);"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"                    if (isTaskDone) {"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"                        task.setDone();"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"                    }"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"                    taskList.addTask(task);"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"                } catch (EmptyTaskDukeException e) {"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"                    Ui.printError(e.getMessage());"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"        return taskList;"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"     * loads tasks from internal storage"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"     * @return a task list containing all the tasks from internal storage"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"    public static TaskList loadTasks(String filePath) {"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"            TaskList taskList \u003d readTaskListFromInternalStorage(filePath);"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"            return taskList;"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":"            Ui.printError(e.getMessage());"},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"        return new TaskList();"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":78}},{"path":"src/main/java/duke/storage/DukeFileWriter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":" * Writes file input into internal storage"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"public class DukeFileWriter {"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"     * Saves the task list into internal storage"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"     * @param filePath the file path of the internal storage to save at"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    public static void saveTaskListInInternalStorage(List\u003cTask\u003e taskList, String filePath) {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"            String toBeSavedTaskListString \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"                String currentLine \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"                Task task \u003d taskList.get(i);"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"                if (task instanceof Event) {"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"                    currentLine +\u003d \"E|\";"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"                } else if (task instanceof Todo) {"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"                    currentLine +\u003d \"T|\";"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"                } else if (task instanceof Deadline) {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"                    currentLine +\u003d \"D|\";"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"                if (task.getIsTaskCompleted()) {"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"                    currentLine +\u003d \"1|\";"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"                } else {"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"                    currentLine +\u003d \"0|\";"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"                }"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"                currentLine +\u003d task.getTaskName();"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"                if (task instanceof Event) {"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"                    currentLine +\u003d \"|\" + ((Event) task).getDueAt();"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"                } else if (task instanceof Deadline) {"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"                    currentLine +\u003d \"|\" + ((Deadline) task).getDueBy();"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"                }"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"                if (i \u003c taskList.size() - 1) {"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"                    toBeSavedTaskListString +\u003d currentLine + \"\\n\";"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"                } else {"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"                    toBeSavedTaskListString +\u003d currentLine;"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"                }"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"            writeToFile(toBeSavedTaskListString, filePath);"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        } catch (IOException e) {"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"            Ui.printError(e.getMessage());"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"    private static void writeToFile(String textToAdd, String filePath) throws IOException {"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"        FileDirectoryChecker.prepareFile(filePath);"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"        fw.write(textToAdd);"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"        fw.close();"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":65}},{"path":"src/main/java/duke/storage/FileDirectoryChecker.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":" * Checks and prepares the directory for Duke"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"public class FileDirectoryChecker {"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"     * Checks if the directory exists and creates a new directory and file if they do not exist"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"     * @param dir the file path of the internal storage"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    public static void prepareFile(String dir) {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"        File directory \u003d new File(dir);"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"        File pathDir \u003d directory.getParentFile();"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"        checkPath(pathDir);"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"            checkFile(directory);"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        } catch (IOException e) {"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    private static void checkPath(File dir) {"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        if (!dir.exists()) {"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"            dir.mkdir();"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    private static void checkFile(File dir) throws IOException {"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"        dir.createNewFile();"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":35}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":" * Handles storage for Duke"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"public class Storage {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"    private String filePath;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    public Storage(String filePath) {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"        FileDirectoryChecker.prepareFile(filePath);"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"     * Loads all tasks from internal storage"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"     * @return the task list containing all the tasks from internal storage"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    public TaskList load() {"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"        return DukeFileReader.loadTasks(filePath);"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"     * Saves the tasks in task list into internal storage"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskList the current instance of task list used by Duke"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    public void saveTasksToStorage(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        DukeFileWriter.saveTaskListInInternalStorage(taskList.getTaskList(), filePath);"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":31}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import java.time.DayOfWeek;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import java.time.Month;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":" * Deadline task for tasks that are due by a certain date"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    private LocalDate dueBy;"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"    private static final String DUE_COMMAND \u003d \"/by\";"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    public Deadline(String input) throws EmptyTaskDukeException, DateTimeParseException {"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"        super(getTaskNameFromInput(input));"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        dueBy \u003d LocalDate.parse(getDueDateFromInput(input));"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    public Deadline(String name, String dueBy) throws EmptyTaskDukeException {"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        super(name);"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        this.dueBy \u003d LocalDate.parse(dueBy);"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"     * Parses the task name from the input"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"     * @param input the input entered by the user"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"     * @return trimmed input of the task description"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    private static String getTaskNameFromInput(String input) {"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"        if (input.contains(DUE_COMMAND)) {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"            return input.split(DUE_COMMAND)[0].trim();"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"            return input;"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    private static String getDueDateFromInput(String input) {"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"        if (input.contains(DUE_COMMAND)) {"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"            return removeStartingWhiteSpace(input.split(DUE_COMMAND)[1]);"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"            return \"not specified\";"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"    private static String removeStartingWhiteSpace(String input) {"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"        if (input.substring(0, 1).equals(\" \")) {"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"            return input.substring(1);"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"        return input;"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    public String getDueBy() {"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"        return this.dueBy.toString();"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"        String taskStringCheck \u003d super.getIsTaskCompleted() ? \"X\" : \" \";"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"        return \"[D]\" + \"[\" + taskStringCheck + \"] \" + super.getTaskName()"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"                + \" (by: \" + formatDate(dueBy) +  \")\";"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"    private String formatDate(LocalDate date) {"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"        DayOfWeek day \u003d date.getDayOfWeek();"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"        Month mth \u003d date.getMonth();"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"        String dateString \u003d \"\";"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        dateString \u003d getDayString(day) + \" \" + getMthString(mth) + \" \""},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"                + date.getDayOfMonth() + \" \" + date.getYear();"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"        return dateString;"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"    private String getDayString(DayOfWeek day) {"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"        switch (day) {"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"        case MONDAY:"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"            return \"Mon\";"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"        case TUESDAY:"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"            return \"Tue\";"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":"        case WEDNESDAY:"},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"            return \"Wed\";"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"        case THURSDAY:"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"            return \"Thu\";"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"        case FRIDAY:"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"            return \"Fri\";"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"        case SATURDAY:"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sat\";"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sun\";"},{"lineNumber":91,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"    private String getMthString(Month mth) {"},{"lineNumber":95,"author":{"gitId":"JonahhGohh"},"content":"        switch (mth) {"},{"lineNumber":96,"author":{"gitId":"JonahhGohh"},"content":"        case JANUARY:"},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jan\";"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"        case FEBRUARY:"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":"            return \"Feb\";"},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"        case MARCH:"},{"lineNumber":101,"author":{"gitId":"JonahhGohh"},"content":"            return \"Mar\";"},{"lineNumber":102,"author":{"gitId":"JonahhGohh"},"content":"        case APRIL:"},{"lineNumber":103,"author":{"gitId":"JonahhGohh"},"content":"            return \"Apr\";"},{"lineNumber":104,"author":{"gitId":"JonahhGohh"},"content":"        case MAY:"},{"lineNumber":105,"author":{"gitId":"JonahhGohh"},"content":"            return \"May\";"},{"lineNumber":106,"author":{"gitId":"JonahhGohh"},"content":"        case JUNE:"},{"lineNumber":107,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jun\";"},{"lineNumber":108,"author":{"gitId":"JonahhGohh"},"content":"        case JULY:"},{"lineNumber":109,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jul\";"},{"lineNumber":110,"author":{"gitId":"JonahhGohh"},"content":"        case AUGUST:"},{"lineNumber":111,"author":{"gitId":"JonahhGohh"},"content":"            return \"Aug\";"},{"lineNumber":112,"author":{"gitId":"JonahhGohh"},"content":"        case SEPTEMBER:"},{"lineNumber":113,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sep\";"},{"lineNumber":114,"author":{"gitId":"JonahhGohh"},"content":"        case OCTOBER:"},{"lineNumber":115,"author":{"gitId":"JonahhGohh"},"content":"            return \"Oct\";"},{"lineNumber":116,"author":{"gitId":"JonahhGohh"},"content":"        case NOVEMBER:"},{"lineNumber":117,"author":{"gitId":"JonahhGohh"},"content":"            return \"Nov\";"},{"lineNumber":118,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":119,"author":{"gitId":"JonahhGohh"},"content":"            return \"Dec\";"},{"lineNumber":120,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":122}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import java.time.DayOfWeek;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import java.time.Month;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":" * Event task for tasks that are due on a certain date"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    private LocalDate dueAt;"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    private static final String DUE_COMMAND \u003d \"/at\";"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    public Event(String input) throws EmptyTaskDukeException, DateTimeParseException {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        super(getTaskNameFromInput(input));"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"        dueAt \u003d LocalDate.parse(getDueDateFromInput(input));"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    public Event(String name, String dueAt) throws EmptyTaskDukeException {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        super(name);"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"        this.dueAt \u003d LocalDate.parse(dueAt);"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    private static String getTaskNameFromInput(String input) {"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        if (input.contains(DUE_COMMAND)) {"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"            return input.split(DUE_COMMAND)[0].trim();"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"            return input;"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"    private static String getDueDateFromInput(String input) {"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        if (input.contains(DUE_COMMAND)) {"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"            return removeStartingWhiteSpace(input.split(DUE_COMMAND)[1]);"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"            return \"not specified\";"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"    private static String removeStartingWhiteSpace(String input) {"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        if (input.substring(0, 1).equals(\" \")) {"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"            return input.substring(1);"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"        return input;"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"    public String getDueAt() {"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"        return this.dueAt.toString();"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"        String taskStringCheck \u003d super.getIsTaskCompleted() ? \"X\" : \" \";"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"        return \"[E]\""},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"                + \"[\" + taskStringCheck + \"] \""},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"                + super.getTaskName()"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"                + \" (at: \" + formatDate(dueAt)"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"                +  \")\";"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    private String formatDate(LocalDate date) {"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"        DayOfWeek day \u003d date.getDayOfWeek();"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"        Month mth \u003d date.getMonth();"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"        String dateString \u003d \"\";"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"        dateString \u003d getDayString(day)"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"                + \" \""},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"                + getMthString(mth)"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"                + \" \""},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"                + date.getDayOfMonth()"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":"                + \" \" + date.getYear();"},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"        return dateString;"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"    private String getDayString(DayOfWeek day) {"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"        switch (day) {"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"        case MONDAY:"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":"            return \"Mon\";"},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"        case TUESDAY:"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"            return \"Tue\";"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"        case WEDNESDAY:"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"            return \"Wed\";"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"        case THURSDAY:"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"            return \"Thu\";"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"        case FRIDAY:"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":"            return \"Fri\";"},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"        case SATURDAY:"},{"lineNumber":91,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sat\";"},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":93,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sun\";"},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"    private String getMthString(Month mth) {"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"        switch (mth) {"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":"        case JANUARY:"},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jan\";"},{"lineNumber":101,"author":{"gitId":"JonahhGohh"},"content":"        case FEBRUARY:"},{"lineNumber":102,"author":{"gitId":"JonahhGohh"},"content":"            return \"Feb\";"},{"lineNumber":103,"author":{"gitId":"JonahhGohh"},"content":"        case MARCH:"},{"lineNumber":104,"author":{"gitId":"JonahhGohh"},"content":"            return \"Mar\";"},{"lineNumber":105,"author":{"gitId":"JonahhGohh"},"content":"        case APRIL:"},{"lineNumber":106,"author":{"gitId":"JonahhGohh"},"content":"            return \"Apr\";"},{"lineNumber":107,"author":{"gitId":"JonahhGohh"},"content":"        case MAY:"},{"lineNumber":108,"author":{"gitId":"JonahhGohh"},"content":"            return \"May\";"},{"lineNumber":109,"author":{"gitId":"JonahhGohh"},"content":"        case JUNE:"},{"lineNumber":110,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jun\";"},{"lineNumber":111,"author":{"gitId":"JonahhGohh"},"content":"        case JULY:"},{"lineNumber":112,"author":{"gitId":"JonahhGohh"},"content":"            return \"Jul\";"},{"lineNumber":113,"author":{"gitId":"JonahhGohh"},"content":"        case AUGUST:"},{"lineNumber":114,"author":{"gitId":"JonahhGohh"},"content":"            return \"Aug\";"},{"lineNumber":115,"author":{"gitId":"JonahhGohh"},"content":"        case SEPTEMBER:"},{"lineNumber":116,"author":{"gitId":"JonahhGohh"},"content":"            return \"Sep\";"},{"lineNumber":117,"author":{"gitId":"JonahhGohh"},"content":"        case OCTOBER:"},{"lineNumber":118,"author":{"gitId":"JonahhGohh"},"content":"            return \"Oct\";"},{"lineNumber":119,"author":{"gitId":"JonahhGohh"},"content":"        case NOVEMBER:"},{"lineNumber":120,"author":{"gitId":"JonahhGohh"},"content":"            return \"Nov\";"},{"lineNumber":121,"author":{"gitId":"JonahhGohh"},"content":"        default:"},{"lineNumber":122,"author":{"gitId":"JonahhGohh"},"content":"            return \"Dec\";"},{"lineNumber":123,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":125}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":" * Parent class for different types of tasks"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"    private static int numOfTasks;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"    private String taskName;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    private boolean isTaskCompleted;"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    public Task(String input) throws EmptyTaskDukeException {"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"        if (input.replaceAll(\"\\\\s+\",\"\").equals(\"\")) {"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"            throw new EmptyTaskDukeException();"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"        } else {"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"            this.taskName \u003d input;"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"            isTaskCompleted \u003d false;"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"     * Sets task to completed"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"    public void setDone() {"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"        isTaskCompleted \u003d true;"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    public boolean getIsTaskCompleted() {"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"        return isTaskCompleted;"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"    public String getTaskName() {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        return taskName;"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"    private static int getNumOfTasks() {"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"        return numOfTasks;"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"     * Increments the total number of task by 1"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"    public static void incrementNumOfTask() {"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        numOfTasks++;"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"     * Decrements the total number of task by 1"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"    public static void decrementNumOfTask() {"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"        numOfTasks--;"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    public static String getNumOfTasksString() {"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"        return \"Now you have \" + getNumOfTasks()"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"                + (getNumOfTasks() \u003d\u003d 1 ? \" task\" : \" tasks\")"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"                + \" in the list.\";"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":60}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":" * Todo task for tasks that have no fixed due date"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"    public Todo(String input) throws EmptyTaskDukeException {"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"        super(input);"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        String taskStringCheck \u003d super.getIsTaskCompleted() ? \"X\" : \" \";"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"        return \"[T]\" + \"[\" + taskStringCheck + \"] \" + super.getTaskName();"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":18}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Stores all the tasks"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"     * Adds a task into the task list"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the current instance of task list used by Duke"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    public void addTask(Task task) {"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"        taskList.add(task);"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        Task.incrementNumOfTask();"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"     * Removes the task from task list"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"     * @param taskNumber the current instance of task list used by Duke"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    public void removeTask(int taskNumber) {"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"        taskList.remove(taskNumber - 1);"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        Task.decrementNumOfTask();"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"     * Removes the task from task list"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"     * @param task the current instance of task list used by Duke"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"    public void removeTask(Task task) {"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        taskList.remove(task);"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"        Task.decrementNumOfTask();"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"    public List\u003cTask\u003e filterTasks(String searchString) {"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"        List\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"        for (Task task : this.taskList) {"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"            if (task.getTaskName().contains(searchString)) {"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"                filteredTaskList.add(task);"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"        return filteredTaskList;"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"        return this.taskList;"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"        String taskListString \u003d \"\";"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"            String taskString \u003d (i + 1) + \". \" + taskList.get(i);"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"            taskListString \u003d taskListString + taskString"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"                    + (i \u003d\u003d taskList.size() - 1 ? \"\" : \"\\n\");"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        return taskListString;"},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":73}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":" * Handles the User Interface of Duke"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"    private Scanner sc;"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"    public Ui(Scanner sc) {"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        this.sc \u003d sc;"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    public String readCommand() {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        return sc.nextLine();"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    public void close() {"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"        sc.close();"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"     * Prints the welcome message"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    public static void printWelcomeMessage() {"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"        String greetingMessage \u003d \"Hello! I\u0027m a Chat bot and my name \""},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":"                + \"is Joe\" + \"\\nHow may I help you?\";"},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(logo + \"\\n\" + greetingMessage));"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom message when tasks are added"},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"    public static void printTaskAddedMessage(Task task) {"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":"                + task + \"\\n\" + Task.getNumOfTasksString()));"},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom message when tasks are removed"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    public static void printTaskRemovedMessage(Task task) {"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(\"The following task has been removed:\\n\""},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"                + task + \"\\n\" + Task.getNumOfTasksString()));"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom message when tasks are set to done"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"     * @param task"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"JonahhGohh"},"content":"    public static void printTaskDoneMessage(Task task) {"},{"lineNumber":63,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(\"You have completed the following task:\\n\""},{"lineNumber":64,"author":{"gitId":"JonahhGohh"},"content":"                + task + \"\\n\" + \"Keep up the good work!\"));"},{"lineNumber":65,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":67,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom error message when an invalid command is received"},{"lineNumber":69,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"JonahhGohh"},"content":"    public static void printInvalidCommandMessage() {"},{"lineNumber":71,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(\"Please enter a valid command! \\n\""},{"lineNumber":72,"author":{"gitId":"JonahhGohh"},"content":"                + \"Type help for a list of commands\"));"},{"lineNumber":73,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":75,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"JonahhGohh"},"content":"     * Prints custom message when Duke is shutting down"},{"lineNumber":77,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"JonahhGohh"},"content":"    public static void printDukeExitMessage() {"},{"lineNumber":79,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(\"Thanks for using Duke, have a great day ahead!\"));"},{"lineNumber":80,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":82,"author":{"gitId":"JonahhGohh"},"content":"    public static void printMatchingList(List\u003cTask\u003e taskList) {"},{"lineNumber":83,"author":{"gitId":"JonahhGohh"},"content":"        String taskListString \u003d \"Here are the matching results on your list:\\n\";"},{"lineNumber":84,"author":{"gitId":"JonahhGohh"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":85,"author":{"gitId":"JonahhGohh"},"content":"            String taskString \u003d (i + 1) + \". \" + taskList.get(i);"},{"lineNumber":86,"author":{"gitId":"JonahhGohh"},"content":"            taskListString \u003d taskListString + taskString"},{"lineNumber":87,"author":{"gitId":"JonahhGohh"},"content":"                    + (i \u003d\u003d taskList.size() - 1 ? \"\" : \"\\n\");"},{"lineNumber":88,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(taskListString));"},{"lineNumber":90,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":92,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"JonahhGohh"},"content":"     * Prints information to user"},{"lineNumber":94,"author":{"gitId":"JonahhGohh"},"content":"     * @param message the message to print"},{"lineNumber":95,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"JonahhGohh"},"content":"    public static void printMessage(String message) {"},{"lineNumber":97,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(message));"},{"lineNumber":98,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":100,"author":{"gitId":"JonahhGohh"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"JonahhGohh"},"content":"     * Prints error message information to user"},{"lineNumber":102,"author":{"gitId":"JonahhGohh"},"content":"     * @param errorMessage the error message to print"},{"lineNumber":103,"author":{"gitId":"JonahhGohh"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"JonahhGohh"},"content":"    public static void printError(String errorMessage) {"},{"lineNumber":105,"author":{"gitId":"JonahhGohh"},"content":"        System.out.println(formatMessage(\"Error: \" + errorMessage));"},{"lineNumber":106,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":108,"author":{"gitId":"JonahhGohh"},"content":"    private static String formatMessage(String str) {"},{"lineNumber":109,"author":{"gitId":"JonahhGohh"},"content":"        return \"____________________________________________________________\""},{"lineNumber":110,"author":{"gitId":"JonahhGohh"},"content":"                + \"\\n\" + str + \"\\n\""},{"lineNumber":111,"author":{"gitId":"JonahhGohh"},"content":"                + \"____________________________________________________________\\n\";"},{"lineNumber":112,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":113}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.DoneCommand;"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.ExitCommand;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.HelpCommand;"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.InvalidCommand;"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"public class ParserTest {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_todoString_AddCommand() {"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new AddCommand()).getClass(), (Parser.parseCommand(\"todo\")).getClass());"},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_eventString_AddCommand() {"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new AddCommand()).getClass(), (Parser.parseCommand(\"event\")).getClass());"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_deadlineString_AddCommand() {"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new AddCommand()).getClass(), (Parser.parseCommand(\"deadline\")).getClass());"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":32,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_doneString_DoneCommand() {"},{"lineNumber":34,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new DoneCommand()).getClass(), (Parser.parseCommand(\"done\")).getClass());"},{"lineNumber":35,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":37,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_deleteString_DeleteCommand() {"},{"lineNumber":39,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new DeleteCommand()).getClass(), (Parser.parseCommand(\"delete\")).getClass());"},{"lineNumber":40,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":42,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_listString_ListCommand() {"},{"lineNumber":44,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new ListCommand()).getClass(), (Parser.parseCommand(\"list\")).getClass());"},{"lineNumber":45,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":47,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_helpString_HelpCommand() {"},{"lineNumber":49,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new HelpCommand()).getClass(), (Parser.parseCommand(\"help\")).getClass());"},{"lineNumber":50,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":52,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_byeString_ExitCommand() {"},{"lineNumber":54,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new ExitCommand()).getClass(), (Parser.parseCommand(\"bye\")).getClass());"},{"lineNumber":55,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":57,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"JonahhGohh"},"content":"    public void parseCommand_randomString_InvalidCommand() {"},{"lineNumber":59,"author":{"gitId":"JonahhGohh"},"content":"        assertEquals((new InvalidCommand()).getClass(), (Parser.parseCommand(\"asdf\")).getClass());"},{"lineNumber":60,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":61}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"public class StorageTest {"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":4}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"import duke.exceptions.EmptyTaskDukeException;"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"public class TaskTest {"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"    public void getIsTaskCompleted_incompleteTask_false() {"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"            Task task \u003d new Task(\"task name\");"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"            assertEquals(false, task.getIsTaskCompleted());"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"        } catch (EmptyTaskDukeException e) {"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"            e.printStackTrace();"},{"lineNumber":17,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JonahhGohh"},"content":""},{"lineNumber":20,"author":{"gitId":"JonahhGohh"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"    public void getIsTaskCompleted_completedTask_true() {"},{"lineNumber":22,"author":{"gitId":"JonahhGohh"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"JonahhGohh"},"content":"            Task task \u003d new Task(\"task name\");"},{"lineNumber":24,"author":{"gitId":"JonahhGohh"},"content":"            task.setDone();"},{"lineNumber":25,"author":{"gitId":"JonahhGohh"},"content":"            assertEquals(true, task.getIsTaskCompleted());"},{"lineNumber":26,"author":{"gitId":"JonahhGohh"},"content":"        } catch (EmptyTaskDukeException e) {"},{"lineNumber":27,"author":{"gitId":"JonahhGohh"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"JonahhGohh"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"JonahhGohh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JonahhGohh"},"content":"}"}],"authorContributionMap":{"JonahhGohh":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JonahhGohh"},"content":"todo do homework"},{"lineNumber":2,"author":{"gitId":"JonahhGohh"},"content":"event eat with friends /at Sat 2-4pm"},{"lineNumber":3,"author":{"gitId":"JonahhGohh"},"content":"event eat with friends /at 2020-01-28"},{"lineNumber":4,"author":{"gitId":"JonahhGohh"},"content":"deadline 3230 assignment /by Sun 12am"},{"lineNumber":5,"author":{"gitId":"JonahhGohh"},"content":"deadline 3230 assignment /by 2020-01-29"},{"lineNumber":6,"author":{"gitId":"JonahhGohh"},"content":"event play games with friends"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"list"},{"lineNumber":8,"author":{"gitId":"JonahhGohh"},"content":"event play games with friends /by asdf"},{"lineNumber":9,"author":{"gitId":"JonahhGohh"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"JonahhGohh"},"content":"list"},{"lineNumber":11,"author":{"gitId":"JonahhGohh"},"content":"delete 2"},{"lineNumber":12,"author":{"gitId":"JonahhGohh"},"content":"list"},{"lineNumber":13,"author":{"gitId":"JonahhGohh"},"content":"help"},{"lineNumber":14,"author":{"gitId":"JonahhGohh"},"content":"delete 1"},{"lineNumber":15,"author":{"gitId":"JonahhGohh"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"JonahhGohh"},"content":"bye"}],"authorContributionMap":{"JonahhGohh":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"JonahhGohh"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"JonahhGohh"},"content":"FC ACTUAL.TXT EXPECTED.TXT /W"}],"authorContributionMap":{"JonahhGohh":2,"-":19}}]
