[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.*;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.handler.*;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.*;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Event;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import java.awt.*;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"import java.util.Scanner;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":" * Main class for Duke."},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    private boolean exit \u003d false;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    private Storage storage;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    private TaskList tasks;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    private Ui ui;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\" d.MMM.yyyy HH:mm\");"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"     * Class constructor taking in String storagePath."},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"     * @param storagePath path to the storage of data."},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"    private Duke(String storagePath) {"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        storage \u003d new Storage(storagePath);"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"        tasks \u003d storage.load();"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        ui \u003d new Ui();"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"     * Main method of Duke program."},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"     * @param args"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"     * @throws IOException"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"     * Runs the main logic of Duke program."},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"    public void run() {"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"        ui.displayIntro();"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"        while (exit \u003d\u003d false) {"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"            try {"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"                CommandHandler commandHandler \u003d Parser.parseFromInput(ui.readCommand());"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"                checkDeleteDonePossible(commandHandler, tasks);"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"                commandHandler.execute(ui, storage, tasks);"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"                if (commandHandler instanceof ByeHandler) {"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"                    exit \u003d true;"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"                }"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"            } catch (DukeException e) {"},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"                String output \u003d e.getMessage();"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"                ui.respond(output);"},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"        ui.close();"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"     * Checks if Done or Delete command an be called based on"},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"     * the number of tasks available, and the parsed request."},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"     * @param commandHandler commandHandler of Done or Delete, with task index."},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"     * @param taskList list of tasks."},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"     * @throws DukeInvalidDesException If command task number \u003e number of tasks."},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"    public static void checkDeleteDonePossible(CommandHandler commandHandler, TaskList taskList)"},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"            throws DukeInvalidDesException {"},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"        if (commandHandler instanceof DoneHandler) {"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"            if (((DoneHandler) commandHandler).getTaskNum() \u003e taskList.getNumOfTasks()) {"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"                throw new DukeInvalidDesException(\"DONE\");"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":"        } else if (commandHandler instanceof DeleteHandler) {"},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"            if (((DeleteHandler) commandHandler).getTaskNum() \u003e taskList.getNumOfTasks()) {"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"                throw new DukeInvalidDesException(\"DELETE\");"},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nowknowing":86,"-":2}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.handler.Parser;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"import java.nio.file.Files;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"import java.nio.file.Paths;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"import java.util.Scanner;"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":" * Storage class that handles the loading of data from data file"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":" * and updating of task information in data file."},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    private static String STORAGE_PATH;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    private static final int MARK_INDEX \u003d 2;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"     * Default constructor for Storage."},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"     * @param storagePath path to the storage file."},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    public Storage(String storagePath) {"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        STORAGE_PATH \u003d storagePath;"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"     * Loads data from the storage file."},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"     * @return List of tasks."},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    public TaskList load() {"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"        Scanner dataReader \u003d null;"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        try{"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"            File file \u003d new File(STORAGE_PATH);"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"            file.createNewFile();"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"            dataReader \u003d new Scanner(file);"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"            while (dataReader.hasNextLine()) {"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"                Task task \u003d Parser.parseFromData(dataReader.nextLine());"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"                tasks.addTask(task);"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"            return tasks;"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"            System.out.println(\"File did not load\");"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"        } finally {"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"            dataReader.close();"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"        return tasks;"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"     * Writes new tasks into the storage file."},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"     * @param task task to be added to the storage file."},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"    public void addTask(Task task){"},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"            FileWriter fw \u003d new FileWriter(STORAGE_PATH, true);"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"            String toWrite \u003d\"\";"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"            switch(task.getType()) {"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"            case \"TODO\":"},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"                toWrite \u003d String.format(\"%c|%c|%s\","},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"                        \u0027T\u0027,"},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"                        task.isDone() ? \u0027X\u0027 : \u0027 \u0027,"},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"                        task.getDescription());"},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"            case \"DEADLINE\":"},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"                toWrite \u003d String.format(\"%c|%c|%s|%s\","},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"                        \u0027D\u0027,"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"                        task.isDone() ? \u0027X\u0027 : \u0027 \u0027,"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"                        task.getDescription(),"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"                        ((Deadline) task).getBy().toString());"},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"            case \"EVENT\":"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"                toWrite \u003d String.format(\"%c|%c|%s|%s\","},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"                        \u0027E\u0027,"},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"                        task.isDone() ? \u0027X\u0027 : \u0027 \u0027,"},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":"                        task.getDescription(),"},{"lineNumber":88,"author":{"gitId":"nowknowing"},"content":"                        ((Event) task).getAt().toString());"},{"lineNumber":89,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":90,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"nowknowing"},"content":"            fw.write(toWrite + \"\\n\");"},{"lineNumber":92,"author":{"gitId":"nowknowing"},"content":"            fw.close();"},{"lineNumber":93,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitId":"nowknowing"},"content":"            System.out.println(\"File could not be written to. Could not add task.\");"},{"lineNumber":95,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":98,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"nowknowing"},"content":"     * Marks the certain task as done in the storage file."},{"lineNumber":100,"author":{"gitId":"nowknowing"},"content":"     * @param task task be marked."},{"lineNumber":101,"author":{"gitId":"nowknowing"},"content":"     * @param taskNum task index(from 1) in relation to the number of tasks"},{"lineNumber":102,"author":{"gitId":"nowknowing"},"content":"     *                in the storage file."},{"lineNumber":103,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"nowknowing"},"content":"    public void markDoneInStorage(Task task, int taskNum) {"},{"lineNumber":105,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"nowknowing"},"content":"            Path path \u003d Paths.get(STORAGE_PATH);"},{"lineNumber":107,"author":{"gitId":"nowknowing"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"},{"lineNumber":108,"author":{"gitId":"nowknowing"},"content":"            String line \u003d lines.get(taskNum - 1);"},{"lineNumber":109,"author":{"gitId":"nowknowing"},"content":"            StringBuilder updatedLine \u003d new StringBuilder(line);"},{"lineNumber":110,"author":{"gitId":"nowknowing"},"content":"            updatedLine.setCharAt(MARK_INDEX, \u0027X\u0027);"},{"lineNumber":111,"author":{"gitId":"nowknowing"},"content":"            lines.set(taskNum - 1, updatedLine.toString());"},{"lineNumber":112,"author":{"gitId":"nowknowing"},"content":"            Files.write(path, lines, StandardCharsets.UTF_8);"},{"lineNumber":113,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":114,"author":{"gitId":"nowknowing"},"content":"            System.out.println(\"Fail to mark done in storage file.\");"},{"lineNumber":115,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":118,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"nowknowing"},"content":"     * Deletes the nth task of the list of tasks."},{"lineNumber":120,"author":{"gitId":"nowknowing"},"content":"     * @param taskNum nth task to be removed from the list of tasks"},{"lineNumber":121,"author":{"gitId":"nowknowing"},"content":"     *                in the storage file."},{"lineNumber":122,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"nowknowing"},"content":"    public void delete(int taskNum) {"},{"lineNumber":124,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":125,"author":{"gitId":"nowknowing"},"content":"            Path path \u003d Paths.get(STORAGE_PATH);"},{"lineNumber":126,"author":{"gitId":"nowknowing"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"},{"lineNumber":127,"author":{"gitId":"nowknowing"},"content":"            lines.remove(taskNum - 1);"},{"lineNumber":128,"author":{"gitId":"nowknowing"},"content":"            Files.write(path, lines, StandardCharsets.UTF_8);"},{"lineNumber":129,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":130,"author":{"gitId":"nowknowing"},"content":"            System.out.println(\"Fail to delete item in storage file.\");"},{"lineNumber":131,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":133}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.io.PrintStream;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":" * Ui class that handles interactions with user."},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    private static final String INDENT \u003d \"  \";"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    private static final String TEXT_INDENT \u003d INDENT + \"|\" + \" \";"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    private static final String RES_BOX_TOP \u003d INDENT + \"_______________________________________________\\n\";"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    private static final String RES_BOX_BOTTOM \u003d INDENT + \"|____________________________________________\\n\""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"            + INDENT + \"                                              \\\\|\\n\";"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    private static Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    private final Scanner in;"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    private final PrintStream out;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"     * Default constructor."},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    public Ui() {"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"        this.in \u003d new Scanner(System.in);"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        this.out \u003d System.out;"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"    private boolean hasCommand() {"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        return in.hasNext();"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"     * Reads input by line."},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"     * @return String of input."},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"    public String readCommand() {"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        assert hasCommand();"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        return in.nextLine();"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"     * Closes system input."},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"    public void close() {"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"        in.close();"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"     * Displays the default intro message."},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"    public void displayIntro() {"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"        String response \u003d \"Hello from\\n\""},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"                + logo + \"\\n\""},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"                + \"What can I do for you?\\n\";"},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"        respond(response);"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"     * Formats and prints the string response in a chat response form."},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"     * @param response response from Duke."},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"    public void respond(String response) {"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"        String indentedResponse \u003d Arrays.stream(response.split(\"\\n\"))"},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"                .map(line -\u003e TEXT_INDENT + line)"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"                .collect(Collectors.joining(\"\\n\")) + \"\\n\";"},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"        String output \u003d RES_BOX_TOP"},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"                + indentedResponse"},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"                + RES_BOX_BOTTOM;"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"        System.out.println(output);"},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":79}},{"path":"src/main/java/duke/exceptions/DukeDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public class DukeDateTimeException extends DukeException{"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    private String message;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"     * Constructor for DukeException for invalid date time format."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    public DukeDateTimeException() {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        super(\"This is a Duke DateTime exception\");"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"        message \u003d super.getMessage() + \" \""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"                + \"Your date/time description\\n\""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"                + \"does not match the dd.MMM.yyyy HH:mm format.\";"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"     * Returns message of invalid date time format."},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"     * @return Message of invalid date time format."},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":24}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":" * Custom exception for the Duke app."},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"public class DukeException extends Exception{"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    private  String message \u003d \"OOPS!\";"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    public DukeException(String s) {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        super(s);"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":17}},{"path":"src/main/java/duke/exceptions/DukeIDKException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public class DukeIDKException extends DukeException{"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    private String message;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"     * Constructor for DukeException for incomprehensible request."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    public DukeIDKException() {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        super(\"This is a Duke IDK exception\");"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"        message \u003d super.getMessage() + \" \""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"                + \"I don\u0027t get what you mean.\";"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"     * Returns message of the incomprehensible request."},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"     * @return Message of the incomprehensible request."},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":23}},{"path":"src/main/java/duke/exceptions/DukeInvalidDesException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public class DukeInvalidDesException extends DukeException{"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    private String keyword;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"    private String message;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"     * Constructor for DukeException for invalid descriptions."},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"     * @param keyword String keyword of input."},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public DukeInvalidDesException(String keyword) {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        super(\"This is a Duke missing description exception.\");"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        message \u003d super.getMessage() + \" \";"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        switch(keyword) {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        case \"DONE\":"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DONE is invalid.\\n\""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a valid task number?\";"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        case \"DEADLINE\":"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DEADLINE is invalid.\\n\""},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a /by ?\";"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        case \"EVENT\":"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for EVENT is invalid.\\n\""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified an /at ?\";"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        case \"DELETE\":"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DELETE is invalid.\\n\""},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"                + \"Have you specified an existing task number?\";"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        default:"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your description is invalid.\";"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"     * Returns message of the invalid description exception."},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"     * @return Message of the invalid description exception."},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":45}},{"path":"src/main/java/duke/exceptions/DukeMissingDesException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public class DukeMissingDesException extends DukeException{"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    private String keyword;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"    private String message;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"     * Constructor for DukeException for missing descriptions."},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"     * @param keyword String keyword of input."},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public DukeMissingDesException(String keyword) {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        super(\"This is a Duke missing description exception.\");"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        message \u003d super.getMessage() + \" \";"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        switch(keyword) {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        case \"DONE\":"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DONE is empty.\\n\""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task number?\";"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        case \"DELETE\":"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DELETE is empty.\\n\""},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task number?\";"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        case \"DEADLINE\":"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DEADLINE is empty.\\n\""},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task description?\";"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        case \"EVENT\":"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for EVENT is empty.\\n\""},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task description?\";"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        case \"TODO\":"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for TODO is empty.\\n\""},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task description?\";"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        default:"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request is missing a description.\";"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"     * Returns message of the missing description exception."},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"     * @return Message of the missing description exception."},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":47}},{"path":"src/main/java/duke/handler/ByeHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"public class ByeHandler implements CommandHandler{"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    private static String RESPONSE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        ui.respond(RESPONSE);"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof ByeHandler) {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":26}},{"path":"src/main/java/duke/handler/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"public interface CommandHandler {"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList);"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":9}},{"path":"src/main/java/duke/handler/DeadlineHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Deadline;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"public class DeadlineHandler implements CommandHandler {"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    private Deadline toAdd;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    private String response;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    public DeadlineHandler(String deadlineDes, LocalDateTime dateTimeBy) {"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        toAdd \u003d new Deadline(deadlineDes, dateTimeBy);"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    public Deadline getDeadlineTask() {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        return toAdd;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        taskList.addTask(toAdd);"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"        response \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"                + \" \" + toAdd + \"\\n\""},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"                + \"Now you have \" + taskList.getNumOfTasks() + \" tasks in the list.\\n\";"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        ui.respond(response);"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"        storage.addTask(toAdd);"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof  DeadlineHandler) {"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"            return toAdd.equals(((DeadlineHandler) obj).getDeadlineTask());"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":42}},{"path":"src/main/java/duke/handler/DeleteHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"public class DeleteHandler implements CommandHandler{"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    private int taskNum;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    private String response;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    public DeleteHandler(int taskNum) {"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        this.taskNum \u003d taskNum;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    public int getTaskNum() {"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"        return taskNum;"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        Task task \u003d taskList.getTask(taskNum);"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        taskList.removeTask(taskNum);"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        response \u003d \"Noted. I\u0027ve removed this task: \\n\""},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"                + \" \" + task + \"\\n\";"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        ui.respond(response);"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        storage.delete(taskNum);"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof  DeleteHandler) {"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            return taskNum \u003d\u003d ((DeleteHandler)obj).getTaskNum();"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":40}},{"path":"src/main/java/duke/handler/DoneHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeInvalidDesException;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"public class DoneHandler implements CommandHandler{"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    private int taskNum;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    private String response;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public DoneHandler(int taskNum) {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        this.taskNum \u003d taskNum;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    public int getTaskNum() {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        return taskNum;"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        taskList.markDone(taskNum);"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        Task updatedTask \u003d taskList.getTask(taskNum);"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"        response \u003d \"Nice! I\u0027ve marked this task as done: \\n\""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"                + \" \" + updatedTask+ \"\\n\";"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        ui.respond(response);"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        storage.markDoneInStorage(updatedTask, taskNum);"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof  DoneHandler) {"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"            return taskNum \u003d\u003d ((DoneHandler)obj).getTaskNum();"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":41}},{"path":"src/main/java/duke/handler/EventHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"public class EventHandler implements CommandHandler {"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    private Event toAdd;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    private String response;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    public EventHandler(String eventDes, LocalDateTime dateTimeAt) {"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        toAdd \u003d new Event(eventDes, dateTimeAt);"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    public Event getEventTask() {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        return toAdd;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        taskList.addTask(toAdd);"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        response \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"                + \" \" + toAdd + \"\\n\""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"                + \"Now you have \" + taskList.getNumOfTasks() + \" tasks in the list.\\n\";"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        ui.respond(response);"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        storage.addTask(toAdd);"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof  EventHandler) {"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"            return toAdd.equals(((EventHandler) obj).getEventTask());"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":41}},{"path":"src/main/java/duke/handler/FindHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"public class FindHandler implements CommandHandler{"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"    String findWord \u003d \"\";"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    String response \u003d\"\";"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public FindHandler(String findWord) {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        this.findWord \u003d findWord;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        response \u003d taskList.findTaskWith(findWord);"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"        ui.respond(response);"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":19}},{"path":"src/main/java/duke/handler/ListHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"public class ListHandler implements CommandHandler{"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"    private String response \u003d\"\";"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        response +\u003d taskList.toString();"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        ui.respond(response);"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof ListHandler) {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":26}},{"path":"src/main/java/duke/handler/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.*;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Todo;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\" d.MMM.yyyy HH:mm\");"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    public static Task parseFromData(String dataInput) {"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"        String[] splitInput \u003d dataInput.split(\"\\\\|\", -1);"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        Task task;"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        switch (splitInput[0]) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        case \"T\":"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            task \u003d new Todo(splitInput[2]);"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        case \"D\":"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"            task \u003d new Deadline(splitInput[2], LocalDateTime.parse(splitInput[3]));"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        case \"E\":"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"            task \u003d new Event(splitInput[2], LocalDateTime.parse(splitInput[3]));"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"        default:"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"            throw new IllegalStateException(\"Unexpected value: \" + splitInput[0]);"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        return splitInput[1].equals(\"X\")"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"                ? task.markDone()"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"                : task;"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"    public static CommandHandler parseFromInput(String userInput) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"        String keyword_UC \u003d userInput.toUpperCase().split(\" \", -1)[0];"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        Queries query;"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        CommandHandler commandHandler \u003d null;"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"        if (Queries.containsValue(keyword_UC)) {"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"            query \u003d Queries.valueOf(keyword_UC);"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"            throw new DukeIDKException();"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"            switch(query) {"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"            case BYE:"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d new ByeHandler();"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"            case TODO:"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"                String todoDes \u003d userInput.split(\" \", 2)[1];"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d new TodoHandler(todoDes);"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"            case DEADLINE:"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"                String[] dInfo \u003d userInput.split(\" \", 2);"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"                if (dInfo[1].contains(\"/by\")) {"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"                    dInfo \u003d dInfo[1].split(\"/by\");"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"                } else {"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"                    throw new DukeInvalidDesException(keyword_UC);"},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"                LocalDateTime dateTimeBy \u003d LocalDateTime.parse(dInfo[1], DATE_TIME_FORMATTER);"},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"                String deadlineDes \u003d dInfo[0];"},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d new DeadlineHandler(deadlineDes, dateTimeBy);"},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"            case EVENT:"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"                String[] eInfo \u003d userInput.split(\" \", 2);"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"                if (eInfo[1].contains(\"/at\")) {"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"                    eInfo \u003d eInfo[1].split((\"/at\"));"},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"                } else {"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"                    throw new DukeInvalidDesException(keyword_UC);"},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"                LocalDateTime dateTimeAt \u003d LocalDateTime.parse(eInfo[1], DATE_TIME_FORMATTER);"},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"                String eventDes \u003d eInfo[0];"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d new EventHandler(eventDes, dateTimeAt);"},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"            case FIND:"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"                String findWord \u003d userInput.split(\" \", 2)[1];"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d new FindHandler(findWord);"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":"            case DONE:"},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"                int doneNum \u003d Integer.parseInt(userInput.split(\" \")[1]);"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d new DoneHandler(doneNum);"},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"            case DELETE:"},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":"                int deleteNum \u003d Integer.parseInt(userInput.split(\" \")[1]);"},{"lineNumber":88,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d new DeleteHandler(deleteNum);"},{"lineNumber":89,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":90,"author":{"gitId":"nowknowing"},"content":"            case LIST:"},{"lineNumber":91,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d new ListHandler();"},{"lineNumber":92,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":93,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"nowknowing"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":95,"author":{"gitId":"nowknowing"},"content":"            throw new DukeMissingDesException(query.toString());"},{"lineNumber":96,"author":{"gitId":"nowknowing"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e){"},{"lineNumber":97,"author":{"gitId":"nowknowing"},"content":"            throw new DukeInvalidDesException(query.toString());"},{"lineNumber":98,"author":{"gitId":"nowknowing"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":99,"author":{"gitId":"nowknowing"},"content":"            throw new DukeDateTimeException();"},{"lineNumber":100,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"nowknowing"},"content":"        return commandHandler;"},{"lineNumber":102,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":103}},{"path":"src/main/java/duke/handler/Queries.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public enum Queries {"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"    DEADLINE,"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"    EVENT,"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    LIST,"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"    FIND,"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    DONE,"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    DELETE,"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    BYE;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public static boolean containsValue(String value) {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        for (Queries query : Queries.values()) {"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"            if (query.name().equals(value)) {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"                return true;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        return false;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":21}},{"path":"src/main/java/duke/handler/TodoHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Todo;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"public class TodoHandler implements CommandHandler {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    Todo toAdd;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    String response;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public TodoHandler(String todoDes) {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        toAdd \u003d new Todo(todoDes);"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    public Todo getTodoTask() {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        return toAdd;"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    public void execute(Ui ui, Storage storage, TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        taskList.addTask(toAdd);"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        response \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"                + \" \" + toAdd + \"\\n\""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"                + \"Now you have \" + taskList.getNumOfTasks() + \" tasks in the list.\\n\";"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        ui.respond(response);"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        storage.addTask(toAdd);"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof  TodoHandler) {"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"            return toAdd.equals(((TodoHandler) obj).getTodoTask());"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"}"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":""}],"authorContributionMap":{"nowknowing":42}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":" * Deadline class that represents tasks with a deadline."},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"public class Deadline extends Task{"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    private static final String TYPE \u003d \"DEADLINE\";"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    protected LocalDateTime by;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"     * Default constructor."},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"     * @param description string content of the deadlined task."},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"     * @param by deadline of task."},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    public Deadline(String description, LocalDateTime by) {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        super(description, TYPE);"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        this.by \u003d by;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"     * Returns deadline of task."},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"     * @return deadline of task."},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    public LocalDateTime getBy() {"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        return by;"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    public boolean equals (Object obj) {"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof  Deadline) {"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            Deadline dTask \u003d (Deadline) obj;"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"            return this.description.equals(dTask.getDescription())"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"                    \u0026\u0026 this.by.equals(((Deadline) dTask).getBy());"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"        return \"[D]\" + super.toString()"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"                + \"(by:\" + by.format(super.DATE_TIME_FORMATTER) + \")\";"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":" }"}],"authorContributionMap":{"nowknowing":48}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"    private static final String TYPE \u003d \"EVENT\";"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    protected LocalDateTime at;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"     * Event class that represents event tasks."},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"     * @param description string content of event task."},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"     * @param at dateTime of event."},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    public Event(String description, LocalDateTime at) {"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        super(description, TYPE);"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        this.at \u003d at;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"     * Returns date time of event."},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"     * @return dateTime of event."},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    public LocalDateTime getAt() {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        return at;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof  Event) {"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"            Event eTask \u003d (Event) obj;"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            return this.description.equals(eTask.getDescription())"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"                    \u0026\u0026 this.at.equals(eTask.getAt());"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        return \"[E]\" + super.toString()"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"                + \"(at:\" + at.format(super.DATE_TIME_FORMATTER) + \")\";"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":45}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":" * Abstract class to be extended from, for all tasks."},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    protected String type;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    protected static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\" d.MMM.yyyy HH:mm\");"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"     * Constructor to be shared by extending classes."},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"     * @param description string content of task."},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"     * @param type string type of task."},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    public Task(String description, String type) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        this.type \u003d type;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"     * Marks task as done."},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"     * @return task marked done."},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    public Task markDone() {"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"        this.isDone \u003d true;"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        return this;"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"     * Checks if task is done."},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"     * @return boolean value of task being done."},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"    public boolean isDone() {"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        return isDone;"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"     * Returns a status icon, depicting whether task is done."},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"     * @return \"X\" if done, \" \" if undone."},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"    public String getStatusIcon() {"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or X symbols"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"     * Returns type of task."},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"     * @return type of task."},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"    public String getType() {"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"        return type;"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"     * Returns description of task."},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"     * @return description of task."},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"    public String getDescription() {"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"        return description;"},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":70}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":" * TaskList class that handles list of tasks."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"     * Default constructor."},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"     * Adds task to the list of tasks."},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"     * @param task task to be added."},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    public void addTask(Task task) {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        tasks.add(task);"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"     * Removes task from the list of tasks"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"     * @param taskIndex task to be removed."},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    public void removeTask(int taskIndex) {"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        tasks.remove(taskIndex - 1);"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"     * Marks a given task as done."},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"     * @param taskIndex task to be marked done."},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    public void markDone(int taskIndex) {"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        Task task \u003d tasks.get(taskIndex - 1);"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"        Task updatedTask \u003d task.markDone();"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        updateTask(taskIndex, updatedTask);"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"     * Updates task with newly given task."},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"     * @param taskIndex index of task to be updated."},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"     * @param task new task to update with."},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"    private void updateTask(int taskIndex, Task task) {"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"        tasks.set(taskIndex - 1, task);"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"     * Returns the number of tasks in the list."},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"     * @return number of tasks in list."},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"    public int getNumOfTasks() {"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"        return tasks.size();"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"     * Return the requested task."},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"     * @param taskIndex index of the task requested."},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"     * @return requested task."},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"    public Task getTask(int taskIndex) {"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"        return tasks.get(taskIndex - 1);"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"    public String findTaskWith(String findWord) {"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"        String s \u003d\"\";"},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"            Task t \u003d tasks.get(i);"},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"            if (t.toString().contains(findWord)) {"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"                s +\u003d Integer.toString(i + 1) + \".\""},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"                        + t + \"\\n\";"},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"        return s;"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"        String s \u003d \"\";"},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":"            Task t \u003d tasks.get(i);"},{"lineNumber":88,"author":{"gitId":"nowknowing"},"content":"            s +\u003d Integer.toString(i + 1) + \".\""},{"lineNumber":89,"author":{"gitId":"nowknowing"},"content":"                    + t + \"\\n\";"},{"lineNumber":90,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"nowknowing"},"content":"        return s;"},{"lineNumber":92,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":93}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":" * Class representing tasks with only descriptions."},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"public class Todo extends Task{"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    private static final String TYPE \u003d \"TODO\";"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"     * Default consturctor"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"     * @param description description of task."},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        super(description, TYPE);"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof  Todo) {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"            return this.description.equals(((Todo) obj).getDescription());"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":32}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeInvalidDesException;"},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.handler.CommandHandler;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.handler.DeleteHandler;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"public class DukeTest {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public void testCheckDeleteDonePossible() {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        assertThrows(DukeInvalidDesException.class,"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"                () -\u003e { Duke.checkDeleteDonePossible(new DeleteHandler(2),tasks);"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"                });"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":"import duke.handler.*;"},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public void testParseFromInput() throws DukeException {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        CommandHandler cmdHandler \u003d Parser.parseFromInput(\"todo testing\");"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new TodoHandler(\"testing\"), cmdHandler);"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"deadline testing /by 01.Feb.2021 23:59\");"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new DeadlineHandler(\"testing \", LocalDateTime.parse(\"2021-02-01T23:59:00\")),"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"                cmdHandler);"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"event testing /at 01.Feb.2021 23:59\");"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new EventHandler(\"testing \", LocalDateTime.parse(\"2021-02-01T23:59:00\")),"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"                cmdHandler);"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"list\");"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new ListHandler(), cmdHandler);"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"done 2\");"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new DoneHandler(2), cmdHandler);"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"delete 2\");"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new DeleteHandler(2), cmdHandler);"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"bye\");"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new ByeHandler(), cmdHandler);"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"deadline Return book /by 8 June"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":"event Attend meeting /at 9 June 8am"},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"todo Have dinner"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"list"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"list"}],"authorContributionMap":{"nowknowing":6}}]
