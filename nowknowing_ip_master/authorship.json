[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"    archiveBaseName \u003d \"DukeLukeMuke\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"    archiveVersion \u003d \"v0.3\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nowknowing":19,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"# User Guide for DukeLukeMuke"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":"DukeLukeMuke is a **desktop app for managing tasks**, with a simple GUI and CLI-like commands."},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"## Quick Start"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"1. Download the latest DukeLukeMuke.jar from [here](https://github.com/nowknowing/ip/releases/tag/A-Release)."},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"1. Copy the file to the folder you want to use as the home folder for your DukeLukeMuke."},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"1. Type the command in the command box and press Enter to execute it."},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"1. Refer to the Features below for details of each command."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"## Feature Overview"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"1. Adding a single task:"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    1. Todo"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    1. Deadline"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    1. Event"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"1. Adding recurring tasks:"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    1. Schedule"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"1. Listing all tasks"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"1. Deleting a task"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"1. Marking a task as done"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"1. Finding tasks"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"1. Exiting program"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"Command format:"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"1. Words in UPPER_CASE are parameters supplied by the user"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"2. Parameters starting with DATETIME must be in the format:"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"   dd-MMM-yyyy HH:mm, where"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"   a. dd is the date as a valid integer (e.g. 28, 03, 1)"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"   b. MMM is the month as a 3-letter capitalised string (e.g. Jan, Feb)"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"   c. yyyy is the year as a valid integer (e.g. 2020)"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"   d. HH:mm is the time in 24 hour format (e.g. 15:00 for 3:00pm)"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"### Adding a single Todo task: `todo`"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"Adds a to-do task."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"Format:"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"todo DESCRIPTION"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"Examples:"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"todo read"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"todo Buy broccoli"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"### Adding a single Deadline task: `deadline`"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"Adds a task, with a specification of when it is due."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"Format:"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"deadline DESCRIPTION /by DATETIME"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"Examples:"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"deadline Submit /by 01.Jan.2021 23:59"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"deadline Reply John’s email /by 01.Jan.2021 13:00"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"### Adding a single Event task: `event`"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"Adds a task, with a specification of when it occurs."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"Format:"},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"event DESCRIPTION /at DATETIME"},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"Examples:"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"event Interview /by 01.Mar.2021 12:00"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"event CS2103T make-up tutorial /at 01.Apr.2021 16:00"},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"### Adding recurring tasks: `schedule`"},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"Adds multiple tasks, at recurring intervals. For now, only weekly intervals are allowed."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"There are two types of tasks that can recur: `Deadline` and `Event`."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"Format:"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"//add recurring deadline tasks"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"scheudle NO_OF_WEEKS weekly deadline DESCRIPTION /by DATETIME"},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"//adds recurring event tasks"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"scheudle NO_OF_WEEKS weekly event DESCRIPTION /at DATETIME"},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"Examples:"},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":88,"author":{"gitId":"nowknowing"},"content":"// add deadlined task for 13 weeks from starting date"},{"lineNumber":89,"author":{"gitId":"nowknowing"},"content":"schedule 13 weekly deadline Lab submission /by 1.Feb.2021 23:59"},{"lineNumber":90,"author":{"gitId":"nowknowing"},"content":"// add event for 13 weeks from starting date."},{"lineNumber":91,"author":{"gitId":"nowknowing"},"content":"schedule 13 weekly event CS2103T tutorial /at 25.Jan.2021 10:00"},{"lineNumber":92,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":93,"author":{"gitId":"nowknowing"},"content":"Response:"},{"lineNumber":94,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":95,"author":{"gitId":"nowknowing"},"content":"Got it. I\u0027ve added this recurring task:"},{"lineNumber":96,"author":{"gitId":"nowknowing"},"content":"  [D][ ] Lab submission (by: 1.Feb.2021 23:59)"},{"lineNumber":97,"author":{"gitId":"nowknowing"},"content":"for 13 weeks."},{"lineNumber":98,"author":{"gitId":"nowknowing"},"content":"Now you have 13 tasks in the list."},{"lineNumber":99,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":100,"author":{"gitId":"nowknowing"},"content":"### Listing all tasks: `task`"},{"lineNumber":101,"author":{"gitId":"nowknowing"},"content":"Shows a list of all tasks."},{"lineNumber":102,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":103,"author":{"gitId":"nowknowing"},"content":"Format: `list`"},{"lineNumber":104,"author":{"gitId":"nowknowing"},"content":"### Deleting a task: `delete`"},{"lineNumber":105,"author":{"gitId":"nowknowing"},"content":"Deletes the task at the specified INDEX."},{"lineNumber":106,"author":{"gitId":"nowknowing"},"content":"The INDEX refers to the index number shown in the list of tasks,"},{"lineNumber":107,"author":{"gitId":"nowknowing"},"content":"which is retrievable with `list`."},{"lineNumber":108,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":109,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":110,"author":{"gitId":"nowknowing"},"content":"Format: `delete INDEX`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"nowknowing"},"content":"Example:"},{"lineNumber":113,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":114,"author":{"gitId":"nowknowing"},"content":"// to delete the first task"},{"lineNumber":115,"author":{"gitId":"nowknowing"},"content":"delete 1"},{"lineNumber":116,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":117,"author":{"gitId":"nowknowing"},"content":"### Marking a task as done: `done`"},{"lineNumber":118,"author":{"gitId":"nowknowing"},"content":"Marks the task at the specified INDEX, as done. "},{"lineNumber":119,"author":{"gitId":"nowknowing"},"content":"The INDEX refers to the index number shown in the list of tasks,"},{"lineNumber":120,"author":{"gitId":"nowknowing"},"content":"which is retrievable with `list`."},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"nowknowing"},"content":"Format: `done INDEX`"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"nowknowing"},"content":"Example:"},{"lineNumber":125,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":126,"author":{"gitId":"nowknowing"},"content":"// to mark the first task as done"},{"lineNumber":127,"author":{"gitId":"nowknowing"},"content":"done 1"},{"lineNumber":128,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":129,"author":{"gitId":"nowknowing"},"content":"Response:"},{"lineNumber":130,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":131,"author":{"gitId":"nowknowing"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":132,"author":{"gitId":"nowknowing"},"content":"  [T][X] read book"},{"lineNumber":133,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"nowknowing"},"content":"### Finding tasks: `find`"},{"lineNumber":136,"author":{"gitId":"nowknowing"},"content":"Find all tasks containing a particular keyword."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"nowknowing"},"content":"Format: `find KEYWORD`"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"nowknowing"},"content":"Example:"},{"lineNumber":141,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":142,"author":{"gitId":"nowknowing"},"content":"find submission"},{"lineNumber":143,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"nowknowing"},"content":"Response:"},{"lineNumber":146,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":147,"author":{"gitId":"nowknowing"},"content":" 3. [D][✗] Lab submission (by: 12.Feb.2021  23:59)"},{"lineNumber":148,"author":{"gitId":"nowknowing"},"content":" 7. [T][ ] Resume submission (at: 01.Mar.2021 10:00)"},{"lineNumber":149,"author":{"gitId":"nowknowing"},"content":"```"},{"lineNumber":150,"author":{"gitId":"nowknowing"},"content":"### Exiting program: `bye`"},{"lineNumber":151,"author":{"gitId":"nowknowing"},"content":"Exits the program and closes the application window."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"nowknowing"},"content":"Format: `bye`"}],"authorContributionMap":{"nowknowing":135,"-":18}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":59}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"public class Main extends Application {"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    private static final String STORAGE_PATH \u003d \"data/tasks.txt\";"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    private Duke duke \u003d new Duke(STORAGE_PATH);"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    public void start(Stage stage) {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"            stage.setScene(scene);"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"            stage.setTitle(\"DukeLukeMuke\");"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            stage.show();"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            e.printStackTrace();"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":28}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":"import javafx.application.Platform;"},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/UserIcon.png\"));"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/BotIcon.png\"));"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"     * Initializes the main window."},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"                DialogBox.getDukeDialog("},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"                        \"Hello! I\u0027m Duke!\\n\" + \"What can I do for you?\", dukeImage)"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        );"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"        duke \u003d d;"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"    private void handleUserInput() throws InterruptedException {"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"        );"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"        userInput.clear();"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"        if (duke.isExit()) {"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"            // HOW TO PAUSE??"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"            Platform.exit();"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":62}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeInvalidDesException;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.handler.ByeHandler;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import duke.handler.CommandHandler;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import duke.handler.DeleteHandler;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"import duke.handler.DoneHandler;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"import duke.handler.Parser;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":" * Main class for Duke."},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\" d.MMM.yyyy HH:mm\");"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    private static final String STORAGE_PATH \u003d \"data/tasks.txt\";"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    private Storage storage;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    private TaskList tasks;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"     * Class constructor taking in String storagePath."},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"     * @param storagePath path to the storage of data."},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"    public Duke(String storagePath) {"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        storage \u003d new Storage(storagePath);"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        tasks \u003d storage.load();"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"     * Returns the response given an input."},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"     * @param input The user input."},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"     * @return The respective response."},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    public String getResponse(String input) {"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"        boolean toString \u003d true;"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"            CommandHandler commandHandler \u003d Parser.parseFromInput(input);"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"            checkDeleteDonePossible(commandHandler, tasks);"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"            String output \u003d commandHandler.execute(storage, tasks);"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"            if (commandHandler instanceof ByeHandler) {"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"                isExit \u003d true;"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"            return output;"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"            String errorOutput \u003d e.getMessage();"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"            return errorOutput;"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"     * Checks if Done or Delete command an be called based on"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"     * the number of tasks available, and the parsed request."},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"     * @param commandHandler commandHandler of Done or Delete, with task index."},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"     * @param taskList list of tasks."},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"     * @throws DukeInvalidDesException If command task number \u003e number of tasks."},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"    public static void checkDeleteDonePossible(CommandHandler commandHandler, TaskList taskList)"},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"            throws DukeInvalidDesException {"},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"        if (commandHandler instanceof DoneHandler) {"},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"            if (((DoneHandler) commandHandler).getTaskNum() \u003e taskList.getNumOfTasks()) {"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"                throw new DukeInvalidDesException(\"DONE\");"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"        } else if (commandHandler instanceof DeleteHandler) {"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"            if (((DeleteHandler) commandHandler).getTaskNum() \u003e taskList.getNumOfTasks()) {"},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"                throw new DukeInvalidDesException(\"DELETE\");"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"     * Returns the boolean value of whether program is to exit."},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"     * @return true if ready to exit."},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"    public boolean isExit() {"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"        return isExit;"},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nowknowing":81,"-":2}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"import duke.handler.Parser;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Deadline;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Event;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":" * Storage class that handles the loading of data from data file"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":" * and updating of task information in data file."},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"public class Storage {"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    private static String storagePath;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    private static final int MARK_INDEX \u003d 2;"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"     * Default constructor for Storage."},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"     * @param storagePath path to the storage file."},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    public Storage(String storagePath) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        this.storagePath \u003d storagePath;"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"     * Loads data from the storage file."},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"     * @return List of tasks."},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    public TaskList load() {"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        Scanner dataReader \u003d null;"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"            File file \u003d new File(storagePath);"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"            file.createNewFile();"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"            dataReader \u003d new Scanner(file);"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"            while (dataReader.hasNextLine()) {"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"                Task task \u003d Parser.parseFromData(dataReader.nextLine());"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"                tasks.addTask(task);"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"            return tasks;"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"            System.out.println(\"File did not load\");"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"        } finally {"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"            dataReader.close();"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"        return tasks;"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"     * Writes new tasks into the storage file."},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"     * @param task task to be added to the storage file."},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"    public void addTask(Task task) {"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"            FileWriter fw \u003d new FileWriter(storagePath, true);"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"            String toWrite \u003d \"\";"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"            switch(task.getType()) {"},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"            case \"TODO\":"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"                toWrite \u003d String.format(\"%c|%c|%s\","},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"                        \u0027T\u0027,"},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"                        task.isDone() ? \u0027X\u0027 : \u0027 \u0027,"},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"                        task.getDescription());"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"            case \"DEADLINE\":"},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"                toWrite \u003d String.format(\"%c|%c|%s|%s\","},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"                        \u0027D\u0027,"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"                        task.isDone() ? \u0027X\u0027 : \u0027 \u0027,"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"                        task.getDescription(), ("},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":"                                (Deadline) task).getBy().toString());"},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"            case \"EVENT\":"},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"                toWrite \u003d String.format(\"%c|%c|%s|%s\","},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"                        \u0027E\u0027,"},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":"                        task.isDone() ? \u0027X\u0027 : \u0027 \u0027,"},{"lineNumber":88,"author":{"gitId":"nowknowing"},"content":"                        task.getDescription(), ("},{"lineNumber":89,"author":{"gitId":"nowknowing"},"content":"                                (Event) task).getAt().toString());"},{"lineNumber":90,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":91,"author":{"gitId":"nowknowing"},"content":"            default:"},{"lineNumber":92,"author":{"gitId":"nowknowing"},"content":"                System.out.println(\"Unknown task requested to add to Storage\");"},{"lineNumber":93,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"nowknowing"},"content":"            fw.write(toWrite + \"\\n\");"},{"lineNumber":95,"author":{"gitId":"nowknowing"},"content":"            fw.close();"},{"lineNumber":96,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":97,"author":{"gitId":"nowknowing"},"content":"            System.out.println(\"File could not be written to. Could not add task.\");"},{"lineNumber":98,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":101,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"nowknowing"},"content":"     * Marks the certain task as done in the storage file."},{"lineNumber":103,"author":{"gitId":"nowknowing"},"content":"     * @param task task be marked."},{"lineNumber":104,"author":{"gitId":"nowknowing"},"content":"     * @param taskNum task index(from 1) in relation to the number of tasks"},{"lineNumber":105,"author":{"gitId":"nowknowing"},"content":"     *                in the storage file."},{"lineNumber":106,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"nowknowing"},"content":"    public void markDoneInStorage(Task task, int taskNum) {"},{"lineNumber":108,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"nowknowing"},"content":"            Path path \u003d Paths.get(storagePath);"},{"lineNumber":110,"author":{"gitId":"nowknowing"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"},{"lineNumber":111,"author":{"gitId":"nowknowing"},"content":"            String line \u003d lines.get(taskNum - 1);"},{"lineNumber":112,"author":{"gitId":"nowknowing"},"content":"            StringBuilder updatedLine \u003d new StringBuilder(line);"},{"lineNumber":113,"author":{"gitId":"nowknowing"},"content":"            updatedLine.setCharAt(MARK_INDEX, \u0027X\u0027);"},{"lineNumber":114,"author":{"gitId":"nowknowing"},"content":"            lines.set(taskNum - 1, updatedLine.toString());"},{"lineNumber":115,"author":{"gitId":"nowknowing"},"content":"            Files.write(path, lines, StandardCharsets.UTF_8);"},{"lineNumber":116,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":117,"author":{"gitId":"nowknowing"},"content":"            System.out.println(\"Fail to mark done in storage file.\");"},{"lineNumber":118,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":121,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"nowknowing"},"content":"     * Deletes the nth task of the list of tasks."},{"lineNumber":123,"author":{"gitId":"nowknowing"},"content":"     * @param taskNum nth task to be removed from the list of tasks"},{"lineNumber":124,"author":{"gitId":"nowknowing"},"content":"     *                in the storage file."},{"lineNumber":125,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"nowknowing"},"content":"    public void delete(int taskNum) {"},{"lineNumber":127,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":128,"author":{"gitId":"nowknowing"},"content":"            Path path \u003d Paths.get(storagePath);"},{"lineNumber":129,"author":{"gitId":"nowknowing"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"},{"lineNumber":130,"author":{"gitId":"nowknowing"},"content":"            lines.remove(taskNum - 1);"},{"lineNumber":131,"author":{"gitId":"nowknowing"},"content":"            Files.write(path, lines, StandardCharsets.UTF_8);"},{"lineNumber":132,"author":{"gitId":"nowknowing"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitId":"nowknowing"},"content":"            System.out.println(\"Fail to delete item in storage file.\");"},{"lineNumber":134,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":136}},{"path":"src/main/java/duke/exceptions/DukeDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public class DukeDateTimeException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    private String message;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"     * Constructor for DukeException for invalid date time format."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    public DukeDateTimeException() {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        super(\"This is a Duke DateTime exception\");"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"        message \u003d super.getMessage() + \" \""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"                + \"Your date/time description\\n\""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"                + \"does not match the dd.MMM.yyyy HH:mm format.\";"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"     * Returns message of invalid date time format."},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"     * @return Message of invalid date time format."},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":24}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":" * Custom exception for the Duke app."},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    private String message \u003d \"OOPS!\";"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    public DukeException(String s) {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        super(s);"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":17}},{"path":"src/main/java/duke/exceptions/DukeIdkException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public class DukeIdkException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    private String message;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"     * Constructor for DukeException for incomprehensible request."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    public DukeIdkException() {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        super(\"This is a Duke IDK exception\");"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"        message \u003d super.getMessage() + \" \""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"                + \"I don\u0027t get what you mean.\";"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"     * Returns message of the incomprehensible request."},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"     * @return Message of the incomprehensible request."},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":23}},{"path":"src/main/java/duke/exceptions/DukeInvalidDesException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public class DukeInvalidDesException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    private String keyword;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"    private String message;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"     * Constructor for DukeException for invalid descriptions."},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"     * @param keyword String keyword of input."},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public DukeInvalidDesException(String keyword) {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        super(\"This is a Duke missing description exception.\");"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        message \u003d super.getMessage() + \" \";"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        switch(keyword) {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        case \"DONE\":"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DONE is invalid.\\n\""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a valid task number?\";"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        case \"DEADLINE\":"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DEADLINE is invalid.\\n\""},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a /by ?\";"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        case \"EVENT\":"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for EVENT is invalid.\\n\""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified an /at ?\";"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        case \"DELETE\":"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DELETE is invalid.\\n\""},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified an existing task number?\";"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        case \"SCHEDULE\":"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for SCHEDULE is invalid.\\n\""},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"                    + \"Is it of the format:\\n\""},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"                    + \"schedule [no. of times] weekly [Schedulable task] ?\";"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        default:"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your description is invalid.\";"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"     * Returns message of the invalid description exception."},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"     * @return Message of the invalid description exception."},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":50}},{"path":"src/main/java/duke/exceptions/DukeMissingDesException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public class DukeMissingDesException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    private String keyword;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"    private String message;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"     * Constructor for DukeException for missing descriptions."},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"     * @param keyword String keyword of input."},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public DukeMissingDesException(String keyword) {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        super(\"This is a Duke missing description exception.\");"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        message \u003d super.getMessage() + \" \";"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        switch(keyword) {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        case \"DONE\":"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DONE is empty.\\n\""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task number?\";"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        case \"DELETE\":"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DELETE is empty.\\n\""},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task number?\";"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        case \"DEADLINE\":"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for DEADLINE is empty.\\n\""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task description?\";"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        case \"EVENT\":"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for EVENT is empty.\\n\""},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task description?\";"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        case \"TODO\":"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for TODO is empty.\\n\""},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified a task description?\";"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        case \"SCHEDULE\":"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request for SCHEDULE is missnig.\\n\""},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"                    + \"Have you specified: Schedule W [no. of times] [command] ?\";"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        default:"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"            message +\u003d \"Your request is missing a description.\";"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"     * Returns message of the missing description exception."},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"     * @return Message of the missing description exception."},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"    public String getMessage() {"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"        return message;"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":53}},{"path":"src/main/java/duke/handler/ByeHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"public class ByeHandler implements CommandHandler {"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"    private static String response \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public String execute(Storage storage, TaskList taskList) {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof ByeHandler) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":25}},{"path":"src/main/java/duke/handler/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":" * Interface for command execution."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"public interface CommandHandler {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    public String execute(Storage storage, TaskList taskList);"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":11}},{"path":"src/main/java/duke/handler/DeadlineHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Deadline;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"public class DeadlineHandler extends TaskHandler {"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    public DeadlineHandler(String deadlineDes, LocalDateTime dateTimeBy) {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        super(new Deadline(deadlineDes, dateTimeBy));"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public Deadline getDeadlineTask() {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        assert toAdd instanceof Deadline;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        return (Deadline) toAdd;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof DeadlineHandler) {"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            DeadlineHandler deadlineHandler \u003d (DeadlineHandler) obj;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"            Deadline deadlineTask \u003d deadlineHandler.getDeadlineTask();"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            return toAdd.equals(deadlineTask);"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":30}},{"path":"src/main/java/duke/handler/DeleteHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"public class DeleteHandler implements CommandHandler {"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"    private int taskNum;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    private String response;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"     * Default constructor for delete handler."},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"     * @param taskNum"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    public DeleteHandler(int taskNum) {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        this.taskNum \u003d taskNum;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"     * Returns the number of the task to be deleted."},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"     * @return The number of the task."},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    public int getTaskNum() {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        return taskNum;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    public String execute(Storage storage, TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"        Task task \u003d taskList.getTask(taskNum);"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"        taskList.removeTask(taskNum);"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        response \u003d deleteRespond(task);"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        storage.delete(taskNum);"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof DeleteHandler) {"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"            return taskNum \u003d\u003d ((DeleteHandler) obj).getTaskNum();"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"     * Returns string response for deletion."},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"     * @param toDelete Task to be deleted."},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"     * @return String response."},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"    public String deleteRespond(Task toDelete) {"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"        String deleteResponse \u003d \"Noted. I\u0027ve removed this task: \\n\""},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"                + \" \" + toDelete + \"\\n\";"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"        return deleteResponse;"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":57}},{"path":"src/main/java/duke/handler/DoneHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"public class DoneHandler implements CommandHandler {"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"    private int taskNum;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    private String response;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public DoneHandler(int taskNum) {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        this.taskNum \u003d taskNum;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    public int getTaskNum() {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        return taskNum;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    public String execute(Storage storage, TaskList taskList) {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        taskList.markDone(taskNum);"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        Task updatedTask \u003d taskList.getTask(taskNum);"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        response \u003d doneRespond(updatedTask);"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        storage.markDoneInStorage(updatedTask, taskNum);"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof DoneHandler) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            return taskNum \u003d\u003d ((DoneHandler) obj).getTaskNum();"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"     * Resturns string response for done handled."},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"     * @param doneTask The task to be marked done."},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"     * @return String response."},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    public String doneRespond(Task doneTask) {"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"        String doneResponse \u003d \"Nice! I\u0027ve marked this task as done: \\n\""},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"                + \" \" + doneTask + \"\\n\";"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"        return doneResponse;"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":49}},{"path":"src/main/java/duke/handler/EventHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"public class EventHandler extends TaskHandler {"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    public EventHandler(String eventDes, LocalDateTime dateTimeAt) {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        super(new Event(eventDes, dateTimeAt));"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public Event getEventTask() {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        assert toAdd instanceof Event;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        return (Event) toAdd;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof EventHandler) {"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            EventHandler eventHandler \u003d (EventHandler) obj;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"            Event eventTask \u003d eventHandler.getEventTask();"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            return toAdd.equals(eventTask);"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":30}},{"path":"src/main/java/duke/handler/FindHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":" * FindHandler handles the command find."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"public class FindHandler implements CommandHandler {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    private String findWord \u003d \"\";"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    private String response \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public FindHandler(String findWord) {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        this.findWord \u003d findWord;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    public String execute(Storage storage, TaskList taskList) {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        response \u003d taskList.findTaskStringWith(findWord);"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":22}},{"path":"src/main/java/duke/handler/ListHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"public class ListHandler implements CommandHandler {"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    private String response \u003d \"\";"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    public String execute(Storage storage, TaskList taskList) {"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"        response +\u003d taskList.toString();"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof ListHandler) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":25}},{"path":"src/main/java/duke/handler/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeDateTimeException;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeIdkException;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeInvalidDesException;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeMissingDesException;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Deadline;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Event;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Todo;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":" * Parser class that parses inputs and throws errors for commands that cannot be comprehended."},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\" d.MMM.yyyy HH:mm\");"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"     * Parses data into respective task."},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"     * @param dataInput Input in data file."},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"     * @return Task represented by data."},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    public static Task parseFromData(String dataInput) {"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"        String[] splitInputs \u003d dataInput.split(\"\\\\|\", -1);"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        Task task;"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        switch (splitInputs[0]) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        case \"T\":"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"            task \u003d new Todo(splitInputs[2]);"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        case \"D\":"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"            task \u003d new Deadline(splitInputs[2], LocalDateTime.parse(splitInputs[3]));"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        case \"E\":"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"            task \u003d new Event(splitInputs[2], LocalDateTime.parse(splitInputs[3]));"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        default:"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"            throw new IllegalStateException(\"Unexpected value: \" + splitInputs[0]);"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"        return splitInputs[1].equals(\"X\")"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"                ? task.markDone()"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"                : task;"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"     * Parses input from user."},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"     * @param userInput Input from user."},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"     * @return CommandHandler to handle command."},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"     * @throws DukeException When input cannot be parsed, appropriate Duke Exception thrown."},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"    public static CommandHandler parseFromInput(String userInput) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"        String keywordUppCaps \u003d userInput.toUpperCase().split(\" \", -1)[0];"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"        Queries query;"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"        CommandHandler commandHandler;"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"        if (Queries.containsValue(keywordUppCaps)) {"},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"            query \u003d Queries.valueOf(keywordUppCaps);"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"            throw new DukeIdkException();"},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"        commandHandler \u003d handlerFromQueryInput(query, userInput, keywordUppCaps);"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"        return commandHandler;"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"    private static CommandHandler handlerFromQueryInput(Queries query, String userInput, String keywordUppCaps)"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"            throws DukeException {"},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"        CommandHandler commandHandler \u003d null;"},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"            switch (query) {"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"            case BYE:"},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseBye();"},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"            case TODO:"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseTodo(userInput);"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":"            case DEADLINE:"},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseDeadline(userInput, keywordUppCaps);"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"            case EVENT:"},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseEvent(userInput, keywordUppCaps);"},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":88,"author":{"gitId":"nowknowing"},"content":"            case FIND:"},{"lineNumber":89,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseFind(userInput);"},{"lineNumber":90,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":91,"author":{"gitId":"nowknowing"},"content":"            case DONE:"},{"lineNumber":92,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseDone(userInput);"},{"lineNumber":93,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":94,"author":{"gitId":"nowknowing"},"content":"            case DELETE:"},{"lineNumber":95,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseDelete(userInput);"},{"lineNumber":96,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":97,"author":{"gitId":"nowknowing"},"content":"            case LIST:"},{"lineNumber":98,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseList();"},{"lineNumber":99,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":100,"author":{"gitId":"nowknowing"},"content":"            case SCHEDULE:"},{"lineNumber":101,"author":{"gitId":"nowknowing"},"content":"                commandHandler \u003d parseSchedule(userInput, keywordUppCaps);"},{"lineNumber":102,"author":{"gitId":"nowknowing"},"content":"                break;"},{"lineNumber":103,"author":{"gitId":"nowknowing"},"content":"            default:"},{"lineNumber":104,"author":{"gitId":"nowknowing"},"content":"                System.out.println(\"Unknown query in parser.\");"},{"lineNumber":105,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"nowknowing"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":107,"author":{"gitId":"nowknowing"},"content":"            throw new DukeMissingDesException(query.toString());"},{"lineNumber":108,"author":{"gitId":"nowknowing"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":109,"author":{"gitId":"nowknowing"},"content":"            throw new DukeInvalidDesException(query.toString());"},{"lineNumber":110,"author":{"gitId":"nowknowing"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":111,"author":{"gitId":"nowknowing"},"content":"            throw new DukeDateTimeException();"},{"lineNumber":112,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"nowknowing"},"content":"        return commandHandler;"},{"lineNumber":114,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":116,"author":{"gitId":"nowknowing"},"content":"    private static ByeHandler parseBye() {"},{"lineNumber":117,"author":{"gitId":"nowknowing"},"content":"        return new ByeHandler();"},{"lineNumber":118,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":120,"author":{"gitId":"nowknowing"},"content":"    private static TodoHandler parseTodo(String userInput) {"},{"lineNumber":121,"author":{"gitId":"nowknowing"},"content":"        String todoDes \u003d userInput.split(\" \", 2)[1];"},{"lineNumber":122,"author":{"gitId":"nowknowing"},"content":"        return new TodoHandler(todoDes);"},{"lineNumber":123,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":125,"author":{"gitId":"nowknowing"},"content":"    private static DeadlineHandler parseDeadline(String userInput,"},{"lineNumber":126,"author":{"gitId":"nowknowing"},"content":"                                                 String keywordUppCaps) throws DukeInvalidDesException {"},{"lineNumber":127,"author":{"gitId":"nowknowing"},"content":"        String[] dInfo \u003d userInput.split(\" \", 2);"},{"lineNumber":128,"author":{"gitId":"nowknowing"},"content":"        if (dInfo[1].contains(\"/by\")) {"},{"lineNumber":129,"author":{"gitId":"nowknowing"},"content":"            dInfo \u003d dInfo[1].split(\"/by\");"},{"lineNumber":130,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":131,"author":{"gitId":"nowknowing"},"content":"            throw new DukeInvalidDesException(keywordUppCaps);"},{"lineNumber":132,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"nowknowing"},"content":"        LocalDateTime dateTimeBy \u003d LocalDateTime.parse(dInfo[1], DATE_TIME_FORMATTER);"},{"lineNumber":134,"author":{"gitId":"nowknowing"},"content":"        String deadlineDes \u003d dInfo[0];"},{"lineNumber":135,"author":{"gitId":"nowknowing"},"content":"        return new DeadlineHandler(deadlineDes, dateTimeBy);"},{"lineNumber":136,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":138,"author":{"gitId":"nowknowing"},"content":"    private static EventHandler parseEvent(String userInput,"},{"lineNumber":139,"author":{"gitId":"nowknowing"},"content":"                                           String keywordUppCaps) throws DukeInvalidDesException {"},{"lineNumber":140,"author":{"gitId":"nowknowing"},"content":"        String[] eInfo \u003d userInput.split(\" \", 2);"},{"lineNumber":141,"author":{"gitId":"nowknowing"},"content":"        if (eInfo[1].contains(\"/at\")) {"},{"lineNumber":142,"author":{"gitId":"nowknowing"},"content":"            eInfo \u003d eInfo[1].split((\"/at\"));"},{"lineNumber":143,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":144,"author":{"gitId":"nowknowing"},"content":"            throw new DukeInvalidDesException(keywordUppCaps);"},{"lineNumber":145,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"nowknowing"},"content":"        LocalDateTime dateTimeAt \u003d LocalDateTime.parse(eInfo[1], DATE_TIME_FORMATTER);"},{"lineNumber":147,"author":{"gitId":"nowknowing"},"content":"        String eventDes \u003d eInfo[0];"},{"lineNumber":148,"author":{"gitId":"nowknowing"},"content":"        return new EventHandler(eventDes, dateTimeAt);"},{"lineNumber":149,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":151,"author":{"gitId":"nowknowing"},"content":"    private static FindHandler parseFind(String userInput) {"},{"lineNumber":152,"author":{"gitId":"nowknowing"},"content":"        String findWord \u003d userInput.split(\" \", 2)[1];"},{"lineNumber":153,"author":{"gitId":"nowknowing"},"content":"        return new FindHandler(findWord);"},{"lineNumber":154,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":156,"author":{"gitId":"nowknowing"},"content":"    private static DoneHandler parseDone(String userInput) {"},{"lineNumber":157,"author":{"gitId":"nowknowing"},"content":"        int doneNum \u003d Integer.parseInt(userInput.split(\" \")[1]);"},{"lineNumber":158,"author":{"gitId":"nowknowing"},"content":"        return new DoneHandler(doneNum);"},{"lineNumber":159,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":161,"author":{"gitId":"nowknowing"},"content":"    private static DeleteHandler parseDelete(String userInput) {"},{"lineNumber":162,"author":{"gitId":"nowknowing"},"content":"        int deleteNum \u003d Integer.parseInt(userInput.split(\" \")[1]);"},{"lineNumber":163,"author":{"gitId":"nowknowing"},"content":"        return new DeleteHandler(deleteNum);"},{"lineNumber":164,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":166,"author":{"gitId":"nowknowing"},"content":"    private static ListHandler parseList() {"},{"lineNumber":167,"author":{"gitId":"nowknowing"},"content":"        return new ListHandler();"},{"lineNumber":168,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":170,"author":{"gitId":"nowknowing"},"content":"    private static ScheduleHandler parseSchedule(String userInput, String keywordUppCaps) throws DukeException {"},{"lineNumber":171,"author":{"gitId":"nowknowing"},"content":"        String[] sInfo \u003d userInput.split(\" \", 4);"},{"lineNumber":172,"author":{"gitId":"nowknowing"},"content":"        int numOfTimes \u003d Integer.parseInt(sInfo[1]);"},{"lineNumber":173,"author":{"gitId":"nowknowing"},"content":"        String frequency \u003d sInfo[2];"},{"lineNumber":174,"author":{"gitId":"nowknowing"},"content":"        checkFreqIsWeekly(frequency, keywordUppCaps);"},{"lineNumber":175,"author":{"gitId":"nowknowing"},"content":"        String command \u003d sInfo[3];"},{"lineNumber":176,"author":{"gitId":"nowknowing"},"content":"        CommandHandler toScheduleHandler \u003d parseFromInput(command);"},{"lineNumber":177,"author":{"gitId":"nowknowing"},"content":"        checkCommandCanSchedule(toScheduleHandler, keywordUppCaps);"},{"lineNumber":178,"author":{"gitId":"nowknowing"},"content":"        return new ScheduleHandler(toScheduleHandler, frequency, numOfTimes);"},{"lineNumber":179,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":181,"author":{"gitId":"nowknowing"},"content":"    private static void checkFreqIsWeekly(String frequency, String keywordUppCaps) throws DukeInvalidDesException {"},{"lineNumber":182,"author":{"gitId":"nowknowing"},"content":"        if (!frequency.equalsIgnoreCase(\"weekly\")) {"},{"lineNumber":183,"author":{"gitId":"nowknowing"},"content":"            throw new DukeInvalidDesException(keywordUppCaps);"},{"lineNumber":184,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"nowknowing"},"content":"    private static void checkCommandCanSchedule(CommandHandler toScheduleHandler,"},{"lineNumber":187,"author":{"gitId":"nowknowing"},"content":"                                                String keywordUppCaps) throws DukeInvalidDesException {"},{"lineNumber":188,"author":{"gitId":"nowknowing"},"content":"        if (!(toScheduleHandler instanceof DeadlineHandler || toScheduleHandler instanceof EventHandler)) {"},{"lineNumber":189,"author":{"gitId":"nowknowing"},"content":"            throw new DukeInvalidDesException(keywordUppCaps);"},{"lineNumber":190,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":192}},{"path":"src/main/java/duke/handler/Queries.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"public enum Queries {"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"    DEADLINE,"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"    EVENT,"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    LIST,"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"    FIND,"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    DONE,"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    DELETE,"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    SCHEDULE,"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    BYE;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"     * Checks if given value is amongst the list of acceptable queries."},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"     * @param value The string value to be checked."},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"     * @return Boolean statuf of whether value is a found query."},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    public static boolean containsValue(String value) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        for (Queries query : Queries.values()) {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            if (query.name().equals(value)) {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"                return true;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":27}},{"path":"src/main/java/duke/handler/ScheduleHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Deadline;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Event;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"public class ScheduleHandler implements CommandHandler {"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    private CommandHandler commandHandler;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    private String frequency;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    private int numOfTimes;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"     * Default constructor for schedule handler."},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"     * @param commandHandler The command to be scheduled."},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"     * @param frequency The frequency of recurrence."},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"     * @param numOfTimes The number of times of recurrence."},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    public ScheduleHandler(CommandHandler commandHandler, String frequency, int numOfTimes) {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        this.commandHandler \u003d commandHandler;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"        this.frequency \u003d frequency;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        this.numOfTimes \u003d numOfTimes;"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"    public String execute(Storage storage, TaskList taskList) {"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        String response;"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        if (commandHandler instanceof DeadlineHandler) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            response \u003d deadlineScheduleExecute(storage, taskList);"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            assert commandHandler instanceof EventHandler;"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"            response \u003d this.eventScheduleExecute(storage, taskList);"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"     * Executes the recurring scheduling of deadline tasks."},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"     * @param storage The storage."},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"     * @param taskList The list of tasks."},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"     * @return The string response for recurrence tasks scheduled."},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"    private String deadlineScheduleExecute(Storage storage, TaskList taskList) {"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"        String response \u003d \"\";"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"        Deadline firstTask \u003d ((DeadlineHandler) commandHandler).getDeadlineTask();"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"        LocalDateTime firstTime \u003d firstTask.getBy();"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"        String taskDescription \u003d firstTask.getDescription();"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"        LocalDateTime dateTime \u003d firstTime;"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"        new DeadlineHandler(taskDescription, dateTime).execute(storage, taskList);"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"        for (int i \u003d 1; i \u003c numOfTimes; i++) {"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"            dateTime \u003d dateTime.plusDays(7);"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"            new DeadlineHandler(taskDescription, dateTime).execute(storage, taskList);"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"        response +\u003d scheduleRespond(firstTask, taskList);"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"     * Executes the recurring scheduling of events."},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"     * @param storage The storage."},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"     * @param taskList The list of tasks."},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"     * @return The string response for recurrence tasks scheduled."},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"    private String eventScheduleExecute(Storage storage, TaskList taskList) {"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"        String response \u003d \"\";"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"        Event firstTask \u003d ((EventHandler) commandHandler).getEventTask();"},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"        LocalDateTime firstTime \u003d firstTask.getAt();"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"        String taskDescription \u003d firstTask.getDescription();"},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"        LocalDateTime dateTime \u003d firstTime;"},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"        new EventHandler(taskDescription, dateTime).execute(storage, taskList);"},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"        for (int i \u003d 1; i \u003c numOfTimes; i++) {"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"            dateTime \u003d dateTime.plusDays(7);"},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"            new EventHandler(taskDescription, dateTime).execute(storage, taskList);"},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"        response +\u003d scheduleRespond(firstTask, taskList);"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"    private String scheduleRespond(Task toAdd, TaskList taskList) {"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"        assert (toAdd instanceof Deadline || toAdd instanceof Event);"},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"        String scheduleResponse \u003d \"Got it. I\u0027ve added this recurring task:\\n\""},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"                + \" \" + toAdd + \"\\n\""},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":"                + \"for \" + numOfTimes + \" weeks. \\n\""},{"lineNumber":88,"author":{"gitId":"nowknowing"},"content":"                + \"Now you have \" + taskList.getNumOfTasks() + \" tasks in the list.\\n\";"},{"lineNumber":89,"author":{"gitId":"nowknowing"},"content":"        return scheduleResponse;"},{"lineNumber":90,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":91}},{"path":"src/main/java/duke/handler/TaskHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":" * Abstract TaskHandler class"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"abstract class TaskHandler implements CommandHandler {"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    protected Task toAdd;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    protected String response;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    public TaskHandler(Task toAdd) {"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        this.toAdd \u003d toAdd;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    public String execute(Storage storage, TaskList taskList) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        taskList.addTask(toAdd);"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        response \u003d taskRespond(toAdd, taskList);"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        storage.addTask(toAdd);"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        return response;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"     * Returns the string for the task handled."},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"     * @param toAdd Task to be handled."},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"     * @param taskList The list of tasks."},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"     * @return The string response."},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    public String taskRespond(Task toAdd, TaskList taskList) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        int numOfTasks \u003d taskList.getNumOfTasks();"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        return \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"                + \" \" + toAdd + \"\\n\""},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"                + \"Now you have \" + numOfTasks + \" tasks in the list.\\n\";"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":38}},{"path":"src/main/java/duke/handler/TodoHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.handler;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.Todo;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"public class TodoHandler extends TaskHandler {"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    public TodoHandler(String todoDes) {"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"        super(new Todo(todoDes));"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    public Todo getTodoTask() {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        assert toAdd instanceof Todo;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        return (Todo) toAdd;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof TodoHandler) {"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"            TodoHandler todoHandler \u003d (TodoHandler) obj;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"            Todo todoTask \u003d todoHandler.getTodoTask();"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            return toAdd.equals(todoTask);"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"}"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":""}],"authorContributionMap":{"nowknowing":29}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":" * Deadline class that represents tasks with a deadline."},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    private static final String TYPE \u003d \"DEADLINE\";"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    protected LocalDateTime by;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"     * Default constructor."},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"     * @param description string content of the deadlined task."},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"     * @param by deadline of task."},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    public Deadline(String description, LocalDateTime by) {"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        super(description, TYPE);"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        this.by \u003d by;"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"     * Returns deadline of task."},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"     * @return deadline of task."},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"    public LocalDateTime getBy() {"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"        return by;"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    public boolean equals (Object obj) {"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof Deadline) {"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            Deadline dTask \u003d (Deadline) obj;"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"            boolean isSameDes \u003d description.equals(dTask.getDescription());"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"            boolean isSameBy \u003d by.equals(dTask.getBy());"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"            return isSameDes \u0026\u0026 isSameBy;"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"        return \"[D]\" + super.toString()"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"                + \"(by:\" + by.format(super.DATE_TIME_FORMATTER) + \")\";"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":49}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"    private static final String TYPE \u003d \"EVENT\";"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    protected LocalDateTime at;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"     * Event class that represents event tasks."},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"     * @param description string content of event task."},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"     * @param at dateTime of event."},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    public Event(String description, LocalDateTime at) {"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        super(description, TYPE);"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        this.at \u003d at;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"     * Returns date time of event."},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"     * @return dateTime of event."},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    public LocalDateTime getAt() {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        return at;"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof Event) {"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"            Event eTask \u003d (Event) obj;"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"            boolean isSameDes \u003d description.equals(eTask.getDescription());"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"            boolean isSameAt \u003d at.equals(eTask.getAt());"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"            return isSameDes \u0026\u0026 isSameAt;"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"        return \"[E]\" + super.toString()"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"                + \"(at:\" + at.format(super.DATE_TIME_FORMATTER) + \")\";"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":46}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":" * Abstract class to be extended from, for all tasks."},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    protected static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\" d.MMM.yyyy HH:mm\");"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    protected String description;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    protected String type;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"     * Constructor to be shared by extending classes."},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"     * @param description string content of task."},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"     * @param type string type of task."},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    public Task(String description, String type) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        this.type \u003d type;"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"     * Marks task as done."},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"     * @return task marked done."},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    public Task markDone() {"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"        this.isDone \u003d true;"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        return this;"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"     * Checks if task is done."},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"     * @return boolean value of task being done."},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"    public boolean isDone() {"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        return isDone;"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"     * Returns a status icon, depicting whether task is done."},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"     * @return \"X\" if done, \" \" if undone."},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"    public String getStatusIcon() {"},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or X symbols"},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"     * Returns type of task."},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"     * @return type of task."},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"    public String getType() {"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"        return type;"},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"     * Returns description of task."},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"     * @return description of task."},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"    public String getDescription() {"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"        return description;"},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":70}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":" * TaskList class that handles list of tasks."},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"     * Default constructor."},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"     * Adds task to the list of tasks."},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"     * @param task task to be added."},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"    public void addTask(Task task) {"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        tasks.add(task);"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":"     * Removes task from the list of tasks"},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"     * @param taskIndex task to be removed."},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"    public void removeTask(int taskIndex) {"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"        tasks.remove(taskIndex - 1);"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"     * Marks a given task as done."},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"     * @param taskIndex task to be marked done."},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"    public void markDone(int taskIndex) {"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        Task task \u003d tasks.get(taskIndex - 1);"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":"        Task updatedTask \u003d task.markDone();"},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        updateTask(taskIndex, updatedTask);"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"     * Updates task with newly given task."},{"lineNumber":47,"author":{"gitId":"nowknowing"},"content":"     * @param taskIndex index of task to be updated."},{"lineNumber":48,"author":{"gitId":"nowknowing"},"content":"     * @param task new task to update with."},{"lineNumber":49,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"nowknowing"},"content":"    private void updateTask(int taskIndex, Task task) {"},{"lineNumber":51,"author":{"gitId":"nowknowing"},"content":"        tasks.set(taskIndex - 1, task);"},{"lineNumber":52,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":54,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"nowknowing"},"content":"     * Returns the number of tasks in the list."},{"lineNumber":56,"author":{"gitId":"nowknowing"},"content":"     * @return number of tasks in list."},{"lineNumber":57,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"nowknowing"},"content":"    public int getNumOfTasks() {"},{"lineNumber":59,"author":{"gitId":"nowknowing"},"content":"        return tasks.size();"},{"lineNumber":60,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":62,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"nowknowing"},"content":"     * Return the requested task."},{"lineNumber":64,"author":{"gitId":"nowknowing"},"content":"     * @param taskIndex index of the task requested."},{"lineNumber":65,"author":{"gitId":"nowknowing"},"content":"     * @return requested task."},{"lineNumber":66,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"nowknowing"},"content":"    public Task getTask(int taskIndex) {"},{"lineNumber":68,"author":{"gitId":"nowknowing"},"content":"        return tasks.get(taskIndex - 1);"},{"lineNumber":69,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":71,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"nowknowing"},"content":"     * Returns the task containing given string."},{"lineNumber":73,"author":{"gitId":"nowknowing"},"content":"     * @param findWord The string searched for."},{"lineNumber":74,"author":{"gitId":"nowknowing"},"content":"     * @return The string of the task."},{"lineNumber":75,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"nowknowing"},"content":"    public String findTaskStringWith(String findWord) {"},{"lineNumber":77,"author":{"gitId":"nowknowing"},"content":"        String s \u003d \"\";"},{"lineNumber":78,"author":{"gitId":"nowknowing"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":79,"author":{"gitId":"nowknowing"},"content":"            Task t \u003d tasks.get(i);"},{"lineNumber":80,"author":{"gitId":"nowknowing"},"content":"            if (t.toString().contains(findWord)) {"},{"lineNumber":81,"author":{"gitId":"nowknowing"},"content":"                s +\u003d Integer.toString(i + 1) + \".\""},{"lineNumber":82,"author":{"gitId":"nowknowing"},"content":"                        + t + \"\\n\";"},{"lineNumber":83,"author":{"gitId":"nowknowing"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"nowknowing"},"content":"        return s;"},{"lineNumber":86,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":88,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":90,"author":{"gitId":"nowknowing"},"content":"        String s \u003d \"\";"},{"lineNumber":91,"author":{"gitId":"nowknowing"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":92,"author":{"gitId":"nowknowing"},"content":"            Task t \u003d tasks.get(i);"},{"lineNumber":93,"author":{"gitId":"nowknowing"},"content":"            s +\u003d Integer.toString(i + 1) + \".\""},{"lineNumber":94,"author":{"gitId":"nowknowing"},"content":"                    + t + \"\\n\";"},{"lineNumber":95,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"nowknowing"},"content":"        return s;"},{"lineNumber":97,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":98}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":" * Class representing tasks with only descriptions."},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"    private static final String TYPE \u003d \"TODO\";"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"     * Default consturctor"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"     * @param description description of task."},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        super(description, TYPE);"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"            return true;"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"        } else if (obj instanceof Todo) {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"            boolean isSameTodo \u003d description.equals(((Todo) obj).getDescription());"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"            return isSameTodo;"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"            return false;"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":33}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"        \u003cLabel fx:id\u003d\"dialog\""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"               style\u003d\""},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"               -fx-font-size: 12;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"               -fx-label-padding: 10;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"               -fx-background-color: wheat;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"               -fx-background-radius: 10;\""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"               text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"nowknowing":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\""},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"                style\u003d \"-fx-background-image: url(\u0027/images/background.png\u0027);\" /\u003e"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"            \u003c/content\u003e"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"nowknowing":20}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeInvalidDesException;"},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.handler.DeleteHandler;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import duke.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"public class DukeTest {"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"    public void testCheckDeleteDonePossible() {"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"        assertThrows(DukeInvalidDesException.class, ("},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"        ) -\u003e {"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":"            Duke.checkDeleteDonePossible(new DeleteHandler(2), tasks);"},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":"        });"},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":20}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":7,"author":{"gitId":"nowknowing"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"nowknowing"},"content":"import duke.handler.ByeHandler;"},{"lineNumber":9,"author":{"gitId":"nowknowing"},"content":"import duke.handler.CommandHandler;"},{"lineNumber":10,"author":{"gitId":"nowknowing"},"content":"import duke.handler.DeadlineHandler;"},{"lineNumber":11,"author":{"gitId":"nowknowing"},"content":"import duke.handler.DeleteHandler;"},{"lineNumber":12,"author":{"gitId":"nowknowing"},"content":"import duke.handler.DoneHandler;"},{"lineNumber":13,"author":{"gitId":"nowknowing"},"content":"import duke.handler.EventHandler;"},{"lineNumber":14,"author":{"gitId":"nowknowing"},"content":"import duke.handler.ListHandler;"},{"lineNumber":15,"author":{"gitId":"nowknowing"},"content":"import duke.handler.Parser;"},{"lineNumber":16,"author":{"gitId":"nowknowing"},"content":"import duke.handler.TodoHandler;"},{"lineNumber":17,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":18,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":19,"author":{"gitId":"nowknowing"},"content":"public class ParserTest {"},{"lineNumber":20,"author":{"gitId":"nowknowing"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"nowknowing"},"content":"    public void testParseFromInput() throws DukeException {"},{"lineNumber":22,"author":{"gitId":"nowknowing"},"content":"        CommandHandler cmdHandler \u003d Parser.parseFromInput(\"todo testing\");"},{"lineNumber":23,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new TodoHandler(\"testing\"), cmdHandler);"},{"lineNumber":24,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":25,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"deadline testing /by 01.Feb.2021 23:59\");"},{"lineNumber":26,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new DeadlineHandler(\"testing \", LocalDateTime.parse(\"2021-02-01T23:59:00\")),"},{"lineNumber":27,"author":{"gitId":"nowknowing"},"content":"                cmdHandler);"},{"lineNumber":28,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":29,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"event testing /at 01.Feb.2021 23:59\");"},{"lineNumber":30,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new EventHandler(\"testing \", LocalDateTime.parse(\"2021-02-01T23:59:00\")),"},{"lineNumber":31,"author":{"gitId":"nowknowing"},"content":"                cmdHandler);"},{"lineNumber":32,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":33,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"list\");"},{"lineNumber":34,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new ListHandler(), cmdHandler);"},{"lineNumber":35,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":36,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"done 2\");"},{"lineNumber":37,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new DoneHandler(2), cmdHandler);"},{"lineNumber":38,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":39,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"delete 2\");"},{"lineNumber":40,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new DeleteHandler(2), cmdHandler);"},{"lineNumber":41,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":42,"author":{"gitId":"nowknowing"},"content":"        cmdHandler \u003d Parser.parseFromInput(\"bye\");"},{"lineNumber":43,"author":{"gitId":"nowknowing"},"content":"        assertEquals(new ByeHandler(), cmdHandler);"},{"lineNumber":44,"author":{"gitId":"nowknowing"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nowknowing"},"content":""},{"lineNumber":46,"author":{"gitId":"nowknowing"},"content":"}"}],"authorContributionMap":{"nowknowing":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nowknowing"},"content":"deadline Return book /by 8 June"},{"lineNumber":2,"author":{"gitId":"nowknowing"},"content":"event Attend meeting /at 9 June 8am"},{"lineNumber":3,"author":{"gitId":"nowknowing"},"content":"todo Have dinner"},{"lineNumber":4,"author":{"gitId":"nowknowing"},"content":"list"},{"lineNumber":5,"author":{"gitId":"nowknowing"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"nowknowing"},"content":"list"}],"authorContributionMap":{"nowknowing":6}}]
