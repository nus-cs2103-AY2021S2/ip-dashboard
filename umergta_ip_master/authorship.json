[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":""},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"umergta":15,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":"Meme Bot is a chatbot-style todo list application that can manage your "},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"tasks. It can mainly handle todo, deadline and events tasks."},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"### Feature 1: `todo`"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"## Usage"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":""},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"### `todo \u003ctask name\u003e` - Adds a todo task"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":""},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"Adds a task of todo type into your task list."},{"lineNumber":13,"author":{"gitId":"umergta"},"content":""},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"Example of usage: "},{"lineNumber":15,"author":{"gitId":"umergta"},"content":""},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"![todo fork my TP](./todo.png \"todo command usage\")"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"##"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"### Feature 2: `event`"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":""},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"## Usage"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":""},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"### `event \u003ctask name\u003e /at \u003cevent date\u003e` - Adds an event task"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":""},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"Adds a task of event type into your task list."},{"lineNumber":25,"author":{"gitId":"umergta"},"content":""},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"Example of usage: "},{"lineNumber":27,"author":{"gitId":"umergta"},"content":""},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"![event go for dinner with A](./event.png \"event command usage\")"},{"lineNumber":29,"author":{"gitId":"umergta"},"content":""},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"### Feature 3: `deadline`"},{"lineNumber":31,"author":{"gitId":"umergta"},"content":""},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"## Usage"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":""},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"### `deadline \u003ctask name\u003e /by \u003cdeadline date\u003e` - Adds a deadline task"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":""},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"Adds a task of deadline type into your task list."},{"lineNumber":37,"author":{"gitId":"umergta"},"content":""},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"Example of usage: "},{"lineNumber":39,"author":{"gitId":"umergta"},"content":""},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"![deadline submit my IP /by 2021-02-19](./deadline.png \"deadline command usage\")"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":""},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"### Feature 4: `list`"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":""},{"lineNumber":44,"author":{"gitId":"umergta"},"content":"## Usage"},{"lineNumber":45,"author":{"gitId":"umergta"},"content":""},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"### `list` - Displays your task list."},{"lineNumber":47,"author":{"gitId":"umergta"},"content":""},{"lineNumber":48,"author":{"gitId":"umergta"},"content":"Displays all the tasks and their respective status\u0027 present in your task list."},{"lineNumber":49,"author":{"gitId":"umergta"},"content":""},{"lineNumber":50,"author":{"gitId":"umergta"},"content":"Example of usage: "},{"lineNumber":51,"author":{"gitId":"umergta"},"content":""},{"lineNumber":52,"author":{"gitId":"umergta"},"content":"![list](./list.png \"list command usage\")"},{"lineNumber":53,"author":{"gitId":"umergta"},"content":""},{"lineNumber":54,"author":{"gitId":"umergta"},"content":"### Feature 5: `done`"},{"lineNumber":55,"author":{"gitId":"umergta"},"content":""},{"lineNumber":56,"author":{"gitId":"umergta"},"content":"## Usage"},{"lineNumber":57,"author":{"gitId":"umergta"},"content":""},{"lineNumber":58,"author":{"gitId":"umergta"},"content":"### `done` - Marks a task as done"},{"lineNumber":59,"author":{"gitId":"umergta"},"content":""},{"lineNumber":60,"author":{"gitId":"umergta"},"content":"Changes the status of a task in your list to \"done\"."},{"lineNumber":61,"author":{"gitId":"umergta"},"content":""},{"lineNumber":62,"author":{"gitId":"umergta"},"content":"Example of usage: "},{"lineNumber":63,"author":{"gitId":"umergta"},"content":""},{"lineNumber":64,"author":{"gitId":"umergta"},"content":"![done](./done.png \"done command usage\")"},{"lineNumber":65,"author":{"gitId":"umergta"},"content":""},{"lineNumber":66,"author":{"gitId":"umergta"},"content":"### Feature 6: `delete`"},{"lineNumber":67,"author":{"gitId":"umergta"},"content":""},{"lineNumber":68,"author":{"gitId":"umergta"},"content":"## Usage"},{"lineNumber":69,"author":{"gitId":"umergta"},"content":""},{"lineNumber":70,"author":{"gitId":"umergta"},"content":"### `delete \u003ctask number\u003e` - deletes a task"},{"lineNumber":71,"author":{"gitId":"umergta"},"content":""},{"lineNumber":72,"author":{"gitId":"umergta"},"content":"Deletes the task from your list with the given task number."},{"lineNumber":73,"author":{"gitId":"umergta"},"content":""},{"lineNumber":74,"author":{"gitId":"umergta"},"content":"Example of usage: "},{"lineNumber":75,"author":{"gitId":"umergta"},"content":""},{"lineNumber":76,"author":{"gitId":"umergta"},"content":"![delete 1](./delete.png \"delete command usage\")"},{"lineNumber":77,"author":{"gitId":"umergta"},"content":""},{"lineNumber":78,"author":{"gitId":"umergta"},"content":"### Feature 7: `undo`"},{"lineNumber":79,"author":{"gitId":"umergta"},"content":""},{"lineNumber":80,"author":{"gitId":"umergta"},"content":"## Usage"},{"lineNumber":81,"author":{"gitId":"umergta"},"content":""},{"lineNumber":82,"author":{"gitId":"umergta"},"content":"### `undo` - undo previous command"},{"lineNumber":83,"author":{"gitId":"umergta"},"content":""},{"lineNumber":84,"author":{"gitId":"umergta"},"content":"Undoes your previous command if the command can be undone.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitId":"umergta"},"content":"List of valid commands that can be undone:"},{"lineNumber":86,"author":{"gitId":"umergta"},"content":"* todo "},{"lineNumber":87,"author":{"gitId":"umergta"},"content":"* event"},{"lineNumber":88,"author":{"gitId":"umergta"},"content":"* deadline "},{"lineNumber":89,"author":{"gitId":"umergta"},"content":"* done"},{"lineNumber":90,"author":{"gitId":"umergta"},"content":"* delete"},{"lineNumber":91,"author":{"gitId":"umergta"},"content":""},{"lineNumber":92,"author":{"gitId":"umergta"},"content":"Example of usage: "},{"lineNumber":93,"author":{"gitId":"umergta"},"content":""},{"lineNumber":94,"author":{"gitId":"umergta"},"content":"![undo](./undo.png \"undo command usage\")"},{"lineNumber":95,"author":{"gitId":"umergta"},"content":""},{"lineNumber":96,"author":{"gitId":"umergta"},"content":"### Feature 8: `bye`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"umergta"},"content":"### `bye` - Exits Meme Bot."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"umergta"},"content":"Quits the application and saves all your tasks locally."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"umergta"},"content":"![bye](./bye.png \"bye command usage\")"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"umergta":96,"-":12}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"import duke.commands.Commands;"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"import duke.commands.Task;"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":""},{"lineNumber":9,"author":{"gitId":"umergta"},"content":""},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":" * Duke represents a task list application."},{"lineNumber":12,"author":{"gitId":"umergta"},"content":" * It takes in the following types of tasks: todo, deadline, event."},{"lineNumber":13,"author":{"gitId":"umergta"},"content":" * It processes these commands too: list, delete, done, bye"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":" * Task lists of individual users are saved locally and retrieved by running this class."},{"lineNumber":15,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"    private final Ui ui;"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"    private TaskList tasks;"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"    private Storage storage;"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"    private final Parser parser;"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"    private String lastCommand;"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"    private Task lastDeletedTask;"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":""},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"     * Constructor for Duke class."},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"     * Initializes Ui object to print Ui."},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"     * Initializes parser object to make sense of data passed in and output accordingly."},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"     * initializes storage object and initializes user\u0027s saved task list into a TaskList object."},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"     * @param filePath of where user\u0027s task list is saved."},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"    public Duke(String filePath) {"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"        ui \u003d new Ui();"},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"        parser \u003d new Parser();"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"            storage \u003d new Storage(filePath);"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"            tasks \u003d new TaskList(storage.getTaskList());"},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"            lastCommand \u003d storage.getLastCommand();"},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"            lastDeletedTask \u003d storage.getLastDeletedTask();"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"umergta"},"content":""},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"     * Gets the response from Duke after an input by the user in the GUI."},{"lineNumber":47,"author":{"gitId":"umergta"},"content":"     * Valid words: list, done, delete, todo, deadline, event, find"},{"lineNumber":48,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"umergta"},"content":"     * @param command input of the user that requires a response."},{"lineNumber":50,"author":{"gitId":"umergta"},"content":"     * @throws DukeException when key word is not a valid word."},{"lineNumber":51,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"umergta"},"content":"    public String getResponse(String command) {"},{"lineNumber":53,"author":{"gitId":"umergta"},"content":"        assert ui !\u003d null : \"ui object should not be null\";"},{"lineNumber":54,"author":{"gitId":"umergta"},"content":"        assert storage !\u003d null : \"storage object should not be null\";"},{"lineNumber":55,"author":{"gitId":"umergta"},"content":"        assert parser !\u003d null : \"parser object should not be null\";"},{"lineNumber":56,"author":{"gitId":"umergta"},"content":""},{"lineNumber":57,"author":{"gitId":"umergta"},"content":"        String response \u003d \"\";"},{"lineNumber":58,"author":{"gitId":"umergta"},"content":""},{"lineNumber":59,"author":{"gitId":"umergta"},"content":"        String[] commandArr \u003d command.split(\" \");"},{"lineNumber":60,"author":{"gitId":"umergta"},"content":"        String keyWord \u003d commandArr[0];"},{"lineNumber":61,"author":{"gitId":"umergta"},"content":"        String keyWordToCompare \u003d keyWord.toUpperCase();"},{"lineNumber":62,"author":{"gitId":"umergta"},"content":""},{"lineNumber":63,"author":{"gitId":"umergta"},"content":"        Task newTask;"},{"lineNumber":64,"author":{"gitId":"umergta"},"content":""},{"lineNumber":65,"author":{"gitId":"umergta"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"umergta"},"content":"            System.out.println(lastCommand);"},{"lineNumber":67,"author":{"gitId":"umergta"},"content":"            switch (Commands.valueOf(keyWordToCompare)) {"},{"lineNumber":68,"author":{"gitId":"umergta"},"content":"            case BYE:"},{"lineNumber":69,"author":{"gitId":"umergta"},"content":"                storage.writeAllData(tasks, lastCommand, lastDeletedTask);"},{"lineNumber":70,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getExitMessageString();"},{"lineNumber":71,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"umergta"},"content":"            case LIST:"},{"lineNumber":73,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getPrintTaskListString(tasks);"},{"lineNumber":74,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d command;"},{"lineNumber":75,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"umergta"},"content":"            case DONE:"},{"lineNumber":77,"author":{"gitId":"umergta"},"content":"                int taskNumber \u003d Integer.parseInt(commandArr[1]);"},{"lineNumber":78,"author":{"gitId":"umergta"},"content":"                Task doneTask \u003d parser.parseDoneCommand(taskNumber, tasks);"},{"lineNumber":79,"author":{"gitId":"umergta"},"content":"                assert doneTask.getTaskStatus() : \"task should be marked as done\";"},{"lineNumber":80,"author":{"gitId":"umergta"},"content":""},{"lineNumber":81,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getPrintDoneTaskString(doneTask);"},{"lineNumber":82,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d command;"},{"lineNumber":83,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":84,"author":{"gitId":"umergta"},"content":"            case TODO:"},{"lineNumber":85,"author":{"gitId":"umergta"},"content":"                newTask \u003d parser.parseAddTodo(command, tasks);"},{"lineNumber":86,"author":{"gitId":"umergta"},"content":"                assert tasks.checkTaskPresent(newTask) : \"task should be added into user\u0027s task list\";"},{"lineNumber":87,"author":{"gitId":"umergta"},"content":""},{"lineNumber":88,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getPrintAddedTaskString(tasks, newTask);"},{"lineNumber":89,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d command;"},{"lineNumber":90,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":91,"author":{"gitId":"umergta"},"content":"            case DEADLINE:"},{"lineNumber":92,"author":{"gitId":"umergta"},"content":"                newTask \u003d parser.parseAddDeadline(command, tasks);"},{"lineNumber":93,"author":{"gitId":"umergta"},"content":"                assert tasks.checkTaskPresent(newTask) : \"task should be added into user\u0027s task list\";"},{"lineNumber":94,"author":{"gitId":"umergta"},"content":""},{"lineNumber":95,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getPrintAddedTaskString(tasks, newTask);"},{"lineNumber":96,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d command;"},{"lineNumber":97,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":98,"author":{"gitId":"umergta"},"content":"            case EVENT:"},{"lineNumber":99,"author":{"gitId":"umergta"},"content":"                newTask \u003d parser.parseAddEvent(command, tasks);"},{"lineNumber":100,"author":{"gitId":"umergta"},"content":"                assert tasks.checkTaskPresent(newTask) : \"task should be added into user\u0027s task list\";"},{"lineNumber":101,"author":{"gitId":"umergta"},"content":""},{"lineNumber":102,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getPrintAddedTaskString(tasks, newTask);"},{"lineNumber":103,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d command;"},{"lineNumber":104,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":105,"author":{"gitId":"umergta"},"content":"            case DELETE:"},{"lineNumber":106,"author":{"gitId":"umergta"},"content":"                Task taskToBeDeleted \u003d parser.parseDeleteCommand(command, tasks);"},{"lineNumber":107,"author":{"gitId":"umergta"},"content":"                lastDeletedTask \u003d taskToBeDeleted;"},{"lineNumber":108,"author":{"gitId":"umergta"},"content":"                assert !tasks.checkTaskPresent(taskToBeDeleted) : \"task shouldn\u0027t be present in user\u0027s list\";"},{"lineNumber":109,"author":{"gitId":"umergta"},"content":""},{"lineNumber":110,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getPrintDeletedTaskString(taskToBeDeleted, tasks);"},{"lineNumber":111,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d command;"},{"lineNumber":112,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":113,"author":{"gitId":"umergta"},"content":"            case FIND:"},{"lineNumber":114,"author":{"gitId":"umergta"},"content":"                TaskList tasksFound \u003d parser.parseFindCommand(command, tasks);"},{"lineNumber":115,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getPrintFoundTasksString(tasksFound);"},{"lineNumber":116,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d command;"},{"lineNumber":117,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":118,"author":{"gitId":"umergta"},"content":"            case UNDO:"},{"lineNumber":119,"author":{"gitId":"umergta"},"content":"                boolean undoStatus \u003d parser.parseUndoCommand(lastCommand, lastDeletedTask, tasks);"},{"lineNumber":120,"author":{"gitId":"umergta"},"content":"                response +\u003d ui.getPrintUndoCommandString(undoStatus);"},{"lineNumber":121,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d command;"},{"lineNumber":122,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":123,"author":{"gitId":"umergta"},"content":"            default:"},{"lineNumber":124,"author":{"gitId":"umergta"},"content":"                //do nothing"},{"lineNumber":125,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"umergta"},"content":"        } catch (Exception ex) {"},{"lineNumber":127,"author":{"gitId":"umergta"},"content":"            if (ex instanceof IllegalArgumentException) {"},{"lineNumber":128,"author":{"gitId":"umergta"},"content":"                response +\u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":129,"author":{"gitId":"umergta"},"content":"            } else {"},{"lineNumber":130,"author":{"gitId":"umergta"},"content":"                response +\u003d ex.getMessage();"},{"lineNumber":131,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"umergta"},"content":"        return response;"},{"lineNumber":134,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"umergta"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"}"},{"lineNumber":137,"author":{"gitId":"umergta"},"content":""}],"authorContributionMap":{"umergta":135,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import duke.gui.Gui;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":""},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":8,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"        Application.launch(Gui.class, args);"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":13}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":""},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"import duke.commands.Commands;"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"import duke.commands.Deadline;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"import duke.commands.Event;"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"import duke.commands.Task;"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"import duke.commands.ToDo;"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidDeadlineCommandException;"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidDeleteCommandException;"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidDoneCommandException;"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidEventCommandException;"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidFindCommandException;"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidToDoCommandException;"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":""},{"lineNumber":18,"author":{"gitId":"umergta"},"content":""},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":" * Represents a parser that makes sense of user input by reformatting data, making objects etc."},{"lineNumber":21,"author":{"gitId":"umergta"},"content":" * Processes commands and returns parsed information"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"public class Parser {"},{"lineNumber":24,"author":{"gitId":"umergta"},"content":""},{"lineNumber":25,"author":{"gitId":"umergta"},"content":""},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"     * Processes a \"todo\" command and returns a ToDo object."},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"     * @param command command passed in by the user."},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"     * @return ToDo object."},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"     * @throws InvalidToDoCommandException if todo command used incorrectly."},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"     * @see Deadline"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"    public ToDo parseAddTodo(String command, TaskList userList) throws InvalidToDoCommandException {"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"        int taskDetailOffset \u003d 5;"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"        if (command.length() \u003c\u003d taskDetailOffset) {"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"            throw new InvalidToDoCommandException();"},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"        String toDoTaskDetail \u003d command.substring(taskDetailOffset);"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"        if (toDoTaskDetail.startsWith(\" \")) {"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":"            throw new InvalidToDoCommandException();"},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":"            ToDo newTodo \u003d new ToDo(toDoTaskDetail);"},{"lineNumber":44,"author":{"gitId":"umergta"},"content":"            userList.addTask(newTodo);"},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"            return newTodo;"},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"umergta"},"content":""},{"lineNumber":49,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"umergta"},"content":"     * Processes a \"deadline\" command and returns a Deadline object."},{"lineNumber":51,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"umergta"},"content":"     * @param command command passed in by the user."},{"lineNumber":53,"author":{"gitId":"umergta"},"content":"     * @return Deadline object."},{"lineNumber":54,"author":{"gitId":"umergta"},"content":"     * @throws InvalidDeadlineCommandException if deadline command used incorrectly."},{"lineNumber":55,"author":{"gitId":"umergta"},"content":"     * @see Deadline"},{"lineNumber":56,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"umergta"},"content":"    public Deadline parseAddDeadline(String command, TaskList userList) throws InvalidDeadlineCommandException {"},{"lineNumber":58,"author":{"gitId":"umergta"},"content":"        if (!command.contains(\" /by \")) {"},{"lineNumber":59,"author":{"gitId":"umergta"},"content":"            throw new InvalidDeadlineCommandException();"},{"lineNumber":60,"author":{"gitId":"umergta"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"umergta"},"content":"            Deadline newDeadline \u003d createDeadlineTask(command);"},{"lineNumber":62,"author":{"gitId":"umergta"},"content":"            userList.addTask(newDeadline);"},{"lineNumber":63,"author":{"gitId":"umergta"},"content":"            return newDeadline;"},{"lineNumber":64,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"umergta"},"content":""},{"lineNumber":67,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"umergta"},"content":"     * Processes a \"event\" command and returns an Event object."},{"lineNumber":69,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"umergta"},"content":"     * @param command command passed in by the user."},{"lineNumber":71,"author":{"gitId":"umergta"},"content":"     * @return Event object."},{"lineNumber":72,"author":{"gitId":"umergta"},"content":"     * @throws InvalidEventCommandException if event command used incorrectly."},{"lineNumber":73,"author":{"gitId":"umergta"},"content":"     * @see Event"},{"lineNumber":74,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"umergta"},"content":"    public Event parseAddEvent(String command, TaskList userList) throws InvalidEventCommandException {"},{"lineNumber":76,"author":{"gitId":"umergta"},"content":"        if (!command.contains(\" /at \")) {"},{"lineNumber":77,"author":{"gitId":"umergta"},"content":"            throw new InvalidEventCommandException();"},{"lineNumber":78,"author":{"gitId":"umergta"},"content":"        } else {"},{"lineNumber":79,"author":{"gitId":"umergta"},"content":"            Event newEvent \u003d this.createEventTask(command);"},{"lineNumber":80,"author":{"gitId":"umergta"},"content":"            userList.addTask(newEvent);"},{"lineNumber":81,"author":{"gitId":"umergta"},"content":"            return newEvent;"},{"lineNumber":82,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"umergta"},"content":""},{"lineNumber":85,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"umergta"},"content":"     * Processes a \"delete\" command and returns the index of the Task to be deleted from Task List."},{"lineNumber":87,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"umergta"},"content":"     * @param command command passed in by the user."},{"lineNumber":89,"author":{"gitId":"umergta"},"content":"     * @return Index of Task to be deleted."},{"lineNumber":90,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"umergta"},"content":"    public Task parseDeleteCommand(String command, TaskList userList) throws InvalidDeleteCommandException {"},{"lineNumber":92,"author":{"gitId":"umergta"},"content":"        if (command.length() \u003c\u003d \"delete \".length()) {"},{"lineNumber":93,"author":{"gitId":"umergta"},"content":"            throw new InvalidDeleteCommandException();"},{"lineNumber":94,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"umergta"},"content":"        int taskNumToBeDeleted \u003d Integer.parseInt(command.split(\" \")[1]);"},{"lineNumber":96,"author":{"gitId":"umergta"},"content":"        int indexNum \u003d taskNumToBeDeleted - 1;"},{"lineNumber":97,"author":{"gitId":"umergta"},"content":"        int userListSize \u003d userList.getTaskListSize();"},{"lineNumber":98,"author":{"gitId":"umergta"},"content":"        if (taskNumToBeDeleted \u003e userListSize) {"},{"lineNumber":99,"author":{"gitId":"umergta"},"content":"            throw new InvalidDeleteCommandException();"},{"lineNumber":100,"author":{"gitId":"umergta"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"umergta"},"content":"            Task deletedTask \u003d userList.removeTask(indexNum);"},{"lineNumber":102,"author":{"gitId":"umergta"},"content":"            deletedTask.markAsDone();"},{"lineNumber":103,"author":{"gitId":"umergta"},"content":"            return deletedTask;"},{"lineNumber":104,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"umergta"},"content":""},{"lineNumber":107,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"umergta"},"content":"     * Processes a \"find\" command and returns a TaskList object containing all Tasks that match the string searched."},{"lineNumber":109,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"umergta"},"content":"     * @param command  command passed in by the user."},{"lineNumber":111,"author":{"gitId":"umergta"},"content":"     * @param userList TaskList of the user."},{"lineNumber":112,"author":{"gitId":"umergta"},"content":"     * @return TaskList containing tasks for which the keywords are matched."},{"lineNumber":113,"author":{"gitId":"umergta"},"content":"     * @throws InvalidFindCommandException if find command in incorrect format."},{"lineNumber":114,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"umergta"},"content":"    public TaskList parseFindCommand(String command, TaskList userList) throws InvalidFindCommandException {"},{"lineNumber":116,"author":{"gitId":"umergta"},"content":"        if (command.length() \u003c 5) {"},{"lineNumber":117,"author":{"gitId":"umergta"},"content":"            throw new InvalidFindCommandException();"},{"lineNumber":118,"author":{"gitId":"umergta"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"umergta"},"content":"            String keywords \u003d command.substring(5);"},{"lineNumber":120,"author":{"gitId":"umergta"},"content":"            ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitId":"umergta"},"content":"            for (Task task : userList.getTaskList()) {"},{"lineNumber":122,"author":{"gitId":"umergta"},"content":"                if (task.getTaskDetail().contains(keywords)) {"},{"lineNumber":123,"author":{"gitId":"umergta"},"content":"                    results.add(task);"},{"lineNumber":124,"author":{"gitId":"umergta"},"content":"                }"},{"lineNumber":125,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"umergta"},"content":"            return new TaskList(results);"},{"lineNumber":127,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"umergta"},"content":""},{"lineNumber":130,"author":{"gitId":"umergta"},"content":"    public Task parseDoneCommand(int taskNumber, TaskList userList) throws InvalidDoneCommandException {"},{"lineNumber":131,"author":{"gitId":"umergta"},"content":"        int userListLength \u003d userList.getTaskListSize();"},{"lineNumber":132,"author":{"gitId":"umergta"},"content":"        if (taskNumber \u003e userListLength || taskNumber \u003c 1) {"},{"lineNumber":133,"author":{"gitId":"umergta"},"content":"            throw new InvalidDoneCommandException();"},{"lineNumber":134,"author":{"gitId":"umergta"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"umergta"},"content":"            Task doneTask \u003d userList.getTask(taskNumber - 1);"},{"lineNumber":136,"author":{"gitId":"umergta"},"content":"            doneTask.markAsDone();"},{"lineNumber":137,"author":{"gitId":"umergta"},"content":"            return doneTask;"},{"lineNumber":138,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"umergta"},"content":""},{"lineNumber":141,"author":{"gitId":"umergta"},"content":"    private ToDo createTodoTask (String command) {"},{"lineNumber":142,"author":{"gitId":"umergta"},"content":"        int taskDetailOffset \u003d 5;"},{"lineNumber":143,"author":{"gitId":"umergta"},"content":"        String taskDetail \u003d command.substring(taskDetailOffset);"},{"lineNumber":144,"author":{"gitId":"umergta"},"content":"        ToDo toDoTask \u003d new ToDo(taskDetail);"},{"lineNumber":145,"author":{"gitId":"umergta"},"content":"        return toDoTask;"},{"lineNumber":146,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"umergta"},"content":""},{"lineNumber":148,"author":{"gitId":"umergta"},"content":"    private Event createEventTask (String command) {"},{"lineNumber":149,"author":{"gitId":"umergta"},"content":"        String[] eventTimeAndTask \u003d command.split(\" /at \");"},{"lineNumber":150,"author":{"gitId":"umergta"},"content":"        LocalDate eventDate \u003d LocalDate.parse(eventTimeAndTask[1]);"},{"lineNumber":151,"author":{"gitId":"umergta"},"content":""},{"lineNumber":152,"author":{"gitId":"umergta"},"content":"        int eventDetailStartIndexOffset \u003d 6;"},{"lineNumber":153,"author":{"gitId":"umergta"},"content":"        String eventDetails \u003d eventTimeAndTask[0].substring(eventDetailStartIndexOffset);"},{"lineNumber":154,"author":{"gitId":"umergta"},"content":""},{"lineNumber":155,"author":{"gitId":"umergta"},"content":"        return new Event(eventDate, eventDetails);"},{"lineNumber":156,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"umergta"},"content":""},{"lineNumber":158,"author":{"gitId":"umergta"},"content":"    private Deadline createDeadlineTask (String command) {"},{"lineNumber":159,"author":{"gitId":"umergta"},"content":"        String[] deadlineAndTask \u003d command.split(\" /by \");"},{"lineNumber":160,"author":{"gitId":"umergta"},"content":"        LocalDate date \u003d LocalDate.parse(deadlineAndTask[1]);"},{"lineNumber":161,"author":{"gitId":"umergta"},"content":"        int deadlineDetailStartIndexOffset \u003d 9;"},{"lineNumber":162,"author":{"gitId":"umergta"},"content":"        return new Deadline(date, deadlineAndTask[0].substring(deadlineDetailStartIndexOffset));"},{"lineNumber":163,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"umergta"},"content":""},{"lineNumber":165,"author":{"gitId":"umergta"},"content":"    public boolean parseUndoCommand (String lastCommand, Task deletedTask, TaskList userList) {"},{"lineNumber":166,"author":{"gitId":"umergta"},"content":"        String keyWord \u003d lastCommand.split(\" \")[0];"},{"lineNumber":167,"author":{"gitId":"umergta"},"content":"        String keyWordToCompare \u003d keyWord.toUpperCase();"},{"lineNumber":168,"author":{"gitId":"umergta"},"content":""},{"lineNumber":169,"author":{"gitId":"umergta"},"content":"        boolean isUndoSuccessful \u003d false;"},{"lineNumber":170,"author":{"gitId":"umergta"},"content":"        int lastTaskIndex \u003d userList.getTaskListSize() - 1;"},{"lineNumber":171,"author":{"gitId":"umergta"},"content":""},{"lineNumber":172,"author":{"gitId":"umergta"},"content":"        if (keyWord.equals(\"\")) {"},{"lineNumber":173,"author":{"gitId":"umergta"},"content":"            isUndoSuccessful \u003d false;"},{"lineNumber":174,"author":{"gitId":"umergta"},"content":"        } else {"},{"lineNumber":175,"author":{"gitId":"umergta"},"content":"            switch (Commands.valueOf(keyWordToCompare)) {"},{"lineNumber":176,"author":{"gitId":"umergta"},"content":"            case TODO:"},{"lineNumber":177,"author":{"gitId":"umergta"},"content":"                ToDo toDoTask \u003d createTodoTask(lastCommand);"},{"lineNumber":178,"author":{"gitId":"umergta"},"content":"                if (userList.checkTaskPresent(toDoTask)) {"},{"lineNumber":179,"author":{"gitId":"umergta"},"content":"                    userList.removeTask(lastTaskIndex);"},{"lineNumber":180,"author":{"gitId":"umergta"},"content":"                    isUndoSuccessful \u003d true;"},{"lineNumber":181,"author":{"gitId":"umergta"},"content":"                }"},{"lineNumber":182,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":183,"author":{"gitId":"umergta"},"content":"            case DEADLINE:"},{"lineNumber":184,"author":{"gitId":"umergta"},"content":"                Deadline deadlineTask \u003d createDeadlineTask(lastCommand);"},{"lineNumber":185,"author":{"gitId":"umergta"},"content":"                if (userList.checkTaskPresent(deadlineTask)) {"},{"lineNumber":186,"author":{"gitId":"umergta"},"content":"                    userList.removeTask(lastTaskIndex);"},{"lineNumber":187,"author":{"gitId":"umergta"},"content":"                    isUndoSuccessful \u003d true;"},{"lineNumber":188,"author":{"gitId":"umergta"},"content":"                }"},{"lineNumber":189,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":190,"author":{"gitId":"umergta"},"content":"            case EVENT:"},{"lineNumber":191,"author":{"gitId":"umergta"},"content":"                Event eventTask \u003d createEventTask(lastCommand);"},{"lineNumber":192,"author":{"gitId":"umergta"},"content":"                if (userList.checkTaskPresent(eventTask)) {"},{"lineNumber":193,"author":{"gitId":"umergta"},"content":"                    userList.removeTask(lastTaskIndex);"},{"lineNumber":194,"author":{"gitId":"umergta"},"content":"                    isUndoSuccessful \u003d true;"},{"lineNumber":195,"author":{"gitId":"umergta"},"content":"                }"},{"lineNumber":196,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":197,"author":{"gitId":"umergta"},"content":"            case DONE:"},{"lineNumber":198,"author":{"gitId":"umergta"},"content":"                int taskNumber \u003d Integer.parseInt(lastCommand.split(\" \")[1]);"},{"lineNumber":199,"author":{"gitId":"umergta"},"content":"                Task taskToMarkUndone \u003d userList.getTask(taskNumber - 1);"},{"lineNumber":200,"author":{"gitId":"umergta"},"content":"                taskToMarkUndone.markAsUndone();"},{"lineNumber":201,"author":{"gitId":"umergta"},"content":"                isUndoSuccessful \u003d true;"},{"lineNumber":202,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":203,"author":{"gitId":"umergta"},"content":"            case DELETE:"},{"lineNumber":204,"author":{"gitId":"umergta"},"content":"                if (deletedTask instanceof ToDo || deletedTask instanceof Event || deletedTask instanceof Deadline) {"},{"lineNumber":205,"author":{"gitId":"umergta"},"content":"                    userList.addTask(deletedTask);"},{"lineNumber":206,"author":{"gitId":"umergta"},"content":"                    deletedTask.markAsUndone();"},{"lineNumber":207,"author":{"gitId":"umergta"},"content":"                    isUndoSuccessful \u003d true;"},{"lineNumber":208,"author":{"gitId":"umergta"},"content":"                }"},{"lineNumber":209,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":210,"author":{"gitId":"umergta"},"content":"            default:"},{"lineNumber":211,"author":{"gitId":"umergta"},"content":"                // do nothing"},{"lineNumber":212,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":213,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"umergta"},"content":"        return isUndoSuccessful;"},{"lineNumber":215,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":216}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":""},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"import duke.commands.Deadline;"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"import duke.commands.Event;"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"import duke.commands.Task;"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"import duke.commands.ToDo;"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":""},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":" * Represents the storage for user\u0027s task list."},{"lineNumber":18,"author":{"gitId":"umergta"},"content":" * Reads and writes data into user\u0027s saved file that stores task list."},{"lineNumber":19,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"    private final String filePath;"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"    private final Parser parser \u003d new Parser();"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":""},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"     * Constructor for Storage object."},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"     * Makes file tasks.txt if non-existent. Else, validates existence of file"},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"     * @param filePath the file path where user\u0027s TaskList is to be stored."},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"     * @throws IOException if filePath is not \"data/tasks.txt\""},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"     * @see Files"},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"     * @see Paths"},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"    public Storage(String filePath) throws IOException {"},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"        String parentPath \u003d filePath.split(\"tasks.txt\")[0];"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"        if (!Files.exists(Paths.get(parentPath))) {"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"            Files.createDirectories(Paths.get(parentPath));"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"        if (!Files.exists(Paths.get(filePath))) {"},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"            Files.createFile(Paths.get(filePath));"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":""},{"lineNumber":44,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"     * Returns user\u0027s task list that is in the saved file on user\u0027s local disk."},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"     * Initializes objects using the String data in tasks.txt file."},{"lineNumber":47,"author":{"gitId":"umergta"},"content":"     * Parses the data saved and adds correct form of tasks in the TaskList object"},{"lineNumber":48,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"umergta"},"content":"     * @return ArrayList of user\u0027s tasks."},{"lineNumber":50,"author":{"gitId":"umergta"},"content":"     * @throws IOException if incorrect data in file or incorrectly parsed."},{"lineNumber":51,"author":{"gitId":"umergta"},"content":"     * @see Parser"},{"lineNumber":52,"author":{"gitId":"umergta"},"content":"     * @see TaskList"},{"lineNumber":53,"author":{"gitId":"umergta"},"content":"     * @see Task"},{"lineNumber":54,"author":{"gitId":"umergta"},"content":"     * @see ToDo"},{"lineNumber":55,"author":{"gitId":"umergta"},"content":"     * @see Event"},{"lineNumber":56,"author":{"gitId":"umergta"},"content":"     * @see Deadline"},{"lineNumber":57,"author":{"gitId":"umergta"},"content":"     * @see Paths"},{"lineNumber":58,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"umergta"},"content":"    public ArrayList\u003cTask\u003e getTaskList() throws IOException {"},{"lineNumber":60,"author":{"gitId":"umergta"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitId":"umergta"},"content":"        List\u003cString\u003e fileLines \u003d Files.readAllLines(Paths.get(filePath));"},{"lineNumber":62,"author":{"gitId":"umergta"},"content":"        for (String line : fileLines) {"},{"lineNumber":63,"author":{"gitId":"umergta"},"content":"            assert line.contains(\"|\") : \"every line in the file should contain | for splitting of information\";"},{"lineNumber":64,"author":{"gitId":"umergta"},"content":""},{"lineNumber":65,"author":{"gitId":"umergta"},"content":"            String[] userTask \u003d line.split(\" \\\\| \");"},{"lineNumber":66,"author":{"gitId":"umergta"},"content":"            String eventType \u003d userTask[0];"},{"lineNumber":67,"author":{"gitId":"umergta"},"content":"            Task taskInList;"},{"lineNumber":68,"author":{"gitId":"umergta"},"content":"            try {"},{"lineNumber":69,"author":{"gitId":"umergta"},"content":"                switch (eventType) {"},{"lineNumber":70,"author":{"gitId":"umergta"},"content":"                case (\"[T]\"):"},{"lineNumber":71,"author":{"gitId":"umergta"},"content":"                    taskInList \u003d new ToDo(userTask[2]);"},{"lineNumber":72,"author":{"gitId":"umergta"},"content":"                    tasks.add(taskInList);"},{"lineNumber":73,"author":{"gitId":"umergta"},"content":"                    break;"},{"lineNumber":74,"author":{"gitId":"umergta"},"content":"                case (\"[E]\"):"},{"lineNumber":75,"author":{"gitId":"umergta"},"content":"                    assert line.contains(\"at\") : \"every event task should have specified event date after \u0027at\u0027\";"},{"lineNumber":76,"author":{"gitId":"umergta"},"content":""},{"lineNumber":77,"author":{"gitId":"umergta"},"content":"                    String eventDetail \u003d userTask[2];"},{"lineNumber":78,"author":{"gitId":"umergta"},"content":""},{"lineNumber":79,"author":{"gitId":"umergta"},"content":"                    String eventDateStr \u003d userTask[3].split(\"at: \")[1].replaceAll(\" \", \"-\");"},{"lineNumber":80,"author":{"gitId":"umergta"},"content":"                    LocalDate eventDuration \u003d LocalDate.parse(eventDateStr, DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"));"},{"lineNumber":81,"author":{"gitId":"umergta"},"content":""},{"lineNumber":82,"author":{"gitId":"umergta"},"content":"                    taskInList \u003d new Event(eventDuration, eventDetail);"},{"lineNumber":83,"author":{"gitId":"umergta"},"content":"                    tasks.add(taskInList);"},{"lineNumber":84,"author":{"gitId":"umergta"},"content":"                    break;"},{"lineNumber":85,"author":{"gitId":"umergta"},"content":"                case (\"[D]\"):"},{"lineNumber":86,"author":{"gitId":"umergta"},"content":"                    assert line.contains(\"by\") : \"every deadline task should have deadline date after \u0027by\u0027\";"},{"lineNumber":87,"author":{"gitId":"umergta"},"content":""},{"lineNumber":88,"author":{"gitId":"umergta"},"content":"                    String deadlineDetail \u003d userTask[2];"},{"lineNumber":89,"author":{"gitId":"umergta"},"content":""},{"lineNumber":90,"author":{"gitId":"umergta"},"content":"                    String deadlineStr \u003d userTask[3].split(\"by: \")[1].replaceAll(\" \", \"-\");"},{"lineNumber":91,"author":{"gitId":"umergta"},"content":"                    LocalDate deadline \u003d LocalDate.parse(deadlineStr, DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"));"},{"lineNumber":92,"author":{"gitId":"umergta"},"content":""},{"lineNumber":93,"author":{"gitId":"umergta"},"content":"                    taskInList \u003d new Deadline(deadline, deadlineDetail);"},{"lineNumber":94,"author":{"gitId":"umergta"},"content":"                    tasks.add(taskInList);"},{"lineNumber":95,"author":{"gitId":"umergta"},"content":"                    break;"},{"lineNumber":96,"author":{"gitId":"umergta"},"content":"                case (\"[LC]\"):"},{"lineNumber":97,"author":{"gitId":"umergta"},"content":"                case (\"[LDT]\"):"},{"lineNumber":98,"author":{"gitId":"umergta"},"content":"                    //do nothing"},{"lineNumber":99,"author":{"gitId":"umergta"},"content":"                    break;"},{"lineNumber":100,"author":{"gitId":"umergta"},"content":"                default:"},{"lineNumber":101,"author":{"gitId":"umergta"},"content":"                    assert false : \"invalid event type\";"},{"lineNumber":102,"author":{"gitId":"umergta"},"content":"                }"},{"lineNumber":103,"author":{"gitId":"umergta"},"content":"            } catch (Exception e) {"},{"lineNumber":104,"author":{"gitId":"umergta"},"content":"                System.err.println(e.getMessage());"},{"lineNumber":105,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"umergta"},"content":"        return tasks;"},{"lineNumber":108,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"umergta"},"content":""},{"lineNumber":110,"author":{"gitId":"umergta"},"content":"    public String getLastCommand() throws IOException {"},{"lineNumber":111,"author":{"gitId":"umergta"},"content":"        List\u003cString\u003e fileLines \u003d Files.readAllLines(Paths.get(filePath));"},{"lineNumber":112,"author":{"gitId":"umergta"},"content":"        String lastCommand \u003d \"\";"},{"lineNumber":113,"author":{"gitId":"umergta"},"content":"        for (String line : fileLines) {"},{"lineNumber":114,"author":{"gitId":"umergta"},"content":"            String type \u003d line.split(\" \\\\| \")[0];"},{"lineNumber":115,"author":{"gitId":"umergta"},"content":"            if (type.equals(\"[LC]\")) {"},{"lineNumber":116,"author":{"gitId":"umergta"},"content":"                lastCommand \u003d line.split(\" \\\\| \")[1];"},{"lineNumber":117,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"umergta"},"content":"        return lastCommand;"},{"lineNumber":120,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"umergta"},"content":""},{"lineNumber":122,"author":{"gitId":"umergta"},"content":"    public Task getLastDeletedTask() throws IOException {"},{"lineNumber":123,"author":{"gitId":"umergta"},"content":"        List\u003cString\u003e fileLines \u003d Files.readAllLines(Paths.get(filePath));"},{"lineNumber":124,"author":{"gitId":"umergta"},"content":"        Task lastDeletedTask \u003d null;"},{"lineNumber":125,"author":{"gitId":"umergta"},"content":"        for (String line : fileLines) {"},{"lineNumber":126,"author":{"gitId":"umergta"},"content":"            String type \u003d line.split(\" \\\\| \")[0];"},{"lineNumber":127,"author":{"gitId":"umergta"},"content":"            if (!type.equals(\"[LDT]\")) {"},{"lineNumber":128,"author":{"gitId":"umergta"},"content":"                continue;"},{"lineNumber":129,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"umergta"},"content":"            int taskSubStringOffset \u003d 8;"},{"lineNumber":131,"author":{"gitId":"umergta"},"content":"            String taskSubString \u003d line.substring(taskSubStringOffset);"},{"lineNumber":132,"author":{"gitId":"umergta"},"content":"            String[] taskSubStringArr \u003d taskSubString.split(\" \\\\| \");"},{"lineNumber":133,"author":{"gitId":"umergta"},"content":""},{"lineNumber":134,"author":{"gitId":"umergta"},"content":"            String eventType \u003d taskSubStringArr[0];"},{"lineNumber":135,"author":{"gitId":"umergta"},"content":"            switch (eventType) {"},{"lineNumber":136,"author":{"gitId":"umergta"},"content":"            case (\"[T]\"):"},{"lineNumber":137,"author":{"gitId":"umergta"},"content":"                lastDeletedTask \u003d new ToDo(taskSubStringArr[2]);"},{"lineNumber":138,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":139,"author":{"gitId":"umergta"},"content":"            case (\"[E]\"):"},{"lineNumber":140,"author":{"gitId":"umergta"},"content":"                String eventDateStr \u003d taskSubStringArr[3].split(\"at: \")[1].replaceAll(\" \", \"-\");"},{"lineNumber":141,"author":{"gitId":"umergta"},"content":"                LocalDate eventDate \u003d LocalDate.parse(eventDateStr, DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"));"},{"lineNumber":142,"author":{"gitId":"umergta"},"content":""},{"lineNumber":143,"author":{"gitId":"umergta"},"content":"                String eventDetail \u003d taskSubStringArr[2];"},{"lineNumber":144,"author":{"gitId":"umergta"},"content":""},{"lineNumber":145,"author":{"gitId":"umergta"},"content":"                lastDeletedTask \u003d new Event(eventDate, eventDetail);"},{"lineNumber":146,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":147,"author":{"gitId":"umergta"},"content":"            case (\"[D]\"):"},{"lineNumber":148,"author":{"gitId":"umergta"},"content":"                String deadlineStr \u003d taskSubStringArr[3].split(\"by: \")[1].replaceAll(\" \", \"-\");"},{"lineNumber":149,"author":{"gitId":"umergta"},"content":"                LocalDate deadline \u003d LocalDate.parse(deadlineStr, DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"));"},{"lineNumber":150,"author":{"gitId":"umergta"},"content":""},{"lineNumber":151,"author":{"gitId":"umergta"},"content":"                String deadlineDetail \u003d taskSubStringArr[2];"},{"lineNumber":152,"author":{"gitId":"umergta"},"content":""},{"lineNumber":153,"author":{"gitId":"umergta"},"content":"                lastDeletedTask \u003d new Deadline(deadline, deadlineDetail);"},{"lineNumber":154,"author":{"gitId":"umergta"},"content":"                break;"},{"lineNumber":155,"author":{"gitId":"umergta"},"content":"            default:"},{"lineNumber":156,"author":{"gitId":"umergta"},"content":"                //do nothing"},{"lineNumber":157,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"umergta"},"content":"        return lastDeletedTask;"},{"lineNumber":160,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"umergta"},"content":""},{"lineNumber":162,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"umergta"},"content":"     * Writes user\u0027s task list into tasks.txt local file."},{"lineNumber":164,"author":{"gitId":"umergta"},"content":"     * If the task list isn\u0027t been able to be written into filePath, IOException thrown."},{"lineNumber":165,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"umergta"},"content":"     * @param data : the user\u0027s task list"},{"lineNumber":167,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"umergta"},"content":"    public String writeTaskList(List\u003cTask\u003e data) {"},{"lineNumber":169,"author":{"gitId":"umergta"},"content":"        String stringOfData \u003d \"\";"},{"lineNumber":170,"author":{"gitId":"umergta"},"content":"        for (int i \u003d 0; i \u003c data.size(); i++) {"},{"lineNumber":171,"author":{"gitId":"umergta"},"content":"            if (i \u003d\u003d data.size() - 1) {"},{"lineNumber":172,"author":{"gitId":"umergta"},"content":"                stringOfData +\u003d data.get(i).toString();"},{"lineNumber":173,"author":{"gitId":"umergta"},"content":"            } else {"},{"lineNumber":174,"author":{"gitId":"umergta"},"content":"                stringOfData +\u003d data.get(i).toString() + \"\\n\";"},{"lineNumber":175,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":176,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"umergta"},"content":"        return stringOfData;"},{"lineNumber":178,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"umergta"},"content":""},{"lineNumber":180,"author":{"gitId":"umergta"},"content":"    public String writeLastCommand(String lastCommand) {"},{"lineNumber":181,"author":{"gitId":"umergta"},"content":"        if (lastCommand \u003d\u003d null) {"},{"lineNumber":182,"author":{"gitId":"umergta"},"content":"            lastCommand \u003d \"\";"},{"lineNumber":183,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"umergta"},"content":"        String formattedCommand \u003d \"[LC] | \" + lastCommand + \"\\n\";"},{"lineNumber":185,"author":{"gitId":"umergta"},"content":"        return formattedCommand;"},{"lineNumber":186,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"umergta"},"content":""},{"lineNumber":188,"author":{"gitId":"umergta"},"content":"    public String writeLastDeletedTask (Task deletedTask) {"},{"lineNumber":189,"author":{"gitId":"umergta"},"content":"        String deletedTaskString \u003d \"\";"},{"lineNumber":190,"author":{"gitId":"umergta"},"content":"        if (deletedTask !\u003d null) {"},{"lineNumber":191,"author":{"gitId":"umergta"},"content":"            deletedTaskString \u003d deletedTask.toString();"},{"lineNumber":192,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"umergta"},"content":"        String lastDeletedTaskString \u003d \"[LDT] | \" + deletedTaskString + \"\\n\";"},{"lineNumber":194,"author":{"gitId":"umergta"},"content":"        return lastDeletedTaskString;"},{"lineNumber":195,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"umergta"},"content":""},{"lineNumber":197,"author":{"gitId":"umergta"},"content":"    public void writeAllData (TaskList listOfTasks, String lastCommand, Task deletedTask) {"},{"lineNumber":198,"author":{"gitId":"umergta"},"content":"        try {"},{"lineNumber":199,"author":{"gitId":"umergta"},"content":"            String allData \u003d writeLastCommand(lastCommand) + writeLastDeletedTask(deletedTask)"},{"lineNumber":200,"author":{"gitId":"umergta"},"content":"                    + writeTaskList(listOfTasks.getTaskList());"},{"lineNumber":201,"author":{"gitId":"umergta"},"content":"            Files.writeString(Paths.get(this.filePath), allData);"},{"lineNumber":202,"author":{"gitId":"umergta"},"content":"        } catch (Exception e) {"},{"lineNumber":203,"author":{"gitId":"umergta"},"content":"            System.err.println(e);"},{"lineNumber":204,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":206}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"import duke.commands.Task;"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":""},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":" * Represents the user\u0027s list of tasks."},{"lineNumber":9,"author":{"gitId":"umergta"},"content":" * Task objects are stored in the object"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"    private final ArrayList\u003cTask\u003e userList;"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":""},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"     * Constructor for TaskList"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"     * @param userList is an arrayList of Tasks"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"     * @see ArrayList"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"    public TaskList(ArrayList\u003cTask\u003e userList) {"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"        this.userList \u003d userList;"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":""},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"     * Overloaded constructor for TaskList object."},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"     * Used when no ArrayList of Task is passed in as a Parameter."},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"    public TaskList() {"},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"        this.userList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"umergta"},"content":""},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"     * Returns the user\u0027s TaskList."},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"     * @return userList."},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"        return this.userList;"},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":""},{"lineNumber":41,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"     * Returns size of the taskList."},{"lineNumber":43,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"umergta"},"content":"     * @return length of the user\u0027s list."},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"    public int getTaskListSize() {"},{"lineNumber":47,"author":{"gitId":"umergta"},"content":"        return this.userList.size();"},{"lineNumber":48,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"umergta"},"content":""},{"lineNumber":50,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"umergta"},"content":"     * Returns task at specified index."},{"lineNumber":52,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"umergta"},"content":"     * @param index Task at the index in the TaskList."},{"lineNumber":54,"author":{"gitId":"umergta"},"content":"     * @return Task task at given index."},{"lineNumber":55,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"umergta"},"content":"    public Task getTask(int index) {"},{"lineNumber":57,"author":{"gitId":"umergta"},"content":"        return this.userList.get(index);"},{"lineNumber":58,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"umergta"},"content":""},{"lineNumber":60,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"umergta"},"content":"     * Adds a task into the TaskList."},{"lineNumber":62,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"umergta"},"content":"     * @param task task to be added into the list."},{"lineNumber":64,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"umergta"},"content":"    public void addTask(Task task) {"},{"lineNumber":66,"author":{"gitId":"umergta"},"content":"        this.userList.add(task);"},{"lineNumber":67,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"umergta"},"content":""},{"lineNumber":69,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"umergta"},"content":"     * Removes a task at the particular index of the task list."},{"lineNumber":71,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"umergta"},"content":"     * @param taskIndex index of the task to be deleted in the task list."},{"lineNumber":73,"author":{"gitId":"umergta"},"content":"     * @return The task that got removed."},{"lineNumber":74,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"umergta"},"content":"    public Task removeTask(int taskIndex) {"},{"lineNumber":76,"author":{"gitId":"umergta"},"content":"        return this.userList.remove(taskIndex);"},{"lineNumber":77,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"umergta"},"content":""},{"lineNumber":79,"author":{"gitId":"umergta"},"content":"    public boolean checkTaskPresent(Task task) {"},{"lineNumber":80,"author":{"gitId":"umergta"},"content":"        boolean isPresent \u003d false;"},{"lineNumber":81,"author":{"gitId":"umergta"},"content":"        for (Task userTask : userList) {"},{"lineNumber":82,"author":{"gitId":"umergta"},"content":"            if (userTask.toString().equals(task.toString())) {"},{"lineNumber":83,"author":{"gitId":"umergta"},"content":"                isPresent \u003d true;"},{"lineNumber":84,"author":{"gitId":"umergta"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"umergta"},"content":"        return isPresent;"},{"lineNumber":87,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"umergta"},"content":""},{"lineNumber":89,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":89}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import duke.commands.Task;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":" * Represents the Ui of Duke CLI application with methods to print the output according to the input given."},{"lineNumber":7,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":""},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"     * Gets the welcome greeting when user first runs the Duke program."},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"     * @return Welcome greeting as String"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"    public String getWelcomeGreetingString() {"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"        return \"\\nSup peeps! I am Meme Bot.\\n\""},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"                + \"\\nThese are the list of commands:\\n\""},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"                + \"1. todo \u003cdetails\u003e\\n\""},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"                + \"2. event \u003cdetails\u003e /at \u003cdate\u003e\\n\""},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"                + \"3. deadline \u003cdetails\u003e /by \u003cdate\u003e\\n\""},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"                + \"4. list\\n\""},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"                + \"5. done \u003ctask number\u003e\\n\""},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"                + \"6. delete \u003ctask number\u003e\\n\""},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"                + \"7. undo\\n\""},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"                + \"8. bye\\n\\nSo.. What can I do for you?\\n\";"},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"umergta"},"content":""},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"     * Gets the exit message when user executes command to quit the duke application."},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"     * @return Exit message, when user inputs \u0027bye\u0027 command, as String"},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"    public String getExitMessageString() {"},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"        return \"Sayonara! Hope to never see you again..\\n\";"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":""},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"     * Gets the tasks is users TaskList line by line."},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"     * @param userList TaskList of the user"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":"     * @return Tasks in task list as String if TaskList not empty. If empty, returns String stating list is empty"},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":"    public String getPrintTaskListString(TaskList userList) {"},{"lineNumber":44,"author":{"gitId":"umergta"},"content":"        String stringToBeReturned \u003d \"\";"},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"        for (int i \u003d 0; i \u003c userList.getTaskListSize(); i++) {"},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"            stringToBeReturned +\u003d (i + 1) + \".\" + userList.getTask(i).toString() + \"\\n\";"},{"lineNumber":47,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"umergta"},"content":"        return stringToBeReturned.length() \u003d\u003d 0"},{"lineNumber":49,"author":{"gitId":"umergta"},"content":"                ? \"Your list is empty.\\n\""},{"lineNumber":50,"author":{"gitId":"umergta"},"content":"                : stringToBeReturned + \"\\nYou have \" + userList.getTaskListSize() + \" tasks in your list.\\n\";"},{"lineNumber":51,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"umergta"},"content":""},{"lineNumber":53,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"umergta"},"content":"     * Gets the message when a task is assigned as \"done\"."},{"lineNumber":55,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"umergta"},"content":"     * @param doneTask task marked as done by user."},{"lineNumber":57,"author":{"gitId":"umergta"},"content":"     * @return message for a task marked done as String"},{"lineNumber":58,"author":{"gitId":"umergta"},"content":"     * @see TaskList"},{"lineNumber":59,"author":{"gitId":"umergta"},"content":"     * @see Task"},{"lineNumber":60,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"umergta"},"content":"    public String getPrintDoneTaskString(Task doneTask) {"},{"lineNumber":62,"author":{"gitId":"umergta"},"content":"        String doneTaskString \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n[%s] \\n%s\\n\","},{"lineNumber":63,"author":{"gitId":"umergta"},"content":"                doneTask.getStatusIcon(),"},{"lineNumber":64,"author":{"gitId":"umergta"},"content":"                doneTask.getTaskDetail());"},{"lineNumber":65,"author":{"gitId":"umergta"},"content":"        return doneTaskString;"},{"lineNumber":66,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"umergta"},"content":""},{"lineNumber":68,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"umergta"},"content":"     * Gets the message when a task is added to the Task list."},{"lineNumber":70,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"umergta"},"content":"     * @param userTaskList Task list of the user."},{"lineNumber":72,"author":{"gitId":"umergta"},"content":"     * @param task task to be added to the Task list."},{"lineNumber":73,"author":{"gitId":"umergta"},"content":"     * @return message upon adding task as a String."},{"lineNumber":74,"author":{"gitId":"umergta"},"content":"     * @see TaskList"},{"lineNumber":75,"author":{"gitId":"umergta"},"content":"     * @see Task"},{"lineNumber":76,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"umergta"},"content":"    public String getPrintAddedTaskString(TaskList userTaskList, Task task) {"},{"lineNumber":78,"author":{"gitId":"umergta"},"content":"        String addedTaskString \u003d \"\";"},{"lineNumber":79,"author":{"gitId":"umergta"},"content":"        addedTaskString +\u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":80,"author":{"gitId":"umergta"},"content":"        addedTaskString +\u003d task.toString() + \"\\n\";"},{"lineNumber":81,"author":{"gitId":"umergta"},"content":"        addedTaskString +\u003d \"Now you have \" + (userTaskList.getTaskListSize()) + \" tasks in the list.\\n\";"},{"lineNumber":82,"author":{"gitId":"umergta"},"content":"        return addedTaskString;"},{"lineNumber":83,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"umergta"},"content":""},{"lineNumber":85,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"umergta"},"content":"     * Gets the message when task is deleted from Task List."},{"lineNumber":87,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"umergta"},"content":"     * @param userTaskList Task list of the user."},{"lineNumber":89,"author":{"gitId":"umergta"},"content":"     * @param taskToBeDeleted Task to be deleted from the Task list."},{"lineNumber":90,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"umergta"},"content":"    public String getPrintDeletedTaskString(Task taskToBeDeleted, TaskList userTaskList) {"},{"lineNumber":92,"author":{"gitId":"umergta"},"content":"        String deletedTaskString \u003d \"\";"},{"lineNumber":93,"author":{"gitId":"umergta"},"content":"        deletedTaskString +\u003d \"Noted. I\u0027ve removed this task\\n\";"},{"lineNumber":94,"author":{"gitId":"umergta"},"content":"        deletedTaskString +\u003d taskToBeDeleted.toString() + \"\\n\";"},{"lineNumber":95,"author":{"gitId":"umergta"},"content":"        deletedTaskString +\u003d \"Now you have \" + (userTaskList.getTaskListSize()) + \" tasks in the list.\\n\";"},{"lineNumber":96,"author":{"gitId":"umergta"},"content":"        return deletedTaskString;"},{"lineNumber":97,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"umergta"},"content":""},{"lineNumber":99,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"umergta"},"content":"     * Gets all tasks found when key search words are entered by user."},{"lineNumber":101,"author":{"gitId":"umergta"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"umergta"},"content":"     * @param tasksFound : TaskList of the tasks found with the required key words."},{"lineNumber":103,"author":{"gitId":"umergta"},"content":"     * @return all tasks found and message when \"find\" command executed."},{"lineNumber":104,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"umergta"},"content":"    public String getPrintFoundTasksString(TaskList tasksFound) {"},{"lineNumber":106,"author":{"gitId":"umergta"},"content":"        String foundTasksString \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":107,"author":{"gitId":"umergta"},"content":"        return tasksFound.getTaskListSize() \u003d\u003d 0"},{"lineNumber":108,"author":{"gitId":"umergta"},"content":"                ? foundTasksString + \"Sorry. No tasks found :-(\\n\""},{"lineNumber":109,"author":{"gitId":"umergta"},"content":"                : foundTasksString + getPrintTaskListString(tasksFound) + \"\\n\";"},{"lineNumber":110,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"umergta"},"content":""},{"lineNumber":112,"author":{"gitId":"umergta"},"content":"    public String getPrintUndoCommandString(boolean undoStatus) {"},{"lineNumber":113,"author":{"gitId":"umergta"},"content":"        return undoStatus"},{"lineNumber":114,"author":{"gitId":"umergta"},"content":"                ? \"Your last command has successfully been undone\\n\""},{"lineNumber":115,"author":{"gitId":"umergta"},"content":"                : \"Sorry. You cannot undo this command.\\n\""},{"lineNumber":116,"author":{"gitId":"umergta"},"content":"                    + \"Commands that can be undone:\\n1. done\\n2. todo\\n3. deadline\\n4. event\\n\";"},{"lineNumber":117,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":118}},{"path":"src/main/java/duke/commands/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public enum Commands {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"    TODO ,"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"    EVENT ,"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"    DEADLINE ,"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"    BYE ,"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    FIND ,"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    DELETE ,"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"    DONE ,"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    LIST,"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"    UNDO,"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":13}},{"path":"src/main/java/duke/commands/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":""},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"    private LocalDate deadlineDate;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":""},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public Deadline(LocalDate deadlineDate, String deadlineDetail) {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        super(deadlineDetail);"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"        //YYYY-MM-dd"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"        this.deadlineDate \u003d deadlineDate;"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":""},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"    public LocalDate getDeadlineDate() {"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"        return this.deadlineDate;"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":""},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"        return \"[D] | \" + super.toString() + \" | by: \""},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"                + deadlineDate.format(DateTimeFormatter.ofPattern(\"dd MMM YYYY\"));"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":24}},{"path":"src/main/java/duke/commands/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":""},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"    private LocalDate eventDate;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":""},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public Event(LocalDate eventDate, String eventDetail) {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        super(eventDetail);"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":""},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"    public LocalDate getEventDate() {"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"        return this.eventDate;"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":""},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"        return \"[E] | \" + super.toString() + \" | at: \" + eventDate.format(DateTimeFormatter.ofPattern(\"dd MMM YYYY\"));"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":22}},{"path":"src/main/java/duke/commands/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":""},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"    private boolean isDone;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    private final String taskDetail;"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":""},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"    public Task(String taskDetail) {"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"        this.taskDetail \u003d taskDetail;"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":""},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"    public String getTaskDetail() {"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"        return this.taskDetail;"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":""},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"    public void markAsDone() {"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"        this.isDone \u003d true;"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":""},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"    public void markAsUndone() {"},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"        this.isDone \u003d false;"},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"umergta"},"content":""},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"    public boolean getTaskStatus() {"},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"        return isDone;"},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"umergta"},"content":""},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"    public String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"umergta"},"content":""},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"    protected static LocalDate dateStringToDate(String inputDate) {"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"        String customInputDate \u003d inputDate.replaceAll(\"-\", \" \");"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd\");"},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"        LocalDate date \u003d LocalDate.parse(customInputDate, format);"},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"        return date;"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":""},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"umergta"},"content":"        return \"[\" + this.getStatusIcon() + \"] | \" + this.getTaskDetail();"},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"umergta"},"content":""},{"lineNumber":47,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":47}},{"path":"src/main/java/duke/commands/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"    public ToDo(String toDoDetail) {"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"        super(toDoDetail);"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        return \"[T]\" + \" | \" + super.toString();"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":12}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    public DukeException() {"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":""},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":15}},{"path":"src/main/java/duke/exception/InvalidDeadlineCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class InvalidDeadlineCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"    public InvalidDeadlineCommandException() {"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        return \" ☹ OOPS!!! invalid usage of Deadline command.\\nFormat: deadline \u003cdescription\u003e /by \u003cyyyy-MM-dd\u003e\";"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":12}},{"path":"src/main/java/duke/exception/InvalidDeleteCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class InvalidDeleteCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"    public InvalidDeleteCommandException() {"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        return \"I can\u0027t delete that for you :-(\\nCheck if the task number is valid.\\nFormat: delete \u003ctask number\u003e\";"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":12}},{"path":"src/main/java/duke/exception/InvalidDoneCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class InvalidDoneCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"    public InvalidDoneCommandException() {"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":""},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        return \"Sorry :-( I can\u0027t mark that as done!\\nCheck if the task number is valid.\\nFormat: done \u003ctask number\u003e\";"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":12}},{"path":"src/main/java/duke/exception/InvalidEventCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class InvalidEventCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"    public InvalidEventCommandException() {"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"        super();"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        return \" ☹ OOPS!!! invalid usage of Event command.\\nFormat: event \u003cdescription\u003e /at \u003cyyyy-MM-dd\u003e\";"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":12}},{"path":"src/main/java/duke/exception/InvalidFindCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class InvalidFindCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"    public InvalidFindCommandException() {"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"        super();"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        return \" ☹ OOPS!!! invalid usage of find command.\\nFormat: find \u003ckeywords\u003e\";"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":12}},{"path":"src/main/java/duke/exception/InvalidToDoCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class InvalidToDoCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"    public InvalidToDoCommandException() {"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"        super();"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    public String getMessage() {"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        return \" ☹ OOPS!!! invalid usage of todo command.\\nFormat: todo \u003cdescription\u003e\";"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":12}},{"path":"src/main/java/duke/exception/InvalidUndoCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"public class InvalidUndoCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"    public InvalidUndoCommandException() {"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":""},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":""},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"    public String getMessage() {"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"        return \"Sorry. You cannot undo this command.\\n\""},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"                + \"Commands that can be undone:\\n1. done\\n2. todo\\n3. deadline\\n4. event\\n\";"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":14}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":""},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":""},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"umergta"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"umergta"},"content":""},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(GuiWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":""},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":""},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"umergta"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"umergta"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"umergta"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"umergta"},"content":""},{"lineNumber":52,"author":{"gitId":"umergta"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"umergta"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"umergta"},"content":""},{"lineNumber":56,"author":{"gitId":"umergta"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"umergta"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"umergta"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"umergta"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":61}},{"path":"src/main/java/duke/gui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":""},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"public class Gui extends Application {"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":""},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"    private final Duke duke \u003d new Duke(\"data/tasks.txt\");"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":""},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"            stage.setTitle(\"Meme Bot\");"},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"            fxmlLoader.\u003cGuiWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":33}},{"path":"src/main/java/duke/gui/GuiWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":"import java.util.Timer;"},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import java.util.TimerTask;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":""},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":""},{"lineNumber":15,"author":{"gitId":"umergta"},"content":""},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":18,"author":{"gitId":"umergta"},"content":" */"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"public class GuiWindow extends AnchorPane {"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"    private VBox dialogContainer;"},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"    private TextField userInput;"},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"umergta"},"content":""},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"    private Duke duke;"},{"lineNumber":30,"author":{"gitId":"umergta"},"content":""},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":""},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"    public void initialize() {"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"umergta"},"content":""},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"        duke \u003d d;"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":"        String response \u003d new Ui().getWelcomeGreetingString();"},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"umergta"},"content":""},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"umergta"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":47,"author":{"gitId":"umergta"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":48,"author":{"gitId":"umergta"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"umergta"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"umergta"},"content":"    private void handleUserInput() {"},{"lineNumber":51,"author":{"gitId":"umergta"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":52,"author":{"gitId":"umergta"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":53,"author":{"gitId":"umergta"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":54,"author":{"gitId":"umergta"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":55,"author":{"gitId":"umergta"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":56,"author":{"gitId":"umergta"},"content":"        );"},{"lineNumber":57,"author":{"gitId":"umergta"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":58,"author":{"gitId":"umergta"},"content":"            TimerTask closeApp \u003d new TimerTask() {"},{"lineNumber":59,"author":{"gitId":"umergta"},"content":"                @Override"},{"lineNumber":60,"author":{"gitId":"umergta"},"content":"                public void run() {"},{"lineNumber":61,"author":{"gitId":"umergta"},"content":"                    System.exit(0);"},{"lineNumber":62,"author":{"gitId":"umergta"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"umergta"},"content":"            };"},{"lineNumber":64,"author":{"gitId":"umergta"},"content":"            Timer timer \u003d new Timer();"},{"lineNumber":65,"author":{"gitId":"umergta"},"content":"            timer.schedule(closeApp, 2000);"},{"lineNumber":66,"author":{"gitId":"umergta"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"umergta"},"content":"        userInput.clear();"},{"lineNumber":68,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"umergta"},"content":""},{"lineNumber":70,"author":{"gitId":"umergta"},"content":"}"},{"lineNumber":71,"author":{"gitId":"umergta"},"content":""}],"authorContributionMap":{"umergta":71}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"Infinity\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textFill\u003d\"#f5eded\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"        \u003cpadding\u003e"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"        \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"                \u003cHBox.margin\u003e"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"                \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"    \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"    \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"umergta":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":""},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.GuiWindow\" style\u003d\"-fx-background-color: #030303;\"\u003e"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" style\u003d\"-fx-text-inner-color: black;\" /\u003e"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #282727;\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"555\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #282727;\" /\u003e"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"umergta":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidDeadlineCommandException;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidEventCommandException;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"import duke.exception.InvalidToDoCommandException;"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":""},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":""},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"import static org.junit.jupiter.api.Assertions.assertAll;"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":""},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"public class ParserTest {"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"    TaskList userList \u003d new TaskList();"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"    public void testParseAddToDo() throws InvalidToDoCommandException {"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"        assertEquals(\"testing todo\","},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddTodo(\"todo testing todo\", userList).getTaskDetail());"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"        assertEquals(\"i want to do this!\","},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddTodo(\"todo i want to do this!\", userList).getTaskDetail());"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"        assertEquals(\"I WANT TO DO NOTHING\","},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddTodo(\"todo I WANT TO DO NOTHING\", userList).getTaskDetail());"},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"umergta"},"content":""},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"    public void testParseAddEvent() throws InvalidEventCommandException {"},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"        assertEquals(\"testing\","},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddEvent(\"event testing /at 2020-01-01\", userList).getTaskDetail());"},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"        assertEquals(LocalDate.parse(\"2020-01-01\"),"},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddEvent(\"event test /at 2020-01-01\", userList).getEventDate());"},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"        assertEquals(\"testing event\","},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddEvent(\"event testing event /at 2021-04-06\", userList).getTaskDetail());"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"umergta"},"content":""},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"    public void testParseAddDeadline() throws InvalidDeadlineCommandException {"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"        assertEquals(\"testing\","},{"lineNumber":38,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddDeadline(\"deadline testing /by 2020-01-01\", userList).getTaskDetail());"},{"lineNumber":39,"author":{"gitId":"umergta"},"content":"        assertEquals(LocalDate.parse(\"2020-01-01\"),"},{"lineNumber":40,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddDeadline(\"deadline test /by 2020-01-01\", userList).getDeadlineDate());"},{"lineNumber":41,"author":{"gitId":"umergta"},"content":"        assertEquals(\"testing 2\","},{"lineNumber":42,"author":{"gitId":"umergta"},"content":"                new Parser().parseAddDeadline(\"deadline testing 2 /by 2021-04-06\", userList).getTaskDetail());"},{"lineNumber":43,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"umergta"},"content":""},{"lineNumber":45,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":45}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":""},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":""},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"import java.io.PrintStream;"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":""},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":""},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"public class UiTest {"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"//    private final PrintStream standardOut \u003d System.out;"},{"lineNumber":13,"author":{"gitId":"umergta"},"content":"//    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"},{"lineNumber":14,"author":{"gitId":"umergta"},"content":"//    @BeforeEach"},{"lineNumber":15,"author":{"gitId":"umergta"},"content":"//    public void setUp() {"},{"lineNumber":16,"author":{"gitId":"umergta"},"content":"//        System.setOut(new PrintStream(outputStreamCaptor));"},{"lineNumber":17,"author":{"gitId":"umergta"},"content":"//    }"},{"lineNumber":18,"author":{"gitId":"umergta"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"umergta"},"content":"    public void testGetWelcomeGreetingString(){"},{"lineNumber":20,"author":{"gitId":"umergta"},"content":"        String welcomeGreeting \u003d new Ui().getWelcomeGreetingString();"},{"lineNumber":21,"author":{"gitId":"umergta"},"content":"        assertEquals(\"\\nSup peeps! I am Meme Bot.\\n\""},{"lineNumber":22,"author":{"gitId":"umergta"},"content":"                        + \"\\nThese are the list of commands:\\n\""},{"lineNumber":23,"author":{"gitId":"umergta"},"content":"                        + \"1. todo \u003cdetails\u003e\\n\""},{"lineNumber":24,"author":{"gitId":"umergta"},"content":"                        + \"2. event \u003cdetails\u003e /at \u003cdate\u003e\\n\""},{"lineNumber":25,"author":{"gitId":"umergta"},"content":"                        + \"3. deadline \u003cdetails\u003e /by \u003cdate\u003e\\n\""},{"lineNumber":26,"author":{"gitId":"umergta"},"content":"                        + \"4. list\\n\""},{"lineNumber":27,"author":{"gitId":"umergta"},"content":"                        + \"5. done \u003ctask number\u003e\\n\""},{"lineNumber":28,"author":{"gitId":"umergta"},"content":"                        + \"6. delete \u003ctask number\u003e\\n\""},{"lineNumber":29,"author":{"gitId":"umergta"},"content":"                        + \"7. undo\\n\""},{"lineNumber":30,"author":{"gitId":"umergta"},"content":"                        + \"8. bye\\n\\nSo.. What can I do for you?\\n\", welcomeGreeting);"},{"lineNumber":31,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"umergta"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"umergta"},"content":"    public void testGetExitMessageString(){"},{"lineNumber":34,"author":{"gitId":"umergta"},"content":"        String exitMessage \u003d new Ui().getExitMessageString();"},{"lineNumber":35,"author":{"gitId":"umergta"},"content":"        assertEquals(\"Sayonara! Hope to never see you again..\\n\" , exitMessage);"},{"lineNumber":36,"author":{"gitId":"umergta"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"umergta"},"content":"}"}],"authorContributionMap":{"umergta":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"umergta"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"umergta"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"umergta"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"umergta"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"umergta"},"content":"todo borrow another book"},{"lineNumber":6,"author":{"gitId":"umergta"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"umergta"},"content":"list"},{"lineNumber":8,"author":{"gitId":"umergta"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"umergta"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"umergta"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"umergta"},"content":"list"},{"lineNumber":12,"author":{"gitId":"umergta"},"content":"bye"}],"authorContributionMap":{"umergta":12}}]
