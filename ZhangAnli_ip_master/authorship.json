[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private String deadline;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String that describes the task."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     * @param deadline String that describes the deadline."},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public Deadline(String description, String deadline){"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the deadline."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + deadline + \")\";"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":23}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Hello, I am Duke, your personal Assistant. How may I help you today?:\");"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"        String input \u003d sc.nextLine().trim();"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        // Initialise list"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        int numOfItems \u003d 0;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        String[] command \u003d {\"list\", \"bye\", \"todo\", \"deadline\", \"event\"};"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"        // User input"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        while (!input.equals(\"bye\")) {"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"            String[] inputArr \u003d input.split(\" \");"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"            try {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"                switch(inputArr[0]) {"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"                    case \"list\":"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Here are the tasks on your list:\");"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"                        for (int i \u003d 1; i \u003c\u003d numOfItems; i++) {"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"                            String output \u003d String.format(\"%s. %s\", i, tasks.get(i - 1).toString());"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"                            System.out.println(output);"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"                        }"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"                        break;"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"                    case \"done\":"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"                        doneCommand(tasks, inputArr);"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"                        break;"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"                    case \"todo\":"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"                        toDoCommand(inputArr, tasks, numOfItems, input);"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(tasks.get(numOfItems).toString());"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"                        numOfItems++;"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Now you have \" + numOfItems + \" tasks in the list.\");"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"                        break;"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"                    case \"deadline\":"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"                        deadlineCommand(inputArr, tasks, numOfItems, input);"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(tasks.get(numOfItems).toString());"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"                        numOfItems++;"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Now you have \" + numOfItems + \" tasks in the list.\");"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"                        break;"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"                    case \"event\":"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"                        eventCommand(inputArr, tasks, numOfItems, input);"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(tasks.get(numOfItems).toString());"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"                        numOfItems++;"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Now you have \" + numOfItems + \" tasks in the list.\");"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"                        break;"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"                    case \"delete\":"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(tasks.get(Integer.parseInt(inputArr[1]) - 1));"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"                        deleteCommand(inputArr, tasks);"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"                        numOfItems--;"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"                        System.out.println(\"Now you have \" + numOfItems + \" tasks in the list.\");"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"                        break;"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"                    default:"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"                        throw new DukeWrongInputException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"            } catch (DukeMissingInputException e) {"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"                System.out.println(e.toString());"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"            } catch (DukeWrongInputException e) {"},{"lineNumber":65,"author":{"gitId":"ZhangAnli"},"content":"                System.out.println(e.toString());"},{"lineNumber":66,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"ZhangAnli"},"content":"            input \u003d sc.nextLine().trim();"},{"lineNumber":68,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"ZhangAnli"},"content":"        byeCommand();"},{"lineNumber":70,"author":{"gitId":"ZhangAnli"},"content":"        sc.close();"},{"lineNumber":71,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":73,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"ZhangAnli"},"content":"     * Command method when the user types in \"bye\"."},{"lineNumber":75,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"ZhangAnli"},"content":"    public static void byeCommand(){"},{"lineNumber":77,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":78,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":80,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"ZhangAnli"},"content":"     * Command method when the user types in \"done X\""},{"lineNumber":82,"author":{"gitId":"ZhangAnli"},"content":"     * @param tasks List of tasks."},{"lineNumber":83,"author":{"gitId":"ZhangAnli"},"content":"     * @param inputArr Command input."},{"lineNumber":84,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"ZhangAnli"},"content":"    public static void doneCommand(List\u003cTask\u003etasks, String[] inputArr ){"},{"lineNumber":86,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":87,"author":{"gitId":"ZhangAnli"},"content":"        Task doneTask \u003d tasks.get(Integer.parseInt(inputArr[1]) - 1);"},{"lineNumber":88,"author":{"gitId":"ZhangAnli"},"content":"        doneTask.markAsDone();"},{"lineNumber":89,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(tasks.get(Integer.parseInt(inputArr[1]) - 1).toString());"},{"lineNumber":90,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":92,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"ZhangAnli"},"content":"     * Command method when the user types in \"todo\"."},{"lineNumber":94,"author":{"gitId":"ZhangAnli"},"content":"     * @param inputArr Command input in array form."},{"lineNumber":95,"author":{"gitId":"ZhangAnli"},"content":"     * @param tasks List of tasks."},{"lineNumber":96,"author":{"gitId":"ZhangAnli"},"content":"     * @param numOfItems Number of items in the list."},{"lineNumber":97,"author":{"gitId":"ZhangAnli"},"content":"     * @param input Original input"},{"lineNumber":98,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException"},{"lineNumber":99,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"ZhangAnli"},"content":"    public static void toDoCommand(String[] inputArr, List\u003cTask\u003e tasks, int numOfItems, String input)"},{"lineNumber":101,"author":{"gitId":"ZhangAnli"},"content":"            throws DukeMissingInputException {"},{"lineNumber":102,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":103,"author":{"gitId":"ZhangAnli"},"content":"        if (input.equals(\"todo\")) {"},{"lineNumber":104,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":105,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":106,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c inputArr.length; i++) {"},{"lineNumber":107,"author":{"gitId":"ZhangAnli"},"content":"                description +\u003d (inputArr[i] + \" \");"},{"lineNumber":108,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"ZhangAnli"},"content":"        description \u003d description.trim();"},{"lineNumber":111,"author":{"gitId":"ZhangAnli"},"content":"        tasks.add(new Todo(description)) ;"},{"lineNumber":112,"author":{"gitId":"ZhangAnli"},"content":"        tasks.get(numOfItems).toString();"},{"lineNumber":113,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":115,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"ZhangAnli"},"content":"     * Command method when the user types in \"deadline\"."},{"lineNumber":117,"author":{"gitId":"ZhangAnli"},"content":"     * @param inputArr Command input in array form."},{"lineNumber":118,"author":{"gitId":"ZhangAnli"},"content":"     * @param tasks List of tasks."},{"lineNumber":119,"author":{"gitId":"ZhangAnli"},"content":"     * @param numOfItems Number of items in the list."},{"lineNumber":120,"author":{"gitId":"ZhangAnli"},"content":"     * @param input Original input."},{"lineNumber":121,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException Throws Missing Input Exception when missing input."},{"lineNumber":122,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"ZhangAnli"},"content":"    public static void deadlineCommand(String[] inputArr, List\u003cTask\u003e tasks, int numOfItems, String input)"},{"lineNumber":124,"author":{"gitId":"ZhangAnli"},"content":"            throws DukeMissingInputException {"},{"lineNumber":125,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":126,"author":{"gitId":"ZhangAnli"},"content":"        String deadline \u003d \"\";"},{"lineNumber":127,"author":{"gitId":"ZhangAnli"},"content":"        boolean foundBy \u003d false;"},{"lineNumber":128,"author":{"gitId":"ZhangAnli"},"content":"        if (input.equals(\"deadline\")) {"},{"lineNumber":129,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":130,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":131,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c inputArr.length; i++) {"},{"lineNumber":132,"author":{"gitId":"ZhangAnli"},"content":"                if (inputArr[i].equals(\"/by\")) {"},{"lineNumber":133,"author":{"gitId":"ZhangAnli"},"content":"                    foundBy \u003d true;"},{"lineNumber":134,"author":{"gitId":"ZhangAnli"},"content":"                    continue;"},{"lineNumber":135,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":136,"author":{"gitId":"ZhangAnli"},"content":"                if (foundBy) {"},{"lineNumber":137,"author":{"gitId":"ZhangAnli"},"content":"                    deadline +\u003d (inputArr[i] + \" \");"},{"lineNumber":138,"author":{"gitId":"ZhangAnli"},"content":"                } else {"},{"lineNumber":139,"author":{"gitId":"ZhangAnli"},"content":"                    description +\u003d (inputArr[i] + \" \");"},{"lineNumber":140,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":141,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":142,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"ZhangAnli"},"content":"        deadline \u003d deadline.trim();"},{"lineNumber":144,"author":{"gitId":"ZhangAnli"},"content":"        tasks.add(new Deadline(description, deadline));"},{"lineNumber":145,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":147,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"ZhangAnli"},"content":"     * Command method when the user types in \"event\"."},{"lineNumber":149,"author":{"gitId":"ZhangAnli"},"content":"     * @param inputArr Command input in array form."},{"lineNumber":150,"author":{"gitId":"ZhangAnli"},"content":"     * @param tasks List of tasks."},{"lineNumber":151,"author":{"gitId":"ZhangAnli"},"content":"     * @param numOfItems Number of items in the list."},{"lineNumber":152,"author":{"gitId":"ZhangAnli"},"content":"     * @param input Original input."},{"lineNumber":153,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException"},{"lineNumber":154,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"ZhangAnli"},"content":"    public static void eventCommand(String[] inputArr, List\u003cTask\u003e tasks, int numOfItems, String input)"},{"lineNumber":156,"author":{"gitId":"ZhangAnli"},"content":"            throws DukeMissingInputException {"},{"lineNumber":157,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":158,"author":{"gitId":"ZhangAnli"},"content":"        String time \u003d \"\";"},{"lineNumber":159,"author":{"gitId":"ZhangAnli"},"content":"        boolean foundAt \u003d false;"},{"lineNumber":160,"author":{"gitId":"ZhangAnli"},"content":"        if (input.equals(\"event\")) {"},{"lineNumber":161,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":162,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":163,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c inputArr.length; i++) {"},{"lineNumber":164,"author":{"gitId":"ZhangAnli"},"content":"                if (inputArr[i].equals(\"/at\")){"},{"lineNumber":165,"author":{"gitId":"ZhangAnli"},"content":"                    foundAt \u003d true;"},{"lineNumber":166,"author":{"gitId":"ZhangAnli"},"content":"                    continue;"},{"lineNumber":167,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":168,"author":{"gitId":"ZhangAnli"},"content":"                if (foundAt) {"},{"lineNumber":169,"author":{"gitId":"ZhangAnli"},"content":"                    time +\u003d (inputArr[i] + \" \");"},{"lineNumber":170,"author":{"gitId":"ZhangAnli"},"content":"                } else {"},{"lineNumber":171,"author":{"gitId":"ZhangAnli"},"content":"                    description +\u003d (inputArr[i] + \" \");"},{"lineNumber":172,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":173,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"ZhangAnli"},"content":"        time \u003d time.trim();"},{"lineNumber":176,"author":{"gitId":"ZhangAnli"},"content":"        tasks.add(new Event(description, time));"},{"lineNumber":177,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":179,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"ZhangAnli"},"content":"     * Command method when the user types in \"event\"."},{"lineNumber":181,"author":{"gitId":"ZhangAnli"},"content":"     * @param inputArr Command input in array form."},{"lineNumber":182,"author":{"gitId":"ZhangAnli"},"content":"     * @param tasks List of tasks."},{"lineNumber":183,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"ZhangAnli"},"content":"    public static void deleteCommand(String[] inputArr, List\u003cTask\u003e tasks){"},{"lineNumber":185,"author":{"gitId":"ZhangAnli"},"content":"        tasks.remove(Integer.parseInt(inputArr[1]) - 1);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhangAnli":183,"-":4}},{"path":"src/main/java/DukeMissingInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class DukeMissingInputException extends Exception {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method for Duke\u0027s Missing Input Exception."},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"     * @param message Takes in a String message."},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public DukeMissingInputException(String message) {"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Exception\u0027s toString method."},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * @return Returns the original message passed in."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    public String toString(){"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        return super.getMessage();"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":19}},{"path":"src/main/java/DukeWrongInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class DukeWrongInputException extends Exception{"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method for Duke\u0027s Missing Input Exception."},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"     * @param message Takes in a String message."},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    public DukeWrongInputException(String message) {"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"        super(message);"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Exception\u0027s toString method."},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     * @return Returns the original message passed in."},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    public String toString(){"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"        return super.getMessage();"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":18}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private String timeslot;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String to describe the task."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     * @param timeslot String to describe the timeslot."},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public Event(String description, String timeslot){"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the event."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    public String toString(){"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + timeslot + \")\";"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":23}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public abstract class Task {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method."},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String to describe task."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    protected Task(String description) {"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        this.description \u003d description;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d false;"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method."},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String to describe task."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * @param isDone Boolean for the done status for task."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    protected Task(String description, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     * Status icon for the task based on whether it is done or not."},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output."},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"    public String getStatusIcon() {"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"     * To mark the task as done."},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    public void markAsDone(){"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d true;"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides toString method."},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"     * @return Prints out task description."},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"        return \"[\" + this.getStatusIcon() + \"]\" + this.description;"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":47}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String that describes the task."},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public Todo(String description){"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the todo."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    public String toString(){"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"list"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"bye"}],"authorContributionMap":{"ZhangAnli":6}}]
