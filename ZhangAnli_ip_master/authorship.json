[{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public abstract class Command {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException, DukeWrongInputException;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    public abstract boolean isExit();"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":4}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private LocalDate deadline;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String that describes the task."},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * @param deadline String that describes the deadline."},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    public Deadline(String description, LocalDate deadline){"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * @param description task description"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @param deadline task deadline"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * @param isDone task done status"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    public Deadline(String description, LocalDate deadline, boolean isDone){"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"        super(description, isDone);"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"     * Getter method for task deadline."},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"     * @return string of task deadline"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"    public LocalDate getDeadline(){"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        return this.deadline;"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    public LocalDate changeDeadline(LocalDate deadline){"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"        return this.deadline;"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the deadline."},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":50}},{"path":"src/main/java/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    public DeadlineCommand(String command){"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException, DukeWrongInputException {"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"        String deadline \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        boolean foundBy \u003d false;"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        if (command.equals(\"deadline\")) {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c commandArr.length; i++) {"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"                if (commandArr[i].equals(\"/by\")) {"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"                    foundBy \u003d true;"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"                    continue;"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"                if (foundBy) {"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"                    deadline +\u003d (commandArr[i] + \" \");"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"                } else {"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"                    description +\u003d (commandArr[i] + \" \");"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        deadline \u003d deadline.trim();"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"        if (isDate(deadline)){"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"            LocalDate dateDeadline \u003d LocalDate.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"            Deadline newDeadline \u003d new Deadline(description, dateDeadline);"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"            taskList.add(newDeadline);"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"            ui.showTaskAdded(newDeadline);"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeWrongInputException(\"OOPS!!! Please enter your deadline in the format: deadline /by yyyy-mm-dd :-(\");"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"    /** Method to check if a certain string is of date format."},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"     * @param str - input string to be checked if it is in the format of a string"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value telling us whether the string is a date or just simple text."},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"    public static boolean isDate(String str) {"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-mm-DD\");"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"            LocalDate.parse(str, dateTimeFormatter);"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"            return false;"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"        return true;"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":63}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    public DeleteCommand(String command){"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException, DukeWrongInputException {"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        ui.showTaskDeleted(taskList.getTaskAtIndex(Integer.parseInt(commandArr[1]) - 1));"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        taskList.delete(Integer.parseInt(commandArr[1]) - 1);"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":20}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class DoneCommand extends Command{"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    public DoneCommand(String command){"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException, DukeWrongInputException {"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        Task doneTask \u003d taskList.getTaskAtIndex(Integer.parseInt(commandArr[1]) - 1);"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        doneTask.markAsDone();"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        ui.showTaskDone(doneTask);"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":22}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.io.*;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"    private Storage storage;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    private TaskList taskList;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private static Ui ui \u003d new Ui();"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    public Duke(String filePath) throws IOException {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"            taskList \u003d new TaskList(storage.load());"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        } catch (IOException e) {"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"            ui.showLoadingError(e);"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    public void run() throws IOException {"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        storage.load();"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        ui.showWelcome();"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        boolean isExit \u003d false;"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"        while (!isExit) {"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"            try {"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"                ui.showLine();"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"                c.execute(taskList, ui, storage);"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"            } catch (DukeWrongInputException e) {"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"            } catch (DukeMissingInputException e) {"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"            } finally {"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"                ui.showLine();"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"        storage.save(taskList.getTaskList());"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"        ui.showBye();"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"        new Duke(\"src/main/data/duke.txt\").run();"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhangAnli":43,"-":3}},{"path":"src/main/java/DukeMissingInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class DukeMissingInputException extends Exception {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method for Duke\u0027s Missing Input Exception."},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"     * @param message Takes in a String message."},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public DukeMissingInputException(String message) {"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Exception\u0027s toString method."},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * @return Returns the original message passed in."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    public String toString(){"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        return super.getMessage();"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":19}},{"path":"src/main/java/DukeWrongInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class DukeWrongInputException extends Exception{"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method for Duke\u0027s Missing Input Exception."},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"     * @param message Takes in a String message."},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    public DukeWrongInputException(String message) {"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"        super(message);"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Exception\u0027s toString method."},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     * @return Returns the original message passed in."},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    public String toString(){"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"        return super.getMessage();"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":18}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private String timeslot;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String to describe the task."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     * @param timeslot String to describe the timeslot."},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public Event(String description, String timeslot){"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    public Event(String description, String timeslot, boolean isDone){"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"        super(description, isDone);"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    public String getTimeslot(){"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        return this.timeslot;"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    public String changeTimeslot(String timeslot){"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        return this.timeslot;"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the event."},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"    public String toString(){"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + timeslot + \")\";"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":37}},{"path":"src/main/java/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class EventCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    public EventCommand(String command){"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException, DukeWrongInputException {"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        String time \u003d \"\";"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        boolean foundAt \u003d false;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        String [] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"        if (command.equals(\"event\")) {"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c commandArr.length; i++) {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"                if (commandArr[i].equals(\"/at\")){"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"                    foundAt \u003d true;"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"                    continue;"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"                if (foundAt) {"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"                    time +\u003d (commandArr[i] + \" \");"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"                } else {"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"                    description +\u003d (commandArr[i] + \" \");"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        time \u003d time.trim();"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        Event newEvent \u003d new Event(description, time);"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        taskList.add(newEvent);"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        ui.showTaskAdded(newEvent);"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":41}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"public class ExitCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public ExitCommand(String command){"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException, DukeWrongInputException {"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        return;"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        return true;"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":19}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class ListCommand extends Command{"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    public ListCommand(String command){"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException, DukeWrongInputException {"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        ui.showListItems();"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.getTaskListLength(); i++) {"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"            String output \u003d String.format(\"%s. %s\", i, taskList.getTaskAtIndex(i - 1).toString());"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"            System.out.println(output);"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit(){"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":22}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class Parser {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private TaskList taskList;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"    private Ui ui;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    private Storage storage;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private static String[] command \u003d {\"list\", \"bye\", \"todo\", \"deadline\", \"event\"};"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    public Parser(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        this.ui \u003d ui;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        this.storage \u003d storage;"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    public static Command parse(String command) throws DukeWrongInputException {"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        // User input"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        command \u003d command.trim();"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"        switch(commandArr[0]) {"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"            case \"list\":"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"                return new ListCommand(command);"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"            case \"done\":"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"                return new DoneCommand(command);"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"            case \"todo\":"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"                return new TodoCommand(command);"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"            case \"event\":"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"                return new EventCommand(command);"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"            case \"deadline\":"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"                return new DeadlineCommand(command);"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"            case \"delete\":"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"                return new DeleteCommand(command);"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"            case \"bye\":"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"                return new ExitCommand(command);"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"            default:"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"                throw new DukeWrongInputException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":37}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.io.*;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"public class Storage {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    private File hardDrive;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method for storage class."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     * @param filePath file path for the hard drive file."},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * @throws IOException - exception thrown when there is error in file path."},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    public Storage(String filePath) throws IOException {"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"        this.hardDrive \u003d new File(filePath);"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        if (hardDrive.createNewFile()) {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"            System.out.println(\"Hard Disk created.\");"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"            System.out.println(\"Hard Disk loaded.\");"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"     * Loads hard drive from the file"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"     * @throws FileNotFoundException throws file not found exception if file is not found at target location."},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    public List\u003cTask\u003e load() throws FileNotFoundException {"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        Scanner sc \u003d new Scanner(this.hardDrive);"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        while (sc.hasNextLine()){"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"            String[] entry \u003d sc.nextLine().split(\" / \");"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"            switch (entry[0]){"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"                case \"T\":"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"                    tasks.add(new Todo(entry[2], Boolean.parseBoolean(entry[1])));"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"                    break;"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"                case \"E\":"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"                    tasks.add(new Event(entry[2], entry[3], Boolean.parseBoolean(entry[1])));"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"                    break;"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"                case \"D\":"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"                    LocalDate deadline \u003d LocalDate.parse(entry[3], DateTimeFormatter.ofPattern(\"yyyy-mm-DD\"));"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"                    tasks.add(new Deadline(entry[2], deadline, Boolean.parseBoolean(entry[1])));"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"                    break;"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"        sc.close();"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"        return tasks;"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"     * Saves the information from the current list of tasks to the hard drive (duke.txt)"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"     * @param tasks current list of tasks"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"     * @throws IOException throw IOException when there is an error with the file."},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"    public void save(List\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"        FileWriter fw \u003d new FileWriter(this.hardDrive);"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"        for (Task t: tasks) {"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"            if (t instanceof Todo) {"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"                fw.write(String.format(\"T / %s / %s%n\", t.getIsDone(), t.getDescription()));"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"            } else if (t instanceof Event) {"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"                fw.write(String.format(\"E / %s / %s / %s%n\", t.getIsDone(), t.getDescription(), ((Event) t).getTimeslot()));"},{"lineNumber":65,"author":{"gitId":"ZhangAnli"},"content":"            } else if (t instanceof Deadline) {"},{"lineNumber":66,"author":{"gitId":"ZhangAnli"},"content":"                fw.write(String.format(\"D / %s / %s / %s%n\", t.getIsDone(), t.getDescription(), ((Deadline) t).getDeadline().toString()));"},{"lineNumber":67,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"ZhangAnli"},"content":"        fw.close();"},{"lineNumber":70,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":72,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"ZhangAnli"},"content":"     * Returns the number of lines in the file."},{"lineNumber":74,"author":{"gitId":"ZhangAnli"},"content":"     * @return returns the number of lines in the text file"},{"lineNumber":75,"author":{"gitId":"ZhangAnli"},"content":"     * @throws IOException throw IOException when there is an error with the file."},{"lineNumber":76,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"ZhangAnli"},"content":"    public int getFileLinesCount() throws IOException {"},{"lineNumber":78,"author":{"gitId":"ZhangAnli"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(this.hardDrive));"},{"lineNumber":79,"author":{"gitId":"ZhangAnli"},"content":"        int lines \u003d 0;"},{"lineNumber":80,"author":{"gitId":"ZhangAnli"},"content":"        while (reader.readLine() !\u003d null) {lines++;};"},{"lineNumber":81,"author":{"gitId":"ZhangAnli"},"content":"        reader.close();"},{"lineNumber":82,"author":{"gitId":"ZhangAnli"},"content":"        return lines;"},{"lineNumber":83,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":84}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public abstract class Task {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method."},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String to describe task."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    protected Task(String description) {"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        this.description \u003d description;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d false;"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method."},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String to describe task."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * @param isDone Boolean for the done status for task."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    protected Task(String description, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     * Status icon for the task based on whether it is done or not."},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output."},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"    public String getStatusIcon() {"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"     * To mark the task as done."},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"    public void markAsDone(){"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d true;"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"     * Getter for checking if Task is done."},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean for whether the task is done."},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"    public boolean getIsDone(){"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"        return this.isDone;"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"     * Getter for the task description."},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"     * @return string for task description."},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"    public String getDescription(){"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"        return this.description;"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides toString method."},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"     * @return Prints out task description."},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"        return \"[\" + this.getStatusIcon() + \"]\" + this.description;"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":64}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class TaskList {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    public TaskList(){"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    public void add(Task task) {"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        tasks.add(task);"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    public void delete(int index) {"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        tasks.remove(index);"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    public List\u003cTask\u003e getTaskList(){"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"        return this.tasks;"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"    public int getTaskListLength(){"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"        return this.tasks.size();"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"    public Task getTaskAtIndex(int index) {"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        return this.tasks.get(index);"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":35}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String that describes the task."},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public Todo(String description){"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    public Todo(String description, boolean isDone){"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        super(description, isDone);"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the todo."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    public String toString(){"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":23}},{"path":"src/main/java/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"public class TodoCommand extends Command{"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public TodoCommand(String command){"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException, DukeWrongInputException {"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.split(\" \");"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        if (command.equals(\"todo\")) {"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c commandArr.length; i++) {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"                description +\u003d (commandArr[i] + \" \");"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"        description \u003d description.trim();"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"        Todo newTodo \u003d new Todo(description);"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"        taskList.add(newTodo);"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        ui.showTaskAdded(newTodo);"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":33}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    public String readCommand() {"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"        while (sc.hasNext()){"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"            return sc.nextLine();"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        return \"\";"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    public void showLine() {"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"---------------------------------------------------------------------\");"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    public void showError(String errorMessage) {"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(errorMessage);"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    public void showWelcome() {"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Hello, I am Duke, your personal Assistant. How may I help you today?:\");"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"    public void showNumberOfItems(int numOfItems) {"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Now you have \" + numOfItems + \" tasks in the list.\");"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    public void showTaskAdded(Task task) {"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(task.toString());"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"    public void showTaskDone(Task task){"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(task.toString());"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"    public void showListItems(){"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Here are the tasks on your list:\");"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"    public void showTaskDeleted(Task task) {"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(task.toString());"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"    public void showBye(){"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"    public void showLoadingError(Exception e) {"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"        System.out.println(e.getMessage());"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":55}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    public void testDeadlineStringConversion(){"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        LocalDate dateDeadline \u003d LocalDate.parse(\"2021-01-20\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        Deadline deadline \u003d new Deadline(\"Buy Birthday Cake\", dateDeadline);"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(\"[D][✘]Buy Birthday Cake(by: 20 Jan 2021)\", deadline.toString());"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    public void testGetDeadline (){"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        LocalDate dateDeadline \u003d LocalDate.parse(\"2021-01-20\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        Deadline deadline \u003d new Deadline(\"Buy Birthday Cake\", dateDeadline);"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(dateDeadline, deadline.getDeadline());"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"    public void testChangeDeadline () {"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        LocalDate dateDeadline \u003d LocalDate.parse(\"2021-01-25\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"        Deadline deadline \u003d new Deadline(\"Buy Birthday Cake\", dateDeadline);"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(dateDeadline, deadline.changeDeadline(dateDeadline));"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":31}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"public class EventTest {"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public void testEventStringConversion(){"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        Event event \u003d new Event(\"Attend seminar\", \"Sunday\");"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(\"[E][✘]Attend seminar(at: Sunday)\", event.toString());"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    public void testGetTimeSlot(){"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        Event event \u003d new Event(\"Attend seminar\", \"Sunday\");"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(\"Sunday\", event.getTimeslot());"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    @Test public void testChangeTimeSlot(){"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        Event event \u003d new Event(\"Attend seminar\", \"Sunday\");"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(\"Monday\", event.changeTimeslot(\"Monday\"));"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"list"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"bye"}],"authorContributionMap":{"ZhangAnli":6}}]
