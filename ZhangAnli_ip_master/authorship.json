[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"test {"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"    useJUnitPlatform()"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"}"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"dependencies {"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":65,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":66,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":67,"author":{"gitId":"ZhangAnli"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":68,"author":{"gitId":"ZhangAnli"},"content":"}"},{"lineNumber":69,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":70,"author":{"gitId":"ZhangAnli"},"content":"checkstyle {"},{"lineNumber":71,"author":{"gitId":"ZhangAnli"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":72,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":26,"-":46}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"D / true / return book  / 2020-01-25"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"E / true / project meeting  / Mon 2-4pm"}],"authorContributionMap":{"ZhangAnli":2}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Abstract command parent class."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public abstract class Command {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     * Abstract execute method."},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * Each command has a execute method that when called, executes that particular command."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList List of Tasks."},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui Standard UI object."},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage Standard storage object."},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException If todo, deadline or event is missing detail description."},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException If user input is not any of the commands available."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException;"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     * Abstract method that indicates if particular method is an exit command."},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether the task is an exit command."},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    public abstract boolean isExit();"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":24}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":" * Deadline class that extends from Task parent class."},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":" * Represents a deadline task."},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    private LocalDate deadline;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * @param description task description."},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * @param deadline LocalDate object that describes the deadline."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    public Deadline(String description, LocalDate deadline) {"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method."},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"     * @param description task description."},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"     * @param deadline LocalDate object that describes the deadline."},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"     * @param isDone task done status."},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    public Deadline(String description, LocalDate deadline, boolean isDone) {"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        super(description, isDone);"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"     * Getter method for task deadline."},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"     * @return string of task deadline"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"    public LocalDate getDeadline() {"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"        return this.deadline;"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"     * Method that allows user to change the deadline of task"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"     * @param deadline new deadline to be changed to"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"     * @return the new deadline"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"    public LocalDate changeDeadline(LocalDate deadline) {"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"        return this.deadline;"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the deadline."},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":64}},{"path":"src/main/java/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":" * Command to create a deadline object."},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * @param command input command from user."},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    public DeadlineCommand(String command) {"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * Execute method for deadline."},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList List of Tasks."},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui Standard UI object."},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage Standard storage object."},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException If deadline command is missing description."},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException If user input is not any of the commands available."},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException {"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        String deadline \u003d \"\";"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"        boolean foundBy \u003d false;"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"        if (command.equals(\"deadline\")) {"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS! The description of a deadline cannot be empty.\");"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c commandArr.length; i++) {"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"                if (commandArr[i].equals(\"/by\")) {"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"                    foundBy \u003d true;"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"                    continue;"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"                if (foundBy) {"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"                    deadline +\u003d (commandArr[i] + \" \");"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"                } else {"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"                    description +\u003d (commandArr[i] + \" \");"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"        deadline \u003d deadline.trim();"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"        if (isDate(deadline)) {"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"            LocalDate dateDeadline \u003d LocalDate.parse(deadline, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"            Deadline newDeadline \u003d new Deadline(description, dateDeadline);"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"            taskList.add(newDeadline);"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"            storage.save(taskList.getTaskList());"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"            return ui.showTaskAdded(newDeadline);"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeWrongInputException("},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"                    \"OOPS! Please enter your deadline in the format: deadline /by yyyy-mm-dd\");"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":65,"author":{"gitId":"ZhangAnli"},"content":"    /** Method to check if a certain string is of date format."},{"lineNumber":66,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"ZhangAnli"},"content":"     * @param str - input string to be checked if it is in the format of a string."},{"lineNumber":68,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value telling us whether the string is a date or just simple text."},{"lineNumber":69,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"ZhangAnli"},"content":"    public static boolean isDate(String str) {"},{"lineNumber":71,"author":{"gitId":"ZhangAnli"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-mm-DD\");"},{"lineNumber":72,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"ZhangAnli"},"content":"            LocalDate.parse(str, dateTimeFormatter);"},{"lineNumber":74,"author":{"gitId":"ZhangAnli"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":75,"author":{"gitId":"ZhangAnli"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"ZhangAnli"},"content":"        return true;"},{"lineNumber":78,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":80,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"ZhangAnli"},"content":"     * Indicates whether command is an exit command."},{"lineNumber":82,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether command is an exit command."},{"lineNumber":84,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":87,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":88,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":89}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Command to delete a task."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * @param command command input from user."},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    public DeleteCommand(String command) {"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     * Execute command for delete command."},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList List of Tasks."},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui Standard UI object."},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage Standard storage object."},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException If delete command is missing description."},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException If user input is not any of the inputs available."},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException {"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"        int itemPosition \u003d Integer.parseInt(commandArr[1]) - 1;"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        if (itemPosition + 1 \u003c\u003d taskList.getTaskListLength() \u0026\u0026 itemPosition \u003e\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"            String output \u003d ui.showTaskDeleted(taskList.getTaskAtIndex(itemPosition));"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"            taskList.delete(itemPosition);"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"            storage.save(taskList.getTaskList());"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"            return output;"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeWrongInputException(\"Oops! Item number to be deleted out of bounds\");"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"     * Indicates whether command is an exit command."},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether command is an exit command."},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":50}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":59}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Command to mark a task as done."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class DoneCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    public DoneCommand(String command) {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * Overriding execute method."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList List of Tasks."},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui Standard UI object."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage Standard storage object."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException If done command is missing description."},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException If user input is not any of the inputs available."},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException {"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"        int itemPosition \u003d Integer.parseInt(commandArr[1]) - 1;"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        if (itemPosition + 1 \u003c\u003d taskList.getTaskListLength() \u0026\u0026 itemPosition \u003e\u003d 0) {"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"            Task doneTask \u003d taskList.getTaskAtIndex(itemPosition);"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"            doneTask.markAsDone();"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"            storage.save(taskList.getTaskList());"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"            return ui.showTaskDone(doneTask);"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeWrongInputException(\"Oops! Item number to be marked done is out of bounds.\");"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"     * Indicates whether command is an exit command."},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether command is an exit command."},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":45}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Duke is a AI assistant program that allows users to take note of their tasks."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" * Functions supported include:"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":" * - Creating tasks: todos, events, deadlines"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":" * - Marking tasks as done"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":" * - Deleting tasks"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":" * - Showing the whole list of tasks"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":" * - Error checking for IO"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    private static Ui ui \u003d new Ui();"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    private TaskList taskList;"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    public Duke() {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"            this.storage \u003d new Storage();"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"            taskList \u003d new TaskList(storage.load());"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"        } catch (DukeWrongInputException e) {"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"            ui.showLoadingError(e);"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"     * Duke\u0027s response based on user input."},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"    public String getResponse(String input) {"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"            return c.execute(taskList, ui, storage);"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"        } catch (DukeWrongInputException e) {"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"            return e.getMessage();"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"        } catch (DukeMissingInputException e) {"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"            return e.getMessage();"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ZhangAnli":39,"-":3}},{"path":"src/main/java/DukeMissingInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Exception when there is a missing input from user."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class DukeMissingInputException extends Exception {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method for Duke\u0027s Missing Input Exception."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     * @param message Takes in a String message."},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public DukeMissingInputException(String message) {"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Exception\u0027s toString method."},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * @return Returns the original message passed in."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        return super.getMessage();"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":22}},{"path":"src/main/java/DukeWrongInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Exception when there is a wrong input from the user."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class DukeWrongInputException extends Exception {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method for Duke\u0027s Missing Input Exception."},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * @param message Takes in a String message."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    public DukeWrongInputException(String message) {"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Exception\u0027s toString method."},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * @return Returns the original message passed in."},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        return super.getMessage();"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":21}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Event class that specifies an event happening at a certain time."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class Event extends Task {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private String timeslot;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded Constructor method"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     * @param description task description"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * @param timeslot task timeslot"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    public Event(String description, String timeslot) {"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * @param description task description"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @param timeslot task timeslot"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * @param isDone task status"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    public Event(String description, String timeslot, boolean isDone) {"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"        super(description, isDone);"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"     * Getter method for Event time."},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"     * @return timeslot"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"    public String getTimeslot() {"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        return this.timeslot;"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"     * Method to change event timeslot"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"     * @param timeslot task timeslot"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"     * @return new timeslot"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"    public String changeTimeslot(String timeslot) {"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"        return this.timeslot;"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the event."},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + timeslot + \")\";"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":55}},{"path":"src/main/java/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Command to create an Event."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class EventCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     * @param command user command for creating event."},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    public EventCommand(String command) {"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * Execute command for event command."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList List of Tasks."},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui Standard UI object."},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage Standard storage object."},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException If event command is missing description."},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException If user input is not any of the inputs available."},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException {"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"        String time \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"        boolean foundAt \u003d false;"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"        String [] commandArr \u003d command.trim().split(\" \");"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        if (command.equals(\"event\")) {"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS! The description of an event cannot be empty.\");"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c commandArr.length; i++) {"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"                if (commandArr[i].equals(\"/at\")) {"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"                    foundAt \u003d true;"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"                    continue;"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"                if (foundAt) {"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"                    time +\u003d (commandArr[i] + \" \");"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"                } else {"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"                    description +\u003d (commandArr[i] + \" \");"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"        time \u003d time.trim();"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"        Event newEvent \u003d new Event(description, time);"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"        taskList.add(newEvent);"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"        storage.save(taskList.getTaskList());"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"        return ui.showTaskAdded(newEvent);"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"     * Indicates whether command is an exit command."},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether command is an exit command."},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":62}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Command to create an Event."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class ExitCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     * @param command user input command"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    public ExitCommand(String command) {"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * Dummy Execute method for Exit Command"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList List of Tasks."},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui Standard UI object."},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage Standard storage object."},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException If exit command is missing description."},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException If user input is not any of the inputs available."},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException {"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"        return ui.showBye();"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"     * Indicates whether command is an exit command."},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether command is an exit command."},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"        return true;"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":38}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"public class FindCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"    public FindCommand(String command) {"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException {"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        return ui.showFoundListItems(taskList, command);"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * Indicates whether command is an exit command."},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether command is an exit command."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":23}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":10}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Command for showing the entire list of tasks."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class ListCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     * @param command user command input"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    public ListCommand(String command) {"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * Execute method for list command."},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList List of Tasks."},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui Standard UI object."},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage Standard storage object."},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException If list command is missing description."},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException If user input is not any of the inputs available."},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException {"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"        return ui.showListItems(taskList) + \"\\n\" + ui.showNumberOfItems(taskList.getTaskListLength());"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"     * Indicates whether command is an exit command."},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether command is an exit command."},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":38}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    public Main() throws IOException {}"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":31}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"     * Initialises the main window."},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        String welcomeMessage \u003d ui.showWelcome();"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(welcomeMessage, dukeImage));"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"    private void handleUserInput() {"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":55}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Parser takes in a user command, parses it and returns the corresponding command."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class Parser {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private TaskList taskList;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    private Ui ui;"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    private Storage storage;"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList list of tasks"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui standard ui object"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage standard storage object"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    public Parser(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        this.ui \u003d ui;"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        this.storage \u003d storage;"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"     * Parse method takes in command in the form of a string and returns a class."},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"     * @param command user command input"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"     * @return respective command object based on user input"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException if system does not understand user input"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    public static Command parse(String command) throws DukeWrongInputException {"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        // User input"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.trim().toLowerCase().split(\" \");"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        command \u003d command.trim();"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        switch(commandArr[0]) {"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"        case \"list\":"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"            return new ListCommand(command);"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"        case \"done\":"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"            return new DoneCommand(command);"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"        case \"todo\":"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"            return new TodoCommand(command);"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"        case \"event\":"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"            return new EventCommand(command);"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"        case \"deadline\":"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"            return new DeadlineCommand(command);"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"        case \"delete\":"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"            return new DeleteCommand(command);"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"        case \"find\":"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"            return new FindCommand(command);"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"        case \"bye\":"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"            return new ExitCommand(command);"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"        default:"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeWrongInputException(\"OOPS! I\u0027m sorry, I don\u0027t understand.\");"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":55}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"import java.io.FileReader;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":" * Storage class responsible for loading and saving data into hard drive."},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    private File hardDrive;"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method for storage class."},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * @throws IOException - exception thrown when there is error in file path."},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    public Storage() throws DukeWrongInputException {"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"            this.hardDrive \u003d new File(\"duke.txt\");"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"            if (hardDrive.createNewFile()) {"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"                System.out.println(\"Hard Disk created.\");"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"            } else {"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"                System.out.println(\"Hard Disk loaded.\");"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeWrongInputException(\"File not found.\");"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"     * Loads hard drive from the file"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"     * @throws FileNotFoundException if file is not found at target location."},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"    public List\u003cTask\u003e load() throws DukeWrongInputException {"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"            Scanner sc \u003d new Scanner(this.hardDrive);"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"                String[] entry \u003d sc.nextLine().split(\" / \");"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"                switch (entry[0]) {"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"                case \"T\":"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"                    tasks.add(new Todo(entry[2], Boolean.parseBoolean(entry[1])));"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"                    break;"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"                case \"E\":"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"                    tasks.add(new Event(entry[2], entry[3], Boolean.parseBoolean(entry[1])));"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"                    break;"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"                case \"D\":"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"                    LocalDate deadline \u003d LocalDate.parse(entry[3], DateTimeFormatter.ofPattern(\"yyyy-mm-DD\"));"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"                    tasks.add(new Deadline(entry[2], deadline, Boolean.parseBoolean(entry[1])));"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"                    break;"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"                default:"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"                    throw new IOException(\"File Error: wrong data format in hard drive.\");"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"            sc.close();"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"        } catch (IOException e) {"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeWrongInputException(\"File Error: wrong data format in hard drive.\");"},{"lineNumber":65,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"ZhangAnli"},"content":"        return tasks;"},{"lineNumber":67,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":69,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"ZhangAnli"},"content":"     * Saves the information from the current list of tasks to the hard drive (duke.txt)"},{"lineNumber":71,"author":{"gitId":"ZhangAnli"},"content":"     * @param tasks current list of tasks"},{"lineNumber":72,"author":{"gitId":"ZhangAnli"},"content":"     * @throws IOException if there is an error with the file."},{"lineNumber":73,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"ZhangAnli"},"content":"    public void save(List\u003cTask\u003e tasks) throws DukeWrongInputException {"},{"lineNumber":75,"author":{"gitId":"ZhangAnli"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"ZhangAnli"},"content":"            FileWriter fw \u003d new FileWriter(this.hardDrive);"},{"lineNumber":77,"author":{"gitId":"ZhangAnli"},"content":"            for (Task t : tasks) {"},{"lineNumber":78,"author":{"gitId":"ZhangAnli"},"content":"                if (t instanceof Todo) {"},{"lineNumber":79,"author":{"gitId":"ZhangAnli"},"content":"                    fw.write(String.format(\"T / %s / %s%n\", t.getIsDone(), t.getDescription()));"},{"lineNumber":80,"author":{"gitId":"ZhangAnli"},"content":"                } else if (t instanceof Event) {"},{"lineNumber":81,"author":{"gitId":"ZhangAnli"},"content":"                    fw.write(String.format(\"E / %s / %s / %s%n\", t.getIsDone(), t.getDescription(), ("},{"lineNumber":82,"author":{"gitId":"ZhangAnli"},"content":"                            (Event) t).getTimeslot()));"},{"lineNumber":83,"author":{"gitId":"ZhangAnli"},"content":"                } else if (t instanceof Deadline) {"},{"lineNumber":84,"author":{"gitId":"ZhangAnli"},"content":"                    fw.write(String.format(\"D / %s / %s / %s%n\", t.getIsDone(), t.getDescription(), ("},{"lineNumber":85,"author":{"gitId":"ZhangAnli"},"content":"                            (Deadline) t).getDeadline().toString()));"},{"lineNumber":86,"author":{"gitId":"ZhangAnli"},"content":"                }"},{"lineNumber":87,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"ZhangAnli"},"content":"            fw.close();"},{"lineNumber":89,"author":{"gitId":"ZhangAnli"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeWrongInputException(\"File Error: wrong data format in hard drive.\");"},{"lineNumber":91,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":94,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"ZhangAnli"},"content":"     * Returns the number of lines in the file."},{"lineNumber":96,"author":{"gitId":"ZhangAnli"},"content":"     * @return returns the number of lines in the text file"},{"lineNumber":97,"author":{"gitId":"ZhangAnli"},"content":"     * @throws IOException if there is an error with the file."},{"lineNumber":98,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"ZhangAnli"},"content":"    public int getFileLinesCount() throws IOException {"},{"lineNumber":100,"author":{"gitId":"ZhangAnli"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(this.hardDrive));"},{"lineNumber":101,"author":{"gitId":"ZhangAnli"},"content":"        int lines \u003d 0;"},{"lineNumber":102,"author":{"gitId":"ZhangAnli"},"content":"        while (reader.readLine() !\u003d null) {"},{"lineNumber":103,"author":{"gitId":"ZhangAnli"},"content":"            lines++;"},{"lineNumber":104,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"ZhangAnli"},"content":"        reader.close();"},{"lineNumber":106,"author":{"gitId":"ZhangAnli"},"content":"        return lines;"},{"lineNumber":107,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":108}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Abstract parent class for all tasks including todos, events, deadlines."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public abstract class Task {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method."},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String to describe task."},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    protected Task(String description) {"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method."},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String to describe task."},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @param isDone Boolean for the done status for task."},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    protected Task(String description, boolean isDone) {"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"     * Status icon for the task based on whether it is done or not."},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output."},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"    public String getStatusIcon() {"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"     * To mark the task as done."},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"    public void markAsDone() {"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"        this.isDone \u003d true;"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"     * Getter for checking if Task is done."},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean for whether the task is done."},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"    public boolean getIsDone() {"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"        return this.isDone;"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"     * Getter for the task description."},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"     * @return string for task description."},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"    public String getDescription() {"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"        return this.description;"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides toString method."},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"     * @return Prints out task description."},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"ZhangAnli"},"content":"        return \"[\" + this.getStatusIcon() + \"]\" + this.description;"},{"lineNumber":67,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":68}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":" * List that keeps track of all the tasks currently stored in hard drive."},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":" * Supports"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method."},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @param tasks takes in a list of tasks"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"     * Adds in task to the task list"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"     * @param task takes in the task to be added."},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"    public void add(Task task) {"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"        tasks.add(task);"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"     * Deletes task at the specified index"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"     * @param index"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"    public void delete(int index) {"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"        tasks.remove(index);"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"     * Gets the task list in arraylist form."},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"     * @return task list in arraylist form."},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"        return this.tasks;"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"     * Gets the total number of tasks in the list"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"     * @return total tasks in the list"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"    public int getTaskListLength() {"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"        return this.tasks.size();"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"     * Gets the task at a particular index"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"     * @param index"},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"     * @return"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"    public Task getTaskAtIndex(int index) {"},{"lineNumber":65,"author":{"gitId":"ZhangAnli"},"content":"        return this.tasks.get(index);"},{"lineNumber":66,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":67}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * Todo task class that has no deadline or specified time slot."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class Todo extends Task {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     * @param description String that describes the task."},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    public Todo(String description) {"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     * Overloaded constructor method"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * @param description description of the task"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     * @param isDone status of task"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        super(description, isDone);"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"     * Overrides Task\u0027s toString method."},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     * @return String output for the todo."},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":31}},{"path":"src/main/java/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * To do command that creates a to do task."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class TodoCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    private String command;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"     * Constructor method."},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"     * @param command"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    public TodoCommand(String command) {"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        this.command \u003d command;"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"     * Execute method for To do command."},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList List of Tasks."},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"     * @param ui Standard UI object."},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"     * @param storage Standard storage object."},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeMissingInputException If list command is missing description."},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"     * @throws DukeWrongInputException If user input is not any of the inputs available."},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeMissingInputException,"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"            DukeWrongInputException {"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"        String description \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.split(\" \");"},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"        if (command.equals(\"todo\")) {"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"            throw new DukeMissingInputException(\"OOPS! The description of a todo cannot be empty.\");"},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"            for (int i \u003d 1; i \u003c commandArr.length; i++) {"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"                description +\u003d (commandArr[i] + \" \");"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"        description \u003d description.trim();"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":"        Todo newTodo \u003d new Todo(description);"},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"        taskList.add(newTodo);"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"        storage.save(taskList.getTaskList());"},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"        return ui.showTaskAdded(newTodo);"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"     * Indicates whether command is an exit command."},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"     * @return boolean value for whether command is an exit command."},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":"    public boolean isExit() {"},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"        return false;"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"}"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":""}],"authorContributionMap":{"ZhangAnli":54}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":" * UI class is a class that handles all aspects of IO in Duke."},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":" */"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"public class Ui {"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"     * Show Duke\u0027s welcome text."},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    public String showWelcome() {"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        return \"Hello, I am Duke, your personal Assistant. How may I help you today?\";"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"     * Show number of items in the task list."},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"     * @param numOfItems"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    public String showNumberOfItems(int numOfItems) {"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        return \"Now you have \" + numOfItems + \" tasks in the list.\";"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":"     * Shows the task that was added to the list."},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"     * @param task"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"    public String showTaskAdded(Task task) {"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"        return \"Got it. I\u0027ve added this task: \\n\" + task.toString();"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"ZhangAnli"},"content":"     * Show the task being marked as done."},{"lineNumber":33,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"ZhangAnli"},"content":"     * @param task"},{"lineNumber":35,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"ZhangAnli"},"content":"    public String showTaskDone(Task task) {"},{"lineNumber":37,"author":{"gitId":"ZhangAnli"},"content":"        return \"Nice! I\u0027ve marked this task as done: \\n\" + task.toString();"},{"lineNumber":38,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":40,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ZhangAnli"},"content":"     * Show the list of tasks."},{"lineNumber":42,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ZhangAnli"},"content":"    public String showListItems(TaskList taskList) {"},{"lineNumber":44,"author":{"gitId":"ZhangAnli"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks on your list: \\n\");"},{"lineNumber":45,"author":{"gitId":"ZhangAnli"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.getTaskListLength(); i++) {"},{"lineNumber":46,"author":{"gitId":"ZhangAnli"},"content":"            sb.append(String.format(\"%s. %s\", i, taskList.getTaskAtIndex(i - 1).toString()) + \"\\n\");"},{"lineNumber":47,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"ZhangAnli"},"content":"        return sb.toString();"},{"lineNumber":49,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":51,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"ZhangAnli"},"content":"     * Shows the task deleted."},{"lineNumber":53,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"ZhangAnli"},"content":"     * @param task task to be deleted"},{"lineNumber":55,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"ZhangAnli"},"content":"    public String showTaskDeleted(Task task) {"},{"lineNumber":57,"author":{"gitId":"ZhangAnli"},"content":"        return \"Noted. I\u0027ve removed this task: \\n\" + task.toString();"},{"lineNumber":58,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":60,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"ZhangAnli"},"content":"     * Show good bye to user."},{"lineNumber":62,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"ZhangAnli"},"content":"    public String showBye() {"},{"lineNumber":64,"author":{"gitId":"ZhangAnli"},"content":"        return \"Bye. Hope to see you again soon!\\nTo exit, click [X] at the top left.\";"},{"lineNumber":65,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":67,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"ZhangAnli"},"content":"     * Shows the error message from exception."},{"lineNumber":69,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"ZhangAnli"},"content":"     * @param e exception encountered."},{"lineNumber":71,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"ZhangAnli"},"content":"    public String showLoadingError(Exception e) {"},{"lineNumber":73,"author":{"gitId":"ZhangAnli"},"content":"        return e.getMessage();"},{"lineNumber":74,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":76,"author":{"gitId":"ZhangAnli"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"ZhangAnli"},"content":"     * Shows the list of items found according to user keyword."},{"lineNumber":78,"author":{"gitId":"ZhangAnli"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"ZhangAnli"},"content":"     * @param taskList list of tasks"},{"lineNumber":80,"author":{"gitId":"ZhangAnli"},"content":"     * @param command user command"},{"lineNumber":81,"author":{"gitId":"ZhangAnli"},"content":"     * @return a list of the items found according to user keyword"},{"lineNumber":82,"author":{"gitId":"ZhangAnli"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"ZhangAnli"},"content":"    public String showFoundListItems(TaskList taskList, String command) {"},{"lineNumber":84,"author":{"gitId":"ZhangAnli"},"content":"        String[] commandArr \u003d command.split(\" \");"},{"lineNumber":85,"author":{"gitId":"ZhangAnli"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list: \\n\");"},{"lineNumber":86,"author":{"gitId":"ZhangAnli"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.getTaskListLength(); i++) {"},{"lineNumber":87,"author":{"gitId":"ZhangAnli"},"content":"            if (taskList.getTaskAtIndex(i - 1).getDescription().contains(commandArr[1])) {"},{"lineNumber":88,"author":{"gitId":"ZhangAnli"},"content":"                sb.append(String.format(\"%s. %s\", i, taskList.getTaskAtIndex(i - 1).toString()) + \"\\n\");"},{"lineNumber":89,"author":{"gitId":"ZhangAnli"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"ZhangAnli"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"ZhangAnli"},"content":"        return sb.toString();"},{"lineNumber":92,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":93}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"ZhangAnli":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"ZhangAnli":19}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":"    public void testDeadlineStringConversion(){"},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"        LocalDate dateDeadline \u003d LocalDate.parse(\"2021-01-20\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"        Deadline deadline \u003d new Deadline(\"Buy Birthday Cake\", dateDeadline);"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(\"[D][✘]Buy Birthday Cake(by: 20 Jan 2021)\", deadline.toString());"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    public void testGetDeadline (){"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        LocalDate dateDeadline \u003d LocalDate.parse(\"2021-01-20\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        Deadline deadline \u003d new Deadline(\"Buy Birthday Cake\", dateDeadline);"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(dateDeadline, deadline.getDeadline());"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":24,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"ZhangAnli"},"content":"    public void testChangeDeadline () {"},{"lineNumber":26,"author":{"gitId":"ZhangAnli"},"content":"        LocalDate dateDeadline \u003d LocalDate.parse(\"2021-01-25\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":27,"author":{"gitId":"ZhangAnli"},"content":"        Deadline deadline \u003d new Deadline(\"Buy Birthday Cake\", dateDeadline);"},{"lineNumber":28,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(dateDeadline, deadline.changeDeadline(dateDeadline));"},{"lineNumber":29,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":31,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":31}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"public class EventTest {"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"ZhangAnli"},"content":"    public void testEventStringConversion(){"},{"lineNumber":8,"author":{"gitId":"ZhangAnli"},"content":"        Event event \u003d new Event(\"Attend seminar\", \"Sunday\");"},{"lineNumber":9,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(\"[E][✘]Attend seminar(at: Sunday)\", event.toString());"},{"lineNumber":10,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":12,"author":{"gitId":"ZhangAnli"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"ZhangAnli"},"content":"    public void testGetTimeSlot(){"},{"lineNumber":14,"author":{"gitId":"ZhangAnli"},"content":"        Event event \u003d new Event(\"Attend seminar\", \"Sunday\");"},{"lineNumber":15,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(\"Sunday\", event.getTimeslot());"},{"lineNumber":16,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ZhangAnli"},"content":""},{"lineNumber":18,"author":{"gitId":"ZhangAnli"},"content":"    @Test public void testChangeTimeSlot(){"},{"lineNumber":19,"author":{"gitId":"ZhangAnli"},"content":"        Event event \u003d new Event(\"Attend seminar\", \"Sunday\");"},{"lineNumber":20,"author":{"gitId":"ZhangAnli"},"content":"        assertEquals(\"Monday\", event.changeTimeslot(\"Monday\"));"},{"lineNumber":21,"author":{"gitId":"ZhangAnli"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ZhangAnli"},"content":"}"}],"authorContributionMap":{"ZhangAnli":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ZhangAnli"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"ZhangAnli"},"content":"list"},{"lineNumber":3,"author":{"gitId":"ZhangAnli"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"ZhangAnli"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"ZhangAnli"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":6,"author":{"gitId":"ZhangAnli"},"content":"bye"}],"authorContributionMap":{"ZhangAnli":6}}]
