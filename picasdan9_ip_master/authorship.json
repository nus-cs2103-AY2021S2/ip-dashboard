[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"\tid \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"shadowJar {"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"    archiveClassifier \u003d null"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"application {"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"repositories {"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"\tmavenCentral()"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"dependencies {"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"\ttestImplementation(platform(\u0027org.junit:junit-bom:5.7.0\u0027))"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"\ttestImplementation(\u0027org.junit.jupiter:junit-jupiter\u0027)"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"\tString javaFxVersion \u003d \u002711\u0027"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"test {"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"\tuseJUnitPlatform()"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"\ttestLogging {"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"\t\tevents \"passed\", \"skipped\", \"failed\""},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"\t}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":32,"-":18}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"### Add a task"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"Add a task, including the ability to specify if it\u0027s an event, deadline, or a todo"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"Format: `TASK_TYPE DESC [DATE]`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"Following is the format for the commands to add different kinds of tasks."},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"```"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"todo DESC"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"deadline DESC /by DATE"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"event DESC /at DATE"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"```"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"`DATE` should be in the format `YYYY-MM-DD`. By default, a newly created task is not done yet. "},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"### List all tasks"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"List all current tasks, displaying their descriptions and date (if any)"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"Format: `list`"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"### Delete a task"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"Delete a task by their displayed index"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"Format: `delete INDEX`"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"### Mark a task as done"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"Mark a task as done by their displayed index"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"Format: `done INDEX`"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"### Find a task"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"Find a task by a keyword in description"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"Format: `find KEYWORD`"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"### Undo an action"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"Restore the task list to the state prior to the last change."},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"Format: `undo`"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"### Redo an undo"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"Restore the task list to the state prior to an undo action."},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"Format: `redo`"}],"authorContributionMap":{"picasdan9":36,"-":11}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"-"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"-"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"-"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"-"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"-"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"-"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"-"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"-"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"-"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"-"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"-"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"-"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"-"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":":end"},{"lineNumber":77,"author":{"gitId":"-"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"-"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"-"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"-"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"-"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":":omega"}],"authorContributionMap":{"picasdan9":4,"-":85}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":" * This file was generated by the Gradle \u0027init\u0027 task."},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":" *"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":" * The settings file is used to specify which projects to include in your build."},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":" *"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":" * Detailed information about configuring a multi-project build in Gradle can be found"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":" * in the user manual at https://docs.gradle.org/6.8.1/userguide/multi_project_builds.html"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"rootProject.name \u003d \u0027ip\u0027"}],"authorContributionMap":{"picasdan9":10}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import java.util.Stack;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import duke.command.RedoCommand;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import duke.command.UndoCommand;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import duke.command.UndoRedoableCommand;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    private TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    private int undoRedoPointer \u003d -1;"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    private Stack\u003cUndoRedoableCommand\u003e commandStack \u003d new Stack\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"     * Creates a Duke instance with filePath to where data is stored."},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     * @param filePath"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"    public Duke(String filePath) throws IOException {"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"            taskList \u003d storage.load();"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"            System.out.println(e.toString());"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"    public Storage getStorage() {"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"        return storage;"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"    public TaskList getTaskList() {"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        return taskList;"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"        Command c \u003d Parser.parse(input);"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"        if (c instanceof UndoCommand) {"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"            undo();"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"        } else if (c instanceof RedoCommand) {"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"            redo();"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"        } else if (c instanceof UndoRedoableCommand) {"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"            deleteElementsAfterPointer();"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"            UndoRedoableCommand undoRedoableC \u003d (UndoRedoableCommand) c;"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"            undoRedoableC.setMemento(taskList);"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"            commandStack.push(undoRedoableC);"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"            undoRedoPointer++;"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"        } else if (c instanceof ExitCommand) {"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"            Platform.exit();"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"        return c.execute(taskList, storage);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"     * Clears the commands after the current pointer in the stack."},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"    public void deleteElementsAfterPointer() {"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"        if (commandStack.size() \u003c 1) {"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"            return;"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"        for (int i \u003d commandStack.size() - 1; i \u003e undoRedoPointer; i--) {"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"            commandStack.remove(i);"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"     * Undoes the effect of the previous command on taskList."},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"picasdan9"},"content":"    public void undo() throws DukeException {"},{"lineNumber":79,"author":{"gitId":"picasdan9"},"content":"        UndoRedoableCommand command \u003d commandStack.get(undoRedoPointer);"},{"lineNumber":80,"author":{"gitId":"picasdan9"},"content":"        taskList \u003d command.getMemento();"},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":"        undoRedoPointer--;"},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"        storage.write(taskList.toDataString());"},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"picasdan9"},"content":"     * Redoes the effect of the previous command on taskList."},{"lineNumber":87,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":"    public void redo() throws DukeException {"},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"        if (undoRedoPointer \u003d\u003d commandStack.size() - 1) {"},{"lineNumber":92,"author":{"gitId":"picasdan9"},"content":"            return;"},{"lineNumber":93,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"picasdan9"},"content":"        undoRedoPointer++;"},{"lineNumber":95,"author":{"gitId":"picasdan9"},"content":"        Command command \u003d (Command) commandStack.get(undoRedoPointer);"},{"lineNumber":96,"author":{"gitId":"picasdan9"},"content":"        command.execute(taskList, storage);"},{"lineNumber":97,"author":{"gitId":"picasdan9"},"content":"        storage.write(taskList.toDataString());"},{"lineNumber":98,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":96,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"    private static final long serialVersionUID \u003d 7526472295622776147L;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"    public DukeException() {"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"        super();"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"    public DukeException(String msg) {"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"        super(msg);"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"     * Returns the message string of the error"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"☹ OOPS!!! %s\", super.getMessage());"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":23}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    private Duke duke;"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"            duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"            assert duke !\u003d null : \"duke should not be null\";"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":34}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import duke.command.RedoCommand;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import duke.command.UndoCommand;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"import duke.task.Deadline;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"import duke.task.Event;"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"import duke.task.Todo;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"     * Returns a command based on user input"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"     * @param userInput"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     * @return Command"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"    public static final Command parse(String userInput) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"        if (userInput.equals(\"list\")) {"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"            return new ListCommand();"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"        } else if (userInput.equals(\"bye\")) {"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"            return new ExitCommand();"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        } else if (userInput.equals(\"undo\")) {"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"            return new UndoCommand();"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        } else if (userInput.equals(\"redo\")) {"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"            return new RedoCommand();"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"        String[] splitInput \u003d userInput.split(\" \", 2);"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"        switch (splitInput[0]) {"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"        case \"done\":"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"            return parseDone(splitInput);"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"        case \"delete\":"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"            return parseDelete(splitInput);"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"        case \"todo\":"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"            return parseTodo(splitInput);"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        case \"deadline\":"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"            return parseDeadline(splitInput);"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"        case \"event\":"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"            return parseEvent(splitInput);"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"        case \"find\":"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"            return parseFind(splitInput);"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"        default:"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"     * Returns a DoneCommand based on user input."},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"     * @param splitInput"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"     * @return Command"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"    public static final Command parseDone(String[] splitInput) throws DukeException {"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"        if (splitInput.length \u003c 2) {"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"The task index is missing.\");"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"        return new DoneCommand(Integer.parseInt(splitInput[1]));"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"     * Returns a DeleteCommand based on user input."},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"     * @param splitInput"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"     * @return Command"},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"    public static final Command parseDelete(String[] splitInput) throws DukeException {"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"        if (splitInput.length \u003c 2) {"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"The task index is missing.\");"},{"lineNumber":78,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"picasdan9"},"content":"        return new DeleteCommand(Integer.parseInt(splitInput[1]));"},{"lineNumber":80,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"     * Returns a AddCommand that will create a new Todo task based on user input."},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"     * @param splitInput"},{"lineNumber":86,"author":{"gitId":"picasdan9"},"content":"     * @return Command"},{"lineNumber":87,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":"    public static final Command parseTodo(String[] splitInput) throws DukeException {"},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":"        if (splitInput.length \u003c 2) {"},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":92,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"picasdan9"},"content":"        return new AddCommand(new Todo(splitInput[1]));"},{"lineNumber":94,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":96,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"picasdan9"},"content":"     * Returns a AddCommand that will create a new Deadline based on user input."},{"lineNumber":98,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"picasdan9"},"content":"     * @param splitInput"},{"lineNumber":100,"author":{"gitId":"picasdan9"},"content":"     * @return Command"},{"lineNumber":101,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":102,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"picasdan9"},"content":"    public static final Command parseDeadline(String[] splitInput) throws DukeException {"},{"lineNumber":104,"author":{"gitId":"picasdan9"},"content":"        if (splitInput.length \u003c 2) {"},{"lineNumber":105,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");"},{"lineNumber":106,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"picasdan9"},"content":"        String[] splitDeadlineInput \u003d splitInput[1].split(\" /by \");"},{"lineNumber":108,"author":{"gitId":"picasdan9"},"content":"        if (splitDeadlineInput.length \u003c 2) {"},{"lineNumber":109,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"Insufficient info given for a deadline.\");"},{"lineNumber":110,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"picasdan9"},"content":"        return new AddCommand(new Deadline(splitDeadlineInput[0], splitDeadlineInput[1]));"},{"lineNumber":112,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":114,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"picasdan9"},"content":"     * Returns a AddCommand that will create a new Event based on user input."},{"lineNumber":116,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"picasdan9"},"content":"     * @param splitInput"},{"lineNumber":118,"author":{"gitId":"picasdan9"},"content":"     * @return Command"},{"lineNumber":119,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":120,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"picasdan9"},"content":"    public static final Command parseEvent(String[] splitInput) throws DukeException {"},{"lineNumber":122,"author":{"gitId":"picasdan9"},"content":"        if (splitInput.length \u003c 2) {"},{"lineNumber":123,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"The description of an event cannot be empty.\");"},{"lineNumber":124,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"picasdan9"},"content":"        String[] splitEventInput \u003d splitInput[1].split(\" /at \");"},{"lineNumber":126,"author":{"gitId":"picasdan9"},"content":"        if (splitEventInput.length \u003c 2) {"},{"lineNumber":127,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"Insufficient info given for a deadline.\");"},{"lineNumber":128,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"picasdan9"},"content":"        return new AddCommand(new Event(splitEventInput[0], splitEventInput[1]));"},{"lineNumber":130,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":132,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"picasdan9"},"content":"     * Returns a FindCommand that will find tasks that match the provided keyword."},{"lineNumber":134,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"picasdan9"},"content":"     * @param splitInput"},{"lineNumber":136,"author":{"gitId":"picasdan9"},"content":"     * @return Command"},{"lineNumber":137,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":138,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"picasdan9"},"content":"    public static final Command parseFind(String[] splitInput) throws DukeException {"},{"lineNumber":140,"author":{"gitId":"picasdan9"},"content":"        if (splitInput.length \u003c 2) {"},{"lineNumber":141,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"Keyword is missing\");"},{"lineNumber":142,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"picasdan9"},"content":"        return new FindCommand(splitInput[1]);"},{"lineNumber":144,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":146,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":146}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import duke.task.Todo;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"    private File file;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"     * Creates necessary directories to the file path if not present"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"     * @param filePath"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"     * @return TaskList"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"    public Storage(String filePath) throws IOException {"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"        file \u003d new File(filePath);"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"        file.getParentFile().mkdirs();"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"     * Returns a TaskList created from the data given in file"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"     * @return TaskList"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    public TaskList load() throws DukeException {"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"                String[] taskData \u003d sc.nextLine().split(\" \\\\| \");"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"                switch (taskData[0]) {"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"                case \"T\":"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"                    taskList.add(new Todo(taskData[2], taskData[1].equals(\"1\")));"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"                    break;"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"                case \"D\":"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"                    taskList.add(new Deadline(taskData[2], taskData[1].equals(\"1\"), taskData[3]));"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"                    break;"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"                case \"E\":"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"                    taskList.add(new Event(taskData[2], taskData[1].equals(\"1\"), taskData[3]));"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"                    break;"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"                default:"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"            sc.close();"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"            return taskList;"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        } catch (IOException e) {"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"Unable to load data file.\");"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"     * Writes data to file"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"     * @param text"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"    public void write(String text) throws DukeException {"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"            FileWriter fw \u003d new FileWriter(file);"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"            fw.write(text);"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"            fw.close();"},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"Unable to write task list to file.\");"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":77}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"public class AddCommand extends UndoRedoableCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    private Task task;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     * Creates an AddCommand acting on the given task."},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * isExit is False."},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"     * @param task"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    public AddCommand(Task task) {"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"        super();"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"        this.task \u003d task;"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     * Adds a new task to taskList"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        taskList.add(task);"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        storage.write(taskList.toDataString());"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n    %s\\nNow you have %d tasks in the list.\","},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"                task, taskList.size());"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":35}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public interface Command {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"     * Executes the command"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException;"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":16}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"public class DeleteCommand extends UndoRedoableCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    private int idx;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     * Creates a DeleteCommand acting upon task at index idx"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     * @param idx"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    public DeleteCommand(int idx) {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"        super();"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"        this.idx \u003d idx - 1;"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     * Deletes task at index idx from taskList"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        assert idx \u003e\u003d 0 : \"Index should be non-negative\";"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        Task deleted \u003d taskList.remove(idx);"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        storage.write(taskList.toDataString());"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\","},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"                deleted, taskList.size());"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":35}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public class DoneCommand extends UndoRedoableCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    private int idx;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * Creates a DoneCommand acting upon task at index idx"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @param idx"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    public DoneCommand(int idx) {"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"        super();"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"        this.idx \u003d idx - 1;"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"     * Marks task at index idx of taskList as done"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"        assert idx \u003e\u003d 0 : \"Index should be non-negative\";"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        taskList.markDone(idx);"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        storage.write(taskList.toDataString());"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        assert taskList.get(idx).isDone() : \"The task should have been marked done\";"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"Yay you\u0027re completed task %d!\", idx + 1);"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":34}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public class ExitCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"     * Exits programme"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":18}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public class FindCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    private String kw;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * Creates a FindCommand that will find tasks with matching keyword kw"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @param kw"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    public FindCommand(String kw) {"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"        this.kw \u003d kw;"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"     * Finds tasks with matching keyword kw"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"        result.append(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        int count \u003d 0;"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"            if (taskList.get(i).contains(kw)) {"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"                count++;"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"                result.append(String.format(\"%d.%s\", count, taskList.get(i).toString()));"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"        return result.toString();"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":38}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public class ListCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"     * Lists all tasks in taskList"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"        result.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"            result.append(String.format(\"%d. %s\\n\", i + 1, taskList.get(i).toString()));"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"        return result.toString();"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":23}},{"path":"src/main/java/duke/command/RedoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public class RedoCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"     * Displays the current state of taskList after redo action."},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"        result.append(\"Redone your last command.\\n\");"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"        result.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"            result.append(String.format(\"%d. %s\\n\", i + 1, taskList.get(i).toString()));"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"        return result.toString();"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":26}},{"path":"src/main/java/duke/command/UndoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public class UndoCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"     * Displays the current state of taskList after undo action."},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * @param taskList"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     * @param storage"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"        result.append(\"Your previous command is undone.\\n\");"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"        result.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"            result.append(String.format(\"%d. %s\\n\", i + 1, taskList.get(i).toString()));"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"        return result.toString();"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":25}},{"path":"src/main/java/duke/command/UndoRedoableCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"public class UndoRedoableCommand {"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"    private TaskList memento;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"    public void setMemento(TaskList taskList) {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"        memento \u003d taskList.clone();"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"    public TaskList getMemento() {"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"        return memento;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":14}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"    protected LocalDate deadline;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"     * Creates a Deadline task with the given description and deadline."},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * isDone is automatically set as False."},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @param description"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     * @param deadline"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    public Deadline(String description, String deadline) {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"        this.deadline \u003d LocalDate.parse(deadline);"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     * Creates a Deadline task with the given description, isDone status, and deadline."},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     * @param description"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     * @param isDone"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"     * @param deadline"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    public Deadline(String description, boolean isDone, String deadline) {"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        this(description, isDone, LocalDate.parse(deadline));"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"    private Deadline(String description, boolean isDone, LocalDate deadline) {"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"        super(description, isDone);"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"     * Returns a string representation of Deadline"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(),"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"                deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"     * Returns a string representation of Deadline to be saved in data file"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"    public String toSavedString() {"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"D | %d | %s | %s\", super.isDone ? 1 : 0, super.description, deadline);"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"    public Task clone() {"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"        return new Deadline(description, deadline.toString());"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":60}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"    protected LocalDate time;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"     * Creates an Event task with given description, isDone status, and time."},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * isDone is automatically set as False."},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * @param description"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     * @param time"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    public Event(String description, String time) {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"        this.time \u003d LocalDate.parse(time);"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     * Creates an Event task with given description, isDone status, and time."},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     * @param description"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     * @param isDone"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"     * @param time"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    public Event(String description, boolean isDone, String time) {"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        this(description, isDone, LocalDate.parse(time));"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"     * Creates an Event task with given description, isDone status, and time."},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"     * @param description"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"     * @param isDone"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"     * @param time"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"    public Event(String description, boolean isDone, LocalDate time) {"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        super(description, isDone);"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"        this.time \u003d time;"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"     * Returns a string representation of Event"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(),"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"                time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"     * Returns a string representation of Event to be saved in data file"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"    public String toSavedString() {"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"E | %d | %s | %s\", super.isDone ? 1 : 0, super.description, time);"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"    public Task clone() {"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"        return new Event(description, isDone, time);"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":67}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"     * Creates a Task with given description."},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"     * isDone status is automatically set as False;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"     * @param description"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"    public Task(String description) {"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"     * Creates a Task with given description and isDone status."},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"     * @param description"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     * @param isDone"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"     * Returns a string representation of task"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"[%s] %s\", isDone ? \"X\" : \" \", description);"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"    public void setDone() {"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        isDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"    public boolean isDone() {"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"        return isDone;"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"     * Returns true if description contains kw, false otherwise"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"     * @param kw"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"     * @return boolean"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"    public boolean contains(String kw) {"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"        return description.contains(kw);"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"    public abstract String toSavedString();"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"    public abstract Task clone();"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":60}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"    public TaskList() {"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    public TaskList(TaskList taskList) {"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e(taskList.taskList);"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"     * Returns task as index i"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     * @param i index of task to get"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     * @return Task"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"    public Task get(int i) {"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"        return taskList.get(i);"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"     * Adds a new task to taskList"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"     * @param task"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    public void add(Task task) {"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"        taskList.add(task);"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"     * Removes task at index idx from taskList"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"     * @param idx index of task to remove"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"     * @return Task"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    public Task remove(int idx) {"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"        return taskList.remove(idx);"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"     * Marks task at index idx as done"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"     * @param idx index of task to mark done"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"     * @throws DukeException"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"    public void markDone(int idx) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"            taskList.get(idx).setDone();"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"            throw new DukeException(\"Index is out of bound.\");"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"     * Returns the size of current taskList"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"     * @return int"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"    public int size() {"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"        return taskList.size();"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"     * Returns the string representation of taskList to be saved in data file"},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"    public String toDataString() {"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":78,"author":{"gitId":"picasdan9"},"content":"        for (Task task : taskList) {"},{"lineNumber":79,"author":{"gitId":"picasdan9"},"content":"            sb.append(task.toSavedString());"},{"lineNumber":80,"author":{"gitId":"picasdan9"},"content":"            sb.append(\"\\n\");"},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"        return sb.toString();"},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"picasdan9"},"content":"     * Returns a deep clone of the taskList."},{"lineNumber":87,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":"     * @return TaskList"},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":"    public TaskList clone() {"},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"        TaskList newTaskList \u003d new TaskList();"},{"lineNumber":92,"author":{"gitId":"picasdan9"},"content":"        for (Task t : taskList) {"},{"lineNumber":93,"author":{"gitId":"picasdan9"},"content":"            newTaskList.add(t.clone());"},{"lineNumber":94,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"picasdan9"},"content":"        return newTaskList;"},{"lineNumber":96,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":98,"author":{"gitId":"picasdan9"},"content":"    public void setTaskList(TaskList other) {"},{"lineNumber":99,"author":{"gitId":"picasdan9"},"content":"        taskList \u003d other.taskList;"},{"lineNumber":100,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":101}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"        super(description, isDone);"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"     * Returns a string representation of Todo"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"[T]%s\", super.toString());"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"     * Returns a string representation of Todo to be saved in data file"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     * @return String"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    public String toSavedString() {"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"        return String.format(\"T | %d | %s\", super.isDone ? 1 : 0, super.description);"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"    public Task clone() {"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        return new Todo(description, isDone);"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":34}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        displayPicture.setImage(img);"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"        displayPicture.setClip(new Circle(30, 30, 30));"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    private void flip() {"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"        Collections.reverse(tmp);"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"        return new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"        db.flip();"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"        return db;"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":63}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userProfilePic.png\"));"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/botProfilePic.png\"));"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"     * Initializes the MainWindow on first launch."},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"    public void initialize() {"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"            DialogBox.getDukeDialog(\"Hello I\u0027m Duke.\\nWhat can I do for you?\", dukeImage));"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"        duke \u003d d;"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"     * Duke\u0027s reply and then appends them to the dialog container. Clears the user"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"     * input after processing."},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"    private void handleUserInput() {"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"        String response;"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"            response \u003d duke.getResponse(input);"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        } catch (DukeException e) {"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"            response \u003d e.toString();"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"                DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"        userInput.clear();"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":63}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"90.0\" prefWidth\u003d\"360.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"    \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: rgba(255, 255, 255, 0.5); -fx-padding: 10; -fx-background-radius: 10;\" text\u003d\"Label\" textFill\u003d\"#161616\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"  \u003c/children\u003e"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"  \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"  \u003c/padding\u003e"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"picasdan9":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#161616\" /\u003e"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-image: url(\u0027/images/background.jpg\u0027); -fx-background-position: center;\" /\u003e"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"picasdan9":19}},{"path":"src/test/java/duke/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"public class StorageStub extends Storage {"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"    public StorageStub() throws IOException {"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"        super(\"data/test.txt\");"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"    public void write(String text) {}"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":12}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import java.io.PrintStream;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"import duke.DukeException;"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"import duke.StorageStub;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"import duke.task.TaskList;"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"import duke.task.Todo;"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"public class AddCommandTest {"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    private final PrintStream originalErr \u003d System.err;"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"    public void setUpStreams() {"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"        System.setErr(new PrintStream(errContent));"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"    @AfterEach"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"    public void restoreStreams() {"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        System.setOut(originalOut);"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"        System.setErr(originalErr);"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    public void testExecute() throws DukeException, IOException {"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"        AddCommand addCmd \u003d new AddCommand(new Todo(\"borrow book\"));"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"        String expectedOutput \u003d String.format(\"%s\\n%s\\n%s\","},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"                \"Got it. I\u0027ve added this task:\","},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"                \"    [T][ ] borrow book\","},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"                \"Now you have 1 tasks in the list.\");"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        assertEquals(expectedOutput, addCmd.execute(new TaskList(), new StorageStub()));"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":45}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    public void testToSavedString() {"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"        // test case 1"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"        Event evt1 \u003d new Event(\"team meeting\", \"2020-10-15\");"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"        assertEquals(\"E | 0 | team meeting | 2020-10-15\", evt1.toSavedString());"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"        // test case 2"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"        Event evt2 \u003d new Event(\"presentation\", true, \"2020-10-15\");"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"        assertEquals(\"E | 1 | presentation | 2020-10-15\", evt2.toSavedString());"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":"list"},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"todo"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"blah"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"delete 3"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"bye"}],"authorContributionMap":{"picasdan9":9}}]
