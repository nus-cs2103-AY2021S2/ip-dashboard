[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"1. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":22,"glatiuden":1}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":46,"glatiuden":14}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"D | 0 | return books | 2019-11-01T18:00"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"D | 0 | return books | 2019-11-01T18:00"}],"authorContributionMap":{"glatiuden":2}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.commands.Command;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"/** Duke is a Personal Assistant Chat Bot that helps a person to keep track of various things."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" * Initialize the application and start interacting with users."},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    private final Storage storage;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    private TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    private final Ui ui;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    /** Initialize the required objects and tries to loads up the data from the storage file,"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * otherwise a new storage file will be created."},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    public Duke() {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        storage \u003d new Storage(\"data/tasks.txt\");"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        } catch (DukeException e) {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     * Parses the user\u0027s input and executes its command."},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @param input input from user"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public String getResponse(String input) {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            return c.execute(tasks, ui, storage);"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        } catch (DukeException e) {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            return ui.showError(e.getMessage());"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"glatiuden":43,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"}"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""}],"authorContributionMap":{"glatiuden":13}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.util.Timer;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import java.util.TimerTask;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    private Button sendButton;"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    private Duke duke;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * Initialise the scrollPane and sends a welcome message."},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public void initialize() {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        dukeSendMessage(Ui.showWelcome());"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        duke \u003d d;"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"    private void handleUserInput() {"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        );"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"        userInput.clear();"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        if (response.equals(Ui.showExit())) {"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"            new Timer().schedule(new TimerTask() {"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"                @Override"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"                public void run() {"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"                    System.exit(0);"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"            }, 1000L);"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"    public void dukeSendMessage(String message) {"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage));"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"}"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":""}],"authorContributionMap":{"glatiuden":74}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Adds task to the task list."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class AddCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final Task task;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public AddCommand(Task task) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.task \u003d task;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Performs adding of {@code Task} into the task list, prints a message to the user then save the file to storage."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when saving the file."},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        taskList.add(task);"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        return ui.showAddMessage(task, taskList.size());"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":34}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" * An abstract base class of executable commands."},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    /** Indicator used to differentiate exit command */"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final boolean shouldExit;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public Command() {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.shouldExit \u003d false;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    public Command(boolean isExit) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"        this.shouldExit \u003d isExit;"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        return shouldExit;"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * Performs the execution of the desired command."},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":32}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Deletes task from the list based on given index, or delete everything from the list."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final String input;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public DeleteCommand(String input) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.input \u003d input;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Performs deletion of tasks, prints a message to the user and update the storage file."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when saving the file"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        int listSize \u003d taskList.size();"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        if (listSize \u003c\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Your task list is empty.\");"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        String returnMessage;"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        if (input.equals(\"all\")) {"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            TaskList tl \u003d taskList.clone();"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            taskList.clear();"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            storage.saveFile(taskList);"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            returnMessage \u003d ui.showDeleteMessage(tl);"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            int index \u003d Integer.parseInt(input) - 1;"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            if (index \u003c 0 || index \u003e\u003d listSize) {"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"The number you have entered is out of bound.\");"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"            Task task \u003d taskList.delete(index);"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"            storage.saveFile(taskList);"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            returnMessage \u003d ui.showDeleteMessage(task, taskList.size());"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"        return returnMessage;"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":54}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Mark a task as done from the list based on given index, or mark everything as done from the list."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final String input;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public DoneCommand(String input) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.input \u003d input;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Performs completion of tasks, prints a message to the user and update the storage file."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when saving the file"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        int listSize \u003d taskList.size();"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        if (listSize \u003c\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Your task list is empty.\");"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        String returnMessage;"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        if (input.equals(\"all\")) {"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            if (taskList.isAllDone()) {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"You have already completed all the tasks!\");"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            taskList.setAllDone();"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            returnMessage \u003d ui.showDoneMessage(taskList);"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            int index \u003d Integer.parseInt(input) - 1;"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"            if (index \u003c 0 || index \u003e\u003d listSize) {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"The index you entered is out of bound.\");"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"            Task task \u003d taskList.get(index);"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            if (task.getDone()) {"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"You have already completed this task!\");"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"            task.setDone();"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"            returnMessage \u003d ui.showDoneMessage(task);"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"        return returnMessage;"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":60}},{"path":"src/main/java/duke/commands/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * Valid commands that the user can execute."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public enum DukeCommand {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    BYE,"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    DEADLINE,"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    DELETE,"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    DONE,"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    EVENT,"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    FIND,"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    LIST,"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    TODO;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * Returns a boolean to indicate whether the user\u0027s input is valid."},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     * @param value input command from the user"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * @return the boolean to indicate whether is it a valid command"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    public static boolean isContains(String value) {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        for (DukeCommand cmd: values()) {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"            if (cmd.name().equals(value)) {"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"                return true;"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        return false;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":30}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Terminates the program."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    public ExitCommand() {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"        super(true);"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * Terminates the program and prints a farewell message to the user."},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        return ui.showExit();"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":27}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Finds and lists all tasks in task lists that contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final String query;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public FindCommand(String query) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.query \u003d query;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Retrieves all tasks in the task lists that contains any of the argument keywords."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        for (Task task: taskList.getTaskList()) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            if (task.getDescription().contains(query)) {"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"                printTaskList.add(task);"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        if (printTaskList.size() \u003c\u003d 0) {"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"No results found.\");"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        return ui.showListMessage(printTaskList, true);"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":42}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.common.Utils;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Lists all the tasks in the list to the user."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final String date;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public ListCommand() {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.date \u003d null;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    public ListCommand(String date) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"        this.date \u003d date;"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * Performs listing and printing of tasks to the user."},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered parsing the user\u0027s input"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        int listSize \u003d taskList.size();"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        if (listSize \u003c\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Your task list is empty.\");"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        //Clone the duke.task list for filtering"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d taskList.clone();"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        //If there is date in the duke.command, only display the events or deadlines on the particular date."},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        if (date !\u003d null) {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            if (!date.isEmpty() || !date.isBlank()) {"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"                printTaskList \u003d printTaskList.filterByDate(date);"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        if (printTaskList.size() \u003c\u003d 0) {"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(String.format(\"You have no task on %s.\", Utils.formatDateString(date)));"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"        return ui.showListMessage(printTaskList, false);"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":54}},{"path":"src/main/java/duke/common/Utils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Helper methods used to validate and format inputs."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class Utils {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     * Returns a formatted date String."},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     * @param date date to be formatted"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     * @return formatted date String"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    public static String formatDate(LocalDateTime date) {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        return date.format(formatter);"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * Returns a formatted date String."},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @param dateString a date String to be formatted"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @return formatted date String"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public static String formatDateString(String dateString) {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        LocalDateTime date \u003d LocalDateTime.parse(dateString);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        return date.format(formatter);"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     * Returns true if the String is a valid date."},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"     * @param dateString a date String to be checked"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    public static boolean checkValidDate(String dateString) {"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            LocalDateTime.parse(dateString);"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"     * Returns true if the String is a number."},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"     * @param numberString a number String to be checked"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    public static boolean checkNumeric(String numberString) {"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"            Integer.parseInt(numberString);"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":62}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * Signals to the user that the program has encounter an error based on his/her input."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":10}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.commands.AddCommand;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.commands.Command;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import duke.commands.DukeCommand;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import duke.commands.ExitCommand;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import duke.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import duke.commands.ListCommand;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"import duke.common.Utils;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Deadline;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Event;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Task;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.ToDo;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":" * Parses the user\u0027s input."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"public class Parser {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    private static final String NOT_FOUND_MESSAGE \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * Parses the user input into its respective command."},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param fullCommand the user\u0027s input string"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * @return a {@code Command} based on the user\u0027s input"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user types an invalid or incomplete command"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    public static Command parse(String fullCommand) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        String[] inputs \u003d fullCommand.split(\" \");"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        String command \u003d inputs[0].toUpperCase();"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        if (!DukeCommand.isContains(command)) {"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(NOT_FOUND_MESSAGE);"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            DukeCommand dukeCommand \u003d DukeCommand.valueOf(command);"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            switch (dukeCommand) {"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            case BYE:"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"                return new ExitCommand();"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            case DELETE:"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"                return new DeleteCommand(getIntegerFromInputs(inputs));"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"            case DONE:"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"                return new DoneCommand(getIntegerFromInputs(inputs));"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"            case EVENT:"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"            case DEADLINE:"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"            case TODO:"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"                return new AddCommand(getTaskFromInputs(inputs, dukeCommand));"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"            case LIST:"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"                return inputs.length \u003d\u003d 2 ? new ListCommand(inputs[1]) : new ListCommand();"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"            case FIND:"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"                return new FindCommand(getFindQueryFromInputs(inputs));"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"            default:"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(NOT_FOUND_MESSAGE);"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"     * Return the numeric value that the user has typed in if the command input is valid."},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"     * @param inputs the user\u0027s input that has been split into array by spaces"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"     * @return the parsed numeric value"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user did not type a number after the command"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"    private static String getIntegerFromInputs(String[] inputs) throws DukeException {"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"        if (inputs.length \u003c 2) {"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"You are missing the index!\");"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"        String input \u003d inputs[1];"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"        if (!Utils.checkNumeric(input) \u0026\u0026 !input.equals(\"all\")) {"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Your input is not recognised.\");"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"        return input;"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"     * Parses the arguments into {@code Deadline}, {@code Event} or {@code ToDo}, depending on the user\u0027s command."},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"     * @param inputs the user\u0027s input that has been split into array by spaces"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"     * @param dukeCommand the user\u0027s desired command type"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"     * @return the prepared {@code Deadline}, {@code Event} or {@code ToDo}"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user types an invalid or incomplete command"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"    private static Task getTaskFromInputs(String[] inputs, DukeCommand dukeCommand) throws DukeException {"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"        String commandType \u003d dukeCommand.name().toLowerCase();"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"        if (inputs.length \u003c 2) {"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(String.format(\"The description of %s cannot be empty.\", commandType));"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"        String desc;"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"        if (dukeCommand \u003d\u003d DukeCommand.DEADLINE || dukeCommand \u003d\u003d DukeCommand.EVENT) {"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"            String delimiter \u003d dukeCommand \u003d\u003d DukeCommand.DEADLINE ? \"/by\" : \"/at\";"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"            int index \u003d Arrays.asList(inputs).indexOf(delimiter);"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"            //ERROR: Delimiter not found"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"            if (index \u003c 0) {"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(String.format(\"You have entered an invalid %s format.\", commandType));"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"            //ERROR: Delimiter found but no description"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"            if (inputs[index - 1].equals(commandType)) {"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(String.format(\"The description of %s cannot be empty.\", commandType));"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":"            //ERROR: No date after delimiter"},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"            if (inputs.length \u003c\u003d index + 1) {"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(String.format(\"The date of %s cannot be empty.\", commandType));"},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"            //Joins up the description"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"            desc \u003d String.join(\" \", Arrays.copyOfRange(inputs, 1, index));"},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"            //Joins up the date and time"},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"            String date \u003d String.join(\"T\", Arrays.copyOfRange(inputs, index + 1, inputs.length));"},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":"            //ERROR: Invalid date time format"},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"            if (!Utils.checkValidDate(date)) {"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"You have entered an invalid date time format.\");"},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":125,"author":{"gitId":"glatiuden"},"content":"            if (dukeCommand \u003d\u003d DukeCommand.DEADLINE) {"},{"lineNumber":126,"author":{"gitId":"glatiuden"},"content":"                return new Deadline(desc, date);"},{"lineNumber":127,"author":{"gitId":"glatiuden"},"content":"            } else {"},{"lineNumber":128,"author":{"gitId":"glatiuden"},"content":"                return new Event(desc, date);"},{"lineNumber":129,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":131,"author":{"gitId":"glatiuden"},"content":"        } else if (dukeCommand \u003d\u003d DukeCommand.TODO) {"},{"lineNumber":132,"author":{"gitId":"glatiuden"},"content":"            desc \u003d String.join(\" \", Arrays.copyOfRange(inputs, 1, inputs.length));"},{"lineNumber":133,"author":{"gitId":"glatiuden"},"content":"            return new ToDo(desc);"},{"lineNumber":134,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":135,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":136,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(NOT_FOUND_MESSAGE);"},{"lineNumber":137,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":140,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"glatiuden"},"content":"     * Return the find query that the user has typed in if the command input is valid."},{"lineNumber":142,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"glatiuden"},"content":"     * @param inputs the user\u0027s input that has been split into String array by spaces"},{"lineNumber":144,"author":{"gitId":"glatiuden"},"content":"     * @return the joined find query"},{"lineNumber":145,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user did not type a query after the command"},{"lineNumber":146,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"glatiuden"},"content":"    private static String getFindQueryFromInputs(String[] inputs) throws DukeException {"},{"lineNumber":148,"author":{"gitId":"glatiuden"},"content":"        if (inputs.length \u003c 2) {"},{"lineNumber":149,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"You are missing the query!\");"},{"lineNumber":150,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":152,"author":{"gitId":"glatiuden"},"content":"        return String.join(\" \", Arrays.copyOfRange(inputs, 1, inputs.length));"},{"lineNumber":153,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":154}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Deadline;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Event;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Task;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.ToDo;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":" * Stores and restores the user\u0027s task list."},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    private final File file;"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * Initialize the storage file from the given directory and creates the folder if it does not exists."},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @param filePath directory of the storage file"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public Storage(String filePath) {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        file \u003d new File(filePath);"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        File folder \u003d file.getParentFile();"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        if (!folder.exists()) {"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"            folder.mkdir();"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"     * Loads the {@code Task} data from this storage file, and then returns it."},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"     * Returns empty task list if the file does not exist, or is not a regular file."},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"     * @return a populated task list"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when it tries to open file that does not exists"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        Scanner sc;"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"            sc \u003d new Scanner(file);"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"File not found.\");"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"            String item \u003d sc.nextLine();"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"            String[] items \u003d item.split(\" \\\\| \");"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"            char type \u003d items[0].charAt(0);"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"            int done \u003d Integer.parseInt(items[1]);"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"            String desc \u003d items[2];"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"            switch (type) {"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"            case \u0027T\u0027:"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new ToDo(done, desc));"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"            case \u0027E\u0027:"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new Event(done, desc, items[3]));"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"            case \u0027D\u0027:"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new Deadline(done, desc, items[3]));"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"            default:"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"        sc.close();"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"        return tasks;"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"     * Saves the {@code Task} data that is stored in the {@code TaskList} to the storage file."},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"     * @param taskList {@code TaskList} to be saved"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when trying to write data to the file"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"    public void saveFile(TaskList taskList) throws DukeException {"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"            fileWriter.write(taskList.toStorageString());"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"            fileWriter.close();"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"        } catch (IOException e) {"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Error saving file.\");"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":94}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.common.Utils;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Represents a Deadline {@code Task}."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    private final LocalDateTime deadlineDateTime;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Deadline {@code Task}, specifying the description and due date."},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the deadline"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     * @param deadlineDateTime due date of the deadline"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    public Deadline(String description, String deadlineDateTime) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        this.deadlineDateTime \u003d LocalDateTime.parse(deadlineDateTime);"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Deadline {@code Task}, specifying the task\u0027s status, description and due date."},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param done integer value to indicate the deadline\u0027s status"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the deadline"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     * @param deadlineDateTime due date of the deadline"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    public Deadline(int done, String description, String deadlineDateTime) {"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        super(done, description);"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        this.deadlineDateTime \u003d LocalDateTime.parse(deadlineDateTime);"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public LocalDateTime getDeadlineDateTime() {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        return deadlineDateTime;"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), Utils.formatDate(deadlineDateTime));"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, deadlineDateTime);"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":50}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.common.Utils;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Represents a Event {@code Task}."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    private final LocalDateTime eventDateTime;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Event {@code Task}, specifying the description and occurrence date."},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the event"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     * @param eventDateTime occurrence date of the event"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    public Event(String description, String eventDateTime) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        this.eventDateTime \u003d LocalDateTime.parse(eventDateTime);"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Event {@code Task}, specifying the task\u0027s status, description and occurrence date"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param done integer value to indicate the event\u0027s status"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the event"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     * @param eventDateTime occurrence date of the event"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    public Event(int done, String description, String eventDateTime) {"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        super(done, description);"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        this.eventDateTime \u003d LocalDateTime.parse(eventDateTime);"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public LocalDateTime getEventDateTime() {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        return eventDateTime;"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), Utils.formatDate(eventDateTime));"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, description, eventDateTime);"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":50}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * An abstract base class of addable task."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"     * Constructor for task, specifying the description."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * @param description Description of the task."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * Constructor for task, specifying the task\u0027s status and description."},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param done integer value to indicate the task\u0027s status."},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the task"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    public Task(int done, String description) {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        this.isDone \u003d done \u003d\u003d 1;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        this.description \u003d description;"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     * Get the status icon in regards to the task\u0027s status."},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @return \"X\" symbol if it is done, else returns an empty string \" \"."},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public String getStatusIcon() {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        return isDone ? \"\\u2718\" : \" \";"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    public void setDone() {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        isDone \u003d true;"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    public boolean getDone() {"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        return isDone;"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    public String getDescription() {"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        return description;"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"     * Formats the task\u0027s information into a formatted string that is suitable for storing."},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"    public abstract String toStorageString();"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":62}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Represents a list of task."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" * Supports various operations for manipulating the task list."},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    /** Constructor to instantiate an empty task list. */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Constructor to instantiate a pre-populated task list."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param tasks list of tasks"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        return tasks;"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * Add {@code Task} to the task list."},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     * @param task {@code Task} to be added"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public void add(Task task) {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        tasks.add(task);"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"     * Delete {@code Task} from the task list."},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"     * @param index index of the task to be removed"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"     * @return the deleted task"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"    public Task delete(int index) {"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"        return tasks.remove(index);"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"     * Returns {@code Task} at the given index."},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"     * @param index index of the task to be retrieve"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"     * @return the task at the given index"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"    public Task get(int index) {"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"        return tasks.get(index);"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"     * Returns the size of the task list"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"     * @return size of the task list"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"    public int size() {"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"        return tasks.size();"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"     * Clones the current task list."},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"     * @return copy of the current task list"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"    public TaskList clone() {"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"        return new TaskList(tasks);"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"     * Deletes all the {@code Task} in the task list."},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"    public void clear() {"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"        tasks.clear();"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"     * Sets all the tasks in the task list to done."},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"    public void setAllDone() {"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"        for (Task task : tasks) {"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"            task.setDone();"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"     * Checks whether are all the tasks in the task lists done."},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"     * @return boolean to indicate are all the tasks done"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"    public boolean isAllDone() {"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"        for (Task task : tasks) {"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"            if (!task.getDone()) {"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"                return false;"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"        return true;"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"     * Filters the task list and returns the {@code Task} occurring on the specified date."},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":"     * @param date query date"},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"     * @return task list containing {@code Task} that is occurring on the specified date"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":"    public TaskList filterByDate(String date) {"},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"        List\u003cTask\u003e printTasks \u003d new ArrayList\u003c\u003e(tasks);"},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"        LocalDate queryDate \u003d LocalDate.parse(date);"},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":"        printTasks.removeIf(t -\u003e {"},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":"            if (t instanceof Deadline) {"},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"                return !(((Deadline) t).getDeadlineDateTime().toLocalDate().isEqual(queryDate));"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":"            } else if (t instanceof Event) {"},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"                return !((Event) t).getEventDateTime().toLocalDate().isEqual(queryDate);"},{"lineNumber":124,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":126,"author":{"gitId":"glatiuden"},"content":"        });"},{"lineNumber":127,"author":{"gitId":"glatiuden"},"content":"        return new TaskList(printTasks);"},{"lineNumber":128,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":130,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"glatiuden"},"content":"     * Formats all the {@code Task}\u0027s information into a formatted string that is suitable for storing."},{"lineNumber":132,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"glatiuden"},"content":"     * @return formatted string that is suitable for storing"},{"lineNumber":134,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":136,"author":{"gitId":"glatiuden"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":137,"author":{"gitId":"glatiuden"},"content":"        for (Task t : tasks) {"},{"lineNumber":138,"author":{"gitId":"glatiuden"},"content":"            sb.append(String.format(\"%s%n\", t.toStorageString()));"},{"lineNumber":139,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":141,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":142}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * Represents a ToDo {@code Task}."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"     * Constructor for ToDo, specifying the description."},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the ToDo"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     * Constructor for ToDo, specifying the task\u0027s status and description."},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * @param done integer value to indicate the ToDo\u0027s status"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the ToDo"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public ToDo(int done, String description) {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        super(done, description);"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[T]%s\", super.toString());"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":36}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":" * Text UI of the application."},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    private final StringBuilder sb;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * Default constructor for UI which initialise the StringBuilder."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public Ui() {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.sb \u003d new StringBuilder();"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Returns the welcome message."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public static String showWelcome() {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        return \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * Returns a farewell message."},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public static String showExit() {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    private void clear() {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        sb.setLength(0);"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"     * Returns a formatted {@code TaskList} string."},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"     * @param taskList {@code TaskList} to be formatted"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"     * @param isFind an indicator used to differentiate between the list and find operation"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    public String showListMessage(TaskList taskList, boolean isFind) {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        sb.append(String.format(\"Here are the %s in your list:%n\", isFind ? \"matching tasks\" : \"tasks\"));"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"            sb.append(String.format(\"%d.%s%n\", i + 1, taskList.get(i).toString()));"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the new {@code Task}."},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"     * @param task the newly added {@code Task}"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"     * @param listSize size of the current {@code TaskList}"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"    public String showAddMessage(Task task, int listSize) {"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"        sb.append(formattedPrint(task.toString()));"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(listSize);"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the completed {@code Task}."},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"     * @param task the completed {@code Task}"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"    public String showDoneMessage(Task task) {"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"        sb.append(formattedPrint(task.toString()));"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the {@code TaskList} of completed {@code Task}."},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"     * @param taskList the completed {@code TaskList} of {@code Task}"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"    public String showDoneMessage(TaskList taskList) {"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"Nice! I\u0027ve marked all your tasks as done:\");"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"        printList(taskList);"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the deleted {@code Task}."},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"     * @param task the deleted {@code Task}"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"     * @param listSize size of the current {@code TaskList}"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"    public String showDeleteMessage(Task task, int listSize) {"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"        sb.append(formattedPrint(task.toString()));"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(listSize);"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the cleared {@code TaskList}."},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":"     * @param taskList the {@code TaskList} to be cleared"},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"    public String showDeleteMessage(TaskList taskList) {"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"Noted. I\u0027ve removed all your tasks.\");"},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"        printList(taskList);"},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(0);"},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"glatiuden"},"content":"     * Appends the {@code TaskList}\u0027s summary information into the StringBuilder."},{"lineNumber":125,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"glatiuden"},"content":"     * @param listSize size of the current {@code TaskList}"},{"lineNumber":127,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"glatiuden"},"content":"    private void showSummaryMessage(int listSize) {"},{"lineNumber":129,"author":{"gitId":"glatiuden"},"content":"        sb.append(String.format(\"Now you have %d %s in the list.%n\", listSize, listSize \u003e\u003d 2 ? \"tasks\" : \"task\"));"},{"lineNumber":130,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":132,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"glatiuden"},"content":"     * Returns the formatted error message."},{"lineNumber":134,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"glatiuden"},"content":"     * @param message message to be formatted"},{"lineNumber":136,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"glatiuden"},"content":"    public String showError(String message) {"},{"lineNumber":138,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"☹️ OOPS!!! %s%n\", message);"},{"lineNumber":139,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":141,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"glatiuden"},"content":"     * Returns the formatted message with indentation."},{"lineNumber":143,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"glatiuden"},"content":"     * @param message message to be formatted"},{"lineNumber":145,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"glatiuden"},"content":"    private String formattedPrint(String message) {"},{"lineNumber":147,"author":{"gitId":"glatiuden"},"content":"        String printFormat \u003d \"    %s%n\";"},{"lineNumber":148,"author":{"gitId":"glatiuden"},"content":"        return String.format(printFormat, message);"},{"lineNumber":149,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":151,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"glatiuden"},"content":"     * Appends all the tasks\u0027 information stored in {@code TaskList} into the StringBuilder."},{"lineNumber":153,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"glatiuden"},"content":"     * @param taskList the {@code TaskList} to be printed"},{"lineNumber":155,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"glatiuden"},"content":"    private void printList(TaskList taskList) {"},{"lineNumber":157,"author":{"gitId":"glatiuden"},"content":"        for (Task task : taskList.getTaskList()) {"},{"lineNumber":158,"author":{"gitId":"glatiuden"},"content":"            sb.append(formattedPrint(task.toString()));"},{"lineNumber":159,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":161}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"glatiuden":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"glatiuden":19}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"public class UiTest {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    private Ui ui \u003d new Ui();"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    public void showWelcomeTest() {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"Hello! I\u0027m Duke\\nWhat can I do for you?\", ui.showWelcome());"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public void showErrorTest() {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"☹️ OOPS!!! Invalid Input\\n\", ui.showError(\"Invalid Input\"));"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":19}},{"path":"src/test/java/duke/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    public static final String TEST_DESC_1 \u003d \"return books\";"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    public static final String TEST_DATE_1 \u003d \"2019-11-01T18:00\";"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    public static final String TEST_DESC_2 \u003d \"pay phone bill\";"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    public static final String TEST_DATE_2 \u003d \"2021-01-26T19:00\";"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    public void toStorageStringTest() {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline1 \u003d new Deadline(TEST_DESC_1, TEST_DATE_1);"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"D | 0 | return books | 2019-11-01T18:00\", newDeadline1.toStorageString());"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline2 \u003d new Deadline(1, TEST_DESC_2, TEST_DATE_2);"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"D | 1 | pay phone bill | 2021-01-26T19:00\", newDeadline2.toStorageString());"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public void toStringTest() {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline1 \u003d new Deadline(TEST_DESC_1, TEST_DATE_1);"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"[D][ ] return books (by: Nov 01 2019 06:00PM)\", newDeadline1.toString());"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline2 \u003d new Deadline(1, TEST_DESC_2, TEST_DATE_2);"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"[D][✘] pay phone bill (by: Jan 26 2021 07:00PM)\", newDeadline2.toString());"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"deadline return book /by 2019-11-01"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"event project meeting /at 2019-11-01"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"delete 2"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"list 2019-11-01"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"bye"}],"authorContributionMap":{"glatiuden":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"glatiuden":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/command/*.java ../src/main/java/duke/task/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":32,"glatiuden":2}}]
