[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"1. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":22,"glatiuden":1}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":" * Duke is a Personal Assistant Chatbot that helps a person to keep track of various things."},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Initialize the application and start interacting with users."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    private TaskList tasks;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    private Ui ui;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    public static void main(String[] args) {"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * Initialize the required objects and tries to loads up the data from the storage file, otherwise a new storage file will be created."},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * @param filePath the path to the storage file"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    public Duke(String filePath) {"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"            ui.showLoadingError();"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     * Prints welcome message and reads the user inputs and execute the respective command. Exit when the user types \u0027bye\u0027."},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public void run() {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        ui.showWelcome();"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        boolean isExit \u003d false;"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        while (!isExit) {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            try {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"                ui.showLine(); // show the divider line (\"_______\")"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"            } catch (DukeException e) {"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"            } finally {"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"                ui.showLine();"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"glatiuden":53,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * Signals to the user that the program has encounter an error based on his/her input."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":10}},{"path":"src/main/java/duke/DukeHelper.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Helper methods used to validate and format inputs."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class DukeHelper {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     * Returns a formatted date String."},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * @param date date to be formatted"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     * @return formatted date String"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    public static String formatDate(LocalDate date) {"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        return date.format(formatter);"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * Returns a formatted date String."},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param dateString a date String to be formatted"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @return formatted date String"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    public static String formatDate(String dateString) {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        LocalDate date \u003d LocalDate.parse(dateString);"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        return date.format(formatter);"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * Returns true if the String is a valid date."},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @param dateString a date String to be checked"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public static boolean isValidDate(String dateString) {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            LocalDate.parse(dateString);"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"     * Returns true if the String is a number."},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"     * @param numberString a number String to be checked"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    public static boolean isNumeric(String numberString) {"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"            Integer.parseInt(numberString);"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"        } catch(NumberFormatException e){"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":58}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":" * Parses the user\u0027s input."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * Parses the user input into its respective command."},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     * @param fullCommand the user\u0027s input string"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     * @return a command based on the user\u0027s input"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user types an invalid or incomplete command"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    public static final Command parse(String fullCommand) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        String[] inputs \u003d fullCommand.split(\" \");"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        String command \u003d inputs[0].toUpperCase();"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        if (!DukeCommand.isContains(command)) {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"            DukeCommand dukeCommand \u003d DukeCommand.valueOf(command);"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"            switch (dukeCommand) {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"            case BYE:"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"                return new ExitCommand();"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            case DELETE:"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"                return new DeleteCommand(validateInput(inputs));"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"            case DONE:"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"                return new DoneCommand(validateInput(inputs));"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"            case EVENT:"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            case DEADLINE:"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            case TODO:"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"                return new AddCommand(processInputs(inputs, dukeCommand));"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            case LIST:"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"                return inputs.length \u003d\u003d 2 ? new ListCommand(inputs[1]) : new ListCommand();"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            case FIND:"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"                if (inputs.length \u003c 2) {"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"                    throw new DukeException(\"You are missing the query!\");"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"                }"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"                return new FindCommand(String.join(\" \", Arrays.copyOfRange(inputs, 1, inputs.length)));"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"            default:"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"                return null;"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"     * Return the numeric value that the user has typed in if the command input is valid."},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"     * @param arr the user\u0027s input that has been split into array by spaces"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"     * @return the parsed numeric value"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user did not type a number after the command"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"    public static String validateInput(String[] arr) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        if (arr.length \u003c 2) {"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"You are missing the index!\");"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"        String input \u003d arr[1];"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"        if (!DukeHelper.isNumeric(input) \u0026\u0026 !input.equals(\"all\")) {"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Your input is not recognised.\");"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"        return input;"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"     * Parses the arguments into Deadline, Event or Todo, depending on the user\u0027s command."},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"     * @param arr the user\u0027s input that has been split into array by spaces"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"     * @param dukeCommand the user\u0027s desired command type"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"     * @return the prepared Deadline, Event or Todo"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user types an invalid or incomplete command"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"    public static Task processInputs(String[] arr, DukeCommand dukeCommand) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"        String commandType \u003d dukeCommand.name().toLowerCase();"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"        if (arr.length \u003c 2) {"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(String.format(\"The description of %s cannot be empty.\", commandType));"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"        String desc;"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"        if (dukeCommand \u003d\u003d DukeCommand.DEADLINE || dukeCommand \u003d\u003d DukeCommand.EVENT) {"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"            String delimiter \u003d dukeCommand \u003d\u003d DukeCommand.DEADLINE ? \"/by\" : \"/at\";"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"            int index \u003d Arrays.asList(arr).indexOf(delimiter);"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"            //Delimiter not found"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"            if (index \u003c 0) {"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(String.format(\"You have entered an invalid %s format.\", commandType));"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"            //Delimiter found but no description"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"            if (arr[index - 1].equals(commandType)) {"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(String.format(\"The description of %s cannot be empty.\", commandType));"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"            //No date after delimiter"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"            if (arr.length \u003c\u003d index + 1) {"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(String.format(\"The date of %s cannot be empty.\", commandType));"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"            //Joins up the description"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"            desc \u003d String.join(\" \", Arrays.copyOfRange(arr, 1, index));"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"            String date \u003d arr[index + 1];"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":"            if (!DukeHelper.isValidDate(date)) {"},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"You have entered an invalid date format.\");"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":"            if (dukeCommand \u003d\u003d DukeCommand.DEADLINE) {"},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"                return new Deadline(desc, date);"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"            } else {"},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":"                return new Event(desc, date);"},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":"            desc \u003d String.join(\" \", Arrays.copyOfRange(arr, 1, arr.length));"},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":"            return new ToDo(desc);"},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":123}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.task.*;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":" * Stores and restores the user\u0027s task list."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    private final File file;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Initialize the storage file from the given directory and creates the folder if it does not exists."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * @param filePath directory of the storage file"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    public Storage(String filePath) {"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        file \u003d new File(filePath);"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        File folder \u003d file.getParentFile();"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        if (!folder.exists()) {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"            folder.mkdir();"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     * Loads the {@code Task} data from this storage file, and then returns it."},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * Returns an empty {@code Task} if the file does not exist, or is not a regular file."},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @return a prepared list of task(s)"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when it tries to open file that does not exists"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        Scanner sc \u003d null;"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            sc \u003d new Scanner(file);"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"File not found\");"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"            String item \u003d sc.nextLine();"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            String[] items \u003d item.split(\" \\\\| \");"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"            char type \u003d items[0].charAt(0);"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"            int done \u003d Integer.parseInt(items[1]);"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"            String desc \u003d items[2];"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"            switch (type) {"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"            case \u0027T\u0027:"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new ToDo(done, desc));"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"            case \u0027E\u0027:"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new Event(done, desc, items[3]));"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"            case \u0027D\u0027:"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new Deadline(done, desc, items[3]));"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        sc.close();"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"        return tasks;"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"     * Saves the {@code Task} data to the storage file."},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"     * @param tasks list of task(s) to be saved"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when trying to write data to the file."},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"    public void saveFile(TaskList tasks) throws DukeException {"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"            fileWriter.write(tasks.toStorageString());"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"            fileWriter.close();"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"        } catch (IOException e) {"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Error saving file\");"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":85}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" * Text UI of the application."},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    private final Scanner sc;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    public Ui() {"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * Prompts for the command and reads the text entered by the user."},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Ignores empty, pure whitespace, and comment lines."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * Echos the command back to the user."},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @return command (full line) entered by the user"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    public String readCommand() {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        String command \u003d null;"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        if (sc.hasNextLine()) {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"            command \u003d sc.nextLine();"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        return command;"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * Prints an horizontal line upon request."},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    public void showLine() {"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"     * Prints the welcome message upon the start of the application."},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    public void showWelcome() {"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        showLine();"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        showLine();"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"     * Prints a farewell message to the user."},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"    public void showExit() {"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"        sc.close();"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"     * Prints an error message when there is no stored list of task."},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"    public void showLoadingError() {"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"        showLine();"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"No existing task list was found. A new task list will be created.\");"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"        showLine();"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"     * Prints a formatted list of task(s) to the user."},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"     * @param taskList current task list"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"    public void showListMessage(TaskList taskList, boolean isFind) {"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"        System.out.printf(\"Here are the %s in your list:%n\", isFind ? \"matching tasks\" : \"tasks\");"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"            System.out.printf(\"%d.%s%n\", i + 1, taskList.get(i).toString());"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"     * Prints the information of the new task."},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"     * @param task the newly added task"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"     * @param listSize size of the current task list"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"    public void showAddMessage(Task task, int listSize) {"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"        formattedPrint(task.toString());"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(listSize);"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"     * Prints the information of the completed task."},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"     * @param task the completed task"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"    public void showDoneMessage(Task task) {"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"        formattedPrint(task.toString());"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"    public void showDoneMessage(TaskList taskList) {"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Nice! I\u0027ve marked all your tasks as done:\");"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"        printList(taskList);"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"     * Prints the information of the deleted task."},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"     * @param task the deleted task"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"     * @param listSize size of the current task list"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":"    public void showDeleteMessage(Task task, int listSize) {"},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"        formattedPrint(task.toString());"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(listSize);"},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"     * Prints the information of the deleted task."},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"    public void showDeleteMessage(TaskList taskList) {"},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Noted. I\u0027ve removed all your tasks.\");"},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":"        printList(taskList);"},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(0);"},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"glatiuden"},"content":"     * Prints a summary information of the task list."},{"lineNumber":125,"author":{"gitId":"glatiuden"},"content":"     * @param listSize size of the current task list"},{"lineNumber":126,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"glatiuden"},"content":"    private void showSummaryMessage(int listSize) {"},{"lineNumber":128,"author":{"gitId":"glatiuden"},"content":"        System.out.printf(\"Now you have %d %s in the list.%n\", listSize, listSize \u003e\u003d 2 ? \"tasks\" : \"task\");"},{"lineNumber":129,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":131,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"glatiuden"},"content":"     * Prints the error message."},{"lineNumber":133,"author":{"gitId":"glatiuden"},"content":"     * @param message message to be printed"},{"lineNumber":134,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"glatiuden"},"content":"    public void showError(String message) {"},{"lineNumber":136,"author":{"gitId":"glatiuden"},"content":"        System.out.printf(\"☹️ OOPS!!! %s%n\", message);"},{"lineNumber":137,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":139,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"glatiuden"},"content":"     * Prepend the message with indent, then print."},{"lineNumber":141,"author":{"gitId":"glatiuden"},"content":"     * @param message message to be printed"},{"lineNumber":142,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"glatiuden"},"content":"    private void formattedPrint(String message) {"},{"lineNumber":144,"author":{"gitId":"glatiuden"},"content":"        final String PRINT_FORMAT \u003d \"\\t%s%n\";"},{"lineNumber":145,"author":{"gitId":"glatiuden"},"content":"        System.out.printf(PRINT_FORMAT, message);"},{"lineNumber":146,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":148,"author":{"gitId":"glatiuden"},"content":"    private void printList(TaskList taskList) {"},{"lineNumber":149,"author":{"gitId":"glatiuden"},"content":"        for (Task task : taskList.getTaskList()) {"},{"lineNumber":150,"author":{"gitId":"glatiuden"},"content":"            formattedPrint(task.toString());"},{"lineNumber":151,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":153}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Adds task to the task list."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class AddCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private Task task;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public AddCommand(Task task) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.task \u003d task;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Performs adding of task into the task list, prints a message to the user and saving the file to storage."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when saving the file."},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        taskList.add(task);"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        ui.showAddMessage(task, taskList.size());"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":33}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" * An abstract base class of executable commands."},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * Indicator used to differentiate exit command"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    private boolean shouldExit;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    public Command() {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        this.shouldExit \u003d false;"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    public Command(boolean isExit) {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        this.shouldExit \u003d isExit;"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    public boolean isExit() {"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        return shouldExit;"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     * Performs the execution of the desired command."},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":34}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Deletes task from the list based on given index, or delete everything from the list."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final String input;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public DeleteCommand(String input) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.input \u003d input;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Performs deletion of tasks, prints a message to the user and update the storage file."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when saving the file"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        int listSize \u003d taskList.size();"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        if (listSize \u003c\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Your task list is empty.\");"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        if (input.equals(\"all\")) {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            ui.showDeleteMessage(taskList);"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"            taskList.clear();"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            int index \u003d Integer.parseInt(input) - 1;"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            if (index \u003c 0 || index \u003e\u003d listSize) {"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"The number you have entered is out of bound.\");"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            Task task \u003d taskList.delete(index);"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"            ui.showDeleteMessage(task, taskList.size());"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":48}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Mark a task as done from the list based on given index, or mark everything as done from the list."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final String input;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public DoneCommand(String input) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.input \u003d input;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * Performs completion of tasks, prints a message to the user and update the storage file."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when saving the file"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        int listSize \u003d taskList.size();"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        if (listSize \u003c\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Your task list is empty.\");"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        if (input.equals(\"all\")) {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            if (taskList.isAllDone()) {"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"You have already completed all the tasks!\");"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            taskList.setAllDone();"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            ui.showDoneMessage(taskList);"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            int index \u003d Integer.parseInt(input) - 1;"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            if (index \u003c 0 || index \u003e\u003d listSize) {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"The index you entered is out of bound.\");"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"            Task task \u003d taskList.get(index);"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"            if (task.getDone()) {"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"You have already completed this task!\");"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"            task.setDone();"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"            ui.showDoneMessage(task);"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":56}},{"path":"src/main/java/duke/command/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * Valid commands that the user can execute."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public enum DukeCommand {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    BYE,"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    DEADLINE,"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    DELETE,"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    DONE,"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    EVENT,"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    FIND,"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    LIST,"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    TODO;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * Returns a boolean to indicate whether the user\u0027s input is valid."},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     * @param value input command from the user"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     * @return the boolean to indicate whether is it a valid command"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    public static boolean isContains(String value) {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        for (DukeCommand cmd : values()) {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"            if (cmd.name().equals(value)) {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"                return true;"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        return false;"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":29}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Terminates the program."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    public ExitCommand() {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"        super(true);"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * Terminates the program and prints a farewell message to the user."},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        ui.showExit();"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":26}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    private String query;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    public FindCommand(String query) {"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"        this.query \u003d query;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        for (Task task : taskList.getTaskList()) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"            if(task.getDescription().contains(query)) {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"                printTaskList.add(task);"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        ui.showListMessage(printTaskList, true);"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":27}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.DukeHelper;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" * Lists all the tasks in the list to the user."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"public class ListCommand extends Command{"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private String date;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public ListCommand() {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.date \u003d null;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    public ListCommand(String date) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"        this.date \u003d date;"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * Performs listing and printing of tasks to the user."},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered parsing the user\u0027s input"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        int listSize \u003d taskList.size();"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        if (listSize \u003c\u003d 0) {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"Your task list is empty.\");"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        //Clone the duke.task list for filtering"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d taskList.clone();"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        //If there is date in the duke.command, only display the events or deadlines on the particular date."},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        if (date !\u003d null) {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            if(!date.isEmpty() || !date.isBlank())"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"                printTaskList \u003d printTaskList.filterByDate(date);"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        if (printTaskList.size() \u003c\u003d 0) {"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(String.format(\"You have no task on %s.\", DukeHelper.formatDate(date)));"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        ui.showListMessage(printTaskList, false);"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":52}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.DukeHelper;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Represents a Deadline task."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    private LocalDate by;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    public LocalDate getBy() {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        return by;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        this.by \u003d LocalDate.parse(by);"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public Deadline(int done, String description, String by) {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        super(done, description);"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        this.by \u003d LocalDate.parse(by);"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), DukeHelper.formatDate(by));"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, by);"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":37}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.DukeHelper;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    private LocalDate at;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    public LocalDate getAt() {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"        return at;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    public Event(String description, String at) {"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.at \u003d LocalDate.parse(at);"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    public Event(int done, String description, String at) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"        super(done, description);"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        this.at \u003d LocalDate.parse(at);"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), DukeHelper.formatDate(at));"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, description, at);"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":34}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    public Task(int done, String description) {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"        this.isDone \u003d done \u003d\u003d 1 ? true : false;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    public String getStatusIcon() {"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        return isDone ? \"\\u2718\" : \" \";"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    public void setDone() {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        isDone \u003d true;"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    public boolean getDone() {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        return isDone;"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public String getDescription() {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        return description;"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public abstract String toStorageString();"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":39}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    public TaskList() {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        return tasks;"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    public void add(Task task) {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        tasks.add(task);"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    public Task delete(int index) {"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        return tasks.remove(index);"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public Task get(int index) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        return tasks.get(index);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    public void setDone(int index) {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        tasks.get(index).setDone();"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public int size() {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        return tasks.size();"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    public TaskList clone() {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        return new TaskList(tasks);"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"    public void clear() {"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        tasks.clear();"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    public void setAllDone() {"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"        for (Task task : tasks) {"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"            task.setDone();"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"    public boolean isAllDone() {"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        for (Task task : tasks) {"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"            if(!task.getDone()) {"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"                return false;"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"        return true;"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"    public TaskList filterByDate(String date) {"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"        List\u003cTask\u003e printTasks \u003d new ArrayList\u003c\u003e(tasks);"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        LocalDate queryDate \u003d LocalDate.parse(date);"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"        printTasks.removeIf(t -\u003e {"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"            if (t instanceof Deadline) {"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"                return !(((Deadline) t).getBy().isEqual(queryDate));"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"            } else if (t instanceof Event) {"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"                return !((Event) t).getAt().isEqual(queryDate);"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"        });"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"        return new TaskList(printTasks);"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"        for (Task t : tasks) {"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"            sb.append(String.format(\"%s%n\", t.toStorageString()));"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":86}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"    public ToDo(String description) {"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    public ToDo(int done, String description) {"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"        super(done, description);"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[T]%s\", super.toString());"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":22}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"import duke.Ui;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import java.io.InputStream;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import java.io.PrintStream;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"public class UiTest {"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private final PrintStream standardOut \u003d System.out;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    private Ui ui \u003d new Ui();"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    @BeforeEach"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    @AfterEach"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        System.setOut(standardOut);"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public void showWelcomeTest() {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        ui.showWelcome();"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"____________________________________________________________\\n\" +"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"                \"Hello! I\u0027m Duke\\n\" +"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"                \"What can I do for you?\\n\" +"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"                \"____________________________________________________________\", outputStreamCaptor.toString().trim());"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public void showLineTest() {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        ui.showLine();"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"____________________________________________________________\", outputStreamCaptor.toString().trim());"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    public void showErrorTest() {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        ui.showError(\"Invalid Input\");"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"☹️ OOPS!!! Invalid Input\", outputStreamCaptor.toString().trim());"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":48}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    public static final String testDesc1 \u003d \"return books\";"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    public static final String testDate1 \u003d \"2019-11-01\";"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    public static final String testDesc2 \u003d \"pay phone bill\";"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    public static final String testDate2 \u003d \"2021-01-26\";"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    public void toStorageStringTest() {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline1 \u003d new Deadline(testDesc1, testDate1);"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"D | 0 | return books | 2019-11-01\", newDeadline1.toStorageString());"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline2 \u003d new Deadline(1, testDesc2, testDate2);"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"D | 1 | pay phone bill | 2021-01-26\", newDeadline2.toStorageString());"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public void toStringTest() {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline1 \u003d new Deadline(testDesc1, testDate1);"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"[D][ ] return books (by: Nov 01 2019)\", newDeadline1.toString());"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline2 \u003d new Deadline(1, testDesc2, testDate2);"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"[D][✘] pay phone bill (by: Jan 26 2021)\", newDeadline2.toString());"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"deadline return book /by 2019-11-01"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"event project meeting /at 2019-11-01"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"delete 2"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"list 2019-11-01"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"bye"}],"authorContributionMap":{"glatiuden":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"glatiuden":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/command/*.java ../src/main/java/duke/task/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":32,"glatiuden":2}}]
