[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"    protected String by;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"        this.by \u003d by;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":14}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":" * Duke is a Personal Assistant Chatbot that helps a person to keep track of various things."},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"     * This methods prints horizontal line whenever it\u0027s called."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    private static void printHorizontalLine() {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     * This method greets the user upon execution."},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    private static void greetCommand() {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        printHorizontalLine();"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        printHorizontalLine();"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * This is the execution method, where the user\u0027s inputs are split up into arrays and processed accordingly."},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     * @param inputLine the inputs that user have typed in"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     * @param taskList the task list to be maintained"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException whenever the user typed in invalid command."},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    private static void echoCommand(String inputLine, List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        String[] inputs \u003d inputLine.split(\" \");"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        String command \u003d inputs[0].toUpperCase();"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"        if (!DukeCommand.isContains(command)) {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            DukeCommand dukeCommand \u003d DukeCommand.valueOf(command);"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            String[] actions \u003d Arrays.copyOfRange(inputs, 1, inputs.length);"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            String actionString \u003d String.join(\" \", actions);"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            dukeCommand.runCommand(actionString, taskList);"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"     * This method bids farewell to the user whenever the \"bye\" command is inputted."},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    private static void exitCommand() {"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"        printHorizontalLine();"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        printHorizontalLine();"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"     * This method automatically greets the user upon execution of the programme. It maintains the list of tasks and handles the capturing of inputs from users."},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"     * It also handles the error handling."},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"        greetCommand();"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"        String command;"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"        while (!(command \u003d sc.nextLine()).equals(\"bye\")) {"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"            printHorizontalLine();"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"            try {"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"                echoCommand(command, taskList);"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"            } catch (DukeException ex) {"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"                System.out.println(ex.getMessage());"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"            printHorizontalLine();"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"        exitCommand();"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"        sc.close();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"glatiuden":73,"-":4}},{"path":"src/main/java/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":" * DukeCommand is an enum class that allows execution of methods based on the command that user have typed in."},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"public enum DukeCommand {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    DEADLINE {"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"        /**"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"         * This method process the user\u0027s input parameters and instantiate new Deadline object, which is then added to the tasks list."},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"         * @param actions parameters of the new Deadline object."},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"         * @param taskList list of tasks to be maintained."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"         * @throws DukeException whenever the user\u0027s input parameter is empty or entered an invalid format."},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"         */"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        @Override"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"        public void runCommand(String actions, List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"            if (actions.isEmpty() || actions.isBlank()) {"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"            if (!actions.contains(\"/by\")) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! You have entered an invalid format.\");"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"            String[] inputs \u003d actions.split(\"/by\");"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            if (inputs.length \u003c 2) {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! You have entered an invalid format.\");"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"            Deadline newDeadline \u003d new Deadline(inputs[0].trim(), inputs[1].trim());"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"            addCommand(newDeadline, taskList);"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    },"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    DELETE {"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        /**"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"         * This method handles the deletion of a task from the user\u0027s tasks list."},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"         * @param actions index of the task to be deleted."},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"         * @param taskList list of tasks to be maintained."},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"         * @throws DukeException whenever the user keyed in an invalid index."},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"         */"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        @Override"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        public void runCommand(String actions, List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            int index \u003d Integer.parseInt(actions) - 1;"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            int listSize \u003d taskList.size();"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"            if (listSize \u003c\u003d 0) {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! Your tasks list is empty.\");"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"            if (index \u003c 0 || index \u003e\u003d listSize) {"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! The number you entered is invalid.\");"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"            Task selectedTask \u003d taskList.get(index);"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"            taskList.remove(selectedTask);"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"            System.out.printf(PRINT_FORMAT, selectedTask.toString());"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"            System.out.printf(\"Now you have %d %s in the list.%n\", taskList.size(), taskList.size() \u003e\u003d 2 ? \"tasks\" : \"task\");"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"    },"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"    DONE {"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        /**"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"         * This method handles the completion of a task from the user\u0027s tasks list."},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"         * @param actions index of the completed Task."},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"         * @param taskList list of tasks to be maintained."},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"         * @throws DukeException whenever the user keyed in an invalid index or trying to complete a completed task."},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"         */"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"        @Override"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        public void runCommand(String actions, List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"            int index \u003d Integer.parseInt(actions) - 1;"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"            int listSize \u003d taskList.size();"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"            if (listSize \u003c\u003d 0) {"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! Your tasks list is empty.\");"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"            if (index \u003c 0 || index \u003e\u003d listSize) {"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! The number you entered is invalid.\");"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"            Task selectedTask \u003d taskList.get(index);"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"            if (selectedTask.getDone()) {"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! You have already completed this task!\");"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"            selectedTask.setDone();"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"            System.out.printf(PRINT_FORMAT, selectedTask.toString());"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"    },"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"    EVENT {"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"        /**"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"         * This method process the user\u0027s input parameters and instantiate new Event object, which is then added to the tasks list."},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"         * @param actions parameters of the new Event object."},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"         * @param taskList list of tasks to be maintained."},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"         * @throws DukeException whenever the user\u0027s input parameter is empty or entered an invalid format."},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"         */"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"        @Override"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"        public void runCommand(String actions, List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"            if (actions.isEmpty() || actions.isBlank()) {"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"            if (!actions.contains(\"/at\")) {"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! You have entered an invalid format.\");"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"            String[] inputs \u003d actions.split(\"/at\");"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"            if (inputs.length \u003c 2) {"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! You have entered an invalid format.\");"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":"            Event newEvent \u003d new Event(inputs[0].trim(), inputs[1].trim());"},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"            addCommand(newEvent, taskList);"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":"    },"},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":"    LIST {"},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"        /**"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"         * This method prints the tasks that the user have saved so far."},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":"         * @param actions inputs after the command."},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"         * @param taskList the list of task to be printed out."},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"         * @throws DukeException whenever there are additional inputs after the command or the list is empty."},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":"         */"},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":"        @Override"},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"        public void runCommand(String actions, List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":"            if (!actions.isEmpty() || !actions.isBlank()) {"},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! I don\u0027t understand your additional command!\");"},{"lineNumber":124,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":126,"author":{"gitId":"glatiuden"},"content":"            int listSize \u003d taskList.size();"},{"lineNumber":127,"author":{"gitId":"glatiuden"},"content":"            if (listSize \u003c\u003d 0) {"},{"lineNumber":128,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! Your tasks list is empty.\");"},{"lineNumber":129,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":131,"author":{"gitId":"glatiuden"},"content":"            System.out.printf(\"Here are the %s in your list:%n\", taskList.size() \u003e\u003d 2 ? \"tasks\" : \"task\");"},{"lineNumber":132,"author":{"gitId":"glatiuden"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":133,"author":{"gitId":"glatiuden"},"content":"                System.out.printf(\"%d.%s%n\", i + 1, taskList.get(i).toString());"},{"lineNumber":134,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"glatiuden"},"content":"    },"},{"lineNumber":137,"author":{"gitId":"glatiuden"},"content":"    TODO {"},{"lineNumber":138,"author":{"gitId":"glatiuden"},"content":"        /**"},{"lineNumber":139,"author":{"gitId":"glatiuden"},"content":"         * This method process the user\u0027s input parameters and instantiate new ToDo object, which is then added to the tasks list."},{"lineNumber":140,"author":{"gitId":"glatiuden"},"content":"         * @param actions parameters of the new ToDo object."},{"lineNumber":141,"author":{"gitId":"glatiuden"},"content":"         * @param taskList list of tasks to be maintained."},{"lineNumber":142,"author":{"gitId":"glatiuden"},"content":"         * @throws DukeException whenever the user\u0027s input parameter is empty."},{"lineNumber":143,"author":{"gitId":"glatiuden"},"content":"         */"},{"lineNumber":144,"author":{"gitId":"glatiuden"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"glatiuden"},"content":"        public void runCommand(String actions, List\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":146,"author":{"gitId":"glatiuden"},"content":"            if (actions.isEmpty() || actions.isBlank()) {"},{"lineNumber":147,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":148,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":150,"author":{"gitId":"glatiuden"},"content":"            ToDo newToDo \u003d new ToDo(actions);"},{"lineNumber":151,"author":{"gitId":"glatiuden"},"content":"            addCommand(newToDo, taskList);"},{"lineNumber":152,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"glatiuden"},"content":"    };"},{"lineNumber":154,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":155,"author":{"gitId":"glatiuden"},"content":"    protected final static String PRINT_FORMAT \u003d \"\\t%s%n\";"},{"lineNumber":156,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":157,"author":{"gitId":"glatiuden"},"content":"    public abstract void runCommand(String actions, List\u003cTask\u003e taskList) throws DukeException;"},{"lineNumber":158,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":159,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"glatiuden"},"content":"     * This method handles the adding of Event, Deadline or ToDo into the list of tasks."},{"lineNumber":161,"author":{"gitId":"glatiuden"},"content":"     * @param newTask new Event, Deadline or ToDo."},{"lineNumber":162,"author":{"gitId":"glatiuden"},"content":"     * @param taskList list of tasks to be maintained."},{"lineNumber":163,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"glatiuden"},"content":"    protected void addCommand(Task newTask, List\u003cTask\u003e taskList) {"},{"lineNumber":165,"author":{"gitId":"glatiuden"},"content":"        taskList.add(newTask);"},{"lineNumber":166,"author":{"gitId":"glatiuden"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":167,"author":{"gitId":"glatiuden"},"content":"        System.out.printf(PRINT_FORMAT, newTask.toString());"},{"lineNumber":168,"author":{"gitId":"glatiuden"},"content":"        System.out.printf(\"Now you have %d %s in the list.%n\", taskList.size(), taskList.size() \u003e\u003d 2 ? \"tasks\" : \"task\");"},{"lineNumber":169,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":171,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"glatiuden"},"content":"     * This method checks whether the user\u0027s input is a valid command."},{"lineNumber":173,"author":{"gitId":"glatiuden"},"content":"     * @param value input command from the user."},{"lineNumber":174,"author":{"gitId":"glatiuden"},"content":"     * @return the boolean to indicate whether is it a valid command."},{"lineNumber":175,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"glatiuden"},"content":"    public static boolean isContains(String value) {"},{"lineNumber":177,"author":{"gitId":"glatiuden"},"content":"        for (DukeCommand cmd : values()) {"},{"lineNumber":178,"author":{"gitId":"glatiuden"},"content":"            if (cmd.name().equals(value)) {"},{"lineNumber":179,"author":{"gitId":"glatiuden"},"content":"                return true;"},{"lineNumber":180,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"glatiuden"},"content":"        return false;"},{"lineNumber":183,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":184}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"    public DukeException(String message) {"},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"        super(message);"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"    protected String by;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"    public Event(String description, String by) {"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"        this.by \u003d by;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"        return \"[E]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":14}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"    public Task(String description) {"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"        this.description \u003d description;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"        this.isDone \u003d false;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    public String getStatusIcon() {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"        return isDone ? \"\\u2718\" : \" \";"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    public void setDone() {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        isDone \u003d true;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    public boolean getDone() {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        return isDone;"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":26}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"    protected String by;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"    public ToDo(String description) {"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"bye"}],"authorContributionMap":{"glatiuden":8}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":33,"glatiuden":1}}]
