[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"# Duke Application"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"Duke, a Personal Assistant Chatbot that helps a person to keep track of various tasks (i.e. To Do List, Deadlines and Events)."},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"1. Download the latest Duke.jar from [here](https://github.com/glatiuden/ip/releases)."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"1. Copy the file to the folder you want to use as the home folder for your Duke App."},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"1. Double-click the file to start the app.\u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"![Duke GUI](docs/Ui.png)"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"1. Type the command in the command box and press Enter to execute it."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"Some example commands you can try:"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"1. Refer to the [Features Page](https://github.com/glatiuden/ip/tree/master/docs#features) for details of each command."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"## Command summary"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"Action | Format"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"--------|------------------"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"**todo** | `todo DESCRIPTION`"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"**deadline** | `deadline DESCRIPTION /by DATE[TIME]`"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"**event** | `event DESCRIPTION /at DATE[TIME]`"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"**list** | `list [DATE]`"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"**find** | `find KEYWORD [MORE KEYWORDS]`"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"**delete** | `delete ...` or `delete all`"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"**done** | `done ...` or `done all`"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"**bye** | `bye`"}],"authorContributionMap":{"glatiuden":21,"-":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"java {"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"}"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"    archiveBaseName \u003d \"Duke\""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"    configFile file(\"config/checkstyle/checkstyle.xml\")"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"}"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"checkstyleMain {"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"    source \u003d\u0027src/main/java/duke\u0027"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"}"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"checkstyleTest {"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"    source \u003d\u0027src/test/java/duke\u0027"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"glatiuden":30}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"Duke, a Personal Assistant Chatbot that helps a person to keep track of various tasks (i.e. To Do List, Deadlines and Events)."},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"1. Download the latest Duke.jar from here."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"1. Copy the file to the folder you want to use as the home folder for your Duke App."},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"1. Double-click the file to start the app."},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"   ![Duke GUI](Ui.png)"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"1. Type the command in the command box and press Enter to execute it."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"   Some example commands you can try:"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"1. Refer to the Features below for details of each command."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"Notes about the command format:"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"- Words in UPPER_CASE are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"e.g. `todo DESCRIPTION` - `DESCRIPTION` is the parameter to be passed in, can be used as `todo homework`"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"- Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"e.g `deadline DESCRIPTION /by DATE [TIME]`, `TIME` is an optional parameter to be passed in, can be used as `deadline cancel spotify /by 2021-02-16 12:00`."},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"- Items with `...` after them can be used multiple time.\u003cbr/\u003e"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"e.g. `delete ...` can be used as `delete 1 2 3` etc."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"### Help : `help`"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"Shows a list of commands with its respective formats.\u003cbr/\u003e"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"**Format**: `help`"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"### Adding a Deadline task: `deadline`"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"Adds a deadline type of task to the personal task list.\u003cbr/\u003e"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"**Format**: `deadline DESCRIPTION /by DATE [TIME]`\u003cbr/\u003e"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"**Example**: `deadline assignment submission /by 2021-02-16 23:30`"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"### Adding an Event task: `event`"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"Adds an event type of task to the personal task list.\u003cbr/\u003e"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"**Format**: `event DESCRIPTION /at DATE [TIME]`\u003cbr/\u003e"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"**Example**: `event Sam\u0027s Birthday Party /at 2021-02-20`"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"### Adding a ToDo task: `todo`"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"Adds a todo type of task to the personal task list.\u003cbr/\u003e"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"**Format**: `todo DESCRIPTION`\u003cbr/\u003e"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"**Example**: `todo borrow book`"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"### Listing all task(s): `task`"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"Shows a list of all task in the task list. Display the tasks on a desired date by entering date after the `list` command.\u003cbr/\u003e"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"**Format**: `list [DATE]`\u003cbr/\u003e"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"**Example**: `list`, `list 2020-02-16`, `list 16/2/2021`"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"### Search for a task(s): `find`"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"Find tasks contain any of the given keywords.\u003cbr/\u003e"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"**Format**: `find KEYWORD [MORE_KEYWORDS]`\u003cbr/\u003e"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"**Example**: `find Birthday Party`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"### Marking a task as done: `done`"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"Marks the specified task or all the tasks as done from the task list."},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"#### Format 1: `done ...`"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"- Marks one or more tasks as done."},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"- **Examples**: `done 1`, `done 1 2 3`"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"#### Format 2: `all`"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"- Marks all the tasks from the task list as done."},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"- **Example**: `done all`"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"### Deleting a task: `delete`"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"Deletes the specified task or all the tasks from the task list."},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"#### Format 1: `delete ...`"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"- Deletes one or more tasks from the task list."},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"- **Example**: `delete 1`, `delete 1 2 3`"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"#### Format 2: `delete all`"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"- Deletes all the tasks from the task list. "},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"- **Example**: `delete all`"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"###Saving the data"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"Duke data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"## FAQ"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"**A**: Install the app in the other computer and overwrite the empty data file"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"it creates with the file that contains the data of your previous Duke home folder."},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"## Command Summary"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"Action | Format"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"--------|------------------"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"**todo** | `todo DESCRIPTION`"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"**deadline** | `deadline DESCRIPTION /by DATE[TIME]`"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"**event** | `event DESCRIPTION /at DATE[TIME]`"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"**list** | `list [DATE]`"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"**find** | `find KEYWORD [MORE KEYWORDS]`"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"**delete** | `delete ...` or `delete all`"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"**done** | `done ...` or `done all`"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"**bye** | `bye`"}],"authorContributionMap":{"glatiuden":85,"-":11}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"}"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""}],"authorContributionMap":{"glatiuden":13}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.model.Duke;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.ui.MainWindow;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"            stage.setTitle(\"Duke Personal Assistant Chatbot\");"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":34}},{"path":"src/main/java/duke/commons/core/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commons.core;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"public class Messages {"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_ERROR \u003d \"OOPS! %1$s\";"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found.\";"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_SAVE_FILE_ERROR \u003d \"Error saving file.\";"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_COMMAND_NOT_FOUND \u003d \"I\u0027m sorry, but I don\u0027t know what that means.\";"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Your command is not recognized!\";"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke, your personal assistant!\""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"            + \"\\nWhat can I do for you today?\";"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASK_ADD \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASK_ALL_DONE \u003d \"Nice! I\u0027ve marked the following task(s) as done:\";"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASK_DELETE \u003d \"Noted. I\u0027ve removed the following task(s):\";"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASK_ALL_DELETE \u003d \"Noted. I\u0027ve removed all your tasks:\";"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASKLIST_SUMMARY \u003d \"Now you have %d %s in the list.%n\";"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_LIST \u003d \"Here are the %s in your list:%n\";"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"The index you have entered is out of bound.\";"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASKLIST_EMPTY \u003d \"Your task list is empty.\";"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_NO_SEARCH_RESULT \u003d \"No search results found.\";"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASK_COMPLETED \u003d \"You have already completed this task!\";"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASK_ALL_COMPLETED \u003d \"You have already completed all the tasks!\";"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d \"You have entered an invalid date time format.\";"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_INVALID_TASK_FORMAT \u003d \"You have entered an invalid %1$s format.%n%2$s\";"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_CORRECT_EVENT_FORMAT \u003d \"Event Format: event DESCRIPTION /at DATETIME\";"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_CORRECT_DEADLINE_FORMAT \u003d \"Deadline Format: deadline DESCRIPTION /by DATETIME\";"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_EMPTY_TASK_DESCRIPTION \u003d \"The description of %1$s cannot be empty.\";"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_EMPTY_DATETIME_DESCRIPTION \u003d \"The date and time of %1$s cannot be empty.\";"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASK_DUPLICATE \u003d \"You have already inserted this task.\";"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_TASK_ANOMALIES \u003d \"There is a timing clash with existing tasks.\";"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    private static final String MESSAGE_HELP_FORMAT \u003d \"%s %s %n\";"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    public static final String MESSAGE_HELP \u003d \"These are the commands you can use:\\n\""},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"            + String.format(MESSAGE_HELP_FORMAT, \"todo         \", \"todo DESCRIPTION\")"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"            + String.format(MESSAGE_HELP_FORMAT, \"deadline  \", \"deadline DESCRIPTION /by DATE[TIME]\")"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            + String.format(MESSAGE_HELP_FORMAT, \"event       \", \"event DESCRIPTION /at DATE[TIME]\")"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"            + String.format(MESSAGE_HELP_FORMAT, \"list            \", \"list [DATE]\")"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            + String.format(MESSAGE_HELP_FORMAT, \"find          \", \"find KEYWORD [MORE KEYWORDS]\")"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            + String.format(MESSAGE_HELP_FORMAT, \"done        \", \"done ... or done all\")"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            + String.format(MESSAGE_HELP_FORMAT, \"delete      \", \"delete ... or delete all\")"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            + String.format(MESSAGE_HELP_FORMAT, \"bye          \", \"bye\");"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":41}},{"path":"src/main/java/duke/commons/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * Signals to the user that the program has encounter an error based on his/her input."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":10}},{"path":"src/main/java/duke/commons/util/AppUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commons.util;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":" * Helper methods used to validate and format inputs."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"public class AppUtil {"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    public static final DateTimeFormatter DATETIME_FORMAT \u003d new DateTimeFormatterBuilder()"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[yyyy-MM-dd HH:mm]\")"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[yyyy-MM-dd]\")"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[d-M-yyyy HH:mm]\")"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[d-M-yyyy]\")"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[yyyy/MM/dd HH:mm]\")"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[yyyy/MM/dd]\")"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[d/M/yyyy HH:mm]\")"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[d/M/yyyy]\")"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"            .toFormatter();"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d new DateTimeFormatterBuilder()"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[yyyy-MM-dd]\")"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[d-M-yyyy]\")"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[yyyy/MM/dd]\")"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            .appendPattern(\"[d/M/yyyy]\")"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            .toFormatter();"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"     * Returns a formatted date String."},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"     * @param date date to be formatted"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"     * @return formatted date String"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    public static String formatDate(LocalDateTime date) {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        return date.format(formatter);"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"     * Returns a formatted date String."},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"     * @param date date to be formatted"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"     * @return formatted date String"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"    public static String formatStorageDate(LocalDateTime date) {"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        return date.format(formatter);"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"     * Returns true if the String is an invalid date."},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"     * @param dateString a date String to be checked"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"    public static boolean checkIsInvalidDate(String dateString) {"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"            LocalDate.parse(dateString, DATE_FORMAT);"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"     * Returns true if the String is an invalid datetime."},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"     * @param dateTimeString a datetime String to be checked"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"    public static boolean checkIsInvalidDateTime(String dateTimeString) {"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"            LocalDateTime.parse(dateTimeString, DATETIME_FORMAT);"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"     * Returns true if the String contains numbers."},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"     * @param input The input {@code String}"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"    public static boolean checkContainsNumber(String input) {"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"        String regex \u003d \"(.)*(\\\\d)(.)*\";"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"        Pattern pattern \u003d Pattern.compile(regex);"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"        return pattern.matcher(input).matches();"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":98}},{"path":"src/main/java/duke/commons/util/CommandUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.commons.util;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_INDEX_OUT_OF_BOUND;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_NO_SEARCH_RESULT;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASKLIST_EMPTY;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":" * Contains common helper methods that is shared among the Command classes."},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"public class CommandUtil {"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    public static final String ALL \u003d \"all\";"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * Checks whether the index entered by the user is within the range of the size of task list."},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @param index index entered"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @param size size of task list"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the index is out of bounds."},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public static int checkIndexOutOfBounds(int index, int size) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        int posIndex \u003d index - 1;"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        if (posIndex \u003c 0 || posIndex \u003e\u003d size) {"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INDEX_OUT_OF_BOUND);"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        return posIndex;"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"     * Checks whether the task list is empty."},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"     * @param taskList task list to be checked"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"     * @param isQuery indicator used to differentiate whether is it a search command"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"     * @return size of the task list"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the task list is empty"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"    public static int checkListIsEmpty(TaskList taskList, boolean isQuery) throws DukeException {"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        int size \u003d taskList.size();"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        if (size \u003c\u003d 0) {"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(isQuery ? MESSAGE_NO_SEARCH_RESULT : MESSAGE_TASKLIST_EMPTY);"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"        return size;"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"     * Parse user\u0027s input into List of integer indexes."},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"     * @param input user\u0027s input"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"     * @return list of integers"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user\u0027s input is in an invalid or incorrect format."},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"    public static List\u003cInteger\u003e parseStringToNumbers(String input) throws DukeException {"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"            List\u003cInteger\u003e taskIndexes \u003d Arrays.stream(input.split(\" \")).mapToInt(Integer::parseInt).sorted()"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"                    .boxed().collect(Collectors.toList());"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"            Collections.reverse(taskIndexes);"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"            return taskIndexes;"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":71}},{"path":"src/main/java/duke/logic/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASK_ANOMALIES;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASK_DUPLICATE;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Task;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TimedTask;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":" * Adds task to the task list."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"public class AddCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    private final Task task;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    public AddCommand(Task task) {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"        this.task \u003d task;"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * Performs adding of {@code Task} into the task list, prints a message to the user then save the file to storage."},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there are duplicates or clashes in timing of the new {@code Task}."},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        if (taskList.checkForDuplicates(task)) {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_TASK_DUPLICATE);"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        if (task instanceof TimedTask) {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            if (taskList.checkForAnomalies(((TimedTask) task).getTaskDateTime())) {"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(MESSAGE_TASK_ANOMALIES);"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        taskList.add(task);"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        return new CommandResponse(ui.showAddMessage(task, taskList.size()));"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":48}},{"path":"src/main/java/duke/logic/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" * An abstract base class of executable commands."},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     * Performs the execution of the desired command."},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    public abstract CommandResponse execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":16}},{"path":"src/main/java/duke/logic/commands/CommandResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * Stores the responses after executing a command."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public class CommandResponse {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    private final String response;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    /** Indicator used to differentiate exit command */"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    private final boolean shouldExit;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * Constructor for CommandResponse, specifying the description."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     * @param response response of the {@code Command}"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse(String response) {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"        this.response \u003d response;"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        this.shouldExit \u003d false;"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * Constructor for CommandResponse, specifying the description and should exit."},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @param response response of the {@code Command}"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @param shouldExit indicate whether is it an {@code ExitCommand}"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse(String response, boolean shouldExit) {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        this.response \u003d response;"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        this.shouldExit \u003d shouldExit;"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    public boolean isShouldExit() {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        return shouldExit;"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        return response;"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":41}},{"path":"src/main/java/duke/logic/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.checkContainsNumber;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.ALL;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.checkIndexOutOfBounds;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.checkListIsEmpty;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.parseStringToNumbers;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Task;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":" * Deletes task from the list based on given index, or delete everything from the list."},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    private final String input;"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    public DeleteCommand(String input) {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        this.input \u003d input;"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     * Performs deletion of tasks, prints a message to the user and update the storage file."},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user\u0027s input is in an invalid or incorrect format."},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        checkListIsEmpty(taskList, false);"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        String response;"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        if (input.equals(ALL)) {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            response \u003d processDeleteAllCommand(taskList, ui);"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        } else if (checkContainsNumber(input)) {"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"            response \u003d processDeleteCommand(taskList, ui);"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"        return new CommandResponse(response);"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"     * Performs the deletion of all the {@code Task} in the {@code TaskList}."},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"     * @return {@code String} message to be outputted to user"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"    private String processDeleteAllCommand(TaskList taskList, Ui ui) {"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d taskList.clear();"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"        assert taskList.size() \u003e 0 : \"task list should be emptied\";"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"        return ui.showDeleteMessage(printTaskList);"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"     * Performs the deletion of multiple {@code Task} in the {@code TaskList}."},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"     * @return {@code String} message to be outputted to user"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"    private String processDeleteCommand(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d new TaskList();"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"        int listSize \u003d taskList.size();"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"        List\u003cInteger\u003e indexes \u003d parseStringToNumbers(input);"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"        for (int i: indexes) {"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"            int index \u003d checkIndexOutOfBounds(i, listSize);"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"            printTaskList.add(deleteTask(taskList, index));"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"        printTaskList.reverse();"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"        return ui.showDeleteMessage(printTaskList, taskList.size());"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"     * Performs the deletion of a {@code Task} given an index."},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"     * @param index index of task"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"     * @return Deleted {@code Task}"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"    private Task deleteTask(TaskList taskList, int index) {"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"        Task task \u003d taskList.delete(index);"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"        assert taskList.get(index) \u003d\u003d null : \"task should be deleted\";"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"        return task;"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":96}},{"path":"src/main/java/duke/logic/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASK_ALL_COMPLETED;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASK_COMPLETED;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.checkContainsNumber;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.ALL;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.checkIndexOutOfBounds;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.checkListIsEmpty;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.parseStringToNumbers;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Task;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":" * Marks a task as done from the list based on given index, or mark everything as done from the list."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"public class DoneCommand extends Command {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    private final String input;"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    public DoneCommand(String input) {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        this.input \u003d input;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"     * Performs marking of tasks as done, prints a message to the user and update the storage file."},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user\u0027s input is in an invalid or incorrect format."},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        checkListIsEmpty(taskList, false);"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        String response;"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        if (input.equals(ALL)) {"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"            response \u003d processDoneAllCommand(taskList, ui);"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        } else if (checkContainsNumber(input)) {"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"            response \u003d processDoneCommand(taskList, ui);"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        storage.saveFile(taskList);"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"        return new CommandResponse(response);"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"     * Performs the marking of all {@code Task} in the {@code TaskList} as done."},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"     * @return {@code String} message to be outputted to user"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when all the {@code Task} in the {@code TaskList} are already completed."},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"    private String processDoneAllCommand(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"        if (taskList.isAllDone()) {"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_TASK_ALL_COMPLETED);"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"        taskList.setAllDone();"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        assert taskList.isAllDone() : \"all tasks should be marked as done\";"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"        return ui.showDoneMessage(taskList);"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"     * Performs the marking of multiple {@code Task} in the {@code TaskList} as done."},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"     * @return {@code String} message to be outputted to user"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"    private String processDoneCommand(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d new TaskList();"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"        int listSize \u003d taskList.size();"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"        List\u003cInteger\u003e indexes \u003d parseStringToNumbers(input);"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"        for (int i: indexes) {"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"            int index \u003d checkIndexOutOfBounds(i, listSize);"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"            printTaskList.add(markTaskAsDone(taskList, index));"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"        printTaskList.reverse();"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"        return ui.showDoneMessage(printTaskList);"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"     * Performs the marking of a {@code Task} as done, given an index."},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"     * @param index index of task"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"     * @return Completed {@code Task}"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"    private Task markTaskAsDone(TaskList taskList, int index) throws DukeException {"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"        Task task \u003d taskList.get(index);"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"        if (task.getDone()) {"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_TASK_COMPLETED);"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"        task.setDone();"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"        assert task.getDone() : \"task should be marked as done\";"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"        return task;"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":106}},{"path":"src/main/java/duke/logic/commands/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":" * Valid commands that the user can execute."},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"public enum DukeCommand {"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    BYE,"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    DEADLINE,"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    DELETE,"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    DONE,"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    EVENT,"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    FIND,"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    HELP,"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    LIST,"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    TODO;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * Returns a boolean to indicate whether the user\u0027s input is valid."},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * @param value input command from the user"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @return the boolean to indicate whether is it a valid command"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    public static boolean isContains(String value) {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        return Arrays.stream(values()).anyMatch(cmd -\u003e cmd.name().equals(value));"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        return super.toString().toLowerCase();"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":33}},{"path":"src/main/java/duke/logic/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Terminates the program."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"     * Terminates the program and prints a farewell message to the user."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        return new CommandResponse(ui.showExit(), true);"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":22}},{"path":"src/main/java/duke/logic/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.checkListIsEmpty;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" * Finds and lists all tasks in task lists that contains any of the argument keywords."},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    private final String query;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    public FindCommand(String query) {"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        this.query \u003d query;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * Retrieves all tasks in the task lists that contains any of the argument keywords."},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d taskList.find(query);"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        checkListIsEmpty(printTaskList, true);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        return new CommandResponse(ui.showListMessage(printTaskList, true));"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":34}},{"path":"src/main/java/duke/logic/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" * Shows list of commands that Duke can support."},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"public class HelpCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"     * Prints to the user of the list of commands that can be executed."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        return new CommandResponse(ui.showHelpMessage(), false);"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":22}},{"path":"src/main/java/duke/logic/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.CommandUtil.checkListIsEmpty;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":" * Lists all the tasks in the list to the user."},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"public class ListCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    private final String queryDate;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     * Constructor for List {@code Command}, queryDate is null by default otherwise specified."},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * @param queryDate date to be queried"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    public ListCommand(String ... queryDate) {"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        String newQueryDate \u003d null;"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        if (queryDate.length \u003e 0) {"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            newQueryDate \u003d queryDate[0];"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        this.queryDate \u003d newQueryDate;"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     * Performs listing and printing of tasks to the user."},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     * @param taskList user\u0027s task list"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * @param ui text UI object"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @param storage storage object"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered parsing the user\u0027s input"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        checkListIsEmpty(taskList, false);"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        TaskList printTaskList \u003d taskList;"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        if (queryDate !\u003d null) {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            printTaskList \u003d taskList.filterByDate(queryDate);"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"            checkListIsEmpty(printTaskList, true);"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        return new CommandResponse(ui.showListMessage(printTaskList, false));"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":49}},{"path":"src/main/java/duke/logic/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.logic.parser;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_COMMAND_NOT_FOUND;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_CORRECT_DEADLINE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_CORRECT_EVENT_FORMAT;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_EMPTY_DATETIME_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_EMPTY_TASK_DESCRIPTION;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_INVALID_DATETIME_FORMAT;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_INVALID_TASK_FORMAT;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.checkIsInvalidDate;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.checkIsInvalidDateTime;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.Command;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.DoneCommand;"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.DukeCommand;"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.ExitCommand;"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.FindCommand;"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Deadline;"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Event;"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Task;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.ToDo;"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":" * Parses the user\u0027s input."},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"public class Parser {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    private static final String DEADLINE_DELIMITER \u003d \"/by\";"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    private static final String EVENT_DELIMITER \u003d \"/at\";"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"     * Parses the user input into its respective command."},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"     * @param fullCommand the user\u0027s input string"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"     * @return a {@code Command} based on the user\u0027s input"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException When the user types an invalid or incomplete command"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    public static Command parse(String fullCommand) throws DukeException {"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        String[] inputs \u003d fullCommand.split(\" \");"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"        String command \u003d inputs[0].toUpperCase();"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"        if (!DukeCommand.isContains(command)) {"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_COMMAND_NOT_FOUND);"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"        DukeCommand dukeCommand \u003d DukeCommand.valueOf(command);"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        switch (dukeCommand) {"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"        case BYE:"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"            return new ExitCommand();"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"        case DELETE:"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        case DONE:"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"            return parseDoneOrDeleteCmd(inputs, dukeCommand);"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"        case DEADLINE:"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        case EVENT:"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"            return parseDeadlineOrEventCmd(inputs, dukeCommand);"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"        case FIND:"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"        case TODO:"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"            return parseFindOrTodoCmd(inputs, dukeCommand);"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"        case HELP:"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"            return new HelpCommand();"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        case LIST:"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"            return parseListCmd(inputs);"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"        default:"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_COMMAND_NOT_FOUND);"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"     * Returns either {@code DoneCommand} or {@code DeleteCommand} depending on the user\u0027s input."},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"     * @param inputs the user\u0027s input that has been split into array by spaces"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"     * @return {@code DoneCommand} or {@code DeleteCommand}"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user types an invalid command format"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"    private static Command parseDoneOrDeleteCmd(String[] inputs, DukeCommand dukeCommand) throws DukeException {"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"        checkInputsLength(inputs, dukeCommand.toString());"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"        String params \u003d joinStringFromArray(inputs, 1, inputs.length);"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"        switch (dukeCommand) {"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"        case DELETE:"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"            return new DeleteCommand(params);"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"        case DONE:"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"            return new DoneCommand(params);"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"        default:"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"     * Returns either {@code EventCommand} or {@code DeadlineCommand} depending on the user\u0027s input."},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"     * @param inputs the user\u0027s input that has been split into array by spaces"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"     * @return {@code EventCommand} or {@code DeadlineCommand}"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user types an invalid command format"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"    private static Command parseDeadlineOrEventCmd(String[] inputs, DukeCommand dukeCommand) throws DukeException {"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"        String delimiter \u003d (dukeCommand \u003d\u003d DukeCommand.DEADLINE) ? DEADLINE_DELIMITER : EVENT_DELIMITER;"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"        int delimiterIndex \u003d getDelimiterIndex(inputs, dukeCommand, delimiter);"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"        String taskDesc \u003d joinStringFromArray(inputs, 1, delimiterIndex);"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"        String taskDate \u003d parseDateTimeString(inputs, delimiterIndex);"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"        Task newTask;"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":"        switch (dukeCommand) {"},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":"        case EVENT:"},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"            newTask \u003d new Event(taskDesc, taskDate);"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"            break;"},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":"        case DEADLINE:"},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":"            newTask \u003d new Deadline(taskDesc, taskDate);"},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"            break;"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"        default:"},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"        return new AddCommand(newTask);"},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":"     * Returns either {@code FindCommand} or {@code ToDoCommand} depending on the user\u0027s input."},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"glatiuden"},"content":"     * @param inputs the user\u0027s input that has been split into array by spaces"},{"lineNumber":125,"author":{"gitId":"glatiuden"},"content":"     * @return {@code FindCommand} or {@code ToDoCommand}"},{"lineNumber":126,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when the user types an invalid command format"},{"lineNumber":127,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"glatiuden"},"content":"    private static Command parseFindOrTodoCmd(String[] inputs, DukeCommand dukeCommand) throws DukeException {"},{"lineNumber":129,"author":{"gitId":"glatiuden"},"content":"        checkInputsLength(inputs, dukeCommand.toString());"},{"lineNumber":130,"author":{"gitId":"glatiuden"},"content":"        String cmdDesc \u003d joinStringFromArray(inputs, 1, inputs.length);"},{"lineNumber":131,"author":{"gitId":"glatiuden"},"content":"        switch (dukeCommand) {"},{"lineNumber":132,"author":{"gitId":"glatiuden"},"content":"        case TODO:"},{"lineNumber":133,"author":{"gitId":"glatiuden"},"content":"            return new AddCommand(new ToDo(cmdDesc));"},{"lineNumber":134,"author":{"gitId":"glatiuden"},"content":"        case FIND:"},{"lineNumber":135,"author":{"gitId":"glatiuden"},"content":"            return new FindCommand(cmdDesc);"},{"lineNumber":136,"author":{"gitId":"glatiuden"},"content":"        default:"},{"lineNumber":137,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":138,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":141,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"glatiuden"},"content":"     * Returns a {@code ListCommand} depending on user\u0027s input"},{"lineNumber":143,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"glatiuden"},"content":"     * @param inputs The user\u0027s input that has been split into array by spaces"},{"lineNumber":145,"author":{"gitId":"glatiuden"},"content":"     * @return {@code ListCommand}"},{"lineNumber":146,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException When the user types an invalid command format."},{"lineNumber":147,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"glatiuden"},"content":"    private static Command parseListCmd(String[] inputs) throws DukeException {"},{"lineNumber":149,"author":{"gitId":"glatiuden"},"content":"        if (inputs.length \u003d\u003d 2) {"},{"lineNumber":150,"author":{"gitId":"glatiuden"},"content":"            String queryDate \u003d inputs[1];"},{"lineNumber":151,"author":{"gitId":"glatiuden"},"content":"            if (checkIsInvalidDate(queryDate)) {"},{"lineNumber":152,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(MESSAGE_INVALID_DATETIME_FORMAT);"},{"lineNumber":153,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"glatiuden"},"content":"            return new ListCommand(queryDate);"},{"lineNumber":155,"author":{"gitId":"glatiuden"},"content":"        } else if (inputs.length \u003d\u003d 1) {"},{"lineNumber":156,"author":{"gitId":"glatiuden"},"content":"            return new ListCommand();"},{"lineNumber":157,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":159,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":162,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"glatiuden"},"content":"     * Returns a valid datetime String by joining the user\u0027s input which was separated into array."},{"lineNumber":164,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"glatiuden"},"content":"     * @param inputs The user\u0027s input that has been split into array by spaces"},{"lineNumber":166,"author":{"gitId":"glatiuden"},"content":"     * @param index The starting index to join the array"},{"lineNumber":167,"author":{"gitId":"glatiuden"},"content":"     * @return Valid DateTime {@code String}"},{"lineNumber":168,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException When user types an invalid datetime String"},{"lineNumber":169,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"glatiuden"},"content":"    private static String parseDateTimeString(String[] inputs, int index) throws DukeException {"},{"lineNumber":171,"author":{"gitId":"glatiuden"},"content":"        String dateString \u003d joinStringFromArray(inputs, index + 1, inputs.length);"},{"lineNumber":172,"author":{"gitId":"glatiuden"},"content":"        if (checkIsInvalidDateTime(dateString)) {"},{"lineNumber":173,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_DATETIME_FORMAT);"},{"lineNumber":174,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"glatiuden"},"content":"        return dateString;"},{"lineNumber":176,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":178,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"glatiuden"},"content":"     * Returns a String joined from an array with the specified start and end index."},{"lineNumber":180,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":181,"author":{"gitId":"glatiuden"},"content":"     * @param inputs The user\u0027s input that has been split into array by spaces"},{"lineNumber":182,"author":{"gitId":"glatiuden"},"content":"     * @param startIndex Start index for joining of the array"},{"lineNumber":183,"author":{"gitId":"glatiuden"},"content":"     * @param endIndex End index for joining of the array"},{"lineNumber":184,"author":{"gitId":"glatiuden"},"content":"     * @return {@code String} input"},{"lineNumber":185,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"glatiuden"},"content":"    private static String joinStringFromArray(String[] inputs, int startIndex, int endIndex) {"},{"lineNumber":187,"author":{"gitId":"glatiuden"},"content":"        return String.join(\" \", Arrays.copyOfRange(inputs, startIndex, endIndex));"},{"lineNumber":188,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":190,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"glatiuden"},"content":"     * Returns the index of delimiter after validating the user\u0027s input format."},{"lineNumber":192,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"glatiuden"},"content":"     * @param inputs The user\u0027s input that has been split into array by spaces"},{"lineNumber":194,"author":{"gitId":"glatiuden"},"content":"     * @param dukeCommand The command that the user is executing"},{"lineNumber":195,"author":{"gitId":"glatiuden"},"content":"     * @param delimiter The delimiter to be searched"},{"lineNumber":196,"author":{"gitId":"glatiuden"},"content":"     * @return an {@code Integer} position of the delimiter"},{"lineNumber":197,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException When the user types an incorrect command format"},{"lineNumber":198,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"glatiuden"},"content":"    private static int getDelimiterIndex(String[] inputs, DukeCommand dukeCommand, String delimiter)"},{"lineNumber":200,"author":{"gitId":"glatiuden"},"content":"            throws DukeException {"},{"lineNumber":201,"author":{"gitId":"glatiuden"},"content":"        String commandType \u003d dukeCommand.toString();"},{"lineNumber":202,"author":{"gitId":"glatiuden"},"content":"        checkInputsLength(inputs, commandType);"},{"lineNumber":203,"author":{"gitId":"glatiuden"},"content":"        int index \u003d Arrays.asList(inputs).indexOf(delimiter);"},{"lineNumber":204,"author":{"gitId":"glatiuden"},"content":"        //ERROR: Delimiter not found"},{"lineNumber":205,"author":{"gitId":"glatiuden"},"content":"        if (index \u003c 0) {"},{"lineNumber":206,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(String.format(MESSAGE_INVALID_TASK_FORMAT, commandType,"},{"lineNumber":207,"author":{"gitId":"glatiuden"},"content":"                    getFormatMsg(dukeCommand)));"},{"lineNumber":208,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"glatiuden"},"content":"        //ERROR: Delimiter found but no description"},{"lineNumber":210,"author":{"gitId":"glatiuden"},"content":"        if (inputs[index - 1].equals(commandType)) {"},{"lineNumber":211,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(String.format(MESSAGE_EMPTY_TASK_DESCRIPTION, commandType));"},{"lineNumber":212,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"glatiuden"},"content":"        //ERROR: No date after delimiter"},{"lineNumber":214,"author":{"gitId":"glatiuden"},"content":"        if (inputs.length \u003c\u003d index + 1) {"},{"lineNumber":215,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(String.format(MESSAGE_EMPTY_DATETIME_DESCRIPTION, commandType));"},{"lineNumber":216,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"glatiuden"},"content":"        return index;"},{"lineNumber":218,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":220,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"glatiuden"},"content":"     * Returns the correct command format String to be shown to user as a hint."},{"lineNumber":222,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":223,"author":{"gitId":"glatiuden"},"content":"     * @param dukeCommand The command that the user is executing"},{"lineNumber":224,"author":{"gitId":"glatiuden"},"content":"     * @return A {@code String} that contains the correct format to the command"},{"lineNumber":225,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException When the command is not recognised"},{"lineNumber":226,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"glatiuden"},"content":"    private static String getFormatMsg(DukeCommand dukeCommand) throws DukeException {"},{"lineNumber":228,"author":{"gitId":"glatiuden"},"content":"        switch (dukeCommand) {"},{"lineNumber":229,"author":{"gitId":"glatiuden"},"content":"        case DEADLINE:"},{"lineNumber":230,"author":{"gitId":"glatiuden"},"content":"            return MESSAGE_CORRECT_DEADLINE_FORMAT;"},{"lineNumber":231,"author":{"gitId":"glatiuden"},"content":"        case EVENT:"},{"lineNumber":232,"author":{"gitId":"glatiuden"},"content":"            return MESSAGE_CORRECT_EVENT_FORMAT;"},{"lineNumber":233,"author":{"gitId":"glatiuden"},"content":"        default:"},{"lineNumber":234,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":235,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":238,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":239,"author":{"gitId":"glatiuden"},"content":"     * Validates whether the length of input is correct."},{"lineNumber":240,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":241,"author":{"gitId":"glatiuden"},"content":"     * @param inputs The user\u0027s input that has been split into array by spaces"},{"lineNumber":242,"author":{"gitId":"glatiuden"},"content":"     * @param commandType The command that the user is executing"},{"lineNumber":243,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException When there is missing description or parameter from the user\u0027s input"},{"lineNumber":244,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":245,"author":{"gitId":"glatiuden"},"content":"    private static void checkInputsLength(String[] inputs, String commandType) throws DukeException {"},{"lineNumber":246,"author":{"gitId":"glatiuden"},"content":"        if (inputs.length \u003c 2) {"},{"lineNumber":247,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(String.format(MESSAGE_EMPTY_TASK_DESCRIPTION, commandType));"},{"lineNumber":248,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":250}},{"path":"src/main/java/duke/model/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.CommandResponse;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import duke.logic.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"/** Duke is a Personal Assistant Chat Bot that helps a person to keep track of various things."},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":" * Initialize the application and start interacting with users."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    private final Storage storage;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    private final Ui ui;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /** Initialize the required objects and tries to loads up the data from the storage file,"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     * otherwise a new storage file will be created."},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    public Duke() {"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"        storage \u003d new Storage(\"data/tasks.txt\");"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        } catch (DukeException e) {"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     * Parses the user\u0027s input and executes its command."},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     * @param input input from user"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    public CommandResponse getResponse(String input) {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            return c.execute(tasks, ui, storage);"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        } catch (DukeException e) {"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"            return new CommandResponse(ui.showError(e.getMessage()));"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"glatiuden":44,"-":2}},{"path":"src/main/java/duke/model/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.formatDate;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.formatStorageDate;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":" * Represents a Deadline {@code TimedTask}."},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"public class Deadline extends TimedTask {"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    private static final String STRING_FORMAT \u003d \"[D]%s (by: %s)\";"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    private static final String STORAGE_STRING_FORMAT \u003d \"D | %d | %s | %s\";"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Deadline {@code TimedTask}, specifying the description and due date."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the deadline"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * @param taskDateTime due date of the deadline"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    public Deadline(String description, String taskDateTime) {"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        super(description, taskDateTime);"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Deadline {@code TimedTask}, specifying the task\u0027s status, description and due date."},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @param done integer value to indicate the deadline\u0027s status"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the deadline"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param taskDateTime due date of the deadline"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public Deadline(int done, String description, String taskDateTime) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        super(done, description, taskDateTime);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        if (obj instanceof Deadline) {"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            TimedTask timedTask \u003d (TimedTask) obj;"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            return timedTask.description.equalsIgnoreCase(super.description)"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"                    \u0026\u0026 timedTask.taskDateTime.equals(super.taskDateTime);"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        return false;"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"        return String.format(STRING_FORMAT, super.toString(), formatDate(super.taskDateTime));"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"        return String.format(STORAGE_STRING_FORMAT, isDone ? 1 : 0, description, formatStorageDate(super.taskDateTime));"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":58}},{"path":"src/main/java/duke/model/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.formatDate;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.formatStorageDate;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":" * Represents a Event {@code TimedTask}."},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"public class Event extends TimedTask {"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    private static final String STRING_FORMAT \u003d \"[E]%s (at: %s)\";"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    private static final String STORAGE_STRING_FORMAT \u003d \"E | %d | %s | %s\";"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Event {@code TimedTask}, specifying the description and occurrence date."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the event"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     * @param eventDateTime occurrence date of the event"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    public Event(String description, String eventDateTime) {"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        super(description, eventDateTime);"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Event {@code TimedTask}, specifying the task\u0027s status, description and occurrence date."},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * @param done integer value to indicate the event\u0027s status"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the event"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param eventDateTime occurrence date of the event"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public Event(int done, String description, String eventDateTime) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        super(done, description, eventDateTime);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        if (obj instanceof Event) {"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            TimedTask timedTask \u003d (TimedTask) obj;"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"            return timedTask.description.equalsIgnoreCase(super.description)"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"                    \u0026\u0026 timedTask.taskDateTime.equals(super.taskDateTime);"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        return false;"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"        return String.format(STRING_FORMAT, super.toString(), formatDate(super.taskDateTime));"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"        return String.format(STORAGE_STRING_FORMAT, isDone ? 1 : 0, description, formatStorageDate(super.taskDateTime));"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":58}},{"path":"src/main/java/duke/model/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * An abstract base class of addable task."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"     * Constructor for task, specifying the description."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     * @param description Description of the task."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * Constructor for task, specifying the task\u0027s status and description."},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     * @param done integer value to indicate the task\u0027s status."},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the task"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    public Task(int done, String description) {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        this.isDone \u003d done \u003d\u003d 1;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        this.description \u003d description;"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     * Get the status icon in regards to the task\u0027s status."},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @return \"X\" symbol if it is done, else returns an empty string \" \"."},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public String getStatusIcon() {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        return isDone ? \"X\" : \" \";"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    public void setDone() {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        isDone \u003d true;"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    public boolean getDone() {"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        return isDone;"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    public String getDescription() {"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        return description;"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"     * Formats the task\u0027s information into a formatted string that is suitable for storing."},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"    public abstract String toStorageString();"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":62}},{"path":"src/main/java/duke/model/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.DATE_FORMAT;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":" * Represents a list of task."},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":" * Supports various operations for manipulating the task list."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"public class TaskList {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    /** Constructor to instantiate an empty task list. */"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     * Constructor to instantiate a pre-populated task list."},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     * @param tasks list of tasks"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        return tasks;"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"     * Add {@code Task} to the task list."},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"     * @param task {@code Task} to be added"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    public void add(Task task) {"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"        tasks.add(task);"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"     * Delete {@code Task} from the task list."},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"     * @param index index of the task to be removed"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"     * @return the deleted task"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"    public Task delete(int index) {"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"        Task taskToBeDeleted \u003d this.get(index);"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"        tasks.remove(taskToBeDeleted);"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"        return taskToBeDeleted;"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"     * Returns {@code Task} at the given index."},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"     * @param index index of the task to be retrieve"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"     * @return the task at the given index"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"    public Task get(int index) {"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"        return tasks.get(index);"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"     * Returns {@code Task} that contains the search query."},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"     * @param query the search query"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"     * @return task list containing the matching tasks"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"    public TaskList find(String query) {"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"        List\u003cTask\u003e queryTasks \u003d tasks.stream().filter(task -\u003e"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"             task.getDescription().contains(query)"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"        ).collect(Collectors.toList());"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"        return new TaskList(queryTasks);"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"     * Returns the size of the task list"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"     * @return size of the task list"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"    public int size() {"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"        return tasks.size();"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"     * Clones the current task list."},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"     * @return copy of the current task list"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"    public TaskList clone() {"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"        return new TaskList(tasks);"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"     * Deletes all the {@code Task} in the task list."},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"    public TaskList clear() {"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"        TaskList taskList \u003d clone();"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"        tasks.clear();"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"        return taskList;"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"     * Sets all the tasks in the task list to done."},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":"    public void setAllDone() {"},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"        tasks.forEach(Task::setDone);"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"    public void reverse() {"},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"        Collections.reverse(tasks);"},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":"     * Checks whether are all the tasks in the task lists done."},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"glatiuden"},"content":"     * @return boolean to indicate are all the tasks done"},{"lineNumber":125,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"glatiuden"},"content":"    public boolean isAllDone() {"},{"lineNumber":127,"author":{"gitId":"glatiuden"},"content":"        return tasks.stream().allMatch(Task::getDone);"},{"lineNumber":128,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":130,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"glatiuden"},"content":"     * Filters the task list and returns the {@code Task} occurring on the specified date."},{"lineNumber":132,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"glatiuden"},"content":"     * @param date query date"},{"lineNumber":134,"author":{"gitId":"glatiuden"},"content":"     * @return task list containing {@code Task} that is occurring on the specified date"},{"lineNumber":135,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"glatiuden"},"content":"    public TaskList filterByDate(String date) {"},{"lineNumber":137,"author":{"gitId":"glatiuden"},"content":"        LocalDate queryDate \u003d LocalDate.parse(date, DATE_FORMAT);"},{"lineNumber":138,"author":{"gitId":"glatiuden"},"content":"        List\u003cTask\u003e printTasks \u003d tasks.stream().filter(task -\u003e {"},{"lineNumber":139,"author":{"gitId":"glatiuden"},"content":"            if (task instanceof TimedTask) {"},{"lineNumber":140,"author":{"gitId":"glatiuden"},"content":"                return ((TimedTask) task).getTaskDate().isEqual(queryDate);"},{"lineNumber":141,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":142,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":143,"author":{"gitId":"glatiuden"},"content":"        }).collect(Collectors.toList());"},{"lineNumber":144,"author":{"gitId":"glatiuden"},"content":"        return new TaskList(printTasks);"},{"lineNumber":145,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":147,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"glatiuden"},"content":"     * Returns true if there is a timing clash with the input date."},{"lineNumber":149,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"glatiuden"},"content":"     * @param addedDate date to be checked"},{"lineNumber":151,"author":{"gitId":"glatiuden"},"content":"     * @return true if there is a timing clash"},{"lineNumber":152,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"glatiuden"},"content":"    public boolean checkForAnomalies(LocalDateTime addedDate) {"},{"lineNumber":154,"author":{"gitId":"glatiuden"},"content":"        return tasks.stream().anyMatch(task -\u003e {"},{"lineNumber":155,"author":{"gitId":"glatiuden"},"content":"            if (task instanceof TimedTask) {"},{"lineNumber":156,"author":{"gitId":"glatiuden"},"content":"                return ((TimedTask) task).getTaskDateTime().equals(addedDate);"},{"lineNumber":157,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":159,"author":{"gitId":"glatiuden"},"content":"        });"},{"lineNumber":160,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":162,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"glatiuden"},"content":"     * Returns true if the task exists in the task list."},{"lineNumber":164,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"glatiuden"},"content":"     * @param taskToBeChecked task to be checked"},{"lineNumber":166,"author":{"gitId":"glatiuden"},"content":"     * @return true if the task exists in the task list"},{"lineNumber":167,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"glatiuden"},"content":"    public boolean checkForDuplicates(Task taskToBeChecked) {"},{"lineNumber":169,"author":{"gitId":"glatiuden"},"content":"        return tasks.stream().anyMatch(task -\u003e task.equals(taskToBeChecked));"},{"lineNumber":170,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":172,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"glatiuden"},"content":"     * Formats all the {@code Task}\u0027s information into a formatted string that is suitable for storing."},{"lineNumber":174,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"glatiuden"},"content":"     * @return formatted string that is suitable for storing"},{"lineNumber":176,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":178,"author":{"gitId":"glatiuden"},"content":"        return tasks.stream().map(Task::toStorageString).collect(Collectors.joining(\"\\n\"));"},{"lineNumber":179,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":180}},{"path":"src/main/java/duke/model/task/TimedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.util.AppUtil.DATETIME_FORMAT;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":" * An abstract class for timed task to provide ease in accessing datetime from the respective tasks."},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"public abstract class TimedTask extends Task {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    protected final LocalDateTime taskDateTime;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Timed Task, specifying the description and datetime."},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the timed task"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"     * @param taskDateTime datetime of the timed task"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    public TimedTask(String description, String taskDateTime) {"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        this.taskDateTime \u003d LocalDateTime.parse(taskDateTime, DATETIME_FORMAT);"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"     * Constructor for Timed Task, specifying the status, description and datetime."},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the timed task"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"     * @param taskDateTime datetime of the timed task"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    public TimedTask(int done, String description, String taskDateTime) {"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        super(done, description);"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"        this.taskDateTime \u003d LocalDateTime.parse(taskDateTime, DATETIME_FORMAT);"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public LocalDateTime getTaskDateTime() {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        return taskDateTime;"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    public LocalDate getTaskDate() {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        return taskDateTime.toLocalDate();"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":44}},{"path":"src/main/java/duke/model/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":" * Represents a ToDo {@code Task}."},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"    private static final String STRING_FORMAT \u003d \"[T]%s\";"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    private static final String STORAGE_STRING_FORMAT \u003d \"T | %d | %s\";"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"     * Constructor for ToDo, specifying the description."},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the ToDo"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    public ToDo(String description) {"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"     * Constructor for ToDo, specifying the task\u0027s status and description."},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"     * @param done integer value to indicate the ToDo\u0027s status"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"     * @param description description of the ToDo"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    public ToDo(int done, String description) {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        super(done, description);"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            return true;"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        if (obj instanceof ToDo) {"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"            ToDo toDo \u003d (ToDo) obj;"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            return toDo.description.equalsIgnoreCase(this.description);"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    public String toStorageString() {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        return String.format(STORAGE_STRING_FORMAT, isDone ? 1 : 0, description);"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        return String.format(STRING_FORMAT, super.toString());"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":52}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_COMMAND_NOT_FOUND;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_FILE_NOT_FOUND;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_SAVE_FILE_ERROR;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"import duke.commons.exceptions.DukeException;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Deadline;"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Event;"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Task;"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.ToDo;"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":" * Stores and restores the user\u0027s task list."},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"public class Storage {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    private static final String DELIMITER \u003d \" \\\\| \";"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    private static final char ITEM_EVENT \u003d \u0027E\u0027;"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    private static final char ITEM_DEADLINE \u003d \u0027D\u0027;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    private static final char ITEM_TODO \u003d \u0027T\u0027;"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    private final File file;"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     * Initialize the storage file from the given directory and creates the folder if it does not exists."},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"     * @param filePath directory of the storage file"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    public Storage(String filePath) {"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"        file \u003d new File(filePath);"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        File folder \u003d file.getParentFile();"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        if (!folder.exists()) {"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"            folder.mkdir();"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"     * Loads the {@code Task} data from this storage file, and then returns it."},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"     * Returns empty task list if the file does not exist, or is not a regular file."},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"     * @return a populated task list"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when it tries to open file that does not exists"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"        Scanner sc;"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"            sc \u003d new Scanner(file);"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        return populateTasksFromStorage(sc);"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"     * Process the data stored in the text file and returns a populated task list."},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"     * @param sc Scanner object"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"     * @return a populated task list"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException when an invalid task type is in the data file"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"    private List\u003cTask\u003e populateTasksFromStorage(Scanner sc) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"            String taskStorageString \u003d sc.nextLine();"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"            String[] taskString \u003d taskStorageString.split(DELIMITER);"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"            char type \u003d taskString[0].charAt(0);"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"            int done \u003d Integer.parseInt(taskString[1]);"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":"            String desc \u003d taskString[2];"},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"            switch (type) {"},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"            case ITEM_TODO:"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new ToDo(done, desc));"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"            case ITEM_EVENT:"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new Event(done, desc, taskString[3]));"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"            case ITEM_DEADLINE:"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"                tasks.add(new Deadline(done, desc, taskString[3]));"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"                break;"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"            default:"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":"                throw new DukeException(MESSAGE_COMMAND_NOT_FOUND);"},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"        sc.close();"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"        return tasks;"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"     * Saves the {@code Task} data that is stored in the {@code TaskList} to the storage file."},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"     * @param taskList {@code TaskList} to be saved"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"     * @throws DukeException if there were errors encountered when trying to write data to the file"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"    public void saveFile(TaskList taskList) throws DukeException {"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"            File folder \u003d file.getParentFile();"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":"            assert folder.exists() : \"folder should exist\";"},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":"            fileWriter.write(taskList.toStorageString());"},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"            fileWriter.close();"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"        } catch (IOException e) {"},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":"            throw new DukeException(MESSAGE_SAVE_FILE_ERROR);"},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":115}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":" * An example of a custom control using FXML."},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":" * containing text from the speaker."},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"public class DialogBox extends HBox {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"    private static final String DUKE_DIALOG_BOX \u003d \"/view/DialogBox.fxml\";"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    private static final String USER_DIALOG_BOX \u003d \"/view/UserDialogBox.fxml\";"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    private DialogBox(String text, boolean isUser) {"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"            String resourcePath \u003d isUser ? USER_DIALOG_BOX : DUKE_DIALOG_BOX;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(resourcePath));"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            fxmlLoader.load();"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"        dialog.setText(text);"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    public static DialogBox getUserDialog(String text) {"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        return new DialogBox(text, true);"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    public static DialogBox getDukeDialog(String text) {"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"        return new DialogBox(text, false);"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":48}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import duke.logic.commands.CommandResponse;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import duke.model.Duke;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"import javafx.util.Duration;"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"    private ImageView sendButton;"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"    private Duke duke;"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"     * Initialise the scrollPane and sends a welcome message."},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        dukeSendMessage(Ui.showWelcome());"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        duke \u003d d;"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"        if (input.isEmpty() || input.isBlank()) {"},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"            return;"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"        CommandResponse response \u003d duke.getResponse(input);"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"                DialogBox.getUserDialog(input),"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"                DialogBox.getDukeDialog(response.toString())"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"        );"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"        userInput.clear();"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"        if (response.isShouldExit()) {"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":"            delay.setOnFinished(event -\u003e {"},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"                Platform.exit();"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"                System.exit(0);"},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"            });"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"            delay.play();"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"    public void dukeSendMessage(String message) {"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message));"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"}"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":""}],"authorContributionMap":{"glatiuden":75}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_ERROR;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_GOODBYE;"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_HELP;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_LIST;"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASKLIST_SUMMARY;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASK_ADD;"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASK_ALL_DELETE;"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASK_ALL_DONE;"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_TASK_DELETE;"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"import static duke.commons.core.Messages.MESSAGE_WELCOME;"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Task;"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.TaskList;"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":" * Text UI of the application."},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":" */"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"public class Ui {"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    private final StringBuilder sb;"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"     * Default constructor for UI which initialise the StringBuilder."},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"    public Ui() {"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        this.sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"     * Returns the welcome message."},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"    public static String showWelcome() {"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"        return MESSAGE_WELCOME;"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"     * Returns a farewell message."},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    public String showExit() {"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        return MESSAGE_GOODBYE;"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"    private void clear() {"},{"lineNumber":46,"author":{"gitId":"glatiuden"},"content":"        sb.setLength(0);"},{"lineNumber":47,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":49,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"glatiuden"},"content":"     * Returns a formatted {@code TaskList} string."},{"lineNumber":51,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"glatiuden"},"content":"     * @param taskList {@code TaskList} to be formatted"},{"lineNumber":53,"author":{"gitId":"glatiuden"},"content":"     * @param isFind an indicator used to differentiate between the list and find operation"},{"lineNumber":54,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"glatiuden"},"content":"    public String showListMessage(TaskList taskList, boolean isFind) {"},{"lineNumber":56,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":57,"author":{"gitId":"glatiuden"},"content":"        sb.append(String.format(MESSAGE_LIST, isFind ? \"matching tasks\" : \"tasks\"));"},{"lineNumber":58,"author":{"gitId":"glatiuden"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":59,"author":{"gitId":"glatiuden"},"content":"            sb.append(String.format(\"%d.%s%n\", i + 1, taskList.get(i).toString()));"},{"lineNumber":60,"author":{"gitId":"glatiuden"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":62,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":64,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the new {@code Task}."},{"lineNumber":66,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"glatiuden"},"content":"     * @param task the newly added {@code Task}"},{"lineNumber":68,"author":{"gitId":"glatiuden"},"content":"     * @param listSize size of the current {@code TaskList}"},{"lineNumber":69,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"glatiuden"},"content":"    public String showAddMessage(Task task, int listSize) {"},{"lineNumber":71,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":72,"author":{"gitId":"glatiuden"},"content":"        sb.append(MESSAGE_TASK_ADD);"},{"lineNumber":73,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":74,"author":{"gitId":"glatiuden"},"content":"        sb.append(formattedPrint(task.toString()));"},{"lineNumber":75,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(listSize);"},{"lineNumber":76,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":77,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":79,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the {@code TaskList} of completed {@code Task}."},{"lineNumber":81,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"glatiuden"},"content":"     * @param taskList the completed {@code TaskList} of {@code Task}"},{"lineNumber":83,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"glatiuden"},"content":"    public String showDoneMessage(TaskList taskList) {"},{"lineNumber":85,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":86,"author":{"gitId":"glatiuden"},"content":"        sb.append(MESSAGE_TASK_ALL_DONE);"},{"lineNumber":87,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":88,"author":{"gitId":"glatiuden"},"content":"        printList(taskList);"},{"lineNumber":89,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":90,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":92,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"glatiuden"},"content":"     * Returns the information possible commands of Duke."},{"lineNumber":94,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"glatiuden"},"content":"    public String showHelpMessage() {"},{"lineNumber":96,"author":{"gitId":"glatiuden"},"content":"        return MESSAGE_HELP;"},{"lineNumber":97,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":99,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the cleared {@code TaskList}."},{"lineNumber":101,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"glatiuden"},"content":"     * @param taskList the {@code TaskList} to be cleared"},{"lineNumber":103,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"glatiuden"},"content":"    public String showDeleteMessage(TaskList taskList) {"},{"lineNumber":105,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":106,"author":{"gitId":"glatiuden"},"content":"        sb.append(MESSAGE_TASK_ALL_DELETE);"},{"lineNumber":107,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":108,"author":{"gitId":"glatiuden"},"content":"        printList(taskList);"},{"lineNumber":109,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(0);"},{"lineNumber":110,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":111,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":113,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"glatiuden"},"content":"     * Returns the information of the {@code Task} that is deleted from {@code TaskList}."},{"lineNumber":115,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"glatiuden"},"content":"     * @param taskList the {@code TaskList} to be cleared"},{"lineNumber":117,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"glatiuden"},"content":"    public String showDeleteMessage(TaskList taskList, int listSize) {"},{"lineNumber":119,"author":{"gitId":"glatiuden"},"content":"        clear();"},{"lineNumber":120,"author":{"gitId":"glatiuden"},"content":"        sb.append(MESSAGE_TASK_DELETE);"},{"lineNumber":121,"author":{"gitId":"glatiuden"},"content":"        sb.append(\"\\n\");"},{"lineNumber":122,"author":{"gitId":"glatiuden"},"content":"        printList(taskList);"},{"lineNumber":123,"author":{"gitId":"glatiuden"},"content":"        showSummaryMessage(listSize);"},{"lineNumber":124,"author":{"gitId":"glatiuden"},"content":"        return sb.toString();"},{"lineNumber":125,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":127,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"glatiuden"},"content":"     * Appends the {@code TaskList}\u0027s summary information into the StringBuilder."},{"lineNumber":129,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"glatiuden"},"content":"     * @param listSize size of the current {@code TaskList}"},{"lineNumber":131,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"glatiuden"},"content":"    private void showSummaryMessage(int listSize) {"},{"lineNumber":133,"author":{"gitId":"glatiuden"},"content":"        sb.append(String.format(MESSAGE_TASKLIST_SUMMARY, listSize, listSize \u003e\u003d 2 ? \"tasks\" : \"task\"));"},{"lineNumber":134,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":136,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"glatiuden"},"content":"     * Returns the formatted error message."},{"lineNumber":138,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"glatiuden"},"content":"     * @param message message to be formatted"},{"lineNumber":140,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"glatiuden"},"content":"    public String showError(String message) {"},{"lineNumber":142,"author":{"gitId":"glatiuden"},"content":"        return String.format(MESSAGE_ERROR, message);"},{"lineNumber":143,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":145,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"glatiuden"},"content":"     * Returns the formatted message with indentation."},{"lineNumber":147,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":148,"author":{"gitId":"glatiuden"},"content":"     * @param message message to be formatted"},{"lineNumber":149,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"glatiuden"},"content":"    private String formattedPrint(String message) {"},{"lineNumber":151,"author":{"gitId":"glatiuden"},"content":"        String printFormat \u003d \"    %s%n\";"},{"lineNumber":152,"author":{"gitId":"glatiuden"},"content":"        return String.format(printFormat, message);"},{"lineNumber":153,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":155,"author":{"gitId":"glatiuden"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"glatiuden"},"content":"     * Appends all the tasks\u0027 information stored in {@code TaskList} into the StringBuilder."},{"lineNumber":157,"author":{"gitId":"glatiuden"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"glatiuden"},"content":"     * @param taskList the {@code TaskList} to be printed"},{"lineNumber":159,"author":{"gitId":"glatiuden"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"glatiuden"},"content":"    private void printList(TaskList taskList) {"},{"lineNumber":161,"author":{"gitId":"glatiuden"},"content":"        taskList.getTaskList().forEach(task -\u003e sb.append(formattedPrint(task.toString())));"},{"lineNumber":162,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":163}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"         maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: transparent;\""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"         stylesheets\u003d\"@../css/main.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    \u003cchildren\u003e"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"            \u003cimage\u003e"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"                \u003cImage url\u003d\"@../images/DukeAvatar.png\"/\u003e"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"            \u003c/image\u003e"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"                \u003cInsets left\u003d\"5.0\"/\u003e"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"        \u003c/ImageView\u003e"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: white\""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"              styleClass\u003d\"chat-bubble\"\u003e"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            \u003cchildren\u003e"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"                \u003cLabel text\u003d\"Duke\" textFill\u003d\"#78acdb\"\u003e"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"                    \u003cfont\u003e"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"                        \u003cFont name\u003d\"Roboto Black\" size\u003d\"13.0\"/\u003e"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"                    \u003c/font\u003e"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"                \u003c/Label\u003e"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"                \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" minHeight\u003d\"-Infinity\" text\u003d\"Text Text\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            \u003c/children\u003e"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"                \u003cInsets left\u003d\"8.0\"/\u003e"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"            \u003cpadding\u003e"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"                \u003cInsets bottom\u003d\"12.0\" left\u003d\"16.0\" right\u003d\"16.0\" top\u003d\"12.0\"/\u003e"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            \u003c/padding\u003e"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"        \u003c/VBox\u003e"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"    \u003c/children\u003e"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    \u003cpadding\u003e"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"        \u003cInsets bottom\u003d\"16.0\" left\u003d\"8.0\" right\u003d\"16.0\" top\u003d\"16.0\"/\u003e"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"    \u003c/padding\u003e"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"glatiuden":44}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.geometry.Point3D?\u003e"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.TitledPane?\u003e"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"700.0\" prefWidth\u003d\"550.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #C0C0C0; -fx-border-width: 0 0 1 0;\" stylesheets\u003d\"@../css/main.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    \u003cchildren\u003e"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"        \u003cTitledPane alignment\u003d\"TOP_CENTER\" animated\u003d\"false\" collapsible\u003d\"false\" contentDisplay\u003d\"TOP\" expanded\u003d\"false\" focusTraversable\u003d\"false\" prefHeight\u003d\"49.0\" prefWidth\u003d\"500.0\" styleClass\u003d\"duke-titled-pane\" text\u003d\"Duke\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"662.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"            \u003cfont\u003e"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"                \u003cFont name\u003d\"Roboto Black\" size\u003d\"20.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"            \u003c/font\u003e"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"            \u003crotationAxis\u003e"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"                \u003cPoint3D /\u003e"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"            \u003c/rotationAxis\u003e"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"        \u003c/TitledPane\u003e"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"39.0\" maxWidth\u003d\"-Infinity\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"60.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"39.0\"\u003e"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            \u003ccontent\u003e"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" prefWidth\u003d\"530.0\" style\u003d\"-fx-background-color: #fafafa;\" /\u003e"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"            \u003c/content\u003e"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        \u003cTextField fx:id\u003d\"userInput\" alignment\u003d\"TOP_LEFT\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"60.0\" styleClass\u003d\"input-text-area\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"50.0\"\u003e"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"            \u003cpadding\u003e"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"                \u003cInsets bottom\u003d\"12.0\" left\u003d\"12.0\" right\u003d\"12.0\" top\u003d\"12.0\" /\u003e"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"            \u003c/padding\u003e"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"            \u003cfont\u003e"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"                \u003cFont name\u003d\"Roboto\" size\u003d\"13.0\" /\u003e"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"            \u003c/font\u003e"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"        \u003c/TextField\u003e"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"        \u003cImageView fx:id\u003d\"sendButton\" accessibleRole\u003d\"BUTTON\" fitHeight\u003d\"35.0\" fitWidth\u003d\"50.0\" layoutX\u003d\"354.0\" layoutY\u003d\"604.0\" onMouseClicked\u003d\"#handleUserInput\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.bottomAnchor\u003d\"13.0\" AnchorPane.rightAnchor\u003d\"5.0\"\u003e"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"            \u003cimage\u003e"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"                \u003cImage url\u003d\"@../images/SendIcon.png\" /\u003e"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"            \u003c/image\u003e"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"        \u003c/ImageView\u003e"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    \u003c/children\u003e"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"glatiuden":43}},{"path":"src/main/resources/view/UserDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"         style\u003d\"-fx-background-color: transparent;\" stylesheets\u003d\"@../css/main.css\" type\u003d\"javafx.scene.layout.HBox\""},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"         xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    \u003cchildren\u003e"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"        \u003cVBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: #78acdb;\""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"              styleClass\u003d\"chat-bubble\"\u003e"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"                \u003cInsets right\u003d\"8.0\"/\u003e"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"            \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"                \u003cInsets bottom\u003d\"12.0\" left\u003d\"16.0\" right\u003d\"16.0\" top\u003d\"12.0\"/\u003e"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"            \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":"            \u003copaqueInsets\u003e"},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"                \u003cInsets/\u003e"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"            \u003c/opaqueInsets\u003e"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"            \u003cLabel text\u003d\"You\" textFill\u003d\"WHITE\"\u003e"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"                \u003cfont\u003e"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":"                    \u003cFont name\u003d\"Roboto Black\" size\u003d\"13.0\"/\u003e"},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"                \u003c/font\u003e"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"            \u003c/Label\u003e"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"            \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" minHeight\u003d\"-Infinity\" text\u003d\"Text Text\" textFill\u003d\"WHITE\"/\u003e"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"        \u003c/VBox\u003e"},{"lineNumber":33,"author":{"gitId":"glatiuden"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"75.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":34,"author":{"gitId":"glatiuden"},"content":"            \u003cimage\u003e"},{"lineNumber":35,"author":{"gitId":"glatiuden"},"content":"                \u003cImage url\u003d\"@../images/UserAvatar.png\"/\u003e"},{"lineNumber":36,"author":{"gitId":"glatiuden"},"content":"            \u003c/image\u003e"},{"lineNumber":37,"author":{"gitId":"glatiuden"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":38,"author":{"gitId":"glatiuden"},"content":"                \u003cInsets left\u003d\"5.0\"/\u003e"},{"lineNumber":39,"author":{"gitId":"glatiuden"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":40,"author":{"gitId":"glatiuden"},"content":"        \u003c/ImageView\u003e"},{"lineNumber":41,"author":{"gitId":"glatiuden"},"content":"    \u003c/children\u003e"},{"lineNumber":42,"author":{"gitId":"glatiuden"},"content":"    \u003cpadding\u003e"},{"lineNumber":43,"author":{"gitId":"glatiuden"},"content":"        \u003cInsets bottom\u003d\"16.0\" left\u003d\"16.0\" right\u003d\"8.0\" top\u003d\"16.0\"/\u003e"},{"lineNumber":44,"author":{"gitId":"glatiuden"},"content":"    \u003c/padding\u003e"},{"lineNumber":45,"author":{"gitId":"glatiuden"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"glatiuden":45}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"public class UiTest {"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"    private final Ui ui \u003d new Ui();"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    public void showWelcomeTest() {"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"Hello! I\u0027m Duke, your personal assistant!\\n\" +"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"                \"What can I do for you today?\", Ui.showWelcome());"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"    public void showErrorTest() {"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"OOPS! Invalid input\", ui.showError(\"Invalid input\"));"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":20}},{"path":"src/test/java/duke/model/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"import duke.model.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"    public static final String TEST_DESC_1 \u003d \"return books\";"},{"lineNumber":11,"author":{"gitId":"glatiuden"},"content":"    public static final String TEST_DATE_1 \u003d \"2019-11-01 18:00\";"},{"lineNumber":12,"author":{"gitId":"glatiuden"},"content":"    public static final String TEST_DESC_2 \u003d \"pay phone bill\";"},{"lineNumber":13,"author":{"gitId":"glatiuden"},"content":"    public static final String TEST_DATE_2 \u003d \"2021-01-26 19:00\";"},{"lineNumber":14,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":15,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"    public void toStorageStringTest() {"},{"lineNumber":17,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline1 \u003d new Deadline(TEST_DESC_1, TEST_DATE_1);"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"D | 0 | return books | 2019-11-01 18:00\", newDeadline1.toStorageString());"},{"lineNumber":19,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":20,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline2 \u003d new Deadline(1, TEST_DESC_2, TEST_DATE_2);"},{"lineNumber":21,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"D | 1 | pay phone bill | 2021-01-26 19:00\", newDeadline2.toStorageString());"},{"lineNumber":22,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":24,"author":{"gitId":"glatiuden"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"glatiuden"},"content":"    public void toStringTest() {"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline1 \u003d new Deadline(TEST_DESC_1, TEST_DATE_1);"},{"lineNumber":27,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"[D][ ] return books (by: Nov 01 2019 06:00PM)\", newDeadline1.toString());"},{"lineNumber":28,"author":{"gitId":"glatiuden"},"content":""},{"lineNumber":29,"author":{"gitId":"glatiuden"},"content":"        Deadline newDeadline2 \u003d new Deadline(1, TEST_DESC_2, TEST_DATE_2);"},{"lineNumber":30,"author":{"gitId":"glatiuden"},"content":"        assertEquals(\"[D][X] pay phone bill (by: Jan 26 2021 07:00PM)\", newDeadline2.toString());"},{"lineNumber":31,"author":{"gitId":"glatiuden"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"glatiuden"},"content":"}"}],"authorContributionMap":{"glatiuden":32}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"glatiuden"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":3,"author":{"gitId":"glatiuden"},"content":"deadline return book /by 2019-11-01"},{"lineNumber":4,"author":{"gitId":"glatiuden"},"content":"event project meeting /at 2019-11-02 11:00"},{"lineNumber":5,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":6,"author":{"gitId":"glatiuden"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"glatiuden"},"content":"list"},{"lineNumber":8,"author":{"gitId":"glatiuden"},"content":"delete 2"},{"lineNumber":9,"author":{"gitId":"glatiuden"},"content":"list 2019-11-01"},{"lineNumber":10,"author":{"gitId":"glatiuden"},"content":"bye"}],"authorContributionMap":{"glatiuden":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"glatiuden"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"glatiuden":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"glatiuden"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/command/*.java ../src/main/java/duke/task/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"glatiuden"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":32,"glatiuden":2}}]
