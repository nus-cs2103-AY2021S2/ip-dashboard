[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"# duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"1. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"Hzxin":2,"-":21}},{"path":"data/Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"1@@X@@readbook"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"2@@ @@readbook @@Oct 22 2019"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"1@@ @@readbook"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"2@@X@@swimming @@Oct 22 2019"}],"authorContributionMap":{"Hzxin":4}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.driver.DukeDriver;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":" * Encapsulates the main class of the Object."},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"     * Executes the programs."},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"     * @param args command line arguments key in by user."},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    public static void main(String[] args) {"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"        DukeDriver.executeDuke();"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Hzxin":23,"-":2}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.task.Todo;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import duke.task.Deadlines;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"public class AddCommand extends Command{"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\tpublic AddCommand(String instruction, String task, String date) {"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\t\tsuper(instruction, task, date, command -\u003e {"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\t\t\tif (instruction.equals(\"todo\")) {"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn handleToDo(task);"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\t\t\t} else if (instruction.equals(\"deadline\")) {"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn handleDeadline(task, date);"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\t\t\t} else {"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn handleEvent(task, date);"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\t\t});"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"\t * handle todo command and create a todo task if task is not empty."},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\t *"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"\t * @param task name of the user task."},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"\tprivate static final Boolean handleToDo(String task) {"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"\t\tif (!task.equals(\"\")) {"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"\t\t\tTodo todo \u003d new Todo(task);"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"\t\t\tSystem.out.println(Ui.biggerBox(todo));"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"\t\t\tDukeException.emptyTaskException();"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"\t\treturn false;"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"\t * handle deadline command by creating deadline task if task and date are not empty."},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"\t *"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"\t * @param task name of the user task."},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"\t * @param date date of the task to be done."},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"\tprivate static final Boolean handleDeadline(String task, String date) {"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"\t\tif (task.equals(\"\")) {"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"\t\t\tDukeException.emptyTaskException();"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"\t\t\tif (date.equals(\"\")) {"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tDukeException.missingDateErrorException();"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"\t\t\t} else {"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tDeadlines deadlines \u003d new Deadlines(task, date);"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tSystem.out.println(Ui.biggerBox(deadlines));"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"\t\treturn false;"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"\t * handle event command by creating event if task and date are not empty."},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"\t *"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"\t * @param task name of the user task."},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"\t * @param date date of the task to be done."},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"\tprivate static final Boolean handleEvent(String task, String date) {"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"\t\tif (task.equals(\"\")) {"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"\t\t\tDukeException.emptyTaskException();"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"\t\t\tif (date.equals(\"\")) {"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tDukeException.missingDateErrorException();"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"\t\t\t} else {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tEvent event \u003d new Event(task, date);"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tSystem.out.println(Ui.biggerBox(event));"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"\t\treturn false;"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":79}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.util.function.Function;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"public abstract class Command {"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\tprivate final String instruction;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\tprivate final String task;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\tprivate final String date;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\tprivate final Function\u003cCommand, Boolean\u003e func;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\tpublic Command(String instruction, String task, String date, Function\u003cCommand, Boolean\u003e func) {"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\t\tthis.instruction \u003d instruction;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\t\tthis.task \u003d task;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\t\tthis.date \u003d date;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"\t\tthis.func \u003d func;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"\tpublic Boolean execute() {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\t\treturn func.apply(this);"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"\tpublic String getInstruction() {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"\t\treturn instruction;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"\tpublic String getTask() {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"\t\treturn task;"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"\tpublic String getDate() {"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"\t\treturn date;"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":33}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"public class DeleteCommand extends Command{"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\tpublic DeleteCommand(String task, String date) {"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\t\tsuper(\"delete\", task, date, command -\u003e {"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn handleDelete(task, date);"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\t\t});"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"\t * handle delete command key in by user by removing the task from the list if there is any."},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"\t *"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\t * @param task name of the user task."},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"\tprivate static final Boolean handleDelete(String task, String date) {"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"\t\tif (task.length() \u003e 0 \u0026\u0026 date.equals(\"\")) {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"\t\t\ttry {"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tint num \u003d Integer.parseInt(task);"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tTask.delete(num);"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"\t\t\t} catch (NumberFormatException e) {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tDukeException.NumberFormatException();"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"\t\t\tDukeException.argumentErrorException();"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"\t\treturn false;"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":34}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"public class DoneCommand extends Command{"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\tpublic DoneCommand(String task, String date) {"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\t\tsuper(\"done\", task, date, command -\u003e {"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn handleDone(task);"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\t\t});"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\t * handle done command by marking the task as done."},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\t *"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"\t * @param task name of the user task."},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"\tprivate static final Boolean handleDone(String task) {"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"\t\tif (task.length() \u003e 0) {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\t\t\ttry {"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tint num \u003d Integer.parseInt(task);"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tTask.done(num);"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"\t\t\t} catch (NumberFormatException e) {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tDukeException.NumberFormatException();"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"\t\t\tDukeException.argumentErrorException();"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"\t\treturn false;"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":32}},{"path":"src/main/java/duke/command/ErrorCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"public class ErrorCommand extends Command{"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\tpublic ErrorCommand() {"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\t\tsuper(\"\", \"\", \"\", command -\u003e {"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\t\t\tDukeException.commandErrorException();"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn false;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\t\t});"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":12}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"public class ExitCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"\tpublic ExitCommand(String task, String date) {"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\t\tsuper(\"bye\", task, date, command -\u003e {"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn handleBye(task, date);"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\t\t});"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\t * handle bye command by returning true or false."},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\t *"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\t * @param task name of the user task."},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"\t * @param date date of the task that user key in."},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\t * @return a boolean of whether to exit the program."},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"\tprivate static final boolean handleBye(String task, String date) {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\t\tif (!task.equals(\"\") || !task.equals(\"\")) {"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"\t\t\tDukeException.commandErrorException();"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn false;"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn true;"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":27}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"public class ListCommand extends Command{"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"\tpublic ListCommand() {"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"\t\tsuper(\"\", \"\", \"\", command -\u003e {"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"\t\t\tUi.LISTING();"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn false;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\t\t});"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":11}},{"path":"src/main/java/duke/driver/DukeDriver.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.driver;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import duke.utils.TaskStorage;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import duke.utils.Parser;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":" * Driver class of Duke that handles the command key in by user and respond."},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"public class DukeDriver {"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"     * Take in user input and execute the Duke program."},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    public static void executeDuke() {"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.LOGO);"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.GREETING);"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.LOADFILE);"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"        Ui.SLEEP();"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"        TaskStorage.loadFiles();"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        while(sc.hasNext()) {"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"            String message \u003d sc.nextLine();"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"            boolean bye \u003d inputHandler(message);"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"            if (bye) {"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"                break;"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.FAREWELL);"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"     * The main handler of all the command."},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"     * @param message String representation of the message key in by user."},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"     * @return a boolean to whether to exit the program."},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"    private static final boolean inputHandler(String message) {"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        Command command \u003d new Parser(message).parse();"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"        Boolean end \u003d command.execute();"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"        return end;"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":56}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":" * A class that store all the possible display of errorsException in Duke."},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"public class DukeException{"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"    public static final void DATEFORMATEXCEPTION() {"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.WRONGDATEFORMAT);"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    public static final void NumberFormatException() {"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.KEYINNUMBER);"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"     * display the error message for empty body error."},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    public static final void emptyTaskException() {"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.EMPTYTASK);"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"     * display the error message for too many argument error."},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    public static final void argumentErrorException() {"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.TOOMANYARGUMENTS);"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"     * display the error message for missing argument error."},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    public static final void missingDateErrorException() {"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.MISSINGDATE);"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"     * display the error message for command error."},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"    public static final void commandErrorException() {"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.COMMANDERROR);"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"     * display the error message for missing task error."},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"    public static final void taskErrorException() { System.out.println(Ui.TASKERROR); }"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"    public static final void saveToFileError() { System.out.println(Ui.SAVETOFILEERROR);}"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":57}},{"path":"src/main/java/duke/task/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":" * sub-class of Task to represents a task with deadline."},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"public class Deadlines extends Task{"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"     * create a deadline task object with given task name and given dates/comments."},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"     * @param taskName String representation of the name of the task."},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"     * @param date String representation of the comments/dates."},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    public Deadlines(String taskName, String date) {"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"        super(taskName, date);"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    public Deadlines(String taskName, String date, String done) {"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"        super(taskName, date, done);"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    public int getType() {"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"        return 2;"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        return String.format(\"[D][%s] %d. %s ( %s )\", super.isDone(), super.getIndex(),"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"                super.getTaskName(), super.getDate());"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":34}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":" * A subclass of Task that represent an event key in by user."},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"public class Event extends Task{"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"     * Create a event Task with given task name and given comments/dates."},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"     * @param taskName name of the task."},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"     * @param date dates or comments of the user regarding the task."},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"    public Event(String taskName, String date) {"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"        super(taskName, date);"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    public Event(String taskName, String date, String done) {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"        super(taskName, date, done);"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    public int getType() {"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"        return 3;"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        return String.format(\"[E][%s] %d. %s ( %s )\", super.isDone(), super.getIndex(),"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"                super.getTaskName(), super.getDate());"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":32}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":" * A class that store the task that user key in."},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"public class Task {"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    private static List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"    private String taskName;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"    private static int capacity \u003d 0;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    private int index;"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    private String done;"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    private String date;"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"     * Construct a task object with taskname attached and its index label in the taskList."},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"     * @param taskName name of the task."},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    Task(String taskName) {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"        this.index \u003d capacity + 1;"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"        this.done \u003d \" \";"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"        this.date \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"        capacity++;"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"        add(this);"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"    Task(String taskName, String done, boolean check) {"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"        this.index \u003d capacity + 1;"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"        this.done \u003d done;"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"        this.date \u003d \"\";"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"        capacity++;"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"        add(this);"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"    Task(String taskName, String date) {"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"        this.index \u003d capacity + 1;"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"        this.done \u003d \" \";"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"        this.date \u003d date;"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"        capacity++;"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        add(this);"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"    Task(String taskName, String date, String done) {"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"        this.index \u003d capacity + 1;"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"        this.done \u003d done;"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"        this.date \u003d date;"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"        capacity++;"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"        add(this);"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"     * Store the task key in by user in the taskList."},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"     * @param t Task key in by user."},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"    private static void add(Task t) {"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        taskList.add(t);"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"     * Mark a given task as done."},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"     * @param i the index label of the Task."},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"    public static final void done(int i) {"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"            Task t \u003d taskList.get(i - 1);"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"            taskList.get(i - 1).done \u003d \"X\";"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"            Ui.doneTask(t);"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"            DukeException.taskErrorException();"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"    public static final void delete(int i) {"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":"            Task t \u003d taskList.get(i - 1);"},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"            taskList.remove(i - 1);"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":"            Ui.deleteTask(t);"},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":"            for (Task task : taskList) {"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"                if (task.index \u003e i) {"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"                    task.index--;"},{"lineNumber":92,"author":{"gitId":"Hzxin"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"            DukeException.taskErrorException();"},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":"     * Get the name of the task."},{"lineNumber":101,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"Hzxin"},"content":"     * @return a String representation of the task name."},{"lineNumber":103,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":"    public String getTaskName() {"},{"lineNumber":105,"author":{"gitId":"Hzxin"},"content":"        return taskName;"},{"lineNumber":106,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":108,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"Hzxin"},"content":"     * Get the taskList."},{"lineNumber":110,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"Hzxin"},"content":"     * @return the List of all tasks stored."},{"lineNumber":112,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":114,"author":{"gitId":"Hzxin"},"content":"    public static final List\u003cTask\u003e getTaskList() {"},{"lineNumber":115,"author":{"gitId":"Hzxin"},"content":"        return Task.taskList;"},{"lineNumber":116,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":118,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Hzxin"},"content":"     * get the isDone status of the task."},{"lineNumber":120,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"Hzxin"},"content":"     * @return a String representation of the isDone status (X for done)."},{"lineNumber":122,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Hzxin"},"content":"    public String isDone() {"},{"lineNumber":124,"author":{"gitId":"Hzxin"},"content":"        return done;"},{"lineNumber":125,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":127,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"Hzxin"},"content":"     * get the index label of the task."},{"lineNumber":129,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"Hzxin"},"content":"     * @return the int representation of the index label."},{"lineNumber":131,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"Hzxin"},"content":"    public int getIndex() {"},{"lineNumber":133,"author":{"gitId":"Hzxin"},"content":"        return index;"},{"lineNumber":134,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":136,"author":{"gitId":"Hzxin"},"content":"    public int getType() {"},{"lineNumber":137,"author":{"gitId":"Hzxin"},"content":"        return 0;"},{"lineNumber":138,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":140,"author":{"gitId":"Hzxin"},"content":"    public String getDate() {"},{"lineNumber":141,"author":{"gitId":"Hzxin"},"content":"        return date;"},{"lineNumber":142,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":144,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"Hzxin"},"content":"     * get the current capacity of the taskList."},{"lineNumber":146,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"Hzxin"},"content":"     * @return the int representation of the capacity of the taskList."},{"lineNumber":148,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"Hzxin"},"content":"    public static final int getCapacity() {"},{"lineNumber":150,"author":{"gitId":"Hzxin"},"content":"        return Task.capacity;"},{"lineNumber":151,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":153,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":154,"author":{"gitId":"Hzxin"},"content":"    public String toString() {"},{"lineNumber":155,"author":{"gitId":"Hzxin"},"content":"        return String.format(\"[%s] %d. %s\", done, index, taskName);"},{"lineNumber":156,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":157}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":" * A sub-class of Task to represents a toDo task key in by user."},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"public class Todo extends Task{"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"     * Create a toDo task with given taskName attached."},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"     * @param taskName name of the task in String."},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"    public Todo(String taskName) {"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"        super(taskName);"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    public Todo(String taskName, String done) {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"        super(taskName, done, true);"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    public int getType() {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"        return 1;"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"        return String.format(\"[T][%s] %d. %s\", super.isDone(), super.getIndex(), super.getTaskName());"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":33}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":" * A class that store all the possible String format for Duke for code simplicity."},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"    public static final String LINEBREAK \u003d \"\\n\";"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"    public static final String UPPER \u003d LINEBREAK + \"^\".repeat(90) + LINEBREAK.repeat(2);"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"    public static final String LOWER \u003d LINEBREAK.repeat(1) + \"_\".repeat(90) + LINEBREAK;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"    public static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"    public static final String WRONGDATEFORMAT \u003d \"Err, wrong date format.. (yyyy-mm-dd)\";"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"    public static final String KEYINNUMBER \u003d \"PLease Lah! Key in number!\";"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"    public static final String EMPTYTASK \u003d \"Walao!NO TASK!\";"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"    public static final String TOOMANYARGUMENTS \u003d \"You put so many/few ARGUMENTS for what\";"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"    public static final String MISSINGDATE \u003d \"Fill ur date lah (add date with / in yyyy-mm-dd format)\";"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"    public static final String COMMANDERROR \u003d \"I DON\u0027T KNOW WHAT U SAYING BRO\";"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"    public static final String TASKERROR \u003d \"Walao, no such task\";"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"    public static final String SAVETOFILEERROR \u003d \"Huh? Where your file?\";"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"    public static final String FAREWELL \u003d UPPER"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"            + \"~~~~~~~~~~~ I Zao Liao. Don\u0027t Miss Meeeeeee ~~~~~~~~~~~.\""},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"            + LOWER;"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"    public static final String GREETING \u003d UPPER"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"            + \"****************** Awww, need help ah? ******************\""},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"            + LOWER;"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"    public static final String NODIRECTORY \u003d \"********** Cannot find your directory eh, \""},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"            + \"first time ah? Create one for you **********\\n\" ;"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"    public static final String LOADFILE \u003d \"********** Wait ah~ Loading file for you **********\\n\";"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"    public static final String NOFILE \u003d \"********** File also don\u0027t have ah, nvm I make one for you **********\\n\";"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"    public static final String EMPTYFILE \u003d \"********** Awwww~ You don\u0027t have any history of tasks **********\\n\";"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"     * make a chatBox that wrap a given String."},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"     * @param s the String to be wrapped."},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"     * @return a String with a chatBox wrapped."},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"    public static final String chatBox(String s) {"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"        if (s.length() \u003e 50) {"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"            return \"Walao! Your command too long lah!\";"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"            return UPPER + \" \".repeat(36 - s.length() / 2) + s + LOWER;"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"    public static final void doneTask(Task t) {"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.UPPER + \"Wah~ You done the task: \""},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"                + \" \" + t.toString() + Ui.LOWER);"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"    public static final void deleteTask(Task t) {"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"        System.out.println(Ui.UPPER + \"Awww~ You\u0027ve deleted the task: \""},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"                + \" \" + t.toString() + Ui.LOWER);"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"     * make a Bigger ChatBox that wrap the name of a given Task."},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"     * @param t task to be wrapped."},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"     * @return the String representation of the task name wrapped in a chatBox."},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"    public static final String biggerBox(Task t) {"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"        return Ui.UPPER + \"Added liao: \""},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"                + t.toString() + Ui.LINEBREAK"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"                + \"You have \" + Task.getCapacity() + \" tasks in the list!\""},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"                + Ui.LOWER;"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"     * Display all the current task and status store in the tasklist."},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"    public static final void LISTING() {"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"        System.out.println(UPPER);"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"        for (Task task : Task.getTaskList()) {"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"            if (task \u003d\u003d null) break;"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":"            System.out.println(task);"},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"        System.out.println(LOWER);"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"    public static final void DONELOADING() {"},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":"        System.out.println(UPPER);"},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"        for (Task task : Task.getTaskList()) {"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":"            if (task \u003d\u003d null) break;"},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":"            System.out.println(task);"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"        System.out.println(\"Sir, here is your past history\");"},{"lineNumber":92,"author":{"gitId":"Hzxin"},"content":"        System.out.println(LOWER);"},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"    public static final void SLEEP() {"},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":"            Thread.sleep(1500);"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"            e.printStackTrace();"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Hzxin"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":103,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":103}},{"path":"src/main/java/duke/utils/DateAndTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"public class DateAndTime {"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"\tpublic static final String converter(String date) {"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"\t\tif (isDashFormat(date)) {"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"\t\t\ttry {"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tLocalDate d1 \u003d LocalDate.parse(date.trim());"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"\t\t\t} catch (DateTimeParseException e) {"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn \"\";"},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn \"\";"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"\tpublic static final boolean isDashFormat(String date) {"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\t\tString[] dashFormat \u003d date.toLowerCase().split(\"-\", 3);"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"\t\tfor (String s : dashFormat) {"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"\t\t\tif (!isNumeric(s.trim())) {"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn false;"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"\t\treturn true;"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"\tpublic static boolean isNumeric(String strNum) {"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"\t\tif (strNum \u003d\u003d null) {"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn false;"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"\t\ttry {"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"\t\t\tdouble d \u003d Double.parseDouble(strNum);"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"\t\t} catch (NumberFormatException nfe) {"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn false;"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"\t\treturn true;"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":46}},{"path":"src/main/java/duke/utils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import duke.command.ExitCommand;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import duke.command.ErrorCommand;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import duke.command.ListCommand;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import duke.command.AddCommand;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"\tprivate String instruction;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"\tprivate String taskName;"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"\tprivate String date;"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"\tpublic Parser(String input) {"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"\t\tthis.instruction \u003d extractCommand(input);"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":"\t\tthis.taskName \u003d extractTask(input, instruction);"},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"\t\tthis.date \u003d extractDate(input, instruction);"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"\tpublic final Command parse() {"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"\t\tCommand command;"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\t\tswitch (instruction) {"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"\t\tcase \"bye\":"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"\t\t\tcommand \u003d new ExitCommand(taskName, date);"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"\t\t\tTaskStorage.writeToFiles(Task.getTaskList());"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"\t\t\tbreak;"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"\t\tcase \"list\":"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"\t\t\tcommand \u003d new ListCommand();"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"\t\t\tbreak;"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":"\t\tcase \"done\":"},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"\t\t\tcommand \u003d new DoneCommand(taskName, date);"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":"\t\t\tbreak;"},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"\t\tcase \"todo\": case \"deadline\": case \"event\":"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"\t\t\tcommand \u003d new AddCommand(instruction, taskName, date);"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"\t\t\tbreak;"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"\t\tcase \"delete\":"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"\t\t\tcommand \u003d new DeleteCommand(taskName, date);"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"\t\t\tbreak;"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"\t\tdefault:"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":"\t\t\tcommand \u003d new ErrorCommand();"},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"\t\t\tbreak;"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"\t\treturn command;"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"\t * extract the command key in by user."},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"\t *"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"\t * @param input the input key in by user."},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"\t * @return String representation of the command word of the user input."},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":"\tprivate static final String extractCommand(String input) {"},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"\t\treturn input.trim().toLowerCase().split(\" \")[0];"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"\t * extracting task name from user input."},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":"\t * @param input user input."},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"\t * @param command user command."},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":"\t * @return the task name if there is one and return empty string if task name empty."},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"\tprivate static final String extractTask(String input, String command) {"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":"\t\tString body \u003d input.replaceAll(command, \"\").trim();"},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"\t\tif (command.equals(\"todo\") || command.equals(\"delete\")) {"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn body;"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"\t\t} else if (command.equals(\"done\")) {"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn body.replaceAll(\"[^0-9]\", \"\");"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"\t\t\ttry {"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn body.split(\"/\")[0];"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"\t\t\t} catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn \"\";"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"\t/**"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"\t * extract the date of the task to be done."},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":"\t * @param input user input."},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"\t * @param command user command."},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"\t * @return the task date in String and return empty if there is no date."},{"lineNumber":86,"author":{"gitId":"Hzxin"},"content":"\t */"},{"lineNumber":87,"author":{"gitId":"Hzxin"},"content":"\tprivate static final String extractDate(String input, String command) {"},{"lineNumber":88,"author":{"gitId":"Hzxin"},"content":"\t\tString body \u003d input.replaceAll(command, \"\").trim();"},{"lineNumber":89,"author":{"gitId":"Hzxin"},"content":"\t\tString[] parts \u003d body.split(\"/\", 2);"},{"lineNumber":90,"author":{"gitId":"Hzxin"},"content":"\t\tif (parts.length \u003d\u003d 2) {"},{"lineNumber":91,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn DateAndTime.converter(parts[1]);"},{"lineNumber":92,"author":{"gitId":"Hzxin"},"content":"\t\t} else {"},{"lineNumber":93,"author":{"gitId":"Hzxin"},"content":"\t\t\treturn \"\";"},{"lineNumber":94,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":95,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":96,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":97,"author":{"gitId":"Hzxin"},"content":"\tpublic String getInstruction() {"},{"lineNumber":98,"author":{"gitId":"Hzxin"},"content":"\t\treturn this.instruction;"},{"lineNumber":99,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":100,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":101,"author":{"gitId":"Hzxin"},"content":"\tpublic String getTaskName() {"},{"lineNumber":102,"author":{"gitId":"Hzxin"},"content":"\t\treturn taskName;"},{"lineNumber":103,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":104,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":105,"author":{"gitId":"Hzxin"},"content":"\tpublic String getDate() {"},{"lineNumber":106,"author":{"gitId":"Hzxin"},"content":"\t\treturn date;"},{"lineNumber":107,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":108,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":108}},{"path":"src/main/java/duke/utils/TaskStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"import duke.task.Deadlines;"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"public class TaskStorage {"},{"lineNumber":16,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":17,"author":{"gitId":"Hzxin"},"content":"\tpublic static final String FILEPATH \u003d \"data/Duke.txt\";"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"\tpublic static final String DIRECTORY \u003d \"data\";"},{"lineNumber":19,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":20,"author":{"gitId":"Hzxin"},"content":"\tpublic static void writeToFiles(List\u003cTask\u003e taskList) {"},{"lineNumber":21,"author":{"gitId":"Hzxin"},"content":"\t\ttry {"},{"lineNumber":22,"author":{"gitId":"Hzxin"},"content":"\t\t\tFileWriter fw \u003d new FileWriter(FILEPATH);"},{"lineNumber":23,"author":{"gitId":"Hzxin"},"content":"\t\t\tfor (Task t : taskList) {"},{"lineNumber":24,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tfw.write(t.getType() + \"@@\" + t.isDone()"},{"lineNumber":25,"author":{"gitId":"Hzxin"},"content":"\t\t\t\t\t\t+ \"@@\" + t.getTaskName() + (t.getDate().equals(\"\")"},{"lineNumber":26,"author":{"gitId":"Hzxin"},"content":"\t\t\t\t\t\t? \"\" : (\"@@\" + t.getDate())) + System.lineSeparator());"},{"lineNumber":27,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":28,"author":{"gitId":"Hzxin"},"content":"\t\t\tfw.close();"},{"lineNumber":29,"author":{"gitId":"Hzxin"},"content":"\t\t} catch (IOException err) {"},{"lineNumber":30,"author":{"gitId":"Hzxin"},"content":"\t\t\tDukeException.saveToFileError();"},{"lineNumber":31,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":32,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":34,"author":{"gitId":"Hzxin"},"content":"\tpublic static void loadFiles() {"},{"lineNumber":35,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":36,"author":{"gitId":"Hzxin"},"content":"\t\ttry {"},{"lineNumber":37,"author":{"gitId":"Hzxin"},"content":"\t\t\tFile directory \u003d new File(DIRECTORY);"},{"lineNumber":38,"author":{"gitId":"Hzxin"},"content":"\t\t\tif (!directory.exists()) {"},{"lineNumber":39,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tSystem.out.println(Ui.NODIRECTORY);"},{"lineNumber":40,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tdirectory.mkdir();"},{"lineNumber":41,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tUi.SLEEP();"},{"lineNumber":42,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":43,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":44,"author":{"gitId":"Hzxin"},"content":"\t\t\tFile file \u003d new File(FILEPATH);"},{"lineNumber":45,"author":{"gitId":"Hzxin"},"content":"\t\t\tif (!file.exists()) {"},{"lineNumber":46,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tSystem.out.println(Ui.NOFILE);"},{"lineNumber":47,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tfile.createNewFile();"},{"lineNumber":48,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tUi.SLEEP();"},{"lineNumber":49,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":50,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":51,"author":{"gitId":"Hzxin"},"content":"\t\t\tif (file.length() \u003d\u003d 0) {"},{"lineNumber":52,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tUi.SLEEP();"},{"lineNumber":53,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tSystem.out.println(Ui.EMPTYFILE);"},{"lineNumber":54,"author":{"gitId":"Hzxin"},"content":"\t\t\t\treturn;"},{"lineNumber":55,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":56,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":57,"author":{"gitId":"Hzxin"},"content":"\t\t\trestoreTask(file);"},{"lineNumber":58,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":59,"author":{"gitId":"Hzxin"},"content":"\t\t} catch (IOException e) {"},{"lineNumber":60,"author":{"gitId":"Hzxin"},"content":"\t\t\tSystem.out.println(\"Testing\");"},{"lineNumber":61,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":62,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":63,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":64,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":65,"author":{"gitId":"Hzxin"},"content":"\tpublic static final void restoreTask(File file) throws IOException {"},{"lineNumber":66,"author":{"gitId":"Hzxin"},"content":"\t\tScanner sc \u003d new Scanner(file);"},{"lineNumber":67,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":68,"author":{"gitId":"Hzxin"},"content":"\t\twhile (sc.hasNext()) {"},{"lineNumber":69,"author":{"gitId":"Hzxin"},"content":"\t\t\tString[] line \u003d sc.nextLine().split(\"@@\");"},{"lineNumber":70,"author":{"gitId":"Hzxin"},"content":"\t\t\tif (line.length \u003d\u003d 3) {"},{"lineNumber":71,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tTodo t \u003d new Todo(line[2], line[1]);"},{"lineNumber":72,"author":{"gitId":"Hzxin"},"content":"\t\t\t} else {"},{"lineNumber":73,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tint type \u003d Integer.parseInt(line[0]);"},{"lineNumber":74,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tString done \u003d line[1];"},{"lineNumber":75,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tString taskName \u003d line[2];"},{"lineNumber":76,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tString date \u003d line[3];"},{"lineNumber":77,"author":{"gitId":"Hzxin"},"content":"\t\t\t\tTask t \u003d type \u003d\u003d 2 ? new Deadlines(taskName, date, done) : new Event(taskName, date, done);"},{"lineNumber":78,"author":{"gitId":"Hzxin"},"content":"\t\t\t}"},{"lineNumber":79,"author":{"gitId":"Hzxin"},"content":"\t\t}"},{"lineNumber":80,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":81,"author":{"gitId":"Hzxin"},"content":"\t\tsc.close();"},{"lineNumber":82,"author":{"gitId":"Hzxin"},"content":"\t\tUi.DONELOADING();"},{"lineNumber":83,"author":{"gitId":"Hzxin"},"content":""},{"lineNumber":84,"author":{"gitId":"Hzxin"},"content":"\t}"},{"lineNumber":85,"author":{"gitId":"Hzxin"},"content":"}"}],"authorContributionMap":{"Hzxin":85}},{"path":"text-ui-test/data/Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"1@@X@@read book"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"1@@ @@swimming"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"2@@X@@project @@Oct 22 2020"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"2@@ @@meeting @@2021-1-2"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"3@@X@@project2 @@2021-1-2"}],"authorContributionMap":{"Hzxin":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Hzxin"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"Hzxin"},"content":"done 1"},{"lineNumber":3,"author":{"gitId":"Hzxin"},"content":"todo swimming"},{"lineNumber":4,"author":{"gitId":"Hzxin"},"content":"deadline project /2020-10-22"},{"lineNumber":5,"author":{"gitId":"Hzxin"},"content":"deadline meeting /2021-1-2"},{"lineNumber":6,"author":{"gitId":"Hzxin"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"Hzxin"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Hzxin"},"content":"event project /2020-10-22"},{"lineNumber":9,"author":{"gitId":"Hzxin"},"content":"event project2 /2021-1-2"},{"lineNumber":10,"author":{"gitId":"Hzxin"},"content":"done 6"},{"lineNumber":11,"author":{"gitId":"Hzxin"},"content":"list"},{"lineNumber":12,"author":{"gitId":"Hzxin"},"content":"done 10"},{"lineNumber":13,"author":{"gitId":"Hzxin"},"content":"delete 5"},{"lineNumber":14,"author":{"gitId":"Hzxin"},"content":"delete 9"},{"lineNumber":15,"author":{"gitId":"Hzxin"},"content":"bye"}],"authorContributionMap":{"Hzxin":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Hzxin"},"content":"java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Hzxin":1,"-":20}}]
