[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"    mainClassName \u003d \"owen.Main\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"    archiveBaseName \u003d \"owen\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kingsleykuan":17,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"Owen the Owl is a personal assistant chatbot and task manager."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"- [Adding Tasks](###adding-tasks)"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"    - [Todo](####todo)"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"    - [Deadline](####deadline)"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    - [Event](####event)"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"- [Managing Tasks](###managing-tasks)"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"- [Finding Tasks](###finding-tasks)"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"- [Reminders](###reminders)"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"### Adding Tasks"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"Add different types of tasks for Owen to keep track of."},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"#### Todo"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"Todo tasks with no specified timeframe."},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"#### Deadline"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"Deadline tasks with a due date and time."},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"#### Event"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"Event task with a start and end datetime."},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"### Managing Tasks"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"List, mark as done, and delete tasks."},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"### Finding Tasks"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"Find tasks matching a search string."},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"### Reminders"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"Get reminders of tasks due within specified days."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"- [todo](###todo---add-todo-task)"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"- [deadline](###deadline---add-deadline-task)"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"- [event](###event---add-event-task)"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"- [list](###list---list-all-tasks)"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"- [done](###done---mark-task-as-done)"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"- [delete](###delete---delete-task)"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"- [find](###find---find-matching-tasks)"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"- [reminders](###reminders---get-reminders-about-upcoming-tasks)"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"- [bye](###bye---exit-application)"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"### `todo` - Add Todo task"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"Add Todo task with a description"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"Example of usage: "},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"`todo buy milk`"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"### `deadline` - Add Deadline task"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"Add deadline task with description and due datetime. Datetime must be in DD/MM/YYYY HHMM format."},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"Example of usage: "},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"`deadline file taxes /by 20/2/2021 1400`"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"### `event` - Add Event task"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"Add event task with description and start and end datetime. Datetime must be in DD/MM/YYYY HHMM format."},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"Example of usage: "},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"`event meow fest 2021 /at 21/2/2021 0900 - 21/2/2021 2000`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"### `list` - List all tasks"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"List all tasks."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":"`list`"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":"1. [T][ ] buy milk"},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"2. [D][ ] file taxes (by: February 20 2021 2:00 PM)"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":"3. [E][ ] meow fest 2021 (at: February 21 2021 9:00 AM - February 21 2021 8:00 PM)"},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":"### `done` - Mark task as done"},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":"Mark task as done given its index."},{"lineNumber":89,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":90,"author":{"gitId":"kingsleykuan"},"content":"Example of usage: "},{"lineNumber":91,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":92,"author":{"gitId":"kingsleykuan"},"content":"`done 1`"},{"lineNumber":93,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":94,"author":{"gitId":"kingsleykuan"},"content":"Expected outcome:"},{"lineNumber":95,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":96,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":97,"author":{"gitId":"kingsleykuan"},"content":"Hoot! I\u0027ve marked this task as done:"},{"lineNumber":98,"author":{"gitId":"kingsleykuan"},"content":"    1. [T][X] buy milk"},{"lineNumber":99,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":100,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":101,"author":{"gitId":"kingsleykuan"},"content":"### `delete` - Delete task"},{"lineNumber":102,"author":{"gitId":"kingsleykuan"},"content":"Delete a task given its index."},{"lineNumber":103,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":104,"author":{"gitId":"kingsleykuan"},"content":"Example of usage: "},{"lineNumber":105,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":106,"author":{"gitId":"kingsleykuan"},"content":"`delete 2`"},{"lineNumber":107,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":108,"author":{"gitId":"kingsleykuan"},"content":"Expected outcome:"},{"lineNumber":109,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":110,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":111,"author":{"gitId":"kingsleykuan"},"content":"Hoot. I\u0027ve removed this task:"},{"lineNumber":112,"author":{"gitId":"kingsleykuan"},"content":"    2. [D][ ] file taxes (by: February 20 2021 2:00 PM)"},{"lineNumber":113,"author":{"gitId":"kingsleykuan"},"content":"Now you have 2 tasks in the list."},{"lineNumber":114,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":115,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":116,"author":{"gitId":"kingsleykuan"},"content":"### `find` - Find matching tasks"},{"lineNumber":117,"author":{"gitId":"kingsleykuan"},"content":"Find tasks matching a search string."},{"lineNumber":118,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":119,"author":{"gitId":"kingsleykuan"},"content":"Example of usage: "},{"lineNumber":120,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":121,"author":{"gitId":"kingsleykuan"},"content":"`find milk`"},{"lineNumber":122,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":123,"author":{"gitId":"kingsleykuan"},"content":"Expected outcome:"},{"lineNumber":124,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":125,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":126,"author":{"gitId":"kingsleykuan"},"content":"Hoot hoot here are the matching tasks in your list:"},{"lineNumber":127,"author":{"gitId":"kingsleykuan"},"content":"1. [T][ ] buy milk"},{"lineNumber":128,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":129,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":130,"author":{"gitId":"kingsleykuan"},"content":"### `reminders` - Get reminders about upcoming tasks"},{"lineNumber":131,"author":{"gitId":"kingsleykuan"},"content":"Get list of tasks due within specified number of days"},{"lineNumber":132,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":133,"author":{"gitId":"kingsleykuan"},"content":"Example of usage: "},{"lineNumber":134,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":135,"author":{"gitId":"kingsleykuan"},"content":"`reminders 5`"},{"lineNumber":136,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":137,"author":{"gitId":"kingsleykuan"},"content":"Expected outcome:"},{"lineNumber":138,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":139,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":140,"author":{"gitId":"kingsleykuan"},"content":"Hoot hoot here are the tasks due within 5 days:"},{"lineNumber":141,"author":{"gitId":"kingsleykuan"},"content":"2. [D][ ] file taxes (by: February 20 2021 2:00 PM)"},{"lineNumber":142,"author":{"gitId":"kingsleykuan"},"content":"3. [E][ ] meow fest 2021 (at: February 21 2021 9:00 AM - February 21 2021 8:00 PM)"},{"lineNumber":143,"author":{"gitId":"kingsleykuan"},"content":"```"},{"lineNumber":144,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":145,"author":{"gitId":"kingsleykuan"},"content":"### `bye` - Exit application"},{"lineNumber":146,"author":{"gitId":"kingsleykuan"},"content":"Exits the application."},{"lineNumber":147,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":148,"author":{"gitId":"kingsleykuan"},"content":"Example of usage: "},{"lineNumber":149,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":150,"author":{"gitId":"kingsleykuan"},"content":"`bye`"}],"authorContributionMap":{"kingsleykuan":135,"-":15}},{"path":"src/main/java/owen/Chatbot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":" * Interface for a chatbot."},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"public interface Chatbot {"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"     * Shutsdown the chatbot and sets a goodbye response."},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"     * @return Chatbot that has been shut down."},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    public Chatbot shutdown();"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"     * Checks if the chatbot is currently running."},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"     * @return Boolean indicating if chatbot is running."},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    public boolean isRunning();"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"     * Gets latest response from the chatbot."},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"     * @return Latest response from the chatbot."},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"    public String getResponse();"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"     * Parses command and returns chatbot with updated state."},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"     * @param commandString String command to parse."},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"     * @return Chatbot with updated internal state."},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"    public Chatbot parseCommand(String commandString);"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":35}},{"path":"src/main/java/owen/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":" * Stores a date and time that can be formatted in"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":" * DD/MM/YYYY HHMM or Month DD YYYY HH:MM AM/PM."},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"public class DateTime {"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    private static final DateTimeFormatter inputFormatter;"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"    private static final DateTimeFormatter outputFormatter;"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    static {"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"        DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        builder \u003d builder"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.DAY_OF_MONTH)"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"                .appendLiteral(\"/\")"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.MONTH_OF_YEAR)"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"                .appendLiteral(\"/\")"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.YEAR)"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"                .appendLiteral(\" \")"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.HOUR_OF_DAY)"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.MINUTE_OF_HOUR, 2);"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"        inputFormatter \u003d builder.toFormatter();"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"        builder \u003d new DateTimeFormatterBuilder();"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        builder \u003d builder"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"                .appendText(ChronoField.MONTH_OF_YEAR)"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"                .appendLiteral(\" \")"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.DAY_OF_MONTH)"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"                .appendLiteral(\" \")"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.YEAR)"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"                .appendLiteral(\" \")"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.CLOCK_HOUR_OF_AMPM)"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"                .appendLiteral(\":\")"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"                .appendValue(ChronoField.MINUTE_OF_HOUR, 2)"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"                .appendLiteral(\" \")"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"                .appendText(ChronoField.AMPM_OF_DAY);"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"        outputFormatter \u003d builder.toFormatter();"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new DateTime from LocalDateTime."},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"     * @param dateTime LocalDateTime object."},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"    public DateTime(LocalDateTime dateTime) {"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"     * Parse a date time string in DD/MM/YYYY HHMM format."},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"     * @param string Date time string in DD/MM/YYYY HHMM format."},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"     * @return DateTime from parsed string."},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException DateTime could not be parsed."},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"    public static DateTime parse(String string) throws OwenException {"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(string, DateTime.inputFormatter);"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"            return new DateTime(dateTime);"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"        } catch (DateTimeParseException exception) {"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Date and time must be in DD/MM/YYYY HHMM format...\");"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"     * Returns if date time is soon within specified days."},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"    public boolean isSoon(long days) {"},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"        return this.dateTime.minusDays(days).isBefore(LocalDateTime.now());"},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":"     * Returns date time string in DD/MM/YYYY HHMM format."},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":"     * @return Date time string in DD/MM/YYYY HHMM format."},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":"    public String getAsInputFormat() {"},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"        return this.dateTime.format(DateTime.inputFormatter);"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"kingsleykuan"},"content":"     * Returns date time string in Month DD YYYY HH:MM AM/PM format."},{"lineNumber":90,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"kingsleykuan"},"content":"     * @return Date time string in Month DD YYYY HH:MM AM/PM format."},{"lineNumber":92,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"kingsleykuan"},"content":"    public String getAsOutputFormat() {"},{"lineNumber":94,"author":{"gitId":"kingsleykuan"},"content":"        return this.dateTime.format(DateTime.outputFormatter);"},{"lineNumber":95,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":97,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"kingsleykuan"},"content":"    public String toString() {"},{"lineNumber":99,"author":{"gitId":"kingsleykuan"},"content":"        return this.getAsOutputFormat();"},{"lineNumber":100,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":101}},{"path":"src/main/java/owen/DefaultResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":" * A default formatted chatbot response."},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"public class DefaultResponse implements Response {"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"    private final String response;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"     * Creates a default formatted chatbot response from a String."},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"     * @param response Raw unformatted response string."},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    public DefaultResponse(String response) {"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"        this.response \u003d response;"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    public String getUnformattedResponse() {"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        return this.response;"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"    public String getFormattedResponse() {"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"        String responseFormat \u003d"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"                \"____________________________________________________________\\n\""},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"                + \"%s\\n\""},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"                + \"____________________________________________________________\\n\";"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"        String formattedResponse \u003d String.format(responseFormat, this.getUnformattedResponse());"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"        // Indent response by 4 spaces"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        formattedResponse \u003d formattedResponse.replaceAll(\"(?m)^\", \"    \");"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"        return formattedResponse;"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"        return this.getFormattedResponse();"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":40}},{"path":"src/main/java/owen/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.Scene;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"import javafx.stage.Stage;"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import owen.controller.MainWindow;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":" * GUI interface for interacting with Owen chatbot."},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"public class Gui extends Application {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    private Chatbot bot;"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"    public void start(Stage stage) {"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"        this.bot \u003d new Owen();"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"        MainWindow mainWindow \u003d new MainWindow(this.bot);"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"        Scene scene \u003d new Scene(mainWindow);"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        stage.setScene(scene);"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"        stage.setResizable(false);"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"        stage.setTitle(\"Owen the Owl\");"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"        stage.show();"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"    public static void main(String[] args) {"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"        launch(args);"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":29}},{"path":"src/main/java/owen/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":" * Main entrypoint for Owen chatbot with GUI interface."},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"public class Main {"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"        startGui(args);"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"     * Starts GUI interface for interacting with Owen chatbot."},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"     * @param args Program arguments."},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    public static void startGui(String[] args) {"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"        Gui.main(args);"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"     * Starts Terminal interface for interacting with Owen chatbot."},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"     * @param args Program arguments."},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"    public static void startTerminal(String[] args) {"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"        Chatbot owen \u003d new Owen();"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"        String response \u003d owen.getResponse();"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"        ui.outputResponse(response);"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        while (owen.isRunning()) {"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"            String command \u003d ui.getInput();"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"            owen \u003d owen.parseCommand(command);"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"            response \u003d owen.getResponse();"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"            ui.outputResponse(response);"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":39}},{"path":"src/main/java/owen/Owen.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import owen.command.Command;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import owen.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":" * Owen is a personal assistant chatbot."},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":" * As Owen is an immutable class, modifications will return a copy"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":" * with updated internal state."},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"public class Owen implements Chatbot {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    private static final String STORAGE_PATH \u003d \"data/owen.txt\";"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    private final boolean isRunning;"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"    private final String latestResponse;"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    private final TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"    private final Storage storage;"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"     * Creates an Owen chatbot with a hello response."},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"    public Owen() {"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"        this.isRunning \u003d true;"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"        this.latestResponse \u003d \"Hoot hoot I am Owen the Owl!\";"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"        this.storage \u003d new Storage(STORAGE_PATH);"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"        this.taskList \u003d this.storage.readTaskList();"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"    private Owen(boolean isRunning, String latestResponse, TaskList taskList, Storage storage) {"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"        this.isRunning \u003d isRunning;"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        this.latestResponse \u003d latestResponse;"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"        this.storage \u003d storage;"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"    public Owen shutdown() {"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"        String shutdownResponse \u003d \"Hoot. Hope to see you again soon!\";"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"        return new Owen(false, shutdownResponse, this.taskList, this.storage);"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"    public boolean isRunning() {"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"        return this.isRunning;"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"    public String getResponse() {"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"        return this.latestResponse;"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"    public Owen parseCommand(String commandString) {"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"        assert commandString.length() \u003e 0 : \"commandString must not be empty\";"},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"            Command command \u003d Parser.parseCommand(commandString);"},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"            switch (command.getType()) {"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"            case TODO:"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"            case EVENT:"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"            case DEADLINE:"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"                return this.addTask(command.getOriginal());"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"            case LIST:"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"                return this.listTasks();"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"            case DONE:"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"                return this.doneTask(Parser.parseNumber(command.getArgs()));"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"            case DELETE:"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"                return this.deleteTask(Parser.parseNumber(command.getArgs()));"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"            case FIND:"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"                return this.findTask(command.getArgs());"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"            case REMINDERS:"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"                return this.listReminders(Parser.parseNumber(command.getArgs()));"},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":"            case BYE:"},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"                return this.shutdown();"},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"            default:"},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":"                throw new OwenException(\"Hoot I\u0027m sorry, but I don\u0027t know what that means...\");"},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":"            String exceptionResponse \u003d exception.getMessage();"},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"            return new Owen(this.isRunning, exceptionResponse, this.taskList, this.storage);"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":"     * Adds task to Owen task list."},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":"     * @param task Task string to add."},{"lineNumber":89,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of Owen updated with new task and response."},{"lineNumber":90,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task could not be parsed."},{"lineNumber":91,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"kingsleykuan"},"content":"    private Owen addTask(String task) throws OwenException {"},{"lineNumber":93,"author":{"gitId":"kingsleykuan"},"content":"        assert task.length() \u003e 0 : \"task must not be empty\";"},{"lineNumber":94,"author":{"gitId":"kingsleykuan"},"content":"        TaskList addedTaskList \u003d this.taskList.addTask(task);"},{"lineNumber":95,"author":{"gitId":"kingsleykuan"},"content":"        int numTasks \u003d addedTaskList.getNumTasks();"},{"lineNumber":96,"author":{"gitId":"kingsleykuan"},"content":"        String addedFormat \u003d \"\""},{"lineNumber":97,"author":{"gitId":"kingsleykuan"},"content":"                + \"Hoot hoot. I\u0027ve added this task:\\n\""},{"lineNumber":98,"author":{"gitId":"kingsleykuan"},"content":"                + \"    %s\\n\""},{"lineNumber":99,"author":{"gitId":"kingsleykuan"},"content":"                + \"Now you have %d tasks in the list.\";"},{"lineNumber":100,"author":{"gitId":"kingsleykuan"},"content":"        String addedResponse \u003d String.format("},{"lineNumber":101,"author":{"gitId":"kingsleykuan"},"content":"                addedFormat, addedTaskList.getTask(numTasks), numTasks);"},{"lineNumber":102,"author":{"gitId":"kingsleykuan"},"content":"        Storage addedStorage \u003d this.storage.writeTaskList(addedTaskList);"},{"lineNumber":103,"author":{"gitId":"kingsleykuan"},"content":"        return new Owen(this.isRunning, addedResponse, addedTaskList, addedStorage);"},{"lineNumber":104,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":106,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"kingsleykuan"},"content":"     * Lists tasks in Owen task list."},{"lineNumber":108,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of Owen updated with new response."},{"lineNumber":110,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"kingsleykuan"},"content":"    private Owen listTasks() {"},{"lineNumber":112,"author":{"gitId":"kingsleykuan"},"content":"        String listResponse \u003d this.taskList.toString();"},{"lineNumber":113,"author":{"gitId":"kingsleykuan"},"content":"        return new Owen(this.isRunning, listResponse, this.taskList, this.storage);"},{"lineNumber":114,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":116,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"kingsleykuan"},"content":"     * Marks task as done in Owen task list."},{"lineNumber":118,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskNumber Task number to mark as done."},{"lineNumber":120,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of Owen updated with modified task list and response."},{"lineNumber":121,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task number does not exist."},{"lineNumber":122,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"kingsleykuan"},"content":"    private Owen doneTask(int taskNumber) throws OwenException {"},{"lineNumber":124,"author":{"gitId":"kingsleykuan"},"content":"        assert taskNumber \u003e 0 : \"taskNumber must be more than 0\";"},{"lineNumber":125,"author":{"gitId":"kingsleykuan"},"content":"        TaskList doneTaskList \u003d this.taskList.markAsDone(taskNumber);"},{"lineNumber":126,"author":{"gitId":"kingsleykuan"},"content":"        String doneFormat \u003d \"Hoot! I\u0027ve marked this task as done:\\n    %s\";"},{"lineNumber":127,"author":{"gitId":"kingsleykuan"},"content":"        String doneResponse \u003d String.format("},{"lineNumber":128,"author":{"gitId":"kingsleykuan"},"content":"                doneFormat, doneTaskList.getTask(taskNumber).toString());"},{"lineNumber":129,"author":{"gitId":"kingsleykuan"},"content":"        Storage doneStorage \u003d this.storage.writeTaskList(doneTaskList);"},{"lineNumber":130,"author":{"gitId":"kingsleykuan"},"content":"        return new Owen(this.isRunning, doneResponse, doneTaskList, doneStorage);"},{"lineNumber":131,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":133,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"kingsleykuan"},"content":"     * Delete task from Owen task list."},{"lineNumber":135,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskNumber Task number to delete."},{"lineNumber":137,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of Owen updated with modified task list and response."},{"lineNumber":138,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task number does not exist."},{"lineNumber":139,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"kingsleykuan"},"content":"    private Owen deleteTask(int taskNumber) throws OwenException {"},{"lineNumber":141,"author":{"gitId":"kingsleykuan"},"content":"        assert taskNumber \u003e 0 : \"taskNumber must be more than 0\";"},{"lineNumber":142,"author":{"gitId":"kingsleykuan"},"content":"        TaskList deleteTaskList \u003d this.taskList.deleteTask(taskNumber);"},{"lineNumber":143,"author":{"gitId":"kingsleykuan"},"content":"        String deleteFormat \u003d \"\""},{"lineNumber":144,"author":{"gitId":"kingsleykuan"},"content":"                + \"Hoot. I\u0027ve removed this task:\\n\""},{"lineNumber":145,"author":{"gitId":"kingsleykuan"},"content":"                + \"    %s\\n\""},{"lineNumber":146,"author":{"gitId":"kingsleykuan"},"content":"                + \"Now you have %d tasks in the list.\";"},{"lineNumber":147,"author":{"gitId":"kingsleykuan"},"content":"        int newNumTasks \u003d deleteTaskList.getNumTasks();"},{"lineNumber":148,"author":{"gitId":"kingsleykuan"},"content":"        String deleteResponse \u003d String.format("},{"lineNumber":149,"author":{"gitId":"kingsleykuan"},"content":"                deleteFormat, this.taskList.getTask(taskNumber), newNumTasks);"},{"lineNumber":150,"author":{"gitId":"kingsleykuan"},"content":"        Storage deleteStorage \u003d this.storage.writeTaskList(deleteTaskList);"},{"lineNumber":151,"author":{"gitId":"kingsleykuan"},"content":"        return new Owen(this.isRunning, deleteResponse, deleteTaskList, deleteStorage);"},{"lineNumber":152,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":154,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"kingsleykuan"},"content":"     * Finds task in Owen task list."},{"lineNumber":156,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"kingsleykuan"},"content":"     * @param searchString Search string to search within tasks."},{"lineNumber":158,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of Owen with updated response."},{"lineNumber":159,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"kingsleykuan"},"content":"    private Owen findTask(String searchString) {"},{"lineNumber":161,"author":{"gitId":"kingsleykuan"},"content":"        String findResult \u003d this.taskList.findTask(searchString);"},{"lineNumber":162,"author":{"gitId":"kingsleykuan"},"content":"        String findFormat \u003d \"Hoot hoot here are the matching tasks in your list:\\n%s\";"},{"lineNumber":163,"author":{"gitId":"kingsleykuan"},"content":"        String findResponse \u003d String.format(findFormat, findResult);"},{"lineNumber":164,"author":{"gitId":"kingsleykuan"},"content":"        return new Owen(this.isRunning, findResponse, this.taskList, this.storage);"},{"lineNumber":165,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":167,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"kingsleykuan"},"content":"     * List reminders of tasks that are due soon within specified days."},{"lineNumber":169,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"kingsleykuan"},"content":"     * @param days Days to check if tasks are due by."},{"lineNumber":171,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of Owen with updated response."},{"lineNumber":172,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"kingsleykuan"},"content":"    private Owen listReminders(long days) {"},{"lineNumber":174,"author":{"gitId":"kingsleykuan"},"content":"        String remindersResult \u003d this.taskList.getDueTasks(days);"},{"lineNumber":175,"author":{"gitId":"kingsleykuan"},"content":"        String remindersFormat \u003d \"Hoot hoot here are the tasks due within %d days:\\n%s\";"},{"lineNumber":176,"author":{"gitId":"kingsleykuan"},"content":"        String remindersResponse \u003d String.format(remindersFormat, days, remindersResult);"},{"lineNumber":177,"author":{"gitId":"kingsleykuan"},"content":"        return new Owen(this.isRunning, remindersResponse, this.taskList, this.storage);"},{"lineNumber":178,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":179}},{"path":"src/main/java/owen/OwenException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":" * Exception thrown by Owen chatbot."},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"public class OwenException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new OwenException with a message."},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"     * @param message Message to attach to this exception."},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    public OwenException(String message) {"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"        super(\"Ooooo noo...\\n\" + message);"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":15}},{"path":"src/main/java/owen/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import owen.command.Command;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import owen.command.CommandType;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":" * Parser responsible for parsing commands."},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"     * Parses command from a string."},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"     * @param commandString String to parse command from."},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"     * @return Parsed Command."},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Command cannot be parsed from string."},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"    public static Command parseCommand(String commandString) throws OwenException {"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"        assert commandString.length() \u003e 0 : \"commandString must not be empty\";"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"        String[] commandStringSplit \u003d commandString.split(\" \", 2);"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        String commandTypeString \u003d commandStringSplit[0];"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"        // Try converting command to enum"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"        CommandType commandType;"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"            commandType \u003d CommandType.valueOf(commandTypeString.toUpperCase());"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"        } catch (IllegalArgumentException exception) {"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"I\u0027m sorry, but I don\u0027t know what that means...\");"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"        String args;"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"        if (commandStringSplit.length \u003e 1) {"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"            args \u003d commandStringSplit[1];"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"            args \u003d \"\";"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"        return new Command(commandType, args, commandString);"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"     * Parses number from string."},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"     * @param number String to parse."},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"     * @return Parsed integer."},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Integer could not be parsed from string."},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"    public static int parseNumber(String number) throws OwenException {"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"            return Integer.parseInt(number);"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"        } catch (NumberFormatException exception) {"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Number must be specified...\");"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":54}},{"path":"src/main/java/owen/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":" * Interface for a formatted chatbot response."},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"public interface Response {"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"     * Returns plain unformatted response as a String."},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"     * @return Unformatted response string."},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    public String getUnformattedResponse();"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"     * Returns formatted response as a String."},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"     * @return Formatted response string."},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    public String getFormattedResponse();"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":20}},{"path":"src/main/java/owen/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"import owen.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":" * Storage handles reading and writing task list to file on disk."},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"    private final File file;"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"     * Create storage backed by a file on disk."},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"     * @param path Path to file on disk."},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"    public Storage(String path) {"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"        this.file \u003d new File(path);"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"     * Reads TaskList from disk."},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"     * @return TaskList read from disk."},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"    public TaskList readTaskList() {"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"            Scanner scanner \u003d new Scanner(this.file);"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"                String taskString \u003d scanner.nextLine();"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"                try {"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"                    taskList \u003d taskList.deserializeTask(taskString);"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"                } catch (OwenException exception) {"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"                    System.err.println(exception.getMessage());"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"                }"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"            scanner.close();"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"            return taskList;"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"        } catch (FileNotFoundException exception) {"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"            return new TaskList();"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"     * Writes TaskList to disk."},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskList TaskList to write."},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"     * @return this Storage."},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Error writing to disk."},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"    public Storage writeTaskList(TaskList taskList) throws OwenException {"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"            this.file.getParentFile().mkdirs();"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"            this.file.createNewFile();"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.file);"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"            String taskListString \u003d taskList.serialize();"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"            fileWriter.write(taskListString);"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"            fileWriter.close();"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"        } catch (IOException exception) {"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Could not write task list to storage...\");"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":74}},{"path":"src/main/java/owen/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":" * Terminal UI handling user input and output."},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"    private final Scanner scanner;"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new Terminal UI for handling user input and output."},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    public Ui() {"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"     * Outputs a formatted response to standard output."},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"     * @param response Raw unformatted response string."},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    public void outputResponse(String response) {"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"        Response formattedResponse \u003d new DefaultResponse(response);"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"        System.out.println(formattedResponse.getFormattedResponse());"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"     * Gets user input from standard input."},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"     * @return User input string."},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"    public String getInput() {"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"        return this.scanner.nextLine();"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":36}},{"path":"src/main/java/owen/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.command;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":" * Encapsulates the command\u0027s type, arguments, and original"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":" * command string."},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"public class Command {"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"    private final CommandType type;"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"    private final String args;"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    private final String original;"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new Command."},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"     * @param type Type of the command."},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"     * @param args Argument string to the command."},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"     * @param original Original command string."},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    public Command(CommandType type, String args, String original) {"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        this.type \u003d type;"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"        this.args \u003d args;"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"        this.original \u003d original;"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"     * Gets type of this command."},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"     * @return Type of this command."},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"    public CommandType getType() {"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"        return this.type;"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"     * Gets argument string to this command."},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"     * @return Argument string to this command."},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"    public String getArgs() {"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"        return this.args;"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"     * Gets original command string."},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"     * @return Original command string."},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"    public String getOriginal() {"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"        return this.original;"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":51}},{"path":"src/main/java/owen/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.command;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":" * Type of command that Owen understands."},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"public enum CommandType {"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"    TODO,"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"    EVENT,"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"    DEADLINE,"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    LIST,"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    DONE,"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    DELETE,"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"    FIND,"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    REMINDERS,"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"    BYE,"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":16}},{"path":"src/main/java/owen/controller/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.controller;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.text.Text;"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":" * Controller for dialog box containing an avatar image as well as dialog text."},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"    private Text dialog;"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"        this.dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"        this.displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new user dialog box with dialog text on the left and avatar image on the right."},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"     * @param text User dialog text."},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"     * @param img User avatar image."},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"     * @return New user dialog box."},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"        return new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new bot dialog box with dialog text on the right and avatar image on the left."},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"     * @param text Bot dialog text."},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"     * @param img Bot avatar image."},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"     * @return New bot dialog box."},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"    public static DialogBox getBotDialog(String text, Image img) {"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"        db.flip();"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"        return db;"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":73}},{"path":"src/main/java/owen/controller/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.controller;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.control.Separator;"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"import owen.Chatbot;"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":" * Controller for main GUI interface window."},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"    private VBox dialogContainer;"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"    private TextField userInput;"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"    private Button sendButton;"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"    private Chatbot bot;"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Cat.jpg\"));"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"    private Image botImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Owl.jpg\"));"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"     * Creates controller for main GUI interface window."},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"     * @param bot Chatbot that GUI acts as an interface for."},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"    public MainWindow(Chatbot bot) {"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"        this.bot \u003d bot;"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"            fxmlLoader.load();"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"            e.printStackTrace();"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"     * Initializes main GUI interface window layout and get hello message from chatbot."},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"    public void initialize() {"},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"        this.scrollPane.vvalueProperty().bind(this.dialogContainer.heightProperty());"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"        String response \u003d this.bot.getResponse();"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"        this.dialogContainer.getChildren().addAll("},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"                DialogBox.getBotDialog(response, this.botImage),"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"                new Separator());"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing bot\u0027s reply and then appends them to"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"    private void handleUserInput() {"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"        String input \u003d this.userInput.getText();"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"        this.userInput.clear();"},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"        this.bot \u003d this.bot.parseCommand(input);"},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"        String response \u003d this.bot.getResponse();"},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":"        this.dialogContainer.getChildren().addAll("},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":"                DialogBox.getUserDialog(input, this.userImage),"},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":"                new Separator(),"},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"                DialogBox.getBotDialog(response, this.botImage),"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":"                new Separator());"},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":"        if (!this.bot.isRunning()) {"},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"            Platform.exit();"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":88}},{"path":"src/main/java/owen/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.task;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import owen.DateTime;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":" * Deadline task that need to be done before a specific date/time."},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    private final DateTime deadline;"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new deadline task with arguments."},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskArgs Arguments in the format: description /by DD/MM/YYYY HHMM."},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Arguments could not be parsed."},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    public DeadlineTask(String taskArgs) throws OwenException {"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"        super();"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"        String[] taskArgsSplit \u003d taskArgs.split(\" /by \", 2);"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"        if (taskArgsSplit.length \u003c 2) {"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Deadline task must have a description and due date/time...\");"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"        this.description \u003d taskArgsSplit[0];"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"        this.deadline \u003d DateTime.parse(taskArgsSplit[1]);"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"    private DeadlineTask(String description, boolean isDone, DateTime deadline) {"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        super(description, isDone);"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"    public DeadlineTask markAsDone() {"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"        return new DeadlineTask(this.description, true, this.deadline);"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"    public boolean isDue(long days) {"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"        return this.deadline.isSoon(days) \u0026\u0026 !this.isDone;"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"    public String serialize() {"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"        String serializeFormat \u003d \"DEADLINE | %b | %s | %s\";"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"        return String.format("},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"                serializeFormat, this.isDone, this.description, this.deadline.getAsInputFormat());"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"     * Deserializes string into a DeadlineTask."},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"     * @param string String to deserialize."},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"     * @return DeadlineTask deserialized from string."},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task could not be deserialized."},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"    public static DeadlineTask deserialize(String string) throws OwenException {"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"        assert string.length() \u003e 0 : \"string cannot be empty\";"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"        String[] fields \u003d string.split(\" \\\\| \");"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"        System.out.println(fields);"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"        boolean isDone \u003d Boolean.valueOf(fields[1]);"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"        String description \u003d fields[2];"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"        DateTime deadline \u003d DateTime.parse(fields[3]);"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"        return new DeadlineTask(description, isDone, deadline);"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"        String taskFormat \u003d \"[%s][%s] %s (by: %s)\";"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"        return String.format("},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":"                taskFormat,"},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"                this.getTypeIcon(),"},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"                this.getStatusIcon(),"},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":"                this.description,"},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":"                this.deadline);"},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":"    protected String getTypeIcon() {"},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"        return \"D\";"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":85}},{"path":"src/main/java/owen/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.task;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import owen.DateTime;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":" * Event task that start and ends at specific times."},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"public class EventTask extends Task {"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    private final DateTime start;"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    private final DateTime end;"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new event task with arguments."},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskArgs Arguments in the format: description /at DD/MM/YYYY HHMM - DD/MM/YYYY HHMM."},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Arguments could not be parsed."},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    public EventTask(String taskArgs) throws OwenException {"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        super();"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"        String[] taskArgsSplit \u003d taskArgs.split(\" /at \", 2);"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"        if (taskArgsSplit.length \u003c 2) {"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Event task must have a description and start/end time...\");"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"        String[] startEndSplit \u003d taskArgsSplit[1].split(\" - \", 2);"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"        if (startEndSplit.length \u003c 2) {"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Both start and end date/time must be specified...\");"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"        this.description \u003d taskArgsSplit[0];"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"        this.start \u003d DateTime.parse(startEndSplit[0]);"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"        this.end \u003d DateTime.parse(startEndSplit[1]);"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"    private EventTask(String description, boolean isDone, DateTime start, DateTime end) {"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"        super(description, isDone);"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"        this.start \u003d start;"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"        this.end \u003d end;"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"    public EventTask markAsDone() {"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"        return new EventTask(this.description, true, this.start, this.end);"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"    public boolean isDue(long days) {"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"        return this.start.isSoon(days) \u0026\u0026 !this.isDone;"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"    public String serialize() {"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"        String serializeFormat \u003d \"EVENT | %b | %s | %s | %s\";"},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"        return String.format("},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"                serializeFormat,"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"                this.isDone,"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"                this.description,"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"                this.start.getAsInputFormat(),"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"                this.end.getAsInputFormat());"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"     * Deserializes string into a EventTask."},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"     * @param string String to deserialize."},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"     * @return EventTask deserialized from string."},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task could not be deserialized."},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"    public static EventTask deserialize(String string) throws OwenException {"},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":"        assert string.length() \u003e 0 : \"string cannot be empty\";"},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"        String[] fields \u003d string.split(\" \\\\| \");"},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"        boolean isDone \u003d Boolean.valueOf(fields[1]);"},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":"        String description \u003d fields[2];"},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":"        DateTime start \u003d DateTime.parse(fields[3]);"},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":"        DateTime end \u003d DateTime.parse(fields[4]);"},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":"        return new EventTask(description, isDone, start, end);"},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":"    public String toString() {"},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"        String taskFormat \u003d \"[%s][%s] %s (at: %s - %s)\";"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":"        return String.format("},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":"                taskFormat,"},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":"                this.getTypeIcon(),"},{"lineNumber":89,"author":{"gitId":"kingsleykuan"},"content":"                this.getStatusIcon(),"},{"lineNumber":90,"author":{"gitId":"kingsleykuan"},"content":"                this.description,"},{"lineNumber":91,"author":{"gitId":"kingsleykuan"},"content":"                this.start,"},{"lineNumber":92,"author":{"gitId":"kingsleykuan"},"content":"                this.end);"},{"lineNumber":93,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":95,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"kingsleykuan"},"content":"    protected String getTypeIcon() {"},{"lineNumber":97,"author":{"gitId":"kingsleykuan"},"content":"        return \"E\";"},{"lineNumber":98,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":99}},{"path":"src/main/java/owen/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.task;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":" * An abstract task with a description and a status."},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    protected Task() {"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"        this.description \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"    protected Task(String description) {"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"    protected Task(String description, boolean isDone) {"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"     * Gets task description."},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"     * @return Task description."},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"    public String getDescription() {"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"        return this.description;"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"     * Marks task as done and return copy with updated state."},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of task with the state updated to done."},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"    public abstract Task markAsDone();"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"     * Returns true if task is due within specified days."},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"     * @param days Days to check if task is due by."},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"     * @return Whether the task is due soon."},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"    public abstract boolean isDue(long days);"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"     * Serializes task into a String."},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"     * @return Serialized version of task as string."},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"    public abstract String serialize();"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"    protected abstract String getTypeIcon();"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"    protected String getStatusIcon() {"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":61}},{"path":"src/main/java/owen/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.task;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":" * A list that keeps track of tasks."},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    private enum TaskType {"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"        TODO,"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"        EVENT,"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"        DEADLINE,"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    private final List\u003cTask\u003e taskList;"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"     * Creates empty task list."},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    public TaskList() {"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"    private TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"     * Gets number of tasks in task list."},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"     * @return Number of tasks in task list."},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"    public int getNumTasks() {"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"        return this.taskList.size();"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"     * Adds a task to the task list."},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"     * @param task Task to add to the list."},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of the task list with the new task added."},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task could not be parsed."},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"    public TaskList addTask(String task) throws OwenException {"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"        String[] taskSplit \u003d task.split(\" \", 2);"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"        String taskTypeString \u003d taskSplit[0];"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"        TaskType taskType;"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"            taskType \u003d TaskType.valueOf(taskTypeString.toUpperCase());"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"        } catch (IllegalArgumentException exception) {"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Unknown task type...\");"},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"        String taskArgs;"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"        if (taskSplit.length \u003e 1) {"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"            taskArgs \u003d taskSplit[1];"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"        } else {"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"            taskArgs \u003d \"\";"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"        Task newTask;"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"        switch (taskType) {"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"        case TODO:"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"            newTask \u003d new TodoTask(taskArgs);"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"        case EVENT:"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"            newTask \u003d new EventTask(taskArgs);"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"        case DEADLINE:"},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":"            newTask \u003d new DeadlineTask(taskArgs);"},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"        default:"},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":"            newTask \u003d null;"},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":"        List\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e(this.taskList);"},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"        newTaskList.add(newTask);"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":"        return new TaskList(newTaskList);"},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":"     * Gets the nth task from the list."},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskNumber The number of the task to get."},{"lineNumber":89,"author":{"gitId":"kingsleykuan"},"content":"     * @return The nth task of the list."},{"lineNumber":90,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"kingsleykuan"},"content":"    public Task getTask(int taskNumber) {"},{"lineNumber":92,"author":{"gitId":"kingsleykuan"},"content":"        taskNumber -\u003d 1;"},{"lineNumber":93,"author":{"gitId":"kingsleykuan"},"content":"        return this.taskList.get(taskNumber);"},{"lineNumber":94,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":96,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"kingsleykuan"},"content":"     * Marks the nth task as done."},{"lineNumber":98,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskNumber The number of the task to mark as done."},{"lineNumber":100,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of the task list with the nth task marked as done."},{"lineNumber":101,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task number does not exist."},{"lineNumber":102,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"kingsleykuan"},"content":"    public TaskList markAsDone(int taskNumber) throws OwenException {"},{"lineNumber":104,"author":{"gitId":"kingsleykuan"},"content":"        if (this.taskList.size() \u003c taskNumber || taskNumber \u003c\u003d 0) {"},{"lineNumber":105,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Task \" + taskNumber + \" does not exist...\");"},{"lineNumber":106,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":108,"author":{"gitId":"kingsleykuan"},"content":"        taskNumber -\u003d 1;"},{"lineNumber":109,"author":{"gitId":"kingsleykuan"},"content":"        List\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e(this.taskList);"},{"lineNumber":110,"author":{"gitId":"kingsleykuan"},"content":"        newTaskList.set(taskNumber, newTaskList.get(taskNumber).markAsDone());"},{"lineNumber":111,"author":{"gitId":"kingsleykuan"},"content":"        return new TaskList(newTaskList);"},{"lineNumber":112,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":114,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"kingsleykuan"},"content":"     * Deletes the nth task from the task list."},{"lineNumber":116,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskNumber The number of the task to delete."},{"lineNumber":118,"author":{"gitId":"kingsleykuan"},"content":"     * @return Copy of the task list with the nth task deleted."},{"lineNumber":119,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task number does not exist."},{"lineNumber":120,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"kingsleykuan"},"content":"    public TaskList deleteTask(int taskNumber) throws OwenException {"},{"lineNumber":122,"author":{"gitId":"kingsleykuan"},"content":"        if (this.taskList.size() \u003c taskNumber || taskNumber \u003c\u003d 0) {"},{"lineNumber":123,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"Task \" + taskNumber + \" does not exist...\");"},{"lineNumber":124,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":126,"author":{"gitId":"kingsleykuan"},"content":"        taskNumber -\u003d 1;"},{"lineNumber":127,"author":{"gitId":"kingsleykuan"},"content":"        List\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e(this.taskList);"},{"lineNumber":128,"author":{"gitId":"kingsleykuan"},"content":"        newTaskList.remove(taskNumber);"},{"lineNumber":129,"author":{"gitId":"kingsleykuan"},"content":"        return new TaskList(newTaskList);"},{"lineNumber":130,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":132,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"kingsleykuan"},"content":"     * Finds tasks that contain a search string."},{"lineNumber":134,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"kingsleykuan"},"content":"     * @param searchString String to search within task descriptions."},{"lineNumber":136,"author":{"gitId":"kingsleykuan"},"content":"     * @return Tasks that contain search string."},{"lineNumber":137,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"kingsleykuan"},"content":"    public String findTask(String searchString) {"},{"lineNumber":139,"author":{"gitId":"kingsleykuan"},"content":"        List\u003cString\u003e taskListStrings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":140,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":141,"author":{"gitId":"kingsleykuan"},"content":"        String taskListFormat \u003d \"%d. %s\";"},{"lineNumber":142,"author":{"gitId":"kingsleykuan"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":143,"author":{"gitId":"kingsleykuan"},"content":"            Task task \u003d this.taskList.get(i);"},{"lineNumber":144,"author":{"gitId":"kingsleykuan"},"content":"            String description \u003d task.getDescription();"},{"lineNumber":145,"author":{"gitId":"kingsleykuan"},"content":"            if (description.contains(searchString)) {"},{"lineNumber":146,"author":{"gitId":"kingsleykuan"},"content":"                taskListStrings.add(String.format(taskListFormat, i + 1, task));"},{"lineNumber":147,"author":{"gitId":"kingsleykuan"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":150,"author":{"gitId":"kingsleykuan"},"content":"        return String.join(\"\\n\", taskListStrings);"},{"lineNumber":151,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":153,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"kingsleykuan"},"content":"     * Gets list of tasks that are due within specified days."},{"lineNumber":155,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"kingsleykuan"},"content":"     * @param days Days to check if tasks are due by."},{"lineNumber":157,"author":{"gitId":"kingsleykuan"},"content":"     * @return List of tasks that are due."},{"lineNumber":158,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"kingsleykuan"},"content":"    public String getDueTasks(long days) {"},{"lineNumber":160,"author":{"gitId":"kingsleykuan"},"content":"        List\u003cString\u003e taskListStrings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":161,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":162,"author":{"gitId":"kingsleykuan"},"content":"        String taskListFormat \u003d \"%d. %s\";"},{"lineNumber":163,"author":{"gitId":"kingsleykuan"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":164,"author":{"gitId":"kingsleykuan"},"content":"            Task task \u003d this.taskList.get(i);"},{"lineNumber":165,"author":{"gitId":"kingsleykuan"},"content":"            if (task.isDue(days)) {"},{"lineNumber":166,"author":{"gitId":"kingsleykuan"},"content":"                taskListStrings.add(String.format(taskListFormat, i + 1, task));"},{"lineNumber":167,"author":{"gitId":"kingsleykuan"},"content":"            }"},{"lineNumber":168,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":170,"author":{"gitId":"kingsleykuan"},"content":"        return String.join(\"\\n\", taskListStrings);"},{"lineNumber":171,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":173,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"kingsleykuan"},"content":"     * Serializes TaskList into a String."},{"lineNumber":175,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"kingsleykuan"},"content":"     * @return Serialized version of TaskList as a String."},{"lineNumber":177,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"kingsleykuan"},"content":"    public String serialize() {"},{"lineNumber":179,"author":{"gitId":"kingsleykuan"},"content":"        String[] taskStrings \u003d new String[this.taskList.size()];"},{"lineNumber":180,"author":{"gitId":"kingsleykuan"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":181,"author":{"gitId":"kingsleykuan"},"content":"            taskStrings[i] \u003d this.taskList.get(i).serialize();"},{"lineNumber":182,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"kingsleykuan"},"content":"        return String.join(\"\\n\", taskStrings);"},{"lineNumber":184,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":186,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"kingsleykuan"},"content":"     * Deserializes Task and add it to TaskList."},{"lineNumber":188,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskString Task string to deserialize."},{"lineNumber":190,"author":{"gitId":"kingsleykuan"},"content":"     * @return Updated TaskList with deserialized task added."},{"lineNumber":191,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Task could not be deserialized."},{"lineNumber":192,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"kingsleykuan"},"content":"    public TaskList deserializeTask(String taskString) throws OwenException {"},{"lineNumber":194,"author":{"gitId":"kingsleykuan"},"content":"        assert taskString.length() \u003e 0 : \"taskString cannot be empty\";"},{"lineNumber":195,"author":{"gitId":"kingsleykuan"},"content":"        List\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e(this.taskList);"},{"lineNumber":196,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":197,"author":{"gitId":"kingsleykuan"},"content":"        String taskTypeString \u003d taskString.split(\" | \", 2)[0];"},{"lineNumber":198,"author":{"gitId":"kingsleykuan"},"content":"        TaskType taskType \u003d TaskType.valueOf(taskTypeString);"},{"lineNumber":199,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":200,"author":{"gitId":"kingsleykuan"},"content":"        Task newTask;"},{"lineNumber":201,"author":{"gitId":"kingsleykuan"},"content":"        switch (taskType) {"},{"lineNumber":202,"author":{"gitId":"kingsleykuan"},"content":"        case TODO:"},{"lineNumber":203,"author":{"gitId":"kingsleykuan"},"content":"            newTask \u003d TodoTask.deserialize(taskString);"},{"lineNumber":204,"author":{"gitId":"kingsleykuan"},"content":"            break;"},{"lineNumber":205,"author":{"gitId":"kingsleykuan"},"content":"        case EVENT:"},{"lineNumber":206,"author":{"gitId":"kingsleykuan"},"content":"            newTask \u003d EventTask.deserialize(taskString);"},{"lineNumber":207,"author":{"gitId":"kingsleykuan"},"content":"            break;"},{"lineNumber":208,"author":{"gitId":"kingsleykuan"},"content":"        case DEADLINE:"},{"lineNumber":209,"author":{"gitId":"kingsleykuan"},"content":"            newTask \u003d DeadlineTask.deserialize(taskString);"},{"lineNumber":210,"author":{"gitId":"kingsleykuan"},"content":"            break;"},{"lineNumber":211,"author":{"gitId":"kingsleykuan"},"content":"        default:"},{"lineNumber":212,"author":{"gitId":"kingsleykuan"},"content":"            newTask \u003d null;"},{"lineNumber":213,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":215,"author":{"gitId":"kingsleykuan"},"content":"        newTaskList.add(newTask);"},{"lineNumber":216,"author":{"gitId":"kingsleykuan"},"content":"        return new TaskList(newTaskList);"},{"lineNumber":217,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":219,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":220,"author":{"gitId":"kingsleykuan"},"content":"    public String toString() {"},{"lineNumber":221,"author":{"gitId":"kingsleykuan"},"content":"        String[] taskListStrings \u003d new String[this.taskList.size()];"},{"lineNumber":222,"author":{"gitId":"kingsleykuan"},"content":"        String taskListFormat \u003d \"%d. %s\";"},{"lineNumber":223,"author":{"gitId":"kingsleykuan"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":224,"author":{"gitId":"kingsleykuan"},"content":"            taskListStrings[i] \u003d String.format(taskListFormat, i + 1, this.taskList.get(i));"},{"lineNumber":225,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"kingsleykuan"},"content":"        return String.join(\"\\n\", taskListStrings);"},{"lineNumber":227,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":228}},{"path":"src/main/java/owen/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"package owen.task;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":" * Todo task without any date/time attached to it."},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"public class TodoTask extends Task {"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"     * Creates new todo task with arguments."},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"     * @param taskArgs Arguments in the format: description."},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"     * @throws OwenException Arguments could not be parsed."},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"    public TodoTask(String taskArgs) throws OwenException {"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"        super(taskArgs);"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"        if (taskArgs.equals(\"\")) {"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"            throw new OwenException(\"The description of a todo cannot be empty...\");"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    private TodoTask(String description, boolean isDone) {"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"        super(description, isDone);"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"    public TodoTask markAsDone() {"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"        return new TodoTask(this.description, true);"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"    public boolean isDue(long days) {"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"        return false;"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"    public String serialize() {"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"        String serializeFormat \u003d \"TODO | %b | %s\";"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"        return String.format(serializeFormat, this.isDone, this.description);"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"     * Deserializes string into a TodoTask."},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"     * @param string String to deserialize."},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"     * @return TodoTask deserialized from string."},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"    public static TodoTask deserialize(String string) {"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"        assert string.length() \u003e 0 : \"string cannot be empty\";"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"        String[] fields \u003d string.split(\" \\\\| \");"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"        boolean isDone \u003d Boolean.valueOf(fields[1]);"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"        String description \u003d fields[2];"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"        return new TodoTask(description, isDone);"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"        String taskFormat \u003d \"[%s][%s] %s\";"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"        return String.format("},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"                taskFormat,"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"                this.getTypeIcon(),"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"                this.getStatusIcon(),"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"                this.description);"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"    protected String getTypeIcon() {"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"        return \"T\";"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":71}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.scene.text.Text?\u003e"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    \u003cText fx:id\u003d\"dialog\" fontSmoothingType\u003d\"LCD\" text\u003d\"Text\" wrappingWidth\u003d\"256.0\" /\u003e"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"kingsleykuan":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"kingsleykuan":19}},{"path":"src/test/java/owen/DateTimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"import owen.DateTime;"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"public class DateTimeTest {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"    public void parse_correctFormat_success() throws OwenException {"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"        DateTime dateTime \u003d DateTime.parse(\"1/1/2021 1400\");"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"January 1 2021 2:00 PM\", dateTime.toString());"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    public void parse_incorrectFormat_exception() {"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"            DateTime.parse(\"January 1 2021 2:00 PM\");"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nDate and time must be in DD/MM/YYYY HHMM format...\","},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"    public void isSoon_correctArgs_success() throws OwenException {"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        DateTime dateTime \u003d new DateTime(LocalDateTime.now().plusDays(10));"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(false, dateTime.isSoon(9));"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(true, dateTime.isSoon(11));"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":36}},{"path":"src/test/java/owen/OwenTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":"import owen.Owen;"},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"public class OwenTest {"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    public void todoCommand_correctFormat_success() throws OwenException {"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"        Owen owen \u003d new Owen();"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"todo test\");"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"Hoot hoot. I\u0027ve added this task:\\n\""},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"                + \"    [T][ ] test\\n\""},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"                + \"Now you have 1 tasks in the list.\";"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, owen.getResponse());"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"        owen.parseCommand(\"delete 1\");"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    public void eventCommand_correctFormat_success() throws OwenException {"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"        Owen owen \u003d new Owen();"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"event test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"Hoot hoot. I\u0027ve added this task:\\n\""},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"                + \"    [E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\\n\""},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"                + \"Now you have 1 tasks in the list.\";"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, owen.getResponse());"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        owen.parseCommand(\"delete 1\");"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"    public void deadlineCommand_correctFormat_success() throws OwenException {"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"        Owen owen \u003d new Owen();"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"Hoot hoot. I\u0027ve added this task:\\n\""},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"                + \"    [D][ ] test (by: January 1 2021 2:00 PM)\\n\""},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"                + \"Now you have 1 tasks in the list.\";"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, owen.getResponse());"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"        owen.parseCommand(\"delete 1\");"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"    public void listCommand_correctFormat_success() throws OwenException {"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"        Owen owen \u003d new Owen();"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"todo test\");"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"event test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"list\");"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"1. [T][ ] test\\n\""},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"                + \"2. [E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\\n\""},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"                + \"3. [D][ ] test (by: January 1 2021 2:00 PM)\";"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, owen.getResponse());"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"    public void doneCommand_correctFormat_success() throws OwenException {"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"        Owen owen \u003d new Owen();"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"todo test\");"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"event test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"done 2\");"},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"Hoot! I\u0027ve marked this task as done:\\n\""},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":"                + \"    [E][X] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\";"},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, owen.getResponse());"},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":"    public void deleteCommand_correctFormat_success() throws OwenException {"},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":"        Owen owen \u003d new Owen();"},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":89,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"todo test\");"},{"lineNumber":90,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"event test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":91,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":92,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":93,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 2\");"},{"lineNumber":94,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"Hoot. I\u0027ve removed this task:\\n\""},{"lineNumber":95,"author":{"gitId":"kingsleykuan"},"content":"                + \"    [E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\\n\""},{"lineNumber":96,"author":{"gitId":"kingsleykuan"},"content":"                + \"Now you have 2 tasks in the list.\";"},{"lineNumber":97,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, owen.getResponse());"},{"lineNumber":98,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":99,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":100,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":101,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":103,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"kingsleykuan"},"content":"    public void findCommand_correctFormat_success() throws OwenException {"},{"lineNumber":105,"author":{"gitId":"kingsleykuan"},"content":"        Owen owen \u003d new Owen();"},{"lineNumber":106,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":107,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"todo apple\");"},{"lineNumber":108,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"event orange /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":109,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"deadline app /by 1/1/2021 1400\");"},{"lineNumber":110,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":111,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"find app\");"},{"lineNumber":112,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"Hoot hoot here are the matching tasks in your list:\\n\""},{"lineNumber":113,"author":{"gitId":"kingsleykuan"},"content":"                + \"1. [T][ ] apple\\n\""},{"lineNumber":114,"author":{"gitId":"kingsleykuan"},"content":"                + \"3. [D][ ] app (by: January 1 2021 2:00 PM)\";"},{"lineNumber":115,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, owen.getResponse());"},{"lineNumber":116,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":117,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":118,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":119,"author":{"gitId":"kingsleykuan"},"content":"        owen \u003d owen.parseCommand(\"delete 1\");"},{"lineNumber":120,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":121}},{"path":"src/test/java/owen/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import owen.Parser;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":"import owen.command.Command;"},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"import owen.command.CommandType;"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"public class ParserTest {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"    public void parseCommand_knownCommand_success() throws OwenException {"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"        Command command \u003d Parser.parseCommand(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(CommandType.DEADLINE, command.getType());"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"test /by 1/1/2021 1400\", command.getArgs());"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"deadline test /by 1/1/2021 1400\", command.getOriginal());"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"    public void parseCommand_unknownCommand_exception() {"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"            Parser.parseCommand(\"test\");"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nI\u0027m sorry, but I don\u0027t know what that means...\","},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":31}},{"path":"src/test/java/owen/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import owen.task.DeadlineTask;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"public class DeadlineTaskTest {"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    public void parseTask_correctFormat_success() throws OwenException {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"test /by 1/1/2021 1400\");"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[D][ ] test (by: January 1 2021 2:00 PM)\", task.toString());"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"        task \u003d new DeadlineTask(\"test /by 01/01/2021 1400\");"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[D][ ] test (by: January 1 2021 2:00 PM)\", task.toString());"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"    public void parseTask_missingDateTime_exception() {"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"            new DeadlineTask(\"test\");"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nDeadline task must have a description and due date/time...\","},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"    public void parseTask_incorrectFormat_exception() {"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"            new DeadlineTask(\"test /by 2021-1-1 10pm\");"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nDate and time must be in DD/MM/YYYY HHMM format...\","},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"    public void markAsDone_markAsDone_success() throws OwenException {"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"test /by 1/1/2021 1400\");"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[D][ ] test (by: January 1 2021 2:00 PM)\", task.toString());"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"        task \u003d task.markAsDone();"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[D][X] test (by: January 1 2021 2:00 PM)\", task.toString());"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"    public void serialize_serialize_success() throws OwenException {"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"test /by 1/1/2021 1400\");"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"DEADLINE | false | test | 1/1/2021 1400\", task.serialize());"},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"    public void deserialize_correctFormat_success() throws OwenException {"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"        DeadlineTask task \u003d DeadlineTask.deserialize(\"DEADLINE | false | test | 1/1/2021 1400\");"},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[D][ ] test (by: January 1 2021 2:00 PM)\", task.toString());"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"    public void deserialize_incorrectFormat_exception() {"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"            DeadlineTask.deserialize(\"DEADLINE, false, test, 1/1/2021 1400\");"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":"        } catch (Exception exception) {"},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals(\"Index 1 out of bounds for length 1\", exception.getMessage());"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":73}},{"path":"src/test/java/owen/task/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import owen.task.EventTask;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"public class EventTaskTest {"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    public void parseTask_correctFormat_success() throws OwenException {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"        EventTask task \u003d new EventTask(\"test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals("},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"                \"[E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\","},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"                task.toString());"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"    public void parseTask_missingDateTime_exception() {"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"            new EventTask(\"test\");"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nEvent task must have a description and start/end time...\","},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"            new EventTask(\"test /at 1/1/2021 1400\");"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nBoth start and end date/time must be specified...\","},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"    public void parseTask_incorrectFormat_exception() {"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"            new EventTask(\"test /at 2021-1-1 8pm - 2021-1-1 10pm\");"},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nDate and time must be in DD/MM/YYYY HHMM format...\","},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"    public void markAsDone_markAsDone_success() throws OwenException {"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"        EventTask task \u003d new EventTask(\"test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals("},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"                \"[E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\","},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"                task.toString());"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"        task \u003d task.markAsDone();"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals("},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":"                \"[E][X] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\","},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"                task.toString());"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"    public void serialize_serialize_success() throws OwenException {"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"        EventTask task \u003d new EventTask(\"test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"EVENT | false | test | 1/1/2021 1400 | 1/1/2021 1600\", task.serialize());"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"    public void deserialize_correctFormat_success() throws OwenException {"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"        EventTask task \u003d EventTask.deserialize("},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"                \"EVENT | false | test | 1/1/2021 1400 | 1/1/2021 1600\");"},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals("},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"                \"[E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\","},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"                task.toString());"},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":"    public void deserialize_incorrectFormat_exception() {"},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":"            EventTask.deserialize(\"EVENT, false, test, 1/1/2021 1400, 1/1/2021 1600\");"},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":"        } catch (Exception exception) {"},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals(\"Index 1 out of bounds for length 1\", exception.getMessage());"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":88}},{"path":"src/test/java/owen/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import owen.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"public class TaskListTest {"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    public void addTask_correctFormat_success() throws OwenException {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"todo test\");"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"event test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"1. [T][ ] test\\n\""},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"                + \"2. [E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\\n\""},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"                + \"3. [D][ ] test (by: January 1 2021 2:00 PM)\";"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, taskList.toString());"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"    public void addTask_incorrectFormat_exception() {"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"            new TaskList().addTask(\"deadline test\");"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nDeadline task must have a description and due date/time...\","},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":"    public void addTask_unknownTaskType_exception() {"},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"            new TaskList().addTask(\"test\");"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nUnknown task type...\","},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":"    public void markAsDone_taskExists_success() throws OwenException {"},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"todo test\");"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"event test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.markAsDone(3);"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"1. [T][ ] test\\n\""},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"                + \"2. [E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\\n\""},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"                + \"3. [D][X] test (by: January 1 2021 2:00 PM)\";"},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, taskList.toString());"},{"lineNumber":59,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":61,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"kingsleykuan"},"content":"    public void markAsDone_taskNotExist_exception() {"},{"lineNumber":63,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"kingsleykuan"},"content":"            new TaskList().markAsDone(1);"},{"lineNumber":65,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":66,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals(\"Ooooo noo...\\nTask 1 does not exist...\", exception.getMessage());"},{"lineNumber":67,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":70,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"kingsleykuan"},"content":"    public void deleteTask_taskExists_success() throws OwenException {"},{"lineNumber":72,"author":{"gitId":"kingsleykuan"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":73,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"todo test\");"},{"lineNumber":74,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"event test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":75,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":76,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.deleteTask(2);"},{"lineNumber":77,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":78,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"1. [T][ ] test\\n\""},{"lineNumber":79,"author":{"gitId":"kingsleykuan"},"content":"                + \"2. [D][ ] test (by: January 1 2021 2:00 PM)\";"},{"lineNumber":80,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, taskList.toString());"},{"lineNumber":81,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":83,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"kingsleykuan"},"content":"    public void deleteTask_taskNotExist_exception() {"},{"lineNumber":85,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"kingsleykuan"},"content":"            new TaskList().deleteTask(1);"},{"lineNumber":87,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":88,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals(\"Ooooo noo...\\nTask 1 does not exist...\", exception.getMessage());"},{"lineNumber":89,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":92,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"kingsleykuan"},"content":"    public void serialize_serialize_success() throws OwenException {"},{"lineNumber":94,"author":{"gitId":"kingsleykuan"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":95,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"todo test\");"},{"lineNumber":96,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"event test /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":97,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"deadline test /by 1/1/2021 1400\");"},{"lineNumber":98,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":99,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"TODO | false | test\\n\""},{"lineNumber":100,"author":{"gitId":"kingsleykuan"},"content":"                + \"EVENT | false | test | 1/1/2021 1400 | 1/1/2021 1600\\n\""},{"lineNumber":101,"author":{"gitId":"kingsleykuan"},"content":"                + \"DEADLINE | false | test | 1/1/2021 1400\";"},{"lineNumber":102,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, taskList.serialize());"},{"lineNumber":103,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":105,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"kingsleykuan"},"content":"    public void deserializeTask_correctFormat_success() throws OwenException {"},{"lineNumber":107,"author":{"gitId":"kingsleykuan"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":108,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.deserializeTask(\"TODO | false | test\");"},{"lineNumber":109,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.deserializeTask(\"EVENT | false | test | 1/1/2021 1400 | 1/1/2021 1600\");"},{"lineNumber":110,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.deserializeTask(\"DEADLINE | false | test | 1/1/2021 1400\");"},{"lineNumber":111,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":112,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"1. [T][ ] test\\n\""},{"lineNumber":113,"author":{"gitId":"kingsleykuan"},"content":"                + \"2. [E][ ] test (at: January 1 2021 2:00 PM - January 1 2021 4:00 PM)\\n\""},{"lineNumber":114,"author":{"gitId":"kingsleykuan"},"content":"                + \"3. [D][ ] test (by: January 1 2021 2:00 PM)\";"},{"lineNumber":115,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, taskList.toString());"},{"lineNumber":116,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":118,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"kingsleykuan"},"content":"    public void findTask_taskExists_success() throws OwenException {"},{"lineNumber":120,"author":{"gitId":"kingsleykuan"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":121,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"todo apple\");"},{"lineNumber":122,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"event orange /at 1/1/2021 1400 - 01/01/2021 1600\");"},{"lineNumber":123,"author":{"gitId":"kingsleykuan"},"content":"        taskList \u003d taskList.addTask(\"deadline app /by 1/1/2021 1400\");"},{"lineNumber":124,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":125,"author":{"gitId":"kingsleykuan"},"content":"        String expected \u003d \"1. [T][ ] apple\\n\""},{"lineNumber":126,"author":{"gitId":"kingsleykuan"},"content":"                + \"3. [D][ ] app (by: January 1 2021 2:00 PM)\";"},{"lineNumber":127,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(expected, taskList.findTask(\"app\"));"},{"lineNumber":128,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":129}},{"path":"src/test/java/owen/task/TodoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kingsleykuan"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":3,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":4,"author":{"gitId":"kingsleykuan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":6,"author":{"gitId":"kingsleykuan"},"content":"import owen.OwenException;"},{"lineNumber":7,"author":{"gitId":"kingsleykuan"},"content":"import owen.task.TodoTask;"},{"lineNumber":8,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":9,"author":{"gitId":"kingsleykuan"},"content":"public class TodoTaskTest {"},{"lineNumber":10,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"kingsleykuan"},"content":"    public void parseTask_correctFormat_success() throws OwenException {"},{"lineNumber":12,"author":{"gitId":"kingsleykuan"},"content":"        TodoTask task \u003d new TodoTask(\"test\");"},{"lineNumber":13,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[T][ ] test\", task.toString());"},{"lineNumber":14,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":16,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"kingsleykuan"},"content":"    public void parseTask_incorrectFormat_exception() {"},{"lineNumber":18,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"kingsleykuan"},"content":"            new TodoTask(\"\");"},{"lineNumber":20,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":21,"author":{"gitId":"kingsleykuan"},"content":"        } catch (OwenException exception) {"},{"lineNumber":22,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals("},{"lineNumber":23,"author":{"gitId":"kingsleykuan"},"content":"                    \"Ooooo noo...\\nThe description of a todo cannot be empty...\","},{"lineNumber":24,"author":{"gitId":"kingsleykuan"},"content":"                    exception.getMessage());"},{"lineNumber":25,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":28,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"kingsleykuan"},"content":"    public void markAsDone_markAsDone_success() throws OwenException {"},{"lineNumber":30,"author":{"gitId":"kingsleykuan"},"content":"        TodoTask task \u003d new TodoTask(\"test\");"},{"lineNumber":31,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[T][ ] test\", task.toString());"},{"lineNumber":32,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":33,"author":{"gitId":"kingsleykuan"},"content":"        task \u003d task.markAsDone();"},{"lineNumber":34,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[T][X] test\", task.toString());"},{"lineNumber":35,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":37,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"kingsleykuan"},"content":"    public void serialize_serialize_success() throws OwenException {"},{"lineNumber":39,"author":{"gitId":"kingsleykuan"},"content":"        TodoTask task \u003d new TodoTask(\"test\");"},{"lineNumber":40,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"TODO | false | test\", task.serialize());"},{"lineNumber":41,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":43,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"kingsleykuan"},"content":"    public void deserialize_correctFormat_success() throws OwenException {"},{"lineNumber":45,"author":{"gitId":"kingsleykuan"},"content":"        TodoTask task \u003d TodoTask.deserialize(\"TODO | false | test\");"},{"lineNumber":46,"author":{"gitId":"kingsleykuan"},"content":"        assertEquals(\"[T][ ] test\", task.toString());"},{"lineNumber":47,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"kingsleykuan"},"content":""},{"lineNumber":49,"author":{"gitId":"kingsleykuan"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"kingsleykuan"},"content":"    public void deserialize_incorrectFormat_exception() {"},{"lineNumber":51,"author":{"gitId":"kingsleykuan"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"kingsleykuan"},"content":"            TodoTask.deserialize(\"TODO, false, test\");"},{"lineNumber":53,"author":{"gitId":"kingsleykuan"},"content":"            fail();"},{"lineNumber":54,"author":{"gitId":"kingsleykuan"},"content":"        } catch (Exception exception) {"},{"lineNumber":55,"author":{"gitId":"kingsleykuan"},"content":"            assertEquals(\"Index 1 out of bounds for length 1\", exception.getMessage());"},{"lineNumber":56,"author":{"gitId":"kingsleykuan"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"kingsleykuan"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"kingsleykuan"},"content":"}"}],"authorContributionMap":{"kingsleykuan":58}}]
