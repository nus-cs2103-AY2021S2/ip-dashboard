[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"T|0|exam"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":"D|0|exam|2020-09-09"},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"E|0|exm|2020-09-08"}],"authorContributionMap":{"lrj689":3}},{"path":"src/main/java/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"public class Deadlines extends Task {"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"    private final LocalDate deadline;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"    public Deadlines(String name, LocalDate deadline) {"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"        super(name);"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"    public Deadlines(String name, LocalDate deadline, boolean isDone) {"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"        super(name, isDone);"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"     * Returns the deadline of the task as a LocalDate Object"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"     * @return LocalDate object"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"    public LocalDate getBy() {"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"        return deadline;"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":30}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":" * Start point of Duke"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":" * Initializes DUke and starts the interaction with user"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"    private DukeList list;"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"    private UI ui;"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"    public static void main(String[] args)  {"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"       new Duke(\"data/duke.txt\").run();"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"    public Duke(String filePath)  {"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"        ui \u003d new UI();"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"            list \u003d new DukeList(storage.load());"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"            list \u003d new DukeList();"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"     * Runs the program until termination is called"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"    public void run()  {"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"        ui.WelcomeMessage();"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"        ui.showDivider();"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"        while (!ui.getIsExit()) {"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"                ui.commandMessage(Parser.parse(fullCommand, list), list);"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"                ui.showMissingArgsError();"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"            } catch (NumberFormatException | DateTimeParseException | IndexOutOfBoundsException e) {"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"                ui.showWrongArgsError();"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"            ui.showDivider();"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"        storage.save(list);"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"        ui.GoodByeMessage();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lrj689":45,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"    public DukeException(Exception e) {"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":6}},{"path":"src/main/java/DukeList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":" * Custom arraylist for task objects"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"public class DukeList {"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"    private ArrayList\u003cTask\u003e list;"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"    private int size;"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"    public DukeList() {"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"        this.size \u003d 0;"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"    public DukeList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"        this.list \u003d list;"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"        size \u003d list.size();"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"     * add task into the list"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"     * @param item Task item"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"    public void add(Task item) {"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"        list.add(item);"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"        size++;"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"     * mark task as done"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"     * @param x task number"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"    public void markAsDone(int x) {"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"        list.get(x).markAsDone();"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"     * deletes the stated task"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"     * @param x Task number to be removed"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"    public void delete(int x) {"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"        list.remove(x);"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"        size--;"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"    public void deleteAll() {"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"        for (int i \u003d size - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"            list.remove(i);"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"        size \u003d 0;"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"    public int getSize() {"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":"        return size;"},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"     * DukeList getter"},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"     * @param x Task number x"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"     * @return Task x"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"lrj689"},"content":"    public Task get(int x) {"},{"lineNumber":64,"author":{"gitId":"lrj689"},"content":"        return list.get(x);"},{"lineNumber":65,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":67}},{"path":"src/main/java/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"public class Events extends Task {"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"    private final LocalDate duration;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"    public Events(String name, LocalDate duration) {"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"        super(name);"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"        this.duration \u003d duration;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"    public Events(String name, LocalDate duration, boolean isDone) {"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"        super(name, isDone);"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"        this.duration \u003d duration;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"     * Returns the duration of the event as a LocalDate object"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"     * @return LocalDate Object"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"    public LocalDate getDuration() {"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"        return duration;"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + duration.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":31}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"public class Parser {"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"     * Returns a String which will guide the UI to output appropriate user texts"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"     * @param fullCommand String of the user input"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"     * @param list DukeList object in use"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"     * @return String"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"    public static String[] parse(String fullCommand, DukeList list) {"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"        String[] commandStringArr \u003d fullCommand.split(\" \", 2);"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"        switch (commandStringArr[0]) {"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"        case \"done\":"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"            int taskNumberDone \u003d Integer.parseInt(commandStringArr[1]) - 1;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"            list.markAsDone(taskNumberDone);"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"            commandStringArr[1] \u003d list.get(taskNumberDone).toString();"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"            return commandStringArr;"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"        case \"delete\":"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"            int taskNumberToDelete \u003d Integer.parseInt(commandStringArr[1]) - 1;"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"            commandStringArr[1] \u003d list.get(taskNumberToDelete).toString();"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"            list.delete(taskNumberToDelete);"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"            return commandStringArr;"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"        case \"todo\":"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"            ToDos todo \u003d new ToDos(commandStringArr[1]);"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"            list.add(todo);"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"            commandStringArr[1] \u003d todo.toString();"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"            return commandStringArr;"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"        case \"deadline\":"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"            String[] deadlineParamArr \u003d commandStringArr[1].split(\" /by \");"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"            LocalDate deadlineDate \u003d LocalDate.parse(deadlineParamArr[1]);"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"            Deadlines deadline \u003d new Deadlines(deadlineParamArr[0], deadlineDate);"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"            list.add(deadline);"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"            commandStringArr[1] \u003d deadline.toString();"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"            return commandStringArr;"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"        case \"event\":"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"            String[] eventParamArr \u003d commandStringArr[1].split(\" /at \");"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"            LocalDate eventDate \u003d LocalDate.parse(eventParamArr[1]);"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"            Events event \u003d new Events(eventParamArr[0], eventDate);"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"            list.add(event);"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"            commandStringArr[1] \u003d event.toString();"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"            return commandStringArr;"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"        case \"reset\":"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"            list.deleteAll();"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"            return commandStringArr;"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"            return commandStringArr;"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":50}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":" * Deals with saving and loading DukeList from duke.txt"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"    private final String filePath;"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"    private final File file;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"     * Creates file object, creates the directory and file if either cannot be found"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"     * @param filePath String of the relative path"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"    public Storage(String filePath) {"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"        this.file \u003d new File(filePath);"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"        if (!file.exists()) {"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"            File dataFile \u003d new File(\"data\");"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"            if (!dataFile.exists()) {"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"                dataFile.mkdir();"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"            try {"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"                file.createNewFile();"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"            } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"                System.out.println(\"Error occurred when trying to create save file\");"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"     * saves contents of DukeList into Duke.txt file"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"     * @param list DukeList object"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"    public void save(DukeList list) {"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"            for (int i \u003d 0; i \u003c list.getSize(); i++) {"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"                Task curr \u003d list.get(i);"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"                if (curr instanceof ToDos) {"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"                    if (curr.isTaskDone()) {"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"                        fw.write(\"T|1|\" + curr.getTaskName() + \"\\n\");"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"                    } else {"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"                        fw.write(\"T|0|\" + curr.getTaskName() + \"\\n\");"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"                    }"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"                } else if (curr instanceof Events) {"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":"                    if (curr.isTaskDone()) {"},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"                        fw.write(\"E|1|\" + curr.getTaskName() + \"|\" + ((Events) curr).getDuration() + \"\\n\");"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":"                    } else {"},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"                        fw.write(\"E|0|\" + curr.getTaskName() + \"|\" + ((Events) curr).getDuration() + \"\\n\");"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":"                    }"},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"                } else {"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"                    if (curr.isTaskDone()) {"},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"                        fw.write(\"D|1|\" + curr.getTaskName() + \"|\" + ((Deadlines) curr).getBy() + \"\\n\");"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"                    } else {"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"                        fw.write(\"D|0|\" + curr.getTaskName() + \"|\" + ((Deadlines) curr).getBy() + \"\\n\");"},{"lineNumber":63,"author":{"gitId":"lrj689"},"content":"                    }"},{"lineNumber":64,"author":{"gitId":"lrj689"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":"            fw.close();"},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitId":"lrj689"},"content":"            System.out.println(\"Error occurred when trying to save file\");"},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":"     * Returns an ArrayList to be passed as an argument for DukeList constructor"},{"lineNumber":74,"author":{"gitId":"lrj689"},"content":"     * @return an ArrayList of Task"},{"lineNumber":75,"author":{"gitId":"lrj689"},"content":"     * @throws FileNotFoundException if file duke.txt is not found"},{"lineNumber":76,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"lrj689"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"},{"lineNumber":78,"author":{"gitId":"lrj689"},"content":"        Scanner s \u003d new Scanner(file);"},{"lineNumber":79,"author":{"gitId":"lrj689"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":"        while (s.hasNextLine()) {"},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"            String curr \u003d s.nextLine();"},{"lineNumber":82,"author":{"gitId":"lrj689"},"content":"            String[] currArray \u003d curr.split(\"\\\\|\");"},{"lineNumber":83,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":84,"author":{"gitId":"lrj689"},"content":"            if (currArray[0].equals(\"T\")) {"},{"lineNumber":85,"author":{"gitId":"lrj689"},"content":"                ToDos currTask;"},{"lineNumber":86,"author":{"gitId":"lrj689"},"content":"                if (currArray[1].equals(\"0\")) {"},{"lineNumber":87,"author":{"gitId":"lrj689"},"content":"                    currTask \u003d new ToDos(currArray[2]);"},{"lineNumber":88,"author":{"gitId":"lrj689"},"content":"                } else {"},{"lineNumber":89,"author":{"gitId":"lrj689"},"content":"                    currTask \u003d new ToDos(currArray[2], true);"},{"lineNumber":90,"author":{"gitId":"lrj689"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"lrj689"},"content":"                list.add(currTask);"},{"lineNumber":92,"author":{"gitId":"lrj689"},"content":"            } else if (currArray[0].equals(\"D\")) {"},{"lineNumber":93,"author":{"gitId":"lrj689"},"content":"                Deadlines currTask;"},{"lineNumber":94,"author":{"gitId":"lrj689"},"content":"                if (currArray[1].equals(\"0\")) {"},{"lineNumber":95,"author":{"gitId":"lrj689"},"content":"                    currTask \u003d new Deadlines(currArray[2], LocalDate.parse(currArray[3]));"},{"lineNumber":96,"author":{"gitId":"lrj689"},"content":"                } else {"},{"lineNumber":97,"author":{"gitId":"lrj689"},"content":"                    currTask \u003d new Deadlines(currArray[2], LocalDate.parse(currArray[3]), true);"},{"lineNumber":98,"author":{"gitId":"lrj689"},"content":"                }"},{"lineNumber":99,"author":{"gitId":"lrj689"},"content":"                list.add(currTask);"},{"lineNumber":100,"author":{"gitId":"lrj689"},"content":"            } else if (currArray[0].equals(\"E\")) {"},{"lineNumber":101,"author":{"gitId":"lrj689"},"content":"                Events currTask;"},{"lineNumber":102,"author":{"gitId":"lrj689"},"content":"                if (currArray[1].equals(\"0\")) {"},{"lineNumber":103,"author":{"gitId":"lrj689"},"content":"                    currTask \u003d new Events(currArray[2], LocalDate.parse(currArray[3]));"},{"lineNumber":104,"author":{"gitId":"lrj689"},"content":"                } else {"},{"lineNumber":105,"author":{"gitId":"lrj689"},"content":"                    currTask \u003d new Events(currArray[2], LocalDate.parse(currArray[3]), true);"},{"lineNumber":106,"author":{"gitId":"lrj689"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"lrj689"},"content":"                list.add(currTask);"},{"lineNumber":108,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"lrj689"},"content":"        return list;"},{"lineNumber":111,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":112}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"     * Task class stores a String as name of the task and boolean indicating task completion"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"    private final String taskName;"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"    private boolean isDone;"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"    public Task(String name) {"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"        this.taskName \u003d name;"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"        this.isDone \u003d false;"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"    public Task(String name, boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"        this.taskName \u003d name;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"     * Mark the task as done"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"    public void markAsDone() {"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"        isDone \u003d true;"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"     * Returns boolean of the completion of the task"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"     * @return"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"    public boolean isTaskDone() {"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"        return isDone;"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"     * Returns the name of the task as a string"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":"     * @return taskName"},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"    public String getTaskName() {"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"        return taskName;"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"        if (isDone) {"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"            return \"[X] \" + taskName;"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"            return \"[ ] \" + taskName;"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":50}},{"path":"src/main/java/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"public class ToDos extends Task {"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"    public ToDos(String name) {"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"        super(name);"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"    public ToDos(String name, boolean isDone) {"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"        super(name, isDone);"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":15}},{"path":"src/main/java/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":" * Deals with User interactions, reads user inputs and outputs text"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"public class UI {"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"    private static final String WELCOME_MESSAGE \u003d  \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\""},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"            + \"\\nHello! I\u0027m Duke\\nWhat can I do for you today?\";"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"    private static final String GOODBYE_MESSAGE \u003d \"Good bye! Stay calm and keep coding o7\";"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"    private static final String LS \u003d System.lineSeparator();"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"    private final Scanner in;"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"    private boolean isExit;"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"    public UI() {"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"        this.in \u003d new Scanner(System.in);"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"        this.isExit \u003d false;"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"     * Output welcome message"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"    public void WelcomeMessage() {"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"        showToUser(DIVIDER + LS + WELCOME_MESSAGE);"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":30,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lrj689"},"content":"     * Output goodbye message"},{"lineNumber":32,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lrj689"},"content":"    public void GoodByeMessage() {"},{"lineNumber":34,"author":{"gitId":"lrj689"},"content":"        showToUser(GOODBYE_MESSAGE + LS + DIVIDER);"},{"lineNumber":35,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":37,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":38,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"lrj689"},"content":"     * reads parsed commands to output appropriate response to user"},{"lineNumber":40,"author":{"gitId":"lrj689"},"content":"     * @param commandAndParams string arr containing a string command and a string of parameter Parser"},{"lineNumber":41,"author":{"gitId":"lrj689"},"content":"     * @param list DukeList object"},{"lineNumber":42,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lrj689"},"content":"    public void commandMessage(String[] commandAndParams, DukeList list) {"},{"lineNumber":44,"author":{"gitId":"lrj689"},"content":"        switch(commandAndParams[0]) {"},{"lineNumber":45,"author":{"gitId":"lrj689"},"content":"        case \"done\":"},{"lineNumber":46,"author":{"gitId":"lrj689"},"content":"            doneMessage(commandAndParams[1]);"},{"lineNumber":47,"author":{"gitId":"lrj689"},"content":"            showNoOfTaskLeft(list);"},{"lineNumber":48,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"lrj689"},"content":"        case \"delete\":"},{"lineNumber":50,"author":{"gitId":"lrj689"},"content":"            deleteMessage(commandAndParams[1]);"},{"lineNumber":51,"author":{"gitId":"lrj689"},"content":"            showNoOfTaskLeft(list);"},{"lineNumber":52,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"lrj689"},"content":"        case \"reset\":"},{"lineNumber":54,"author":{"gitId":"lrj689"},"content":"            resetMessage();"},{"lineNumber":55,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"lrj689"},"content":"        case \"show\":"},{"lineNumber":57,"author":{"gitId":"lrj689"},"content":"            showMessage(list, commandAndParams[1]);"},{"lineNumber":58,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"lrj689"},"content":"        case \"todo\":"},{"lineNumber":60,"author":{"gitId":"lrj689"},"content":"        case \"event\":"},{"lineNumber":61,"author":{"gitId":"lrj689"},"content":"        case \"deadline\":"},{"lineNumber":62,"author":{"gitId":"lrj689"},"content":"            addTaskMessage(commandAndParams[1]);"},{"lineNumber":63,"author":{"gitId":"lrj689"},"content":"            showNoOfTaskLeft(list);"},{"lineNumber":64,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":65,"author":{"gitId":"lrj689"},"content":"        case \"list\":"},{"lineNumber":66,"author":{"gitId":"lrj689"},"content":"            listMessage(list);"},{"lineNumber":67,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":68,"author":{"gitId":"lrj689"},"content":"        case \"find\":"},{"lineNumber":69,"author":{"gitId":"lrj689"},"content":"            findMessage(list, commandAndParams[1]);"},{"lineNumber":70,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":71,"author":{"gitId":"lrj689"},"content":"        case \"bye\":"},{"lineNumber":72,"author":{"gitId":"lrj689"},"content":"            isExit \u003d true;"},{"lineNumber":73,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":74,"author":{"gitId":"lrj689"},"content":"        default:"},{"lineNumber":75,"author":{"gitId":"lrj689"},"content":"            unknownCommandMessage();"},{"lineNumber":76,"author":{"gitId":"lrj689"},"content":"            break;"},{"lineNumber":77,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":80,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"lrj689"},"content":"     * Output all tasks in DukeList object"},{"lineNumber":82,"author":{"gitId":"lrj689"},"content":"     * @param list DukeList object"},{"lineNumber":83,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"lrj689"},"content":"    private void findMessage(DukeList list, String keyword) {"},{"lineNumber":85,"author":{"gitId":"lrj689"},"content":"        int size \u003d list.getSize();"},{"lineNumber":86,"author":{"gitId":"lrj689"},"content":"        int counter \u003d 1;"},{"lineNumber":87,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Here are tasks matching the keyword provided\");"},{"lineNumber":88,"author":{"gitId":"lrj689"},"content":"        for (int i \u003d 0; i \u003c size; i++) {"},{"lineNumber":89,"author":{"gitId":"lrj689"},"content":"            if (list.get(i).getTaskName().contains(keyword)) {"},{"lineNumber":90,"author":{"gitId":"lrj689"},"content":"                showToUser((counter) + \".\" + list.get(i));"},{"lineNumber":91,"author":{"gitId":"lrj689"},"content":"                counter++;"},{"lineNumber":92,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":96,"author":{"gitId":"lrj689"},"content":"    public void listMessage(DukeList list) {"},{"lineNumber":97,"author":{"gitId":"lrj689"},"content":"        int size \u003d list.getSize();"},{"lineNumber":98,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Here are your task!\");"},{"lineNumber":99,"author":{"gitId":"lrj689"},"content":"        for (int i \u003d 0; i \u003c size; i++) {"},{"lineNumber":100,"author":{"gitId":"lrj689"},"content":"            showToUser((i + 1) + \".\" + list.get(i));"},{"lineNumber":101,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":104,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"lrj689"},"content":"     * Output message for \"done\" command"},{"lineNumber":106,"author":{"gitId":"lrj689"},"content":"     * @param taskName String of the task name"},{"lineNumber":107,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"lrj689"},"content":"    public void doneMessage(String taskName) {"},{"lineNumber":109,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Good job! The following task has been marked as done:\\n\" + taskName);"},{"lineNumber":110,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":112,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"lrj689"},"content":"     * Output message for \"delete\" command"},{"lineNumber":114,"author":{"gitId":"lrj689"},"content":"     * @param taskName String of the task name"},{"lineNumber":115,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"lrj689"},"content":"    public void deleteMessage(String taskName) {"},{"lineNumber":117,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Got it! The following task has been deleted:\\n\" + taskName);"},{"lineNumber":118,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"lrj689"},"content":"     * Output message for \"reset\" command"},{"lineNumber":121,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"lrj689"},"content":"    public void resetMessage() {"},{"lineNumber":123,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Got it! All tasks have been deleted\");"},{"lineNumber":124,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":126,"author":{"gitId":"lrj689"},"content":"    public void showMessage(DukeList list, String dateStr) {"},{"lineNumber":127,"author":{"gitId":"lrj689"},"content":"        LocalDate date \u003d LocalDate.parse(dateStr);"},{"lineNumber":128,"author":{"gitId":"lrj689"},"content":"        int counter \u003d 1;"},{"lineNumber":129,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Here are your task on \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":130,"author":{"gitId":"lrj689"},"content":"        for (int i \u003d 0; i \u003c list.getSize(); i++) {"},{"lineNumber":131,"author":{"gitId":"lrj689"},"content":"            Task curr \u003d list.get(i);"},{"lineNumber":132,"author":{"gitId":"lrj689"},"content":"            if (curr instanceof Deadlines) {"},{"lineNumber":133,"author":{"gitId":"lrj689"},"content":"                if (((Deadlines) curr).getBy().equals(date)) {"},{"lineNumber":134,"author":{"gitId":"lrj689"},"content":"                    showToUser(counter + \".\" + curr);"},{"lineNumber":135,"author":{"gitId":"lrj689"},"content":"                    counter++;"},{"lineNumber":136,"author":{"gitId":"lrj689"},"content":"                }"},{"lineNumber":137,"author":{"gitId":"lrj689"},"content":"            } else if (curr instanceof Events) {"},{"lineNumber":138,"author":{"gitId":"lrj689"},"content":"                if (((Events) curr).getDuration().equals(date)) {"},{"lineNumber":139,"author":{"gitId":"lrj689"},"content":"                    showToUser(counter + \".\" + curr);"},{"lineNumber":140,"author":{"gitId":"lrj689"},"content":"                    counter++;"},{"lineNumber":141,"author":{"gitId":"lrj689"},"content":"                }"},{"lineNumber":142,"author":{"gitId":"lrj689"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"lrj689"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":146,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"lrj689"},"content":"     * Output message after \"todo\" or \"deadline\" or \"event\" command"},{"lineNumber":148,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"lrj689"},"content":"    public void addTaskMessage(String taskStr) {"},{"lineNumber":150,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Got it! The following task has been added:\\n\" + taskStr );"},{"lineNumber":151,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":153,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"lrj689"},"content":"     * Output message and the number of items in DukeList object"},{"lineNumber":155,"author":{"gitId":"lrj689"},"content":"     * @param list DukeList object"},{"lineNumber":156,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"lrj689"},"content":"    public void showNoOfTaskLeft(DukeList list) {"},{"lineNumber":158,"author":{"gitId":"lrj689"},"content":"        showToUser(\"\\nYou have \" + list.getSize() + \" Task(s) left in the list\");"},{"lineNumber":159,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":161,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"lrj689"},"content":"     * Output message when an unknown command is received"},{"lineNumber":163,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"lrj689"},"content":"    public void unknownCommandMessage() {"},{"lineNumber":165,"author":{"gitId":"lrj689"},"content":"        showToUser(\"I\u0027m sorry, I do not know what that means\");"},{"lineNumber":166,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":168,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"lrj689"},"content":"     * reads the next line of user input"},{"lineNumber":170,"author":{"gitId":"lrj689"},"content":"     * @return String of user input"},{"lineNumber":171,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"lrj689"},"content":"    public String readCommand() {"},{"lineNumber":173,"author":{"gitId":"lrj689"},"content":"        return in.nextLine();"},{"lineNumber":174,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":176,"author":{"gitId":"lrj689"},"content":"    public void showDivider() {"},{"lineNumber":177,"author":{"gitId":"lrj689"},"content":"        showToUser(DIVIDER + LS);"},{"lineNumber":178,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":180,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"lrj689"},"content":"     * Output error message when ArrayIndexOutOfBoundsException is caught"},{"lineNumber":182,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"lrj689"},"content":"    public void showMissingArgsError() {"},{"lineNumber":184,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Error! Your command has missing argument(s)!\\nTry Again!\");"},{"lineNumber":185,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":187,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"lrj689"},"content":"     * Output error message when NumberFormatException | DateTimeParseException | IndexOutOfBoundsException is caught"},{"lineNumber":189,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"lrj689"},"content":"    public void showWrongArgsError() {"},{"lineNumber":191,"author":{"gitId":"lrj689"},"content":"        showToUser(\"Error! Your command has invalid argument(s)!\\nTry Again!\");"},{"lineNumber":192,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":194,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"lrj689"},"content":"     * prints the string parameter"},{"lineNumber":196,"author":{"gitId":"lrj689"},"content":"     * @param message string of message"},{"lineNumber":197,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"lrj689"},"content":"    public void showToUser(String message) {"},{"lineNumber":199,"author":{"gitId":"lrj689"},"content":"        System.out.println(message);"},{"lineNumber":200,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":202,"author":{"gitId":"lrj689"},"content":"    /**"},{"lineNumber":203,"author":{"gitId":"lrj689"},"content":"     * signals whether \"bye command has been called\""},{"lineNumber":204,"author":{"gitId":"lrj689"},"content":"     * @return boolean"},{"lineNumber":205,"author":{"gitId":"lrj689"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"lrj689"},"content":"    public boolean getIsExit() {"},{"lineNumber":207,"author":{"gitId":"lrj689"},"content":"        return isExit;"},{"lineNumber":208,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":209}},{"path":"src/test/java/DukeListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"public class DukeListTest {"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"    public void addTest() {"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"        DukeList list \u003d new DukeList();"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"        list.add(new ToDos(\"Live\"));"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"        assertEquals(1 , list.getSize());"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"    public void deleteTest() {"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"        DukeList list \u003d new DukeList();"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"        list.add(new ToDos(\"a\"));"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"        list.add(new ToDos(\"b\"));"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"        list.deleteAll();"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"        assertEquals(0, list.getSize());"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":20}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"public class DukeTest {"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"    @Test"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"    public void dummyTest() {"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"        assertEquals(2, 2);"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":10}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"    public void doneCommandTest() {"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"        assertEquals(Parser.parse(\"reset\", new DukeList()), \"reset\");"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"    public void byeCommandTest() {"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"        assertEquals(Parser.parse(\"bye\", new DukeList()), \"bye\");"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":""},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"    public void deadLineCommandTest() {"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"        assertEquals(Parser.parse(\"bysd\", new DukeList()), \"unknown\");"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"}"}],"authorContributionMap":{"lrj689":20}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lrj689"},"content":"todo go work"},{"lineNumber":2,"author":{"gitId":"lrj689"},"content":"todo sleep"},{"lineNumber":3,"author":{"gitId":"lrj689"},"content":"deadline go school /by 2021-02-02"},{"lineNumber":4,"author":{"gitId":"lrj689"},"content":"deadline cook dinner /by 2022-05-05"},{"lineNumber":5,"author":{"gitId":"lrj689"},"content":"event exam /at 2021-02-02"},{"lineNumber":6,"author":{"gitId":"lrj689"},"content":"deadline exam in school /by 2022-09-09"},{"lineNumber":7,"author":{"gitId":"lrj689"},"content":"find exam"},{"lineNumber":8,"author":{"gitId":"lrj689"},"content":"find school"},{"lineNumber":9,"author":{"gitId":"lrj689"},"content":"find sex"},{"lineNumber":10,"author":{"gitId":"lrj689"},"content":"list"},{"lineNumber":11,"author":{"gitId":"lrj689"},"content":"done 1"},{"lineNumber":12,"author":{"gitId":"lrj689"},"content":"done 2"},{"lineNumber":13,"author":{"gitId":"lrj689"},"content":"done 3"},{"lineNumber":14,"author":{"gitId":"lrj689"},"content":"delete 2"},{"lineNumber":15,"author":{"gitId":"lrj689"},"content":"list"},{"lineNumber":16,"author":{"gitId":"lrj689"},"content":"show 2021-02-02"},{"lineNumber":17,"author":{"gitId":"lrj689"},"content":"show 2222-2-2"},{"lineNumber":18,"author":{"gitId":"lrj689"},"content":"show 2022-05-05"},{"lineNumber":19,"author":{"gitId":"lrj689"},"content":"sdf"},{"lineNumber":20,"author":{"gitId":"lrj689"},"content":"dfadf"},{"lineNumber":21,"author":{"gitId":"lrj689"},"content":"todo"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"done"},{"lineNumber":23,"author":{"gitId":"lrj689"},"content":"done done"},{"lineNumber":24,"author":{"gitId":"lrj689"},"content":"show 9999999"},{"lineNumber":25,"author":{"gitId":"lrj689"},"content":"deadline go home"},{"lineNumber":26,"author":{"gitId":"lrj689"},"content":"event sleep /by"},{"lineNumber":27,"author":{"gitId":"lrj689"},"content":"reset"},{"lineNumber":28,"author":{"gitId":"lrj689"},"content":"bye"}],"authorContributionMap":{"lrj689":28}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"lrj689"},"content":"PAUSE"}],"authorContributionMap":{"lrj689":1,"-":21}}]
