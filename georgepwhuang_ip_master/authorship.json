[{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"import blarb.Blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * Main Class of Execution for IP."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"public class Main {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"     * Main method for execution."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"     * @param args Relative filepath to storage file. (Optional)"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"        Blarb blarb;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"        if (args.length \u003e 0) {"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"            blarb \u003d new Blarb(args[0]);"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"            blarb \u003d new Blarb();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"        blarb.run();"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"}"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":""}],"authorContributionMap":{"georgepwhuang":20,"-":2}},{"path":"src/main/java/blarb/Blarb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.util.InputMismatchException;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":" * {@code Blarb} is the chat bot in used in the {@code Main} program."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"public class Blarb {"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    private final Tasklist tasklist;"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"    private final String filePath;"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    private final Ui ui;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    private final Storage storage;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes Blarb with a given storage path."},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * @param filePath The storage file path"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    public Blarb(String filePath) {"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"        tasklist \u003d new Tasklist();"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"        ui.rollCredits();"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"            tasklist.addAll(storage.load());"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException ex) {"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"            ui.warn(\"Cannot initialize task list from storage.\");"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        } catch (InputMismatchException ex) {"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"            ui.warn(\"File is corrupted. Cannot initialize task list.\");"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        } finally {"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"            ui.blurt(\"This is BLARB.\\nYou may speak.\");"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes Blarb."},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"    public Blarb() {"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"        this(\"data/tasklist.txt\");"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    public void run() {"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"        boolean active \u003d true;"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"        while (active \u0026\u0026 ui.isAvailable()) {"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"            active \u003d execute(ui.read());"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"     * Determines course of action for Blurb."},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"     * @param input The inputted command."},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"     * @return A boolean value that shows the availability for the next command intake."},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"    public boolean execute(String input) {"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"        CommandLine cml \u003d Parser.parse(input);"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"        switch (cml.command) {"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"        case DONE:"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"            try {"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"                int index \u003d Integer.parseInt(cml.description) - 1;"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"                try {"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"                    String output \u003d tasklist.done(index);"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"                    try {"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"                        storage.refile(tasklist);"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"                    } catch (IOException ex) {"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"                        ui.warn(\"Cannot access storage.\");"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"                    }"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(output);"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"                } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(\"There is no such task.\");"},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":"            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(\"What have you done! More specific!\");"},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":"            } catch (NumberFormatException ex) {"},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(\"Done what now? I don\u0027t understand\");"},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":83,"author":{"gitId":"georgepwhuang"},"content":"        case DELETE:"},{"lineNumber":84,"author":{"gitId":"georgepwhuang"},"content":"            try {"},{"lineNumber":85,"author":{"gitId":"georgepwhuang"},"content":"                int index \u003d Integer.parseInt(cml.description) - 1;"},{"lineNumber":86,"author":{"gitId":"georgepwhuang"},"content":"                try {"},{"lineNumber":87,"author":{"gitId":"georgepwhuang"},"content":"                    String output \u003d tasklist.delete(index);"},{"lineNumber":88,"author":{"gitId":"georgepwhuang"},"content":"                    try {"},{"lineNumber":89,"author":{"gitId":"georgepwhuang"},"content":"                        storage.refile(tasklist);"},{"lineNumber":90,"author":{"gitId":"georgepwhuang"},"content":"                    } catch (IOException ex) {"},{"lineNumber":91,"author":{"gitId":"georgepwhuang"},"content":"                        ui.warn(\"Cannot access storage.\");"},{"lineNumber":92,"author":{"gitId":"georgepwhuang"},"content":"                    }"},{"lineNumber":93,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(output);"},{"lineNumber":94,"author":{"gitId":"georgepwhuang"},"content":"                } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":95,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(\"There is no such task.\");"},{"lineNumber":96,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"georgepwhuang"},"content":"            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":98,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(\"What do you want to hide?\");"},{"lineNumber":99,"author":{"gitId":"georgepwhuang"},"content":"            } catch (NumberFormatException ex) {"},{"lineNumber":100,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(\"You can\u0027t delete your past.\");"},{"lineNumber":101,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":103,"author":{"gitId":"georgepwhuang"},"content":"        case TODO:"},{"lineNumber":104,"author":{"gitId":"georgepwhuang"},"content":"            try {"},{"lineNumber":105,"author":{"gitId":"georgepwhuang"},"content":"                if (cml.isSingleCommand()) {"},{"lineNumber":106,"author":{"gitId":"georgepwhuang"},"content":"                    throw new InputMismatchException();"},{"lineNumber":107,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":108,"author":{"gitId":"georgepwhuang"},"content":"                Task task \u003d new ToDo(cml.description);"},{"lineNumber":109,"author":{"gitId":"georgepwhuang"},"content":"                String output \u003d tasklist.add(task);"},{"lineNumber":110,"author":{"gitId":"georgepwhuang"},"content":"                try {"},{"lineNumber":111,"author":{"gitId":"georgepwhuang"},"content":"                    storage.file(task);"},{"lineNumber":112,"author":{"gitId":"georgepwhuang"},"content":"                } catch (IOException ex) {"},{"lineNumber":113,"author":{"gitId":"georgepwhuang"},"content":"                    ui.warn(\"Cannot access storage.\");"},{"lineNumber":114,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":115,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(output);"},{"lineNumber":116,"author":{"gitId":"georgepwhuang"},"content":"            } catch (InputMismatchException ex) {"},{"lineNumber":117,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(\"Todo what?\");"},{"lineNumber":118,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":120,"author":{"gitId":"georgepwhuang"},"content":"        case DEADLINE:"},{"lineNumber":121,"author":{"gitId":"georgepwhuang"},"content":"            try {"},{"lineNumber":122,"author":{"gitId":"georgepwhuang"},"content":"                if (cml.isSingleCommand()) {"},{"lineNumber":123,"author":{"gitId":"georgepwhuang"},"content":"                    throw new InputMismatchException();"},{"lineNumber":124,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":125,"author":{"gitId":"georgepwhuang"},"content":"                String[] fragments \u003d cml.description.split(\" /by \");"},{"lineNumber":126,"author":{"gitId":"georgepwhuang"},"content":"                try {"},{"lineNumber":127,"author":{"gitId":"georgepwhuang"},"content":"                    Task task \u003d new Deadline(fragments[0], fragments[1]);"},{"lineNumber":128,"author":{"gitId":"georgepwhuang"},"content":"                    String output \u003d tasklist.add(task);"},{"lineNumber":129,"author":{"gitId":"georgepwhuang"},"content":"                    try {"},{"lineNumber":130,"author":{"gitId":"georgepwhuang"},"content":"                        storage.file(task);"},{"lineNumber":131,"author":{"gitId":"georgepwhuang"},"content":"                    } catch (IOException ex) {"},{"lineNumber":132,"author":{"gitId":"georgepwhuang"},"content":"                        ui.warn(\"Cannot access storage.\");"},{"lineNumber":133,"author":{"gitId":"georgepwhuang"},"content":"                    }"},{"lineNumber":134,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(output);"},{"lineNumber":135,"author":{"gitId":"georgepwhuang"},"content":"                } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":136,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(\"Type the deadline, then give the time using \\\"/by\\\".\");"},{"lineNumber":137,"author":{"gitId":"georgepwhuang"},"content":"                } catch (DateTimeParseException ex) {"},{"lineNumber":138,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(\"blarb.Deadline time must be in the format of yyyy-mm-dd.\");"},{"lineNumber":139,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":140,"author":{"gitId":"georgepwhuang"},"content":"            } catch (InputMismatchException ex) {"},{"lineNumber":141,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(\"Someone\u0027s having trouble with deadlines.\");"},{"lineNumber":142,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":144,"author":{"gitId":"georgepwhuang"},"content":"        case EVENT:"},{"lineNumber":145,"author":{"gitId":"georgepwhuang"},"content":"            try {"},{"lineNumber":146,"author":{"gitId":"georgepwhuang"},"content":"                if (cml.isSingleCommand()) {"},{"lineNumber":147,"author":{"gitId":"georgepwhuang"},"content":"                    throw new InputMismatchException();"},{"lineNumber":148,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":149,"author":{"gitId":"georgepwhuang"},"content":"                String[] fragments \u003d cml.description.split(\" /at \");"},{"lineNumber":150,"author":{"gitId":"georgepwhuang"},"content":"                try {"},{"lineNumber":151,"author":{"gitId":"georgepwhuang"},"content":"                    Task task \u003d new Event(fragments[0], fragments[1]);"},{"lineNumber":152,"author":{"gitId":"georgepwhuang"},"content":"                    String output \u003d tasklist.add(task);"},{"lineNumber":153,"author":{"gitId":"georgepwhuang"},"content":"                    try {"},{"lineNumber":154,"author":{"gitId":"georgepwhuang"},"content":"                        storage.file(task);"},{"lineNumber":155,"author":{"gitId":"georgepwhuang"},"content":"                    } catch (IOException ex) {"},{"lineNumber":156,"author":{"gitId":"georgepwhuang"},"content":"                        ui.warn(\"Cannot access storage.\");"},{"lineNumber":157,"author":{"gitId":"georgepwhuang"},"content":"                    }"},{"lineNumber":158,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(output);"},{"lineNumber":159,"author":{"gitId":"georgepwhuang"},"content":"                } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":160,"author":{"gitId":"georgepwhuang"},"content":"                    ui.blurt(\"Type the event, then give the time using \\\"/at\\\".\");"},{"lineNumber":161,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":162,"author":{"gitId":"georgepwhuang"},"content":"            } catch (InputMismatchException ex) {"},{"lineNumber":163,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(\"Tell me the event!\");"},{"lineNumber":164,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":166,"author":{"gitId":"georgepwhuang"},"content":"        case FIND:"},{"lineNumber":167,"author":{"gitId":"georgepwhuang"},"content":"            try {"},{"lineNumber":168,"author":{"gitId":"georgepwhuang"},"content":"                if (cml.isSingleCommand()) {"},{"lineNumber":169,"author":{"gitId":"georgepwhuang"},"content":"                    throw new InputMismatchException();"},{"lineNumber":170,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":171,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(tasklist.find(cml.description));"},{"lineNumber":172,"author":{"gitId":"georgepwhuang"},"content":"            } catch (InputMismatchException ex) {"},{"lineNumber":173,"author":{"gitId":"georgepwhuang"},"content":"                ui.blurt(\"I need a clue to find stuff!\");"},{"lineNumber":174,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":175,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":176,"author":{"gitId":"georgepwhuang"},"content":"        case LIST:"},{"lineNumber":177,"author":{"gitId":"georgepwhuang"},"content":"            String output \u003d cml.isSingleCommand()"},{"lineNumber":178,"author":{"gitId":"georgepwhuang"},"content":"                    ? tasklist.list()"},{"lineNumber":179,"author":{"gitId":"georgepwhuang"},"content":"                    : \"Listing is simple, so typing \\\"list\\\" would suffice.\";"},{"lineNumber":180,"author":{"gitId":"georgepwhuang"},"content":"            ui.blurt(output);"},{"lineNumber":181,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":182,"author":{"gitId":"georgepwhuang"},"content":"        case BYE:"},{"lineNumber":183,"author":{"gitId":"georgepwhuang"},"content":"            ui.adios();"},{"lineNumber":184,"author":{"gitId":"georgepwhuang"},"content":"            return false;"},{"lineNumber":185,"author":{"gitId":"georgepwhuang"},"content":"        default:"},{"lineNumber":186,"author":{"gitId":"georgepwhuang"},"content":"            ui.blurt(String.format(\"I have detailed files on human anatomy, but not %s.\", input));"},{"lineNumber":187,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"georgepwhuang"},"content":"        return true;"},{"lineNumber":189,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":190}},{"path":"src/main/java/blarb/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code Command} is an enumeration of the possible commands."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"enum Command {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    DONE(\"done\"), TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"),"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"    LIST(\"list\"), DELETE(\"delete\"), BYE(\"bye\"), FIND(\"find\"), UNKNOWN(\"\");"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    private final String command;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"    Command(String command) {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"        this.command \u003d command;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     * Reads in string and transforms to command."},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * @param string String form of command."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     * @return The command"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    public static Command command(String string) {"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        String command \u003d string.toLowerCase();"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        for (Command c : Command.values()) {"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"            if (c.command.equals(command)) {"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"                return c;"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        return UNKNOWN;"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":32}},{"path":"src/main/java/blarb/CommandLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code CommandLine} is a object the stores the entire inputted command."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"class CommandLine {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    final Command command;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"    final String description;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes a new {@code CommandLine}."},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     * @param command     The main command."},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The description of the main command."},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    public CommandLine(Command command, String description) {"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        this.command \u003d command;"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     * Checks if the command is a single command without descriptions."},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     * @return If the command is a single command."},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    public boolean isSingleCommand() {"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"        return description.isEmpty();"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":29}},{"path":"src/main/java/blarb/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":" * {@code Deadline} is a Task that has to be done before a specific date/time."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":" *"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":" * @see Task"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    private final LocalDate by;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs a new uncompleted {@code Deadline}."},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The name of the task."},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * @throws DateTimeParseException User inputs date in wrong style."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    public Deadline(String description, String by) throws DateTimeParseException {"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        this.by \u003d LocalDate.parse(by);"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"     * Converts {@code Deadline} into string format to be stored in file."},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     * @return String format to be stored in file."},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    public String encode() {"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"D / %s / %s\", super.encode(), by);"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"     * String representation of the Deadline."},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"     * @return Deadline in check list form."},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"                + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy GG\")) + \")\";"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":45}},{"path":"src/main/java/blarb/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code blarb.Event} is a {@code blarb.Task} that has a specific time of occurrence."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" * @see Task"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    private final String at;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs a new uncompleted {@code Event}."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The name of the task."},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    public Event(String description, String at) {"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"        this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     * Converts {@code Event} into string format to be stored in file."},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     * @return String format to be stored in file."},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    public String encode() {"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"E / %s / %s\", super.encode(), at);"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"     * String representation of the Event."},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"     * @return Event in check list form."},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":39}},{"path":"src/main/java/blarb/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code Parser} parses the inputted string."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"class Parser {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"     * The inputted command line is parsed into a {@code CommandLine} object."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"     * @param input The input commandline."},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     * @return The parsed {@code Commandline} object."},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    static CommandLine parse(String input) {"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"        String[] tokens \u003d input.split(\" \", 2);"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        Command command \u003d Command.command(tokens[0]);"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"        String description;"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        if (tokens.length \u003d\u003d 1) {"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"            description \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"            description \u003d tokens[1];"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"        return new CommandLine(command, description);"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":24}},{"path":"src/main/java/blarb/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import java.util.InputMismatchException;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":" * {@code Storage} reads and writes the storage file for the task list."},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"class Storage {"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    private final String filePath;"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    Storage(String filePath) {"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     * Appends a task to the tasklist file."},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"     * @param task blarb.Task to be added."},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"     * @throws IOException Issues with writing into the file."},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    public void file(Task task) throws IOException {"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        fw.write(task.encode());"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"        fw.write(\"\\n\");"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        fw.close();"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"     * Rewrites the entire tasklist file."},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"     * @throws IOException Issues with writing into the file."},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    public void refile(Tasklist list) throws IOException {"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"        for (Task task : list) {"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"            fw.write(task.encode());"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"            fw.write(\"\\n\");"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"        fw.close();"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"     * Reads the storage file and loads the tasks into a list."},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"     * @return A {@code List} of the converted {@code Task}s."},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"     * @throws IOException Issues with accessing the file."},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"    public List\u003cTask\u003e load() throws IOException {"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"        File parent \u003d file.getParentFile();"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        parent.mkdirs();"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"        file.createNewFile();"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"        Scanner sc \u003d new Scanner(file);"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"            String str \u003d sc.nextLine();"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"            String[] tokens \u003d str.split(\" / \");"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"            Task task;"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"            switch (tokens[0]) {"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"            case \"T\":"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"                task \u003d new ToDo(tokens[2]);"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"                if (Integer.parseInt(tokens[1]) \u003d\u003d 1) {"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"                    task.markAsDone();"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"                break;"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"            case \"D\":"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"                task \u003d new Deadline(tokens[2], tokens[3]);"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":"                if (Integer.parseInt(tokens[1]) \u003d\u003d 1) {"},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":"                    task.markAsDone();"},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"                break;"},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":"            case \"E\":"},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"                task \u003d new Event(tokens[2], tokens[3]);"},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"                if (Integer.parseInt(tokens[1]) \u003d\u003d 1) {"},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":"                    task.markAsDone();"},{"lineNumber":83,"author":{"gitId":"georgepwhuang"},"content":"                }"},{"lineNumber":84,"author":{"gitId":"georgepwhuang"},"content":"                break;"},{"lineNumber":85,"author":{"gitId":"georgepwhuang"},"content":"            default:"},{"lineNumber":86,"author":{"gitId":"georgepwhuang"},"content":"                throw new InputMismatchException();"},{"lineNumber":87,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"georgepwhuang"},"content":"            list.add(task);"},{"lineNumber":89,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"georgepwhuang"},"content":"        return list;"},{"lineNumber":91,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":92}},{"path":"src/main/java/blarb/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code Task} contains an action and its completion status."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"class Task {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    private final String description;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs a new uncompleted  {@code Task}."},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The name of the task."},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     * Gets the description of the task."},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     * @return Task description."},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    public String getDescription() {"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"        return description;"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"    private String getStatusIcon() {"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"     * Toggles to completion status to completed."},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"    public void markAsDone() {"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        isDone \u003d true;"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"     * Converts {@code Task} into string format to be stored in file."},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"     * @return String format to be stored in file."},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"    public String encode() {"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"%d / %s\", isDone ? 1 : 0, description);"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"     * String representation of the blarb.Task."},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"     * @return blarb.Task in check list form."},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":58}},{"path":"src/main/java/blarb/Tasklist.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":" * {@code Tasklist} stores and operates on the list of {@code Tasks}."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":" *"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":" * @see java.lang.Iterable"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"class Tasklist implements Iterable\u003cTask\u003e {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    private final List\u003cTask\u003e list;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes a {@code Tasklist}."},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    public Tasklist() {"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"        list \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     * Finds and prints the relevant tasks by the inputted keywords."},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"     * @param input Keywords for the search."},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    public String find(String input) {"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"        int i \u003d 1;"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        int counter \u003d 0;"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        CharSequence target \u003d input.subSequence(0, input.length());"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list:\");"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        for (Task task : list) {"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"            if (task.getDescription().contains(target)) {"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"                sb.append(String.format(\"\\n%d. %s\", i, task.toString()));"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"                counter++;"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"            i++;"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"        if (counter \u003d\u003d 0) {"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"            return \"There are no matching tasks in your list.\";"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"        return sb.substring(0);"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"     * Lists everything in the task list."},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of the task list."},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    public String list() {"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"        if (list.size() \u003c 1) {"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"            return \"You have nothing on your list.\";"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"            int i \u003d 1;"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"            StringBuilder sb \u003d new StringBuilder(\"Here are your tasks:\\n\");"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"            for (Task task : list) {"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"                sb.append(String.format(\"\\n%d. %s\", i++, task.toString()));"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"            return sb.substring(0);"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"     * Adds a new Task to the task list."},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"     * @param task Task to be added."},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of added task."},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"    public String add(Task task) {"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"        String addTask \u003d \"Affirmative. I\u0027ve added this task:\\n %s\\n\""},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"                + \"Now you have %d tasks in the list.\";"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"        list.add(task);"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(addTask, task.toString(), list.size());"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":"    public void addAll(List\u003cTask\u003e list) {"},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":"        this.list.addAll(list);"},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"     * Changes the indexed task to a completed state."},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"georgepwhuang"},"content":"     * @param index The index of the task."},{"lineNumber":84,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of finished task"},{"lineNumber":85,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"georgepwhuang"},"content":"    public String done(int index) throws IndexOutOfBoundsException {"},{"lineNumber":87,"author":{"gitId":"georgepwhuang"},"content":"        list.get(index).markAsDone();"},{"lineNumber":88,"author":{"gitId":"georgepwhuang"},"content":"        String done \u003d \"I\u0027ve marked this task as done:\\n%s\";"},{"lineNumber":89,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(done, list.get(index));"},{"lineNumber":90,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":92,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"georgepwhuang"},"content":"     * Delete the indexed task."},{"lineNumber":94,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"georgepwhuang"},"content":"     * @param index The index of the task."},{"lineNumber":96,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of deleted task."},{"lineNumber":97,"author":{"gitId":"georgepwhuang"},"content":"     * @throws IndexOutOfBoundsException The inputted index does not exist in the list."},{"lineNumber":98,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"georgepwhuang"},"content":"    public String delete(int index) throws IndexOutOfBoundsException {"},{"lineNumber":100,"author":{"gitId":"georgepwhuang"},"content":"        String delete \u003d \"The task is terminated:\\n%s\";"},{"lineNumber":101,"author":{"gitId":"georgepwhuang"},"content":"        Task output \u003d list.get(index);"},{"lineNumber":102,"author":{"gitId":"georgepwhuang"},"content":"        list.remove(index);"},{"lineNumber":103,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(delete, output);"},{"lineNumber":104,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":106,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"georgepwhuang"},"content":"     * A iteration of all the tasks in the task list."},{"lineNumber":108,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"georgepwhuang"},"content":"     * @return A iterator of the task list."},{"lineNumber":110,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"georgepwhuang"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":113,"author":{"gitId":"georgepwhuang"},"content":"        return list.iterator();"},{"lineNumber":114,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":115}},{"path":"src/main/java/blarb/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code ToDo} is a {@code Task} that does not have further details attached."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" * @see Task"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs a new uncompleted {@code ToDo}."},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The name of the task."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    public ToDo(String description) {"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * Converts {@code Todo} into string format to be stored in file."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     * @return String format to be stored in file."},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    public String encode() {"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"T / %s\", super.encode());"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     * String representation of the ToDo."},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"     * @return ToDo in check list form."},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":36}},{"path":"src/main/java/blarb/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" * {@code Ui} is the user interface."},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"class Ui {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    private final Scanner sc;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes a new User Interface."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    Ui() {"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * Reads in the user input."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of the user input."},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    public String read() {"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        return sc.nextLine();"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     * Checks if the UI is available."},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"     * @return The availability of the UI."},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    public boolean isAvailable() {"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"        return sc.hasNextLine();"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"     * Prints the logo of the chatbot."},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"    public void rollCredits() {"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"        String logo \u003d \" ____            _      ____   ____\\n\" +"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"                \"|    \\\\ |        / \\\\    |    \\\\ |    \\\\\\n\" +"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"                \"|____/ |       /___\\\\   |____/ |____/\\n\" +"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"                \"|    \\\\ |      /     \\\\  |  \\\\   |    \\\\\\n\" +"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"                \"|____/ |____ /       \\\\ |   \\\\_ |____/\\n\";"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"        System.out.println(\"You are now in the presence of\\n\" + logo);"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"     * Bids goodbye to the user."},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"    public void adios() {"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"        System.out.println(\"Hasta la vida, baby.\");"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"     * Prints output in response format."},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"     * @param output Output string"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"    public void blurt(String output) {"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"        String response \u003d \"%s\\n\\n\u003e \";"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"        System.out.printf(response, output);"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"     * Prints an error message generated by exceptions not caused by user input."},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"     * @param warn The warning message to be displayed."},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"    public void warn(String warn) {"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"        String response \u003d \"Error! %s\\n\\n\";"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"        System.out.printf(response, warn);"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":74}},{"path":"test/java/blarb/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"public class CommandTest {"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    public void command_success() {"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(Command.BYE, Command.command(\"bYe\"));"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(Command.UNKNOWN, Command.command(\"asdfjak\"));"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(Command.UNKNOWN, Command.command(\"\"));"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":14}},{"path":"test/java/blarb/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"    public void stringify_correctInputFormat_success() {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(\"[D][\\u2718] sth (by: Sep 27 2000 AD)\","},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"                new Deadline(\"sth\", \"2000-09-27\").toString());"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(\"D / 0 / sth / 2000-09-27\","},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"                new Deadline(\"sth\", \"2000-09-27\").encode());"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    public void stringify_wrongInputFormat_exceptionThrown() {"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"            assertEquals(\"[D][\\u2718] sth (by Sep 27 2000 AD) \","},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"                    new Deadline(\"sth\", \"2000/09/27\").toString());"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"            fail();"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"            assertEquals(\"Text \u00272000/09/27\u0027 could not be parsed at index 4\", ex.getMessage());"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"todo curl up and cry"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":"deadline SWE IP /by Thursday"},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"event barhopping /at Clarke Quay"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"list"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"delete 3"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"list"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"bye"}],"authorContributionMap":{"georgepwhuang":8}}]
