[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"    archiveBaseName.set(\"blarb\")"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"    archiveClassifier.set(null)"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"    archiveVersion.set(\"0.2\")"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"    enableAssertions \u003d true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":20,"-":43}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"import blarb.App;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"public class Launcher {"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"        Application.launch(App.class, args);"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":11}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"import blarb.Blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * Main Class of Execution for IP."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"public class Main {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"     * Main method for execution."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"     * @param args Relative filepath to storage file. (Optional)"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"        assert args.length \u003c 2;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"        Blarb blarb;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        if (args.length \u003e 0) {"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"            blarb \u003d new Blarb(args[0]);"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"            blarb \u003d new Blarb();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"        blarb.run();"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":20,"-":2}},{"path":"src/main/java/blarb/App.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":" * Application file for the GUI version."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"public class App extends Application {"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes the main application."},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"     * @param stage The entry stage of the application."},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"        Blarb blarb \u003d new Blarb();"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(App.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"            fxmlLoader.\u003cGui\u003egetController().setBlarb(blarb);"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":34}},{"path":"src/main/java/blarb/Blarb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.util.InputMismatchException;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" * {@code Blarb} is the chat bot in used in the {@code Main} program."},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"public class Blarb {"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    private final Tasklist tasklist;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    private final String filePath;"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"    private final Ui ui;"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    private final Storage storage;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    private final Processor processor;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes Blarb with a given storage path."},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * @param filePath The storage file path"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    public Blarb(String filePath) {"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"        tasklist \u003d new Tasklist();"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"        processor \u003d new Processor();"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"            tasklist.addAll(storage.load());"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException ex) {"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"            ui.warn(\"Cannot initialize task list from storage.\");"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        } catch (InputMismatchException ex) {"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"            ui.warn(\"File is corrupted. Cannot initialize task list.\");"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes Blarb."},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    public Blarb() {"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"        this(\"data/tasklist.txt\");"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"     * Runs Blarb in an input loop."},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"    public void run() {"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"        ui.rollCredits();"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"        ui.blurt(\"This is BLARB.\\nYou may speak.\");"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"        boolean isActive \u003d true;"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"        while (isActive \u0026\u0026 ui.isAvailable()) {"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"            isActive \u003d isActiveAfterExecuting(ui.read());"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the command for Blarb(Text-UI)."},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"     * @param input The inputted command."},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"     * @return A boolean value that shows the availability for the next command intake."},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"    public boolean isActiveAfterExecuting(String input) {"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"        Output output \u003d Processor.execute(input, tasklist, storage);"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"        if (!Processor.leave(input)) {"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"            output.warn.ifPresent(ui::warn);"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"            ui.blurt(output.normal);"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"            return true;"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"        ui.adios();"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"        return false;"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":"     * Gets the response of Blarb(GUI)."},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":"     * @param input User input string."},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"     * @return Response string."},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"    public String getResponse(String input) {"},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"        Output output \u003d Processor.execute(input, tasklist, storage);"},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":"        String normal \u003d output.normal;"},{"lineNumber":83,"author":{"gitId":"georgepwhuang"},"content":"        String warn \u003d output.warn"},{"lineNumber":84,"author":{"gitId":"georgepwhuang"},"content":"                .map(x -\u003e String.format(\"!!! %s\\n\", x))"},{"lineNumber":85,"author":{"gitId":"georgepwhuang"},"content":"                .orElse(\"\");"},{"lineNumber":86,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"%s%s\", warn, normal);"},{"lineNumber":87,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":89,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"georgepwhuang"},"content":"     * Checks if Blarb(GUI) should terminate."},{"lineNumber":91,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"georgepwhuang"},"content":"     * @param input User input string."},{"lineNumber":93,"author":{"gitId":"georgepwhuang"},"content":"     * @return Response string."},{"lineNumber":94,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"georgepwhuang"},"content":"    public boolean willTerminate(String input) {"},{"lineNumber":96,"author":{"gitId":"georgepwhuang"},"content":"        return processor.willTerminate(input);"},{"lineNumber":97,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":99,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":99}},{"path":"src/main/java/blarb/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" * {@code Command} is an enumeration of the possible commands."},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"enum Command {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    DONE(\"done\"), TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"),"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    LIST(\"list\"), DELETE(\"delete\"), BYE(\"bye\"), FIND(\"find\"), UNKNOWN(\"\");"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"    private final String command;"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    Command(String command) {"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        this.command \u003d command;"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * Reads in string and transforms to command."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     * @param string String form of command."},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     * @return The command"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"    public static Command command(String string) {"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"        return Arrays.stream(Command.values())"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"                .filter(x -\u003e x.command.equals(string.toLowerCase()))"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"                .findAny()"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"                .orElse(UNKNOWN);"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":31}},{"path":"src/main/java/blarb/CommandLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code CommandLine} is a object the stores the entire inputted command."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"class CommandLine {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    final Command command;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"    final String description;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes a new {@code CommandLine}."},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     * @param command     The main command."},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The description of the main command."},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    public CommandLine(Command command, String ...description) {"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        this.command \u003d command;"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"        assert description.length \u003c 2;"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"        if (description.length \u003e 0) {"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"            this.description \u003d description[0];"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"            this.description \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     * Checks if the command is a single command without descriptions."},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"     * @return If the command is a single command."},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    public boolean isSingleCommand() {"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"        return description.isEmpty();"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":35}},{"path":"src/main/java/blarb/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":" * {@code Deadline} is a Task that has to be done before a specific date/time."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":" *"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":" * @see Task"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    private final LocalDate by;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs a new uncompleted {@code Deadline}."},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The name of the task."},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * @throws DateTimeParseException User inputs date in wrong style."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    public Deadline(String description, String by) throws DateTimeParseException {"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        this.by \u003d LocalDate.parse(by);"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"     * Converts {@code Deadline} into string format to be stored in file."},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     * @return String format to be stored in file."},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    public String encode() {"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"D / %s / %s\", super.encode(), by);"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"     * String representation of the Deadline."},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"     * @return Deadline in check list form."},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"                + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy GG\")) + \")\";"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":45}},{"path":"src/main/java/blarb/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"     * Generates a DialogBox for user input."},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"     * @param text User input text."},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"     * @param img  User picture."},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"     * @return Generated DialogBox."},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"        return new DialogBox(text, img);"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"     * Generates a DialogBox for Blarb output."},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"     * @param text Blarb output text."},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"     * @param img  Blarb picture."},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"     * @return Generated DialogBox."},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"        DialogBox db \u003d new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"        db.flip();"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"        return db;"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"    private void flip() {"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"        Collections.reverse(tmp);"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":75}},{"path":"src/main/java/blarb/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code Event} is a {@code Task} that has a specific time of occurrence."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" * @see Task"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    private final String at;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs a new uncompleted {@code Event}."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The name of the task."},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    public Event(String description, String at) {"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"        this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     * Converts {@code Event} into string format to be stored in file."},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     * @return String format to be stored in file."},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    public String encode() {"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"E / %s / %s\", super.encode(), at);"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"     * String representation of the Event."},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"     * @return Event in check list form."},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":39}},{"path":"src/main/java/blarb/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":" * Main GUI for Blarb."},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"public class Gui extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    private final Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"    private final Image bot \u003d new Image(this.getClass().getResourceAsStream(\"/images/blarb.png\"));"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    private Blarb blarb;"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes the GUI."},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"                DialogBox.getDukeDialog(\"You are now in the presence of Blarb. Speak.\", bot)"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"        );"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"     * Sets the Blarb bot to the GUI."},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"     * @param b Blarb"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"    public void setBlarb(Blarb b) {"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"        blarb \u003d b;"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"     * Handles the user input"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"        String userText \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"        String dukeText \u003d blarb.getResponse(userInput.getText());"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"                DialogBox.getUserDialog(userText, user),"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"                DialogBox.getDukeDialog(dukeText, bot)"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"        );"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        userInput.clear();"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"        if (blarb.willTerminate(userText)) {"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"            try {"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"                Thread.sleep(1000);"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"            } catch (InterruptedException e) {"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"                e.printStackTrace();"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"            Platform.exit();"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":69}},{"path":"src/main/java/blarb/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" * {@code Output} stores warning and normal outputs for Blarb."},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"class Output {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    final String normal;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    final Optional\u003cString\u003e warn;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"    Output(String normal, String warn) {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"        this.normal \u003d normal;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"        this.warn \u003d Optional.ofNullable(warn);"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":16}},{"path":"src/main/java/blarb/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code Parser} parses the inputted string."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"class Parser {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"     * The inputted command line is parsed into a {@code CommandLine} object."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"     * @param input The input commandline."},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     * @return The parsed {@code Commandline} object."},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    static CommandLine parse(String input) {"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"        String[] tokens \u003d input.split(\" \", 2);"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        Command command \u003d Command.command(tokens[0]);"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"        if (tokens.length \u003d\u003d 1) {"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"            return new CommandLine(command);"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"        assert tokens.length \u003c 3;"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"        return new CommandLine(command, tokens[1]);"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":22}},{"path":"src/main/java/blarb/Processor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.util.InputMismatchException;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":" * {@code Processor} decides on the course of action for Blarb."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"class Processor {"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     * Checks if Blarb will terminate."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"     * @param input User input"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"     * @return Termination status."},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     public boolean willTerminate(String input) {"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"        CommandLine cml \u003d Parser.parse(input);"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"        return cml.command.equals(Command.BYE) \u0026\u0026 cml.isSingleCommand();"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     * Executes Blarb\u0027s will."},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"     * @param input User input"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"     * @return Blarb\u0027s response output."},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     public Output execute(String input, Tasklist tasklist, Storage storage) {"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        CommandLine cml \u003d Parser.parse(input);"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"        switch (cml.command) {"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        case DONE:"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"            outputs \u003d executeDone(cml, tasklist, storage);"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"        case DELETE:"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"            outputs \u003d executeDelete(cml, tasklist, storage);"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"        case TODO:"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"            outputs \u003d executeToDo(cml, tasklist, storage);"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"        case DEADLINE:"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"            outputs \u003d executeDeadline(cml, tasklist, storage);"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"        case EVENT:"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"            outputs \u003d executeEvent(cml, tasklist, storage);"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"        case FIND:"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"            outputs \u003d executeFind(cml, tasklist);"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"        case LIST:"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"            outputs \u003d executeList(cml, tasklist);"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"        case BYE:"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"            outputs \u003d executeBye(cml);"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"        case UNKNOWN:"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d String.format(\"I have detailed files on human anatomy, but not %s.\", input);"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"            outputs[1] \u003d null;"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        default:"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"            assert false;"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"        return new Output(outputs);"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the done command."},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"     * @param cml Input commandline"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"     * @param tasklist Tasklist of tasks"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"     * @param storage Storage processing unit"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"     * @return Output generated by the done command"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"    private String[] executeDone(CommandLine cml, Tasklist tasklist, Storage storage) {"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":"        outputs[1] \u003d null;"},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":"            int index \u003d Integer.parseInt(cml.description) - 1;"},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"            String output \u003d tasklist.done(index);"},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d output;"},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"            storage.refile(tasklist);"},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException ex) {"},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":"            outputs[1] \u003d \"Cannot access storage.\";"},{"lineNumber":83,"author":{"gitId":"georgepwhuang"},"content":"        } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":84,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"What have you done! More specific!\";"},{"lineNumber":85,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":86,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"There is no such task.\";"},{"lineNumber":87,"author":{"gitId":"georgepwhuang"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":88,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"Done what now? I don\u0027t understand\";"},{"lineNumber":89,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"georgepwhuang"},"content":"        return outputs;"},{"lineNumber":91,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":93,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the delete command."},{"lineNumber":95,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"georgepwhuang"},"content":"     * @param cml Input commandline"},{"lineNumber":97,"author":{"gitId":"georgepwhuang"},"content":"     * @param tasklist Tasklist of tasks"},{"lineNumber":98,"author":{"gitId":"georgepwhuang"},"content":"     * @param storage Storage processing unit"},{"lineNumber":99,"author":{"gitId":"georgepwhuang"},"content":"     * @return Output generated by the delete command"},{"lineNumber":100,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"georgepwhuang"},"content":"    private String[] executeDelete(CommandLine cml, Tasklist tasklist, Storage storage) {"},{"lineNumber":102,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":103,"author":{"gitId":"georgepwhuang"},"content":"        outputs[1] \u003d null;"},{"lineNumber":104,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"georgepwhuang"},"content":"            int index \u003d Integer.parseInt(cml.description) - 1;"},{"lineNumber":106,"author":{"gitId":"georgepwhuang"},"content":"            String output \u003d tasklist.delete(index);"},{"lineNumber":107,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d output;"},{"lineNumber":108,"author":{"gitId":"georgepwhuang"},"content":"            storage.refile(tasklist);"},{"lineNumber":109,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException ex) {"},{"lineNumber":110,"author":{"gitId":"georgepwhuang"},"content":"            outputs[1] \u003d \"Cannot access storage.\";"},{"lineNumber":111,"author":{"gitId":"georgepwhuang"},"content":"        } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":112,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"What do you want to hide?\";"},{"lineNumber":113,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":114,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"There is no such task.\";"},{"lineNumber":115,"author":{"gitId":"georgepwhuang"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":116,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"You can\u0027t delete your past.\";"},{"lineNumber":117,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"georgepwhuang"},"content":"        return outputs;"},{"lineNumber":119,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":121,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the todo command."},{"lineNumber":123,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"georgepwhuang"},"content":"     * @param cml Input commandline"},{"lineNumber":125,"author":{"gitId":"georgepwhuang"},"content":"     * @param tasklist Tasklist of tasks"},{"lineNumber":126,"author":{"gitId":"georgepwhuang"},"content":"     * @param storage Storage processing unit"},{"lineNumber":127,"author":{"gitId":"georgepwhuang"},"content":"     * @return Output generated by the todo command"},{"lineNumber":128,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"georgepwhuang"},"content":"    private String[] executeToDo(CommandLine cml, Tasklist tasklist, Storage storage) {"},{"lineNumber":130,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":131,"author":{"gitId":"georgepwhuang"},"content":"        outputs[1] \u003d null;"},{"lineNumber":132,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"georgepwhuang"},"content":"            if (cml.isSingleCommand()) {"},{"lineNumber":134,"author":{"gitId":"georgepwhuang"},"content":"                throw new InputMismatchException();"},{"lineNumber":135,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"georgepwhuang"},"content":"            Task task \u003d new ToDo(cml.description);"},{"lineNumber":137,"author":{"gitId":"georgepwhuang"},"content":"            String output \u003d tasklist.add(task);"},{"lineNumber":138,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d output;"},{"lineNumber":139,"author":{"gitId":"georgepwhuang"},"content":"            storage.file(task);"},{"lineNumber":140,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException ex) {"},{"lineNumber":141,"author":{"gitId":"georgepwhuang"},"content":"            outputs[1] \u003d \"Cannot access storage.\";"},{"lineNumber":142,"author":{"gitId":"georgepwhuang"},"content":"        } catch (InputMismatchException ex) {"},{"lineNumber":143,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"Todo what?\";"},{"lineNumber":144,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"georgepwhuang"},"content":"        return outputs;"},{"lineNumber":146,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":148,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the deadline command."},{"lineNumber":150,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"georgepwhuang"},"content":"     * @param cml Input commandline"},{"lineNumber":152,"author":{"gitId":"georgepwhuang"},"content":"     * @param tasklist Tasklist of tasks"},{"lineNumber":153,"author":{"gitId":"georgepwhuang"},"content":"     * @param storage Storage processing unit"},{"lineNumber":154,"author":{"gitId":"georgepwhuang"},"content":"     * @return Output generated by the deadline command"},{"lineNumber":155,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"georgepwhuang"},"content":"    private String[] executeDeadline(CommandLine cml, Tasklist tasklist, Storage storage) {"},{"lineNumber":157,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":158,"author":{"gitId":"georgepwhuang"},"content":"        outputs[1] \u003d null;"},{"lineNumber":159,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"georgepwhuang"},"content":"            if (cml.isSingleCommand()) {"},{"lineNumber":161,"author":{"gitId":"georgepwhuang"},"content":"                throw new InputMismatchException();"},{"lineNumber":162,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"georgepwhuang"},"content":"            String[] fragments \u003d cml.description.split(\" /by \");"},{"lineNumber":164,"author":{"gitId":"georgepwhuang"},"content":"            Task task \u003d new Deadline(fragments[0], fragments[1]);"},{"lineNumber":165,"author":{"gitId":"georgepwhuang"},"content":"            String output \u003d tasklist.add(task);"},{"lineNumber":166,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d output;"},{"lineNumber":167,"author":{"gitId":"georgepwhuang"},"content":"            storage.file(task);"},{"lineNumber":168,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException ex) {"},{"lineNumber":169,"author":{"gitId":"georgepwhuang"},"content":"            outputs[1] \u003d \"Cannot access storage.\";"},{"lineNumber":170,"author":{"gitId":"georgepwhuang"},"content":"        } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":171,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"Type the deadline, then give the time using \\\"/by\\\".\";"},{"lineNumber":172,"author":{"gitId":"georgepwhuang"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":173,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"Deadline time must be in the format of yyyy-mm-dd.\";"},{"lineNumber":174,"author":{"gitId":"georgepwhuang"},"content":"        } catch (InputMismatchException ex) {"},{"lineNumber":175,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"Someone\u0027s having trouble with deadlines.\";"},{"lineNumber":176,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"georgepwhuang"},"content":"        return outputs;"},{"lineNumber":178,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":180,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the event command."},{"lineNumber":182,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"georgepwhuang"},"content":"     * @param cml Input commandline"},{"lineNumber":184,"author":{"gitId":"georgepwhuang"},"content":"     * @param tasklist Tasklist of tasks"},{"lineNumber":185,"author":{"gitId":"georgepwhuang"},"content":"     * @param storage Storage processing unit"},{"lineNumber":186,"author":{"gitId":"georgepwhuang"},"content":"     * @return Output generated by the event command"},{"lineNumber":187,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"georgepwhuang"},"content":"    private String[] executeEvent(CommandLine cml, Tasklist tasklist, Storage storage) {"},{"lineNumber":189,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":190,"author":{"gitId":"georgepwhuang"},"content":"        outputs[1] \u003d null;"},{"lineNumber":191,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":192,"author":{"gitId":"georgepwhuang"},"content":"            if (cml.isSingleCommand()) {"},{"lineNumber":193,"author":{"gitId":"georgepwhuang"},"content":"                throw new InputMismatchException();"},{"lineNumber":194,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"georgepwhuang"},"content":"            String[] fragments \u003d cml.description.split(\" /at \");"},{"lineNumber":196,"author":{"gitId":"georgepwhuang"},"content":"            Task task \u003d new Event(fragments[0], fragments[1]);"},{"lineNumber":197,"author":{"gitId":"georgepwhuang"},"content":"            String output \u003d tasklist.add(task);"},{"lineNumber":198,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d output;"},{"lineNumber":199,"author":{"gitId":"georgepwhuang"},"content":"            storage.file(task);"},{"lineNumber":200,"author":{"gitId":"georgepwhuang"},"content":"        } catch (IOException ex) {"},{"lineNumber":201,"author":{"gitId":"georgepwhuang"},"content":"            outputs[1] \u003d \"Cannot access storage.\";"},{"lineNumber":202,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":203,"author":{"gitId":"georgepwhuang"},"content":"        } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":204,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"Type the event, then give the time using \\\"/at\\\".\";"},{"lineNumber":205,"author":{"gitId":"georgepwhuang"},"content":"        } catch (InputMismatchException ex) {"},{"lineNumber":206,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"Tell me the event!\";"},{"lineNumber":207,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"georgepwhuang"},"content":"        return outputs;"},{"lineNumber":209,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":211,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the find command."},{"lineNumber":213,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":214,"author":{"gitId":"georgepwhuang"},"content":"     * @param cml Input commandline"},{"lineNumber":215,"author":{"gitId":"georgepwhuang"},"content":"     * @param tasklist Tasklist of tasks"},{"lineNumber":216,"author":{"gitId":"georgepwhuang"},"content":"     * @return Output generated by the find command"},{"lineNumber":217,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"georgepwhuang"},"content":"    private String[] executeFind(CommandLine cml, Tasklist tasklist) {"},{"lineNumber":219,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":220,"author":{"gitId":"georgepwhuang"},"content":"        outputs[1] \u003d null;"},{"lineNumber":221,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":222,"author":{"gitId":"georgepwhuang"},"content":"            if (cml.isSingleCommand()) {"},{"lineNumber":223,"author":{"gitId":"georgepwhuang"},"content":"                throw new InputMismatchException();"},{"lineNumber":224,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":225,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d tasklist.find(cml.description);"},{"lineNumber":226,"author":{"gitId":"georgepwhuang"},"content":"        } catch (InputMismatchException ex) {"},{"lineNumber":227,"author":{"gitId":"georgepwhuang"},"content":"            outputs[0] \u003d \"I need a clue to find stuff!\";"},{"lineNumber":228,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"georgepwhuang"},"content":"        return outputs;"},{"lineNumber":230,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":232,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the list command."},{"lineNumber":234,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":235,"author":{"gitId":"georgepwhuang"},"content":"     * @param cml Input commandline"},{"lineNumber":236,"author":{"gitId":"georgepwhuang"},"content":"     * @param tasklist Tasklist of tasks"},{"lineNumber":237,"author":{"gitId":"georgepwhuang"},"content":"     * @return Output generated by the list command"},{"lineNumber":238,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"georgepwhuang"},"content":"    private String[] executeList(CommandLine cml, Tasklist tasklist) {"},{"lineNumber":240,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":241,"author":{"gitId":"georgepwhuang"},"content":"        outputs[1] \u003d null;"},{"lineNumber":242,"author":{"gitId":"georgepwhuang"},"content":"        outputs[0] \u003d cml.isSingleCommand()"},{"lineNumber":243,"author":{"gitId":"georgepwhuang"},"content":"                ? tasklist.list()"},{"lineNumber":244,"author":{"gitId":"georgepwhuang"},"content":"                : \"Listing is simple, so typing \\\"list\\\" would suffice.\";"},{"lineNumber":245,"author":{"gitId":"georgepwhuang"},"content":"        return outputs;"},{"lineNumber":246,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":248,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":249,"author":{"gitId":"georgepwhuang"},"content":"     * Executes the bye command."},{"lineNumber":250,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":251,"author":{"gitId":"georgepwhuang"},"content":"     * @param cml Input commandline"},{"lineNumber":252,"author":{"gitId":"georgepwhuang"},"content":"     * @return Output generated by the bye command"},{"lineNumber":253,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":254,"author":{"gitId":"georgepwhuang"},"content":"    private String[] executeBye(CommandLine cml) {"},{"lineNumber":255,"author":{"gitId":"georgepwhuang"},"content":"        String[] outputs \u003d new String[2];"},{"lineNumber":256,"author":{"gitId":"georgepwhuang"},"content":"        outputs[1] \u003d null;"},{"lineNumber":257,"author":{"gitId":"georgepwhuang"},"content":"        outputs[0] \u003d cml.isSingleCommand()"},{"lineNumber":258,"author":{"gitId":"georgepwhuang"},"content":"                ? \"Hasta la vista, baby.\""},{"lineNumber":259,"author":{"gitId":"georgepwhuang"},"content":"                : \"Type \\\"bye\\\" to see me go.\";"},{"lineNumber":260,"author":{"gitId":"georgepwhuang"},"content":"        return outputs;"},{"lineNumber":261,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"georgepwhuang"},"content":"}"},{"lineNumber":263,"author":{"gitId":"georgepwhuang"},"content":""}],"authorContributionMap":{"georgepwhuang":263}},{"path":"src/main/java/blarb/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":" * {@code Storage} reads and writes the storage file for the task list."},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"class Storage {"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    private final String filePath;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    Storage(String filePath) {"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     * Appends a task to the tasklist file."},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     * @param task Task to be added."},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     * @throws IOException Issues with writing into the file."},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    public void file(Task task) throws IOException {"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"        fw.write(task.encode());"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        fw.write(\"\\n\");"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        fw.close();"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"     * Rewrites the entire tasklist file."},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"     * @throws IOException Issues with writing into the file."},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    public void refile(Tasklist list) throws IOException {"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"        list.forEach(task -\u003e {"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"                fw.write(task.encode());"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"                fw.write(\"\\n\");"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"            } catch (IOException ex) {"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"                ex.printStackTrace();"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"        });"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"        fw.close();"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"     * Reads the storage file and loads the tasks into a list."},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"     * @return A {@code List} of the converted {@code Task}s."},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"     * @throws IOException Issues with accessing the file."},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"    public List\u003cTask\u003e load() throws IOException {"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"        File parent \u003d file.getParentFile();"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"        parent.mkdirs();"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"        file.createNewFile();"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"        Scanner sc \u003d new Scanner(file);"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"        sc.useDelimiter(\"\\n\");"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"        sc.forEachRemaining(str -\u003e {"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"            String[] tokens \u003d str.split(\" / \");"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"            Task task;"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"            switch (tokens[0]) {"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"            case \"T\":"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"                task \u003d new ToDo(tokens[2]);"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"            case \"D\":"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"                task \u003d new Deadline(tokens[2], tokens[3]);"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"                break;"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":"            case \"E\":"},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":"                task \u003d new Event(tokens[2], tokens[3]);"},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"            default:"},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":"                assert false;"},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"            if (Integer.parseInt(tokens[1]) \u003d\u003d 1) {"},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":"                task.markAsDone();"},{"lineNumber":83,"author":{"gitId":"georgepwhuang"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"georgepwhuang"},"content":"            list.add(task);"},{"lineNumber":85,"author":{"gitId":"georgepwhuang"},"content":"        });"},{"lineNumber":86,"author":{"gitId":"georgepwhuang"},"content":"        sc.close();"},{"lineNumber":87,"author":{"gitId":"georgepwhuang"},"content":"        return list;"},{"lineNumber":88,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":89}},{"path":"src/main/java/blarb/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code Task} contains an action and its completion status."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"class Task {"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"    private final String description;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs a new uncompleted  {@code Task}."},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The name of the task."},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     * Gets the description of the task."},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"     * @return Task description."},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    public String getDescription() {"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"        return description;"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"    private String getStatusIcon() {"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"     * Toggles to completion status to completed."},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"    public void markAsDone() {"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        isDone \u003d true;"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"     * Converts {@code Task} into string format to be stored in file."},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"     * @return String format to be stored in file."},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"    public String encode() {"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"%d / %s\", isDone ? 1 : 0, description);"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"     * String representation of the Task."},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"     * @return Task in check list form."},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":58}},{"path":"src/main/java/blarb/Tasklist.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import java.util.stream.IntStream;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":" * {@code Tasklist} stores and operates on the list of {@code Tasks}."},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":" *"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":" * @see java.lang.Iterable"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"class Tasklist implements Iterable\u003cTask\u003e {"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    private final List\u003cTask\u003e list;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes a {@code Tasklist}."},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    public Tasklist() {"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"        list \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"     * Finds and prints the relevant tasks by the inputted keywords."},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"     * @param input Keywords for the search."},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    public String find(String input) {"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        CharSequence target \u003d input.subSequence(0, input.length());"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        String result \u003d IntStream.rangeClosed(1, list.size())"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"                .filter(idx -\u003e list.get(idx).getDescription().contains(target))"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"                .mapToObj(idx -\u003e String.format(\"\\n%d. %s\", idx, list.get(idx).toString()))"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"                .collect(() -\u003e new StringBuilder(\"Here are the matching tasks in your list:\"),"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"                        StringBuilder::append,"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"                        StringBuilder::append)"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"                .toString();"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        if (result.lines().count() \u003c\u003d 1) {"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"            return \"There are no matching tasks in your list.\";"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"            return result;"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"     * Lists everything in the task list."},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of the task list."},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    public String list() {"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"        if (list.size() \u003c 1) {"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"            return \"You have nothing on your list.\";"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"            return IntStream.rangeClosed(1, list.size())"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"                    .mapToObj(idx -\u003e String.format(\"\\n%d. %s\", idx, list.get(idx).toString()))"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"                    .collect(() -\u003e new StringBuilder(\"Here are your tasks:\\n\"),"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"                            StringBuilder::append,"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"                            StringBuilder::append)"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"                    .toString();"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"     * Adds a new Task to the task list."},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"     * @param task Task to be added."},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of added task."},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"    public String add(Task task) {"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"        String addTask \u003d \"Affirmative. I\u0027ve added this task:\\n %s\\n\""},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"                + \"Now you have %d tasks in the list.\";"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"        list.add(task);"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(addTask, task.toString(), list.size());"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":"     * Adds multiple new Tasks to the task list."},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":"     * @param list List of tasks to be added."},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of added task."},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":"    public void addAll(List\u003cTask\u003e list) {"},{"lineNumber":83,"author":{"gitId":"georgepwhuang"},"content":"        this.list.addAll(list);"},{"lineNumber":84,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":86,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"georgepwhuang"},"content":"     * Changes the indexed task to a completed state."},{"lineNumber":88,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"georgepwhuang"},"content":"     * @param index The index of the task."},{"lineNumber":90,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of finished task"},{"lineNumber":91,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"georgepwhuang"},"content":"    public String done(int index) throws IndexOutOfBoundsException {"},{"lineNumber":93,"author":{"gitId":"georgepwhuang"},"content":"        list.get(index).markAsDone();"},{"lineNumber":94,"author":{"gitId":"georgepwhuang"},"content":"        String done \u003d \"I\u0027ve marked this task as done:\\n%s\";"},{"lineNumber":95,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(done, list.get(index));"},{"lineNumber":96,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":98,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"georgepwhuang"},"content":"     * Delete the indexed task."},{"lineNumber":100,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"georgepwhuang"},"content":"     * @param index The index of the task."},{"lineNumber":102,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of deleted task."},{"lineNumber":103,"author":{"gitId":"georgepwhuang"},"content":"     * @throws IndexOutOfBoundsException The inputted index does not exist in the list."},{"lineNumber":104,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"georgepwhuang"},"content":"    public String delete(int index) throws IndexOutOfBoundsException {"},{"lineNumber":106,"author":{"gitId":"georgepwhuang"},"content":"        String delete \u003d \"The task is terminated:\\n%s\";"},{"lineNumber":107,"author":{"gitId":"georgepwhuang"},"content":"        Task output \u003d list.remove(index);"},{"lineNumber":108,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(delete, output);"},{"lineNumber":109,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":111,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"georgepwhuang"},"content":"     * A iteration of all the tasks in the task list."},{"lineNumber":113,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"georgepwhuang"},"content":"     * @return A iterator of the task list."},{"lineNumber":115,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"georgepwhuang"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":118,"author":{"gitId":"georgepwhuang"},"content":"        return list.iterator();"},{"lineNumber":119,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":120}},{"path":"src/main/java/blarb/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":" * {@code ToDo} is a {@code Task} that does not have further details attached."},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" * @see Task"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs a new uncompleted {@code ToDo}."},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     * @param description The name of the task."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    public ToDo(String description) {"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * Converts {@code Todo} into string format to be stored in file."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     * @return String format to be stored in file."},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    public String encode() {"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        return String.format(\"T / %s\", super.encode());"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     * String representation of the ToDo."},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"     * @return ToDo in check list form."},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":36}},{"path":"src/main/java/blarb/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":" * {@code Ui} is the user interface."},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"class Ui {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    private final Scanner sc;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"     * Initializes a new User Interface."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    Ui() {"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * Reads in the user input."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     * @return String interpretation of the user input."},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    public String read() {"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        return sc.nextLine();"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     * Checks if the UI is available."},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"     * @return The availability of the UI."},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    public boolean isAvailable() {"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"        return sc.hasNextLine();"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"     * Prints the logo of the chatbot."},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"    public void rollCredits() {"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"        String logo \u003d \" ____            _      ____   ____\\n\""},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"                + \"|    \\\\ |        / \\\\    |    \\\\ |    \\\\\\n\""},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"                + \"|____/ |       /___\\\\   |____/ |____/\\n\""},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"                + \"|    \\\\ |      /     \\\\  |  \\\\   |    \\\\\\n\""},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"                + \"|____/ |____ /       \\\\ |   \\\\_ |____/\\n\";"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"        System.out.println(\"You are now in the presence of\\n\" + logo);"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"     * Bids goodbye to the user."},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"    public void adios() {"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"        System.out.println(\"Hasta la vida, baby.\");"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"     * Prints output in response format."},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"     * @param output Output string"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"    public void blurt(String output) {"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"        String response \u003d \"%s\\n\\n\u003e \";"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"        System.out.printf(response, output);"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"     * Prints an error message generated by exceptions not caused by user input."},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"     * @param warn The warning message to be displayed."},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"    public void warn(String warn) {"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"        String response \u003d \"Error! %s\\n\\n\";"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"        System.out.printf(response, warn);"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":74}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"         \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"            \u003cFont size\u003d\"16.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"georgepwhuang":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"blarb.Gui\"\u003e"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"georgepwhuang":19}},{"path":"src/test/java/blarb/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"public class CommandTest {"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"    public void command_success() {"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(Command.BYE, Command.command(\"bYe\"));"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(Command.UNKNOWN, Command.command(\"asdfjak\"));"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(Command.UNKNOWN, Command.command(\"\"));"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":14}},{"path":"src/test/java/blarb/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package blarb;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"    public void stringify_correctInputFormat_success() {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(\"[D][\\u2718] sth (by: Sep 27 2000 AD)\","},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"                new Deadline(\"sth\", \"2000-09-27\").toString());"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(\"D / 0 / sth / 2000-09-27\","},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"                new Deadline(\"sth\", \"2000-09-27\").encode());"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    public void stringify_wrongInputFormat_exceptionThrown() {"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"            assertEquals(\"[D][\\u2718] sth (by Sep 27 2000 AD) \","},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"                    new Deadline(\"sth\", \"2000/09/27\").toString());"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"            fail();"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"            assertEquals(\"Text \u00272000/09/27\u0027 could not be parsed at index 4\", ex.getMessage());"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"todo curl up and cry"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":"deadline SWE IP /by Thursday"},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"event barhopping /at Clarke Quay"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"list"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"delete 3"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"list"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"bye"}],"authorContributionMap":{"georgepwhuang":8}}]
