[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"    enableAssertions \u003d true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"jlxw48":18}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.commands.Command;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.DukeException;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidTaskTypeException;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Parser;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    private static final String FILE_PATH \u003d \"./src/main/java/duke/tasks.txt\";"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    private static final Storage STORAGE \u003d new Storage(FILE_PATH);"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private static TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * Gets input from the user via the GUI and processes it."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    public String getResponse(String input) {"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"            Parser p \u003d new Parser(taskList, STORAGE);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"            Command c \u003d p.parse(input);"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"            String output \u003d c.execute();"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"            this.isExit \u003d c.isExit();"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"            return output;"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        } catch (DukeException e) {"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"            return e.getMessage();"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     * Initialises Duke by populating taskList with Tasks stored in local storage file."},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     * @return message indicating status of file load."},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    public String introduction() {"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"            String msg \u003d \"Hello! I\u0027m Duke.\\n\";"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"            taskList \u003d STORAGE.loadFromFile();"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"            if (taskList.getList().size() \u003d\u003d 0) {"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"                msg +\u003d \"You have no existing tasks!\";"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"                msg +\u003d \"You have existing tasks! \\nEnter \u0027list\u0027 to see your list of tasks!\";"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"            return msg;"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"            return \"Cannot access file at specified location.\\n\" + e.getMessage();"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        } catch (InvalidTaskTypeException e) {"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"            return \"Erroneous task type in file. Please check your file again!\";"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"    public boolean isExit() {"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"        return this.isExit;"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"jlxw48":60}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"public class ByeCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    public ByeCommand(TaskList taskList, Storage storage) {"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     * Saves all Tasks in taskList to local file, and then prints exit message."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     * @return exit message to be displayed."},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"            this.storage.writeToFile(this.taskList);"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"            return \"Bye. Hope to see you again soon!\";"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"            return e.getMessage();"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * Returns signal indicating to exit the program."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     * @return boolean signal indicating to exit the program."},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        return true;"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":38}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    protected TaskList taskList;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    protected Storage storage;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    Command(TaskList taskList, Storage storage) {"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        this.storage \u003d storage;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    public abstract String execute();"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Returns signal to indicate if command is end of program."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * @return boolean signal to indicate end of program."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public boolean isExit() {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        return false;"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":25}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Deadline;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    private String task;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     * Creates a DeadlineCommand object to store the deadline command input from the user."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * @param task the task input by the user."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time associated with the task."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public DeadlineCommand(TaskList taskList, Storage storage, String task, LocalDateTime dateTime) {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        this.task \u003d task;"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * Adds a Deadline task with previously specified description and dateTime to taskList."},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     * @return confirmation message for added Deadline Task."},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        Deadline d \u003d new Deadline(this.task, this.dateTime);"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        String msg \u003d \"Got it. I\u0027ve added this task:\\n\" + d;"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(d);"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        return msg;"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":39}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    private int position;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     * Creates a DeleteCommand object to store the delete command input from the user."},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     * @param position the position of the task to delete from the taskList."},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    public DeleteCommand(TaskList taskList, Storage storage, int position) {"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        this.position \u003d position;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * Deletes Task at the previously specified position in the taskList."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * Thereafter, prints confirmation and remaining number of tasks."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     * @return message confirming that indicated task is deleted."},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        String msg \u003d \"Noted. I\u0027ve removed this task:\\n\" + this.taskList.getList().get(this.position);"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        this.taskList.deleteTask(this.position);"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        String numTasksLeft \u003d \"\\nNow you have \" + this.taskList.getList().size() + \" tasks in the list.\";"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"        return msg + numTasksLeft;"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":34}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class DoneCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"done\";"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    private int position;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     * Creates a DoneCommand object to store the done command input from the user."},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     * @param position the position of the task in the taskList to mark as done."},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    public DoneCommand(TaskList taskList, Storage storage, int position) {"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        this.position \u003d position;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * Marks Task at previously specified position of tasklist as done, before printing a confirmation message."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * @return message confirming that indicated task is set as done."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"        this.taskList.setTaskDone(this.position);"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + this.taskList.getList().get(this.position);"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":31}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"public class EventCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"event\";"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    private String task;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     * Creates a EventCommand object to store the event command input from the user."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * @param task the task input by the user."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time associated with the task."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public EventCommand(TaskList taskList, Storage storage, String task, LocalDateTime dateTime) {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        this.task \u003d task;"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * Adds an Event task with previously specified description and dateTime to taskList."},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     * @return confirmation message for added Deadline Task."},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        Event e \u003d new Event(this.task, this.dateTime);"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(e);"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + e;"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":38}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    private String toFind;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     * Creates a FindCommand object to store the find command input from the user."},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * @param toFind the phrase to search in all the tasks."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public FindCommand(TaskList taskList, Storage storage, String toFind) {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        this.toFind \u003d toFind;"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     * Searches TaskList for Tasks with descriptions matching toFind String."},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * If there exist such Tasks, prints these Tasks."},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     * Else, display message indicating no matching Tasks."},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * @return message showing all the relevant Tasks."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        Pattern p \u003d Pattern.compile(toFind, Pattern.CASE_INSENSITIVE);"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e results \u003d searchList(p);"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        if (results.size() \u003d\u003d 0) {"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"            return \"There are no tasks matching your input :(\";"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"            return printList(results).toString();"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    private StringBuilder printList(List\u003cTask\u003e results) {"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"        StringBuilder sb \u003d new StringBuilder(\"These are the search results:\");"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"        int counter \u003d 1;"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"        for (Task t : results) {"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"            sb.append(\"\\n\" + counter + \". \" + t.toString());"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"            counter++;"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"        return sb;"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    private List\u003cTask\u003e searchList(Pattern regEx) {"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"        for (Task t : this.taskList.getList()) {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"            String description \u003d t.getDescription();"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"            Matcher m \u003d regEx.matcher(description);"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"            if (m.find()) {"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"                results.add(t);"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"        return results;"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":65}},{"path":"src/main/java/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class HelpCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public HelpCommand(TaskList taskList, Storage storage) {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        return \"Valid commands include the following:\\n\" + \"\u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027, \u0027list\u0027, \u0027delete\u0027, \u0027bye\u0027\\n\""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"                + \"Please start your input with one of the above commands!\";"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":18}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class ListCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public ListCommand(TaskList taskList, Storage storage) {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"     * Prints all tasks in taskList."},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     * @return String representation of all tasks in taskList."},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        return this.taskList.getListInString();"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":21}},{"path":"src/main/java/duke/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.ToDo;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class ToDoCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    private String todo;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"     * Creates a ToDoCommand object to store the todo command input from the user."},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     * @param todo the task input by the user."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    public ToDoCommand(TaskList taskList, Storage storage, String todo) {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        this.todo \u003d todo;"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * Adds a ToDo task with previously specified description to taskList."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     * @return message confirming that indicated ToDo task is added."},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        ToDo t \u003d new ToDo(this.todo);"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(t);"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + t;"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":33}},{"path":"src/main/java/duke/dukeexceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/EmptyArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class EmptyArgumentException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public EmptyArgumentException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class EmptyListException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public EmptyListException() {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(\"Your TaskList is empty!\");"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public InvalidCommandException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Custom Exception class to specify invalid date format input by the user."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class InvalidDateTimeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"     * Constructs an InvalidDateTimeException to tell the user that the input date format is not recognised by the"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"     * system."},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    public InvalidDateTimeException() {"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"        super(\"Please enter your date in one of the following formats:\\n\""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"                + \"d/M/yyyy HHmm OR d MMM yy HHmm OR dd-MM-yy HHmm\");"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":15}},{"path":"src/main/java/duke/dukeexceptions/InvalidIndexInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class InvalidIndexInputException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public InvalidIndexInputException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/InvalidTaskTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Custom Exception class to specify invalid Task stored in local file."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class InvalidTaskTypeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public InvalidTaskTypeException() {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(\"Invalid task type!\");"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":10}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Deadline task object."},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"     * @param description the description of the Deadline task."},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time this task is due, in String representation."},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public Deadline(String description, String dateTime) {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d LocalDateTime.parse(dateTime, FORMATTER);"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Deadline task object."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * @param description the description of the Deadline task."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time this task is due, as a LocalDateTime."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    public Deadline(String description, LocalDateTime dateTime) {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    public String getDateTime() {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy, h:mm a\"));"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     * Returns a specific String format of this Deadline\u0027s date to store locally when writing to file."},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     * @return String format of this Deadline\u0027s date."},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public String getDateToStore() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Deadline task, identified by \"[D]\", along with the date of this Deadline."},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDateTime() + \")\";"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":51}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Event task object."},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"     * @param description the description of the Event task."},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time this task is due, in String representation."},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public Event(String description, String dateTime) {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d LocalDateTime.parse(dateTime, FORMATTER);"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Event task object."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * @param description the description of the Event task."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time this task is due, as a LocalDateTime."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    public Event(String description, LocalDateTime dateTime) {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    public String getDateTime() {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy, h:mm a\"));"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     * Returns a specific String format of this Event\u0027s date to store locally when writing to file."},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     * @return String format of this Event\u0027s date."},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public String getDateToStore() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Event task, identified by \"[E]\", along with the date of this Event."},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.getDateTime() + \")\";"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":51}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"public abstract class Task {"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    protected Task(String description) {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    private String getStatusIcon() {"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * Returns the description of a Task."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * @return String description of a task."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    public String getDescription() {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        return this.description;"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * Marks current task as done."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public void markAsDone() {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        this.isDone \u003d true;"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     * Checks if this Task is marked as done."},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"     * @return boolean indicating if this Task is done."},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    public boolean isDone() {"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        return this.isDone;"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Task item with status indicating if it is marked as done."},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     * @return String description of this Task."},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":55}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public TaskList() {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    public TaskList(List\u003cTask\u003e converted) {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e(converted);"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * Marks task at specified position to be done."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * @param pos position of task to be marked."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public void setTaskDone(int pos) {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        taskList.get(pos).markAsDone();"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     * Prints the list of tasks."},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     * If the list is empty, a statement indicating so will be printed."},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    public String getListInString () {"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        if (this.taskList.size() \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"            return getEmptyListInString();"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"            return getNonEmptyListInString().toString();"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    private String getEmptyListInString() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"You have completed all tasks!\");"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        return \"You have completed all tasks!\";"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    private StringBuilder getNonEmptyListInString() {"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\");"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"        int counter \u003d 1;"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"        for (Task t : this.taskList) {"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"            System.out.println(counter + \". \" + t);"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"            sb.append(\"\\n\" + counter + \". \" + t);"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"            counter++;"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"        return sb;"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"     * Prints the task at the specified position."},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"     * @param pos position of task to be printed."},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"    public void printTask(int pos) {"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"        System.out.println(this.taskList.get(pos));"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        return this.taskList;"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"     * Adds a task to the existing list of tasks."},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"     * @param t task to be added to the list."},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"    public void addTask(Task t) {"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"        this.taskList.add(t);"},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"     * Removes the task at the specified position from the list."},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"     * @param pos position of the task to be removed."},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"    public void deleteTask(int pos) {"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"        this.taskList.remove(pos);"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"     * Prints the number of existing tasks in the list."},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":"    public void printNumTasksInList() {"},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Now you have \" + this.taskList.size() + \" tasks in the list.\");"},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":92}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public ToDo(String description) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this ToDo task, identified by \"[T]\"."},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":17}},{"path":"src/main/java/duke/utils/FileTaskStringConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidTaskTypeException;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Deadline;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Event;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.ToDo;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"public class FileTaskStringConverter {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Returns a List of Strings, each String representing 1 Task in the specified list."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * @param list List of Tasks to convert to Strings."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @return List of Strings."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    public static List\u003cString\u003e allTaskToAllString(List\u003cTask\u003e list) {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"        for (Task t : list) {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"            result.add(taskToString(t));"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        return result;"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     * Returns a List of Tasks, each Task converted from 1 String in the specified list."},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * @param list List of Strings to convert to Tasks."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     * @return List of Tasks."},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidTaskTypeException if local storage file contains invalid Task identified, i.e. not [T], [E] or"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     *     [D]."},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    public static List\u003cTask\u003e allStringToAllTask(List\u003cString\u003e list) throws InvalidTaskTypeException {"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        for (String s : list) {"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"            result.add(stringToTask(s));"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"        return result;"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    private static String taskToString(Task task) {"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"        String done \u003d task.isDone() ? \"1\" : \"0\";"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"        if (task instanceof ToDo) {"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"            return \"T | \" + done + \" | \" + task.getDescription();"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"            return \"E | \" + done + \" | \" + task.getDescription() + \" | \" + ((Event) task).getDateToStore();"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"            return \"D | \" + done + \" | \" + task.getDescription() + \" | \" + ((Deadline) task).getDateToStore();"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"    private static Task stringToTask(String input) throws InvalidTaskTypeException {"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"        String[] separated \u003d input.split(\" \\\\| \");"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"        char taskType \u003d separated[0].charAt(0);"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"        if (taskType \u003d\u003d \u0027T\u0027) {"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"            ToDo t \u003d new ToDo(separated[2]);"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"            if (separated[1].equals(\"1\")) {"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"                t.markAsDone();"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"            return t;"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"        } else if (taskType \u003d\u003d \u0027D\u0027) {"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"            Deadline d \u003d new Deadline(separated[2], LocalDateTime.parse(separated[3], formatter));"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"            if (separated[1].equals(\"1\")) {"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"                d.markAsDone();"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"            return d;"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"        } else if (taskType \u003d\u003d \u0027E\u0027) {"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"            Event e \u003d new Event(separated[2], LocalDateTime.parse(separated[3], formatter));"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"            if (separated[1].equals(\"1\")) {"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"                e.markAsDone();"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"            return e;"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidTaskTypeException();"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":86}},{"path":"src/main/java/duke/utils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.commands.Command;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DeadlineCommand;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"import duke.commands.EventCommand;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"import duke.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"import duke.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ToDoCommand;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.EmptyArgumentException;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.EmptyListException;"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidDateTimeException;"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidIndexInputException;"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"public class Parser {"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    private static final Pattern checkNum \u003d Pattern.compile(\"^[0-9]$\");"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    private final TaskList taskList;"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"    private final Storage storage;"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     * Constructors a Parser object, responsible for parsing input from the user."},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the list of tasks."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public Parser(TaskList taskList, Storage storage) {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        this.storage \u003d storage;"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"     * Returns command associated with the command line input from user."},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     * @param input command line input from user."},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"     * @return command associated with input from user."},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     * @throws EmptyArgumentException when only a 1 word command is passed without any following input."},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidDateTimeException when date entered by user is not a valid date or not an acceptable date format."},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidIndexInputException when index entered by user is not a number or not within range of 1 to"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"     *     the size of the TaskList."},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"     * @throws EmptyListException when trying to find by keyword but TaskList is empty."},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    public Command parse(String input) throws EmptyArgumentException, InvalidDateTimeException,"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"            InvalidIndexInputException, EmptyListException {"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"        String[] commandAndInput \u003d input.split(\" \", 2);"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"        String command \u003d commandAndInput[0];"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"        switch (command) {"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"        case ToDoCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"            return prepareToDo(commandAndInput);"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"        case DeadlineCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"            return prepareDeadline(commandAndInput);"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"        case EventCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"            return prepareEvent(commandAndInput);"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"            return prepareFind(commandAndInput);"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"        case DoneCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"            return prepareDone(commandAndInput);"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"            return prepareDelete(commandAndInput);"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"            return prepareList();"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"        case ByeCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"            return prepareExit();"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"        default:"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"            return prepareHelp();"},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":"    private Command prepareToDo(String[] arguments) {"},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":"        return new ToDoCommand(this.taskList, this.storage, arguments[1]);"},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":93,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDeadline(String[] arguments) throws EmptyArgumentException, InvalidDateTimeException {"},{"lineNumber":94,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":95,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please input a valid task description!\");"},{"lineNumber":96,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"jlxw48"},"content":"            String description \u003d arguments[1];"},{"lineNumber":98,"author":{"gitId":"jlxw48"},"content":"            String[] taskInputAndDate \u003d description.split(\"/\", 2);"},{"lineNumber":99,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":100,"author":{"gitId":"jlxw48"},"content":"            taskInputAndDate[0] \u003d taskInputAndDate[0].trim();"},{"lineNumber":101,"author":{"gitId":"jlxw48"},"content":"            taskInputAndDate[1] \u003d taskInputAndDate[1].trim();"},{"lineNumber":102,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":103,"author":{"gitId":"jlxw48"},"content":"            try {"},{"lineNumber":104,"author":{"gitId":"jlxw48"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(taskInputAndDate[1].substring(3), FORMATTER);"},{"lineNumber":105,"author":{"gitId":"jlxw48"},"content":"                return new DeadlineCommand(this.taskList, this.storage, taskInputAndDate[0], dateTime);"},{"lineNumber":106,"author":{"gitId":"jlxw48"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":107,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidDateTimeException();"},{"lineNumber":108,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":112,"author":{"gitId":"jlxw48"},"content":"    private Command prepareEvent(String[] arguments) throws EmptyArgumentException, InvalidDateTimeException {"},{"lineNumber":113,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":114,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please input a valid task description!\");"},{"lineNumber":115,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":116,"author":{"gitId":"jlxw48"},"content":"            String description \u003d arguments[1];"},{"lineNumber":117,"author":{"gitId":"jlxw48"},"content":"            String[] taskInputAndDate \u003d description.split(\"/\", 2);"},{"lineNumber":118,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":119,"author":{"gitId":"jlxw48"},"content":"            taskInputAndDate[0] \u003d taskInputAndDate[0].trim();"},{"lineNumber":120,"author":{"gitId":"jlxw48"},"content":"            taskInputAndDate[1] \u003d taskInputAndDate[1].trim();"},{"lineNumber":121,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":122,"author":{"gitId":"jlxw48"},"content":"            try {"},{"lineNumber":123,"author":{"gitId":"jlxw48"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(taskInputAndDate[1].substring(3), FORMATTER);"},{"lineNumber":124,"author":{"gitId":"jlxw48"},"content":"                return new EventCommand(this.taskList, this.storage, taskInputAndDate[0], dateTime);"},{"lineNumber":125,"author":{"gitId":"jlxw48"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":126,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidDateTimeException();"},{"lineNumber":127,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":131,"author":{"gitId":"jlxw48"},"content":"    private Command prepareFind(String[] arguments) throws EmptyArgumentException, EmptyListException {"},{"lineNumber":132,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":133,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please pass a word after the \u0027find\u0027 command!\");"},{"lineNumber":134,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"jlxw48"},"content":"            if (this.taskList.getList().size() \u003d\u003d 0) {"},{"lineNumber":136,"author":{"gitId":"jlxw48"},"content":"                throw new EmptyListException();"},{"lineNumber":137,"author":{"gitId":"jlxw48"},"content":"            } else {"},{"lineNumber":138,"author":{"gitId":"jlxw48"},"content":"                return new FindCommand(this.taskList, this.storage, arguments[1]);"},{"lineNumber":139,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":143,"author":{"gitId":"jlxw48"},"content":"    private int calcListPos(String taskIndex, String command) throws InvalidIndexInputException {"},{"lineNumber":144,"author":{"gitId":"jlxw48"},"content":"        Matcher m \u003d checkNum.matcher(taskIndex);"},{"lineNumber":145,"author":{"gitId":"jlxw48"},"content":"        if (m.find()) {"},{"lineNumber":146,"author":{"gitId":"jlxw48"},"content":"            return Integer.parseInt(taskIndex) - 1;"},{"lineNumber":147,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":148,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidIndexInputException(\"\u0027\" + command + \"\u0027 is command word; please pass a numerical index or \""},{"lineNumber":149,"author":{"gitId":"jlxw48"},"content":"                    + \"start your task with another word!\");"},{"lineNumber":150,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":153,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDone(String[] arguments) throws InvalidIndexInputException, EmptyArgumentException {"},{"lineNumber":154,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":155,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please pass an index after the \u0027done\u0027 command!\");"},{"lineNumber":156,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":157,"author":{"gitId":"jlxw48"},"content":"            int position \u003d calcListPos(arguments[1], arguments[0]);"},{"lineNumber":158,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":159,"author":{"gitId":"jlxw48"},"content":"            if (this.taskList.getList().size() \u003d\u003d 0) {"},{"lineNumber":160,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidIndexInputException(\"You have already done all tasks!\");"},{"lineNumber":161,"author":{"gitId":"jlxw48"},"content":"            } else if (position \u003e\u003d this.taskList.getList().size() || position \u003c 0) {"},{"lineNumber":162,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidIndexInputException(\"Please input an index from 1 to \""},{"lineNumber":163,"author":{"gitId":"jlxw48"},"content":"                        + this.taskList.getList().size() + \"!\");"},{"lineNumber":164,"author":{"gitId":"jlxw48"},"content":"            } else {"},{"lineNumber":165,"author":{"gitId":"jlxw48"},"content":"                return new DoneCommand(this.taskList, this.storage, position);"},{"lineNumber":166,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":167,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":170,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDelete(String[] arguments) throws InvalidIndexInputException, EmptyArgumentException {"},{"lineNumber":171,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":172,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please pass an index after the \u0027delete\u0027 command!\");"},{"lineNumber":173,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":174,"author":{"gitId":"jlxw48"},"content":"            int position \u003d calcListPos(arguments[1], arguments[0]);"},{"lineNumber":175,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":176,"author":{"gitId":"jlxw48"},"content":"            if (this.taskList.getList().size() \u003d\u003d 0) {"},{"lineNumber":177,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidIndexInputException(\"There are no tasks to delete!\");"},{"lineNumber":178,"author":{"gitId":"jlxw48"},"content":"            } else if (position \u003e\u003d this.taskList.getList().size() || position \u003c 0) {"},{"lineNumber":179,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidIndexInputException(\"Please input an index from 1 to \""},{"lineNumber":180,"author":{"gitId":"jlxw48"},"content":"                        + this.taskList.getList().size() + \"!\");"},{"lineNumber":181,"author":{"gitId":"jlxw48"},"content":"            } else {"},{"lineNumber":182,"author":{"gitId":"jlxw48"},"content":"                return new DeleteCommand(this.taskList, this.storage, position);"},{"lineNumber":183,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":187,"author":{"gitId":"jlxw48"},"content":"    private Command prepareList() {"},{"lineNumber":188,"author":{"gitId":"jlxw48"},"content":"        return new ListCommand(this.taskList, this.storage);"},{"lineNumber":189,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":191,"author":{"gitId":"jlxw48"},"content":"    private Command prepareExit() {"},{"lineNumber":192,"author":{"gitId":"jlxw48"},"content":"        return new ByeCommand(this.taskList, this.storage);"},{"lineNumber":193,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":195,"author":{"gitId":"jlxw48"},"content":"    private Command prepareHelp() {"},{"lineNumber":196,"author":{"gitId":"jlxw48"},"content":"        return new HelpCommand(this.taskList, this.storage);"},{"lineNumber":197,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":198}},{"path":"src/main/java/duke/utils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidTaskTypeException;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private final String filepath;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Storage object responsible for reading and writing to the local storage file."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * @param filepath the filepath of the local storage file, as a String."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    public Storage(String filepath) {"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     * Loads stored Tasks from local file and returns a TaskList populated with these Tasks."},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * If file is empty or does not exist, an empty TaskList will be returned."},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * @return TaskList populated with Tasks, if applicable."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public TaskList loadFromFile() throws FileNotFoundException, InvalidTaskTypeException {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        File file \u003d new File(filepath);"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e txt \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        if (file.exists()) {"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"            Scanner scannerFile \u003d new Scanner(file);"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"            while (scannerFile.hasNextLine()) {"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"                txt.add(scannerFile.nextLine());"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"            scannerFile.close();"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"        if (txt.size() \u003d\u003d 0) {"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"            return new TaskList();"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"            List\u003cTask\u003e converted \u003d FileTaskStringConverter.allStringToAllTask(txt);"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"            TaskList taskList \u003d new TaskList(converted);"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"            taskList.getListInString();"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"            return taskList;"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"     * Writes all Tasks to file, and saves file to specified filepath."},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"     * @param taskList list of all tasks."},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"     * @throws IOException if unable to write to file completely."},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"    public void writeToFile(TaskList taskList) throws IOException {"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e allStringTasks \u003d FileTaskStringConverter.allTaskToAllString(taskList.getList());"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"        FileWriter fw \u003d new FileWriter(this.filepath);"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        StringBuilder text \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"        for (String s : allStringTasks) {"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"            text.append(s).append(\"\\n\");"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"        fw.write(text.toString());"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"        fw.close();"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":73}},{"path":"src/main/java/duke/utils/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    private static final String logo \u003d \" ____        _        \\n\""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"     * Prints the introduction message a user sees upon launching the application."},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    public void introduction() {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        System.out.println(logo);"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        String welcomeMessage \u003d \"Hello! I\u0027m Duke.\";"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        System.out.println(welcomeMessage);"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * Prints the specified error message as an error message."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @param errorMsg error message to print."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    public void showError(String errorMsg) {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        System.err.println(errorMsg);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * Prints the specified message."},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * @param msg message to print."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public void showMsg(String msg) {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        System.out.println(msg);"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     * Prints the list of valid commands and types of input."},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    public void showHelp() {"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        System.err.println(\"Valid commands include the following:\");"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        System.err.println(\"\u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027, \u0027list\u0027, \u0027delete\u0027, \u0027bye\u0027\");"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        System.err.println(\"Please start your input with one of the above commands!\");"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"    public void repeatInput() {"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Please enter your input again!\");"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":49}},{"path":"src/main/java/duke/window/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.window;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        displayPicture.setImage(img);"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"    private void flip() {"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"        Collections.reverse(tmp);"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        return new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"        db.flip();"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"        return db;"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":63}},{"path":"src/main/java/duke/window/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.window;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":12}},{"path":"src/main/java/duke/window/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.window;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().displayDukeIntroduction();"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":33}},{"path":"src/main/java/duke/window/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.window;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public void displayDukeIntroduction() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"                DialogBox.getDukeDialog(duke.introduction(), dukeImage)"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        );"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"    private void handleUserInput() {"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        );"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"        userInput.clear();"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":58}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"BASELINE_CENTER\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"110.0\" prefWidth\u003d\"291.0\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"         \u003cpadding\u003e"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"         \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    \u003c/children\u003e"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    \u003c/padding\u003e"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"jlxw48":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\" fx:controller\u003d\"duke.window.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"         \u003cfont\u003e"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"            \u003c/content\u003e"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"jlxw48":23}},{"path":"src/test/java/duke/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public void stringConstructor_description() {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        Deadline d \u003d new Deadline(\"homework\", \"31 Jan 21 2359\");"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"homework\", d.getDescription());"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    public void stringConstructor_date() {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        Deadline d \u003d new Deadline(\"homework\", \"31 Jan 21 2359\");"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"31 Jan 2021, 11:59 PM\", d.getDateTime());"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":19}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public void toStringTest() {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        Event e \u003d new Event(\"meeting friends\", \"1 Feb 21 1800\");"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"[E][ ] meeting friends (at: 01 Feb 2021, 6:00 PM)\","},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"                e.toString());"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":14}},{"path":"src/test/java/duke/utils/FileTaskStringConverterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidTaskTypeException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"public class FileTaskStringConverterTest {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public void stringToTaskTest() {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        String inputFromFile \u003d \"E | 0 | project meeting | 15/12/2020 0911\";"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e allInput \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        allInput.add(inputFromFile);"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"            List\u003cTask\u003e allTasks \u003d FileTaskStringConverter.allStringToAllTask(allInput);"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"            assertEquals(\"[E][ ] project meeting (at: 15 Dec 2020, 9:11 AM)\","},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"                    allTasks.get(0).toString());"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"        } catch (InvalidTaskTypeException e){"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":26}},{"path":"tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"T | 0 | todo"}],"authorContributionMap":{"jlxw48":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"event project meeting /at Monday 2-4pm"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"delete 3"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"bye"}],"authorContributionMap":{"jlxw48":12}}]
