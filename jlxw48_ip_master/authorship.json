[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"# Duke Chatbot - Manage Your Tasks!"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"A chatbot which helps you remember and manage your tasks."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"## Types of Tasks"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    1. Todo task"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    2. Deadline task with a deadline"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    3. Event task with the date and time of the event"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    "},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"## User Guide"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"Let\u0027s get started [here](https://jlxw48.github.io/ip/)!"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"## Sample Interface"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"![img.png](docs/Ui.png)"}],"authorContributionMap":{"-":5,"jlxw48":12}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    mainClassName \u003d \"duke.window.Launcher\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"    enableAssertions \u003d true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"jlxw48":19}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"## Setting up"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"Ensure you have installed Java 11 or above."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"Download the latest duke.jar [here](https://github.com/jlxw48/ip/releases/)."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"Copy the file to the folder you want to use as the home folder for Popo Task Manager."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"Double-click the jar file to start the application. Alternatively, you can run the command `java -jar duke.jar` in your terminal or command line!"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"### `todo` - Create a todo task"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"Creates a todo task and adds it to your task list."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"**Format:** `todo DESCRIPTION`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"`todo go for a run`"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"**Expected outcome:**"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"![img.png](add_todo.png)"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"### `deadline` - Create a task with a deadline"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"Creates a task with a deadline and adds it to your task list."},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"**Format:** `deadline DESCRIPTION /by DATE`"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"`deadline Assignment 1 /by 19 Feb 2359`"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"![img.png](add_deadline.png)"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"### `event` - Create an event"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"Creates an event and adds it to your task list."},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"**Format:** `event DESCRIPTION /at DATE`"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"`event dinner with friends /at 19 Feb 21 1800`"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"**Expected outcome:**"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"![img.png](add_event.png)"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"### `list` - Lists all your current tasks in your task list"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"Lists all the tasks currently in your task list."},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"**Format:** `list`"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"`list`"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"**Expected outcome:**"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"![img.png](list.png)"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"### `done` - Marks a task as done"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"Marks the task with the specified index number as done (see 1st image)."},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"When `list` command is called, this is also indicated with an X in the checkbox (see 2nd image)."},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"Repeating this command will inform you that this task has already been completed (see 3rd image)."},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"**Format:** `done INDEX`"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"* The index must be a positive integer."},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"* The index must be within the range of index numbers displayed when `list` command is called."},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":"`done 1`"},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":"**Expected outcome:**"},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":93,"author":{"gitId":"jlxw48"},"content":"![img.png](done_1.png)"},{"lineNumber":94,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":95,"author":{"gitId":"jlxw48"},"content":"![img.png](done_2.png)"},{"lineNumber":96,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":97,"author":{"gitId":"jlxw48"},"content":"![img.png](done_3.png)"},{"lineNumber":98,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":99,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":100,"author":{"gitId":"jlxw48"},"content":"### `delete` - Deletes a task"},{"lineNumber":101,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":102,"author":{"gitId":"jlxw48"},"content":"Deletes a task from the task list with the specified index number."},{"lineNumber":103,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":104,"author":{"gitId":"jlxw48"},"content":"**Format:** `delete INDEX`"},{"lineNumber":105,"author":{"gitId":"jlxw48"},"content":"* The index must be a positive integer."},{"lineNumber":106,"author":{"gitId":"jlxw48"},"content":"* The index must be within the range of index numbers displayed when `list` command is called."},{"lineNumber":107,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":108,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":109,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":110,"author":{"gitId":"jlxw48"},"content":"`delete 1`"},{"lineNumber":111,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":112,"author":{"gitId":"jlxw48"},"content":"**Expected outcome:**"},{"lineNumber":113,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":114,"author":{"gitId":"jlxw48"},"content":"![img.png](delete.png)"},{"lineNumber":115,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":116,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":117,"author":{"gitId":"jlxw48"},"content":"### `find` - Finds a task"},{"lineNumber":118,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":119,"author":{"gitId":"jlxw48"},"content":"Finds a task with the matching phrase."},{"lineNumber":120,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":121,"author":{"gitId":"jlxw48"},"content":"**Format:** `find PHRASE`"},{"lineNumber":122,"author":{"gitId":"jlxw48"},"content":"* The phrase to match can be part of a word, or made up of a few words."},{"lineNumber":123,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":124,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":125,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":126,"author":{"gitId":"jlxw48"},"content":"`find with friends`"},{"lineNumber":127,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":128,"author":{"gitId":"jlxw48"},"content":"**Expected outcome:**"},{"lineNumber":129,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":130,"author":{"gitId":"jlxw48"},"content":"![img.png](find.png)"},{"lineNumber":131,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":132,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":133,"author":{"gitId":"jlxw48"},"content":"### `bye` - Goodbye!"},{"lineNumber":134,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":135,"author":{"gitId":"jlxw48"},"content":"Ends the conversation with the chatbot and closes the window after 5 seconds."},{"lineNumber":136,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":137,"author":{"gitId":"jlxw48"},"content":"Tasks in the task list are also saved locally to a tasks.txt file."},{"lineNumber":138,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":139,"author":{"gitId":"jlxw48"},"content":"**Format:** `bye`"},{"lineNumber":140,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":141,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":142,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":143,"author":{"gitId":"jlxw48"},"content":"`bye`"},{"lineNumber":144,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":145,"author":{"gitId":"jlxw48"},"content":"**Expected outcome:**"},{"lineNumber":146,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":147,"author":{"gitId":"jlxw48"},"content":"![img.png](bye.png)"},{"lineNumber":148,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":149,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":150,"author":{"gitId":"jlxw48"},"content":"### `help` - Displays all possible commands"},{"lineNumber":151,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":152,"author":{"gitId":"jlxw48"},"content":"Displays all possible commands and their formats."},{"lineNumber":153,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":154,"author":{"gitId":"jlxw48"},"content":"**Format:** `help`, `help (COMMAND)`"},{"lineNumber":155,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":156,"author":{"gitId":"jlxw48"},"content":"**Example of usage:**"},{"lineNumber":157,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":158,"author":{"gitId":"jlxw48"},"content":"`help` (see 1st image)"},{"lineNumber":159,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":160,"author":{"gitId":"jlxw48"},"content":"`help find` (see 2nd image)"},{"lineNumber":161,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":162,"author":{"gitId":"jlxw48"},"content":"**Expected outcome:**"},{"lineNumber":163,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":164,"author":{"gitId":"jlxw48"},"content":"![img.png](help_1.png)"},{"lineNumber":165,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":166,"author":{"gitId":"jlxw48"},"content":"![img.png](help_2.png)"},{"lineNumber":167,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":168,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":169,"author":{"gitId":"jlxw48"},"content":"## FAQ"},{"lineNumber":170,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":171,"author":{"gitId":"jlxw48"},"content":"**Q**: What are the acceptable date formats?"},{"lineNumber":172,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":173,"author":{"gitId":"jlxw48"},"content":"**A**: Below are the acceptable date formats:"},{"lineNumber":174,"author":{"gitId":"jlxw48"},"content":"   * d/M/yyyy e.g. 19/2/2021"},{"lineNumber":175,"author":{"gitId":"jlxw48"},"content":"   * d MMM yy e.g. 19 Feb 21"},{"lineNumber":176,"author":{"gitId":"jlxw48"},"content":"   * dd-MM-yy e.g. 19-02-21"},{"lineNumber":177,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":178,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":179,"author":{"gitId":"jlxw48"},"content":"**Q**: What are the acceptable time formats?"},{"lineNumber":180,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":181,"author":{"gitId":"jlxw48"},"content":"**A**: Currently, we only accept 1 time format - 24h!"}],"authorContributionMap":{"-":17,"jlxw48":164}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.commands.Command;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.DukeException;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidFileTaskTypeException;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Parser;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    private static final String FILE_PATH \u003d \"./storage/tasks.txt\";"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    private static final Storage STORAGE \u003d new Storage(FILE_PATH);"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private static TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Gets input from the user via the GUI and processes it."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"        Parser parser \u003d new Parser(taskList, STORAGE);"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        Command command \u003d parser.parse(input);"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        String response \u003d command.execute();"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        return response;"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * Initialises Duke by populating taskList with Tasks stored in local storage file."},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     * @return message indicating status of file load."},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * @throws FileNotFoundException when file does not exist."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidFileTaskTypeException when an entry in the file has errors."},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    public String introduction() throws FileNotFoundException, InvalidFileTaskTypeException {"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        String msg \u003d \"Hello! I\u0027m Duke.\\n\";"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        taskList \u003d STORAGE.loadFromFile();"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"        if (taskList.getList().size() \u003d\u003d 0) {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"            msg +\u003d \"You have no existing tasks!\";"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"            msg +\u003d \"You have existing tasks! \\nEnter \u0027list\u0027 to see your list of tasks!\";"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        return msg;"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"jlxw48":43}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":" * Represents a bye command which writes to local storage and terminates the program."},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"public class ByeCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public ByeCommand(TaskList taskList, Storage storage) {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Saves all Tasks in taskList to local file, and then prints exit message."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * @return exit message to be displayed."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"            this.storage.writeToFile(this.taskList);"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"            String byeMsg \u003d \"Bye! Hope to see you again soon!\\nThis window will be closing in 5 seconds...\";"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"            return byeMsg;"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"            return e.getMessage();"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":33}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public abstract class Command {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    protected TaskList taskList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    protected Storage storage;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    Command(TaskList taskList, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"        this.storage \u003d storage;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    public abstract String execute();"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":16}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Deadline;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":" * Represents a deadline command which adds a task with a deadline to the task list."},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    private String task;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Creates a DeadlineCommand object to store the deadline command input from the user."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * @param task the String task input by the user."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time associated with the task."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    public DeadlineCommand(TaskList taskList, Storage storage, String task, LocalDateTime dateTime) {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"        this.task \u003d task;"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     * Adds a Deadline task with previously specified description and dateTime to taskList."},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * @return confirmation message for added Deadline Task."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        Deadline deadline \u003d new Deadline(this.task, this.dateTime);"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        String successAddMsg \u003d \"Got it. I\u0027ve added this task:\\n\" + deadline;"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(deadline);"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        return successAddMsg;"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":44}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":" * Represents a delete command which deletes a task at the specified index in the task list."},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    private int position;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     * Creates a DeleteCommand object to store the delete command input from the user."},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * @param position the position of the task to delete from the taskList."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    public DeleteCommand(TaskList taskList, Storage storage, int position) {"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        this.position \u003d position;"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     * Deletes Task at the previously specified position in the taskList."},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * Thereafter, prints confirmation and remaining number of tasks."},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     * @return message confirming that indicated task is deleted."},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        String msg \u003d \"Noted. I\u0027ve removed this task:\\n\" + this.taskList.getList().get(this.position);"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        this.taskList.deleteTask(this.position);"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        String numTasksLeft \u003d \"\\nNow you have \" + this.taskList.getList().size() + \" tasks in the list.\";"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        return msg + numTasksLeft;"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":39}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":" * Represents a done command which marks a task at the specified index in the task list as done."},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"done\";"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    private int position;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     * Creates a DoneCommand object to store the done command input from the user."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * @param position the position of the task in the taskList to mark as done."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public DoneCommand(TaskList taskList, Storage storage, int position) {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        this.position \u003d position;"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     * Returns message indicating whether the Task\u0027s done status is successfully changed."},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     * @return message indicating the change in Task done status, if any."},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        Task currentTask \u003d this.taskList.getList().get(this.position);"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        if (currentTask.isDone()) {"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"            String alreadyDoneMsg \u003d \"This task is already done!\";"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"            return alreadyDoneMsg;"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        this.taskList.setTaskDone(this.position);"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        String markedDoneMsg \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + this.taskList.getList().get(this.position);"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        return markedDoneMsg;"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":45}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":" * Represents an event command which adds an event task to the task list."},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"public class EventCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"event\";"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    private String task;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Creates a EventCommand object to store the event command input from the user."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * @param task the String task input by the user."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time associated with the task."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    public EventCommand(TaskList taskList, Storage storage, String task, LocalDateTime dateTime) {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"        this.task \u003d task;"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     * Adds an Event task with previously specified description and dateTime to taskList."},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * @return confirmation message for added Deadline Task."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        Event event \u003d new Event(this.task, this.dateTime);"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(event);"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        String successAddMsg \u003d \"Got it. I\u0027ve added this task:\\n\" + event;"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        return successAddMsg;"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":44}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Matcher;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Pattern;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.utils.TaskStringConverter;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":" * Represents a find command which finds tasks with a specified phrase in the task description."},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"public class FindCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    private String toFind;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * Creates a FindCommand object to store the find command input from the user."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * @param toFind the phrase to search in all the tasks."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    public FindCommand(TaskList taskList, Storage storage, String toFind) {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        this.toFind \u003d toFind;"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     * Searches TaskList for Tasks with descriptions matching toFind String."},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     * If there exist such Tasks, prints these Tasks."},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     * Else, display message indicating no matching Tasks."},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     * @return message showing all the relevant Tasks."},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        Pattern regexPattern \u003d Pattern.compile(toFind, Pattern.CASE_INSENSITIVE);"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e results \u003d searchList(regexPattern);"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"        if (results.size() \u003d\u003d 0) {"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"            String noMatchingTaskMsg \u003d \"There are no tasks matching your input :(\";"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"            return noMatchingTaskMsg;"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"        String msg \u003d \"These are the search results:\" + listToString(results);"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"        return msg;"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"    private List\u003cTask\u003e searchList(Pattern regEx) {"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e results \u003d taskList.getList()"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"                .stream()"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"                .filter(task -\u003e {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"                    String description \u003d task.getDescription();"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"                    Matcher matcher \u003d regEx.matcher(description);"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"                    return matcher.find();"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"                })"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"                .collect(Collectors.toList());"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"        return results;"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"    private String listToString(List\u003cTask\u003e results) {"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"        String searchResults \u003d TaskStringConverter.stringTasksForProgram(results);"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"        return searchResults;"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":71}},{"path":"src/main/java/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":" * Represents a help command which displays information about the commands."},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"public class HelpCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    private static final String UNKNOWN_COMMAND \u003d \"unknown\";"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private static final Map\u003cString, String\u003e COMMAND_AND_DESCRIPTION \u003d Map.of("},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"            \"todo\", \"todo DESCRIPTION\","},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"            \"deadline\", \"deadline DESCRIPTION /by DATE\","},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"            \"event\", \"event DESCRIPTION /at DATE\","},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"            \"find\", \"find PHRASE\","},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"            \"done\", \"done INDEX\","},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"            \"delete\", \"delete INDEX\","},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"            \"list\", \"list\","},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"            \"bye\", \"bye\","},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"            \"help\", \"help (COMMAND)\","},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"            \"unknown\", \"This is not a valid command. Enter \u0027help\u0027 to see the list of our commands!\""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    );"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    private static final List\u003cString\u003e ALL_COMMANDS \u003d new ArrayList\u003c\u003e(COMMAND_AND_DESCRIPTION.keySet());"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    private String command;"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     * Creates a HelpCommand object to display instructions of all the commands available in this chatbot."},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public HelpCommand(TaskList taskList, Storage storage) {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        this.command \u003d null;"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"     * Creates a HelpCommand object to display instructions of the specified commands available in this chatbot."},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     * @param command the command to display instructions, if any."},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"    public HelpCommand(TaskList taskList, Storage storage, String command) {"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"        this.command \u003d command;"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"        if (this.command !\u003d null) {"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"            return returnOneInstruction();"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"        return returnAllInstructions();"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"    private String returnOneInstruction() {"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        if (COMMAND_AND_DESCRIPTION.get(this.command) \u003d\u003d null) {"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"            return COMMAND_AND_DESCRIPTION.get(UNKNOWN_COMMAND);"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder(\"Here is the format for \")"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"                                            .append(this.command)"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"                                            .append(\":\");"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"        stringBuilder.append(\"\\n\\nCommand: \")"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"                .append(this.command)"},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"                .append(\", Input format: \")"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"                .append(COMMAND_AND_DESCRIPTION.get(this.command));"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"        if (this.command.equals(DeadlineCommand.COMMAND_WORD) || this.command.equals(EventCommand.COMMAND_WORD)) {"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"            stringBuilder.append(\"\\n\\nAcceptable date formats: d/M/yyyy HHmm, d MMM yy HHmm, dd-MM-yy HHmm\");"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"        return stringBuilder.toString();"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"    private String returnAllInstructions() {"},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder(\"Here are the list of valid commands:\");"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":"        for (String command : ALL_COMMANDS) {"},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":"            if (command.equals(\"unknown\")) {"},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":"                continue;"},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":93,"author":{"gitId":"jlxw48"},"content":"            stringBuilder.append(\"\\n\\nCommand: \")"},{"lineNumber":94,"author":{"gitId":"jlxw48"},"content":"                    .append(command)"},{"lineNumber":95,"author":{"gitId":"jlxw48"},"content":"                    .append(\", Format: \")"},{"lineNumber":96,"author":{"gitId":"jlxw48"},"content":"                    .append(COMMAND_AND_DESCRIPTION.get(command));"},{"lineNumber":97,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":99,"author":{"gitId":"jlxw48"},"content":"        stringBuilder.append(\"\\n\\nAcceptable date formats: d/M/yyyy HHmm, d MMM yy HHmm, dd-MM-yy HHmm\");"},{"lineNumber":100,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":101,"author":{"gitId":"jlxw48"},"content":"        return stringBuilder.toString();"},{"lineNumber":102,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":103}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":" * Represents a list command to return the contents of the task list."},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    public ListCommand(TaskList taskList, Storage storage) {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     * Prints all tasks in taskList."},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * @return String representation of all tasks in taskList."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        if (this.taskList.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"            return this.taskList.getListInString();"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        String msg \u003d \"Here are the tasks you have:\\n\" + this.taskList.getListInString();"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"        return msg;"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":30}},{"path":"src/main/java/duke/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.ToDo;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":" * Represents a todo command which adds a todo task to the task list."},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"public class ToDoCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    private final String todo;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     * Creates a ToDoCommand object to store the todo command input from the user."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the current list of Tasks."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * @param todo the String task input by the user."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public ToDoCommand(TaskList taskList, Storage storage, String todo) {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        super(taskList, storage);"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        this.todo \u003d todo;"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     * Adds a ToDo task with previously specified description to taskList."},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     * @return message confirming that indicated ToDo task is added."},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public String execute() {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        ToDo todo \u003d new ToDo(this.todo);"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(todo);"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        String successAddMsg \u003d \"Got it. I\u0027ve added this task:\\n\" + todo;"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        return successAddMsg;"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":39}},{"path":"src/main/java/duke/dukeexceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/EmptyArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Models an exception to be thrown when a command is not followed by a required argument."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class EmptyArgumentException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public EmptyArgumentException(String message) {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":10}},{"path":"src/main/java/duke/dukeexceptions/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Models an exception to be thrown when the task list is empty when it is not supposed to be."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class EmptyListException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public EmptyListException() {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(\"Your TaskList is empty!\");"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":10}},{"path":"src/main/java/duke/dukeexceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Models the exception where an invalid command is not sent by the user."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public InvalidCommandException() {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(\"That is not a valid command format! Send \u0027help\u0027 if you need assistance!\");"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":10}},{"path":"src/main/java/duke/dukeexceptions/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Models the exception to be thrown when there is an invalid date and time format input."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class InvalidDateTimeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"     * Constructs an InvalidDateTimeException to tell the user that the input date format is not recognised by the"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"     * system."},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    public InvalidDateTimeException() {"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"        super(\"Please enter your date in one of the following formats:\\n\""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"                + \"d/M/yyyy HHmm OR d MMM yy HHmm OR dd-MM-yy HHmm\");"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":15}},{"path":"src/main/java/duke/dukeexceptions/InvalidFileTaskTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Models the exception to be thrown when there is a wrong task in the local storage file."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class InvalidFileTaskTypeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public InvalidFileTaskTypeException() {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(\"Invalid task type in local file!\");"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":10}},{"path":"src/main/java/duke/dukeexceptions/InvalidIndexInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Models the exception to be thrown when the user sends an invalid index for parsing."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class InvalidIndexInputException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public InvalidIndexInputException(String message) {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":10}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":" * Models a task with a deadline."},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Deadline task object. Overloaded constructor to take in a String dateTime parameter."},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     * @param description the description of the Deadline task."},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time this task is due, in String representation."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    public Deadline(String description, String dateTime) {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d LocalDateTime.parse(dateTime, FORMATTER);"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Deadline task object. Overloaded constructor to take in a LocalDateTime dateTime parameter."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * @param description the description of the Deadline task."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time this task is due, as a LocalDateTime."},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    public Deadline(String description, LocalDateTime dateTime) {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    public String getDateTime() {"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy, h:mm a\"));"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     * Returns a specific String format of this Deadline\u0027s date to store locally when writing to file."},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"     * @return String format of this Deadline\u0027s date."},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    public String getDateForFile() {"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Deadline task, identified by \"[D]\", along with the date of this Deadline."},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDateTime() + \")\";"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":56}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":" * Models an event task with a date and time."},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Event task object. Overloaded constructor to take in a String dateTime parameter."},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     * @param description the description of the Event task."},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time this task is due, in String representation."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    public Event(String description, String dateTime) {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d LocalDateTime.parse(dateTime, FORMATTER);"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Event task object. Overloaded constructor to take in a LocalDateTime dateTime parameter."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * @param description the description of the Event task."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     * @param dateTime the date and time this task is due, as a LocalDateTime."},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    public Event(String description, LocalDateTime dateTime) {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    public String getDateTime() {"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy, h:mm a\"));"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     * Returns a specific String format of this Event\u0027s date to store locally when writing to file."},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"     * @return String format of this Event\u0027s date."},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    public String getDateForFile() {"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Event task, identified by \"[E]\", along with the date of this Event."},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.getDateTime() + \")\";"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":56}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":" * Models a task with a description and a boolean indicating if task is completed. Parent class of Deadline, Event"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":" * and ToDo classes."},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    protected String description;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    protected boolean isDone;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    protected Task(String description) {"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    private String getStatusIcon() {"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * Returns the description of a Task."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     * @return String description of a task."},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    public String getDescription() {"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        return this.description;"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * Marks current task as done."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    public void markAsDone() {"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"        assert !this.isDone;"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        this.isDone \u003d true;"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"     * Checks if this Task is marked as done."},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"     * @return boolean indicating if this Task is done."},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"    public boolean isDone() {"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"        return this.isDone;"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Task item with status indicating if it is marked as done."},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"     * @return String description of this Task."},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":60}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.TaskStringConverter;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":" * Models a list of tasks, with operations to add, delete, set task as done and return a string"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":" * representation of all the tasks in the list."},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    public TaskList(List\u003cTask\u003e converted) {"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e(converted);"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * Marks task at specified position to be done."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * @param pos position of task to be marked."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    public void setTaskDone(int pos) {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        taskList.get(pos).markAsDone();"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"        return this.taskList;"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     * Adds a task to the existing list of tasks."},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     * @param task task to be added to the list."},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"    public void addTask(Task task) {"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        this.taskList.add(task);"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     * Removes the task at the specified position from the list."},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     * @param pos position of the task to be removed."},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"    public void deleteTask(int pos) {"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"        assert pos \u003e\u003d 0 \u0026\u0026 pos \u003c this.taskList.size();"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        this.taskList.remove(pos);"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"     * Returns message indicating the contents of the TaskList."},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"     * @return String message of concatenated List of Tasks, or message indicating an empty list."},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"    public String getListInString () {"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"        if (this.taskList.isEmpty()) {"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"            return getEmptyListInString();"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        return getNonEmptyListInString();"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"    private String getEmptyListInString() {"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"        assert this.taskList.isEmpty();"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"        String completedAllTasksMsg \u003d \"You have no existing tasks!\";"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"        return completedAllTasksMsg;"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"    private String getNonEmptyListInString() {"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"        assert !this.taskList.isEmpty();"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"        String allTasks \u003d TaskStringConverter.stringTasksForProgram(this.taskList);"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"        return allTasks;"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"    public boolean isEmpty() {"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"        return this.taskList.size() \u003d\u003d 0;"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":85}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Models a todo task."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public ToDo(String description) {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this ToDo task, identified by \"[T]\"."},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":20}},{"path":"src/main/java/duke/utils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.commands.Command;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DeadlineCommand;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"import duke.commands.EventCommand;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"import duke.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"import duke.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ToDoCommand;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.EmptyArgumentException;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.EmptyListException;"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidCommandException;"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidDateTimeException;"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidIndexInputException;"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":" * Models a parser which parses input from the user into commands."},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"public class Parser {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    private static final Pattern REGEX_CHECK_NUMBER \u003d Pattern.compile(\"^[0-9]+$\");"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    private static final String INVALID_TASK_MSG \u003d \"Please input a valid task description!\";"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    private static final String MISSING_TASK_DATE \u003d \"Please input a valid task date in the following format: \""},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"            + \"\u0027%s DESCRIPTION /%s DATE TIME\u0027!\";"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"    private static final String EMPTY_FIND_ARGUMENT \u003d \"Please pass a word after the \u0027find\u0027 command!\";"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    private static final String MISSING_INDEX_ARGUMENT \u003d \"Please pass an index after the \u0027%s\u0027 command!\";"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    private static final String EXCEED_LIST_RANGE \u003d \"Please input an index from 1 to %d!\";"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"    private static final String EMPTY_TASKLIST_DONE \u003d \"You have already done all tasks!\";"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    private static final String EMPTY_TASKLIST_DELETE \u003d \"There are no tasks to delete!\";"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    private TaskList taskList;"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    private Storage storage;"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     * Constructors a Parser object, responsible for parsing input from the user."},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     * @param taskList the list of tasks."},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     * @param storage the object in charge of writing to the local storage file."},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    public Parser(TaskList taskList, Storage storage) {"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        this.storage \u003d storage;"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"     * Returns command associated with the command line input from user."},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"     * @param input command line input from user."},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"     * @return command associated with input from user."},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"     * @throws EmptyArgumentException when only a 1 word command is passed without any following input."},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidDateTimeException when date entered by user is not a valid date or not an acceptable date format."},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidIndexInputException when index entered by user is not a number or not within range of 1 to"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"     *     the size of the TaskList."},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"     * @throws EmptyListException when trying to find by keyword but TaskList is empty."},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidCommandException when no valid command is passed."},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"    public Command parse(String input) throws EmptyArgumentException, InvalidDateTimeException,"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"            InvalidIndexInputException, EmptyListException, InvalidCommandException {"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"        String[] commandAndInput \u003d input.split(\" \", 2);"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"        String command \u003d commandAndInput[0];"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"        switch (command) {"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"        case ToDoCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"            return prepareToDo(commandAndInput);"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"        case DeadlineCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"            return prepareDeadline(commandAndInput);"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"        case EventCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"            return prepareEvent(commandAndInput);"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"            return prepareFind(commandAndInput);"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"        case DoneCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"            return prepareDone(commandAndInput);"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":"            return prepareDelete(commandAndInput);"},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitId":"jlxw48"},"content":"            return prepareList(commandAndInput);"},{"lineNumber":94,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":95,"author":{"gitId":"jlxw48"},"content":"        case ByeCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitId":"jlxw48"},"content":"            return prepareExit(commandAndInput);"},{"lineNumber":97,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":98,"author":{"gitId":"jlxw48"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitId":"jlxw48"},"content":"            return prepareHelp(commandAndInput);"},{"lineNumber":100,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":101,"author":{"gitId":"jlxw48"},"content":"        default:"},{"lineNumber":102,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidCommandException();"},{"lineNumber":103,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":106,"author":{"gitId":"jlxw48"},"content":"    private Command prepareToDo(String[] commandAndInput) throws EmptyArgumentException {"},{"lineNumber":107,"author":{"gitId":"jlxw48"},"content":"        if (insufficientArgumentFromUser(commandAndInput)) {"},{"lineNumber":108,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(INVALID_TASK_MSG);"},{"lineNumber":109,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":111,"author":{"gitId":"jlxw48"},"content":"        assert commandAndInput.length \u003d\u003d 2;"},{"lineNumber":112,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":113,"author":{"gitId":"jlxw48"},"content":"        return new ToDoCommand(this.taskList, this.storage, commandAndInput[1]);"},{"lineNumber":114,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":116,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDeadline(String[] commandAndInput) throws EmptyArgumentException, InvalidDateTimeException {"},{"lineNumber":117,"author":{"gitId":"jlxw48"},"content":"        if (insufficientArgumentFromUser(commandAndInput)) {"},{"lineNumber":118,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(INVALID_TASK_MSG);"},{"lineNumber":119,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":121,"author":{"gitId":"jlxw48"},"content":"        assert commandAndInput.length \u003d\u003d 2;"},{"lineNumber":122,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":123,"author":{"gitId":"jlxw48"},"content":"        String description \u003d commandAndInput[1];"},{"lineNumber":124,"author":{"gitId":"jlxw48"},"content":"        String[] taskInputAndDate \u003d description.split(\"/by \", 2);"},{"lineNumber":125,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":126,"author":{"gitId":"jlxw48"},"content":"        if (insufficientArgumentFromUser(taskInputAndDate)) {"},{"lineNumber":127,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(String.format(MISSING_TASK_DATE, \"deadline\", \"by\"));"},{"lineNumber":128,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":130,"author":{"gitId":"jlxw48"},"content":"        assert taskInputAndDate.length \u003d\u003d 2;"},{"lineNumber":131,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":132,"author":{"gitId":"jlxw48"},"content":"        trimInputsInArray(taskInputAndDate);"},{"lineNumber":133,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":134,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":135,"author":{"gitId":"jlxw48"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(taskInputAndDate[1], FORMATTER);"},{"lineNumber":136,"author":{"gitId":"jlxw48"},"content":"            return new DeadlineCommand(this.taskList, this.storage, taskInputAndDate[0], dateTime);"},{"lineNumber":137,"author":{"gitId":"jlxw48"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":138,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidDateTimeException();"},{"lineNumber":139,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":142,"author":{"gitId":"jlxw48"},"content":"    private Command prepareEvent(String[] commandAndInput) throws EmptyArgumentException, InvalidDateTimeException {"},{"lineNumber":143,"author":{"gitId":"jlxw48"},"content":"        if (insufficientArgumentFromUser(commandAndInput)) {"},{"lineNumber":144,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(INVALID_TASK_MSG);"},{"lineNumber":145,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":147,"author":{"gitId":"jlxw48"},"content":"        assert commandAndInput.length \u003d\u003d 2;"},{"lineNumber":148,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":149,"author":{"gitId":"jlxw48"},"content":"        String description \u003d commandAndInput[1];"},{"lineNumber":150,"author":{"gitId":"jlxw48"},"content":"        String[] taskInputAndDate \u003d description.split(\"/at \", 2);"},{"lineNumber":151,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":152,"author":{"gitId":"jlxw48"},"content":"        if (insufficientArgumentFromUser(taskInputAndDate)) {"},{"lineNumber":153,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(String.format(MISSING_TASK_DATE, \"event\", \"at\"));"},{"lineNumber":154,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":156,"author":{"gitId":"jlxw48"},"content":"        assert taskInputAndDate.length \u003d\u003d 2;"},{"lineNumber":157,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":158,"author":{"gitId":"jlxw48"},"content":"        trimInputsInArray(taskInputAndDate);"},{"lineNumber":159,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":160,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":161,"author":{"gitId":"jlxw48"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(taskInputAndDate[1], FORMATTER);"},{"lineNumber":162,"author":{"gitId":"jlxw48"},"content":"            return new EventCommand(this.taskList, this.storage, taskInputAndDate[0], dateTime);"},{"lineNumber":163,"author":{"gitId":"jlxw48"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":164,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidDateTimeException();"},{"lineNumber":165,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":168,"author":{"gitId":"jlxw48"},"content":"    private Command prepareFind(String[] commandAndInput) throws EmptyArgumentException, EmptyListException {"},{"lineNumber":169,"author":{"gitId":"jlxw48"},"content":"        if (insufficientArgumentFromUser(commandAndInput)) {"},{"lineNumber":170,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(EMPTY_FIND_ARGUMENT);"},{"lineNumber":171,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":173,"author":{"gitId":"jlxw48"},"content":"        if (this.taskList.isEmpty()) {"},{"lineNumber":174,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyListException();"},{"lineNumber":175,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":177,"author":{"gitId":"jlxw48"},"content":"        assert commandAndInput.length \u003d\u003d 2;"},{"lineNumber":178,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":179,"author":{"gitId":"jlxw48"},"content":"        return new FindCommand(this.taskList, this.storage, commandAndInput[1]);"},{"lineNumber":180,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":182,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDone(String[] commandAndInput) throws InvalidIndexInputException, EmptyArgumentException {"},{"lineNumber":183,"author":{"gitId":"jlxw48"},"content":"        if (insufficientArgumentFromUser(commandAndInput)) {"},{"lineNumber":184,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(String.format(MISSING_INDEX_ARGUMENT, \"done\"));"},{"lineNumber":185,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":187,"author":{"gitId":"jlxw48"},"content":"        assert commandAndInput.length \u003d\u003d 2;"},{"lineNumber":188,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":189,"author":{"gitId":"jlxw48"},"content":"        int position \u003d calcListPos(commandAndInput);"},{"lineNumber":190,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":191,"author":{"gitId":"jlxw48"},"content":"        if (this.taskList.isEmpty()) {"},{"lineNumber":192,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidIndexInputException(EMPTY_TASKLIST_DONE);"},{"lineNumber":193,"author":{"gitId":"jlxw48"},"content":"        } else if (position \u003e\u003d this.taskList.getList().size() || position \u003c 0) {"},{"lineNumber":194,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidIndexInputException(String.format(EXCEED_LIST_RANGE, this.taskList.getList().size()));"},{"lineNumber":195,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":197,"author":{"gitId":"jlxw48"},"content":"        return new DoneCommand(this.taskList, this.storage, position);"},{"lineNumber":198,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":200,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDelete(String[] commandAndInput) throws InvalidIndexInputException, EmptyArgumentException {"},{"lineNumber":201,"author":{"gitId":"jlxw48"},"content":"        if (insufficientArgumentFromUser(commandAndInput)) {"},{"lineNumber":202,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(String.format(MISSING_INDEX_ARGUMENT, \"delete\"));"},{"lineNumber":203,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":205,"author":{"gitId":"jlxw48"},"content":"        assert commandAndInput.length \u003d\u003d 2;"},{"lineNumber":206,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":207,"author":{"gitId":"jlxw48"},"content":"        int position \u003d calcListPos(commandAndInput);"},{"lineNumber":208,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":209,"author":{"gitId":"jlxw48"},"content":"        if (this.taskList.isEmpty()) {"},{"lineNumber":210,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidIndexInputException(EMPTY_TASKLIST_DELETE);"},{"lineNumber":211,"author":{"gitId":"jlxw48"},"content":"        } else if (position \u003e\u003d this.taskList.getList().size() || position \u003c 0) {"},{"lineNumber":212,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidIndexInputException(String.format(EXCEED_LIST_RANGE, this.taskList.getList().size()));"},{"lineNumber":213,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":215,"author":{"gitId":"jlxw48"},"content":"        return new DeleteCommand(this.taskList, this.storage, position);"},{"lineNumber":216,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":218,"author":{"gitId":"jlxw48"},"content":"    private Command prepareList(String[] commandAndInput) throws InvalidCommandException {"},{"lineNumber":219,"author":{"gitId":"jlxw48"},"content":"        if (commandAndInput.length \u003e 1) {"},{"lineNumber":220,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidCommandException();"},{"lineNumber":221,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":223,"author":{"gitId":"jlxw48"},"content":"        return new ListCommand(this.taskList, this.storage);"},{"lineNumber":224,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":226,"author":{"gitId":"jlxw48"},"content":"    private Command prepareExit(String[] commandAndInput) throws InvalidCommandException {"},{"lineNumber":227,"author":{"gitId":"jlxw48"},"content":"        if (commandAndInput.length \u003e 1) {"},{"lineNumber":228,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidCommandException();"},{"lineNumber":229,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":231,"author":{"gitId":"jlxw48"},"content":"        return new ByeCommand(this.taskList, this.storage);"},{"lineNumber":232,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":234,"author":{"gitId":"jlxw48"},"content":"    private Command prepareHelp(String[] commandAndInput) {"},{"lineNumber":235,"author":{"gitId":"jlxw48"},"content":"        assert commandAndInput.length \u003e\u003d 1 \u0026\u0026 commandAndInput.length \u003c\u003d 2;"},{"lineNumber":236,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":237,"author":{"gitId":"jlxw48"},"content":"        if (commandAndInput.length \u003d\u003d 1) {"},{"lineNumber":238,"author":{"gitId":"jlxw48"},"content":"            return new HelpCommand(this.taskList, this.storage);"},{"lineNumber":239,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":241,"author":{"gitId":"jlxw48"},"content":"        return new HelpCommand(this.taskList, this.storage, commandAndInput[1]);"},{"lineNumber":242,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":244,"author":{"gitId":"jlxw48"},"content":"    private void trimInputsInArray(String[] taskInputAndDate) {"},{"lineNumber":245,"author":{"gitId":"jlxw48"},"content":"        taskInputAndDate[0] \u003d taskInputAndDate[0].trim();"},{"lineNumber":246,"author":{"gitId":"jlxw48"},"content":"        taskInputAndDate[1] \u003d taskInputAndDate[1].trim();"},{"lineNumber":247,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":249,"author":{"gitId":"jlxw48"},"content":"    private int calcListPos(String[] commandAndInput) throws InvalidIndexInputException {"},{"lineNumber":250,"author":{"gitId":"jlxw48"},"content":"        String taskIndex \u003d commandAndInput[1];"},{"lineNumber":251,"author":{"gitId":"jlxw48"},"content":"        String command \u003d commandAndInput[0];"},{"lineNumber":252,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":253,"author":{"gitId":"jlxw48"},"content":"        Matcher matcher \u003d REGEX_CHECK_NUMBER.matcher(taskIndex);"},{"lineNumber":254,"author":{"gitId":"jlxw48"},"content":"        if (!matcher.find()) {"},{"lineNumber":255,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidIndexInputException(\"\u0027\" + command + \"\u0027 is command word; please pass a numerical index or \""},{"lineNumber":256,"author":{"gitId":"jlxw48"},"content":"                    + \"start your task with another word!\");"},{"lineNumber":257,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":259,"author":{"gitId":"jlxw48"},"content":"        return Integer.parseInt(taskIndex) - 1;"},{"lineNumber":260,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":262,"author":{"gitId":"jlxw48"},"content":"    private boolean insufficientArgumentFromUser(String[] commandAndInput) {"},{"lineNumber":263,"author":{"gitId":"jlxw48"},"content":"        return commandAndInput.length \u003d\u003d 1 || (commandAndInput.length \u003d\u003d 2 \u0026\u0026 commandAndInput[1].equals(\"\"));"},{"lineNumber":264,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":265}},{"path":"src/main/java/duke/utils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidFileTaskTypeException;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":" * Models a utility which reads from local storage and writes to local storage."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    private String filepath;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * Constructs a Storage object responsible for reading and writing to the local storage file."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * @param filepath the filepath of the local storage file, as a String."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    public Storage(String filepath) {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * Loads stored Tasks from local file and returns a TaskList populated with these Tasks."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     * If file is empty or does not exist, an empty TaskList will be returned."},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     * @return TaskList populated with Tasks, if applicable."},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"    public TaskList loadFromFile() throws FileNotFoundException, InvalidFileTaskTypeException {"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        File file \u003d new File(filepath);"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e txtInput \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        if (file.exists()) {"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"            Scanner scannerFile \u003d new Scanner(file);"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"            while (scannerFile.hasNextLine()) {"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"                txtInput.add(scannerFile.nextLine());"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"            scannerFile.close();"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"        if (txtInput.size() \u003d\u003d 0) {"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"            return new TaskList();"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e convertedTaskList \u003d TaskStringConverter.listStringToListTask(txtInput);"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        assert convertedTaskList.size() \u003e 0;"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        return new TaskList(convertedTaskList);"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"     * Writes all Tasks to file, and saves file to specified filepath."},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"     * @param taskList List of all Tasks."},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"     * @throws IOException if unable to write to file completely."},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"    public void writeToFile(TaskList taskList) throws IOException {"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        if (!taskList.getList().isEmpty()) {"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"            String stringToWrite \u003d TaskStringConverter.stringTasksForFile(taskList.getList());"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"            File file \u003d new File(filepath);"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"            fileWriter.write(stringToWrite);"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"            fileWriter.close();"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":76}},{"path":"src/main/java/duke/utils/TaskStringConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidFileTaskTypeException;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Deadline;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Event;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.ToDo;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":" * Models a utility which converts between task and string representations."},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"public class TaskStringConverter {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * Returns concatenated String description of all Tasks to save to local storage."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     * @param list List of Tasks to convert and concatenate."},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * @return String description of all Tasks."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    public static String stringTasksForFile(List\u003cTask\u003e list) {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        if (list.size() \u003d\u003d 0) {"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"            return \"\";"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e stringTasks \u003d listTaskToListStringFile(list);"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        for (String stringTask : stringTasks) {"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"            stringBuilder.append(stringTask)"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"                    .append(\"\\n\");"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        StringBuilder removeBreakLine \u003d stringBuilder.deleteCharAt(stringBuilder.length() - 1);"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        return removeBreakLine.toString();"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"    private static List\u003cString\u003e listTaskToListStringFile(List\u003cTask\u003e list) {"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e result \u003d list.stream()"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"                .map(task -\u003e taskToStringFile(task))"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"                .collect(Collectors.toList());"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"        return result;"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    private static String taskToStringFile(Task task) {"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        assert task instanceof ToDo || task instanceof Event || task instanceof Deadline;"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"        String done \u003d task.isDone() ? \"1\" : \"0\";"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"        if (task instanceof ToDo) {"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"            return toDoStringForFile(task, done);"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"            return eventStringForFile(task, done);"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"            return deadlineStringForFile(task, done);"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"            throw new AssertionError(task);"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"    private static String toDoStringForFile(Task task, String done) {"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"        assert task instanceof ToDo;"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"        return \"T | \" + done + \" | \" + task.getDescription();"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"    private static String eventStringForFile(Task task, String done) {"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"        assert task instanceof Event;"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"        return \"E | \" + done + \" | \" + task.getDescription() + \" | \" + ((Event) task).getDateForFile();"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"    private static String deadlineStringForFile(Task task, String done) {"},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"        assert task instanceof Deadline;"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"        return \"D | \" + done + \" | \" + task.getDescription() + \" | \" + ((Deadline) task).getDateForFile();"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"     * Returns concatenated String description of all Tasks for display in graphical user interface."},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":"     * @param list List of Tasks to convert and concatenate."},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":"     * @return String description of all Tasks."},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":"    public static String stringTasksForProgram(List\u003cTask\u003e list) {"},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e stringTasks \u003d listTaskToListStringProgram(list);"},{"lineNumber":93,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":94,"author":{"gitId":"jlxw48"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitId":"jlxw48"},"content":"        int index \u003d 1;"},{"lineNumber":96,"author":{"gitId":"jlxw48"},"content":"        for (String stringTask : stringTasks) {"},{"lineNumber":97,"author":{"gitId":"jlxw48"},"content":"            stringBuilder.append(\"\\n\")"},{"lineNumber":98,"author":{"gitId":"jlxw48"},"content":"                    .append(index)"},{"lineNumber":99,"author":{"gitId":"jlxw48"},"content":"                    .append(\". \")"},{"lineNumber":100,"author":{"gitId":"jlxw48"},"content":"                    .append(stringTask);"},{"lineNumber":101,"author":{"gitId":"jlxw48"},"content":"            index++;"},{"lineNumber":102,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":104,"author":{"gitId":"jlxw48"},"content":"        return stringBuilder.toString();"},{"lineNumber":105,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":107,"author":{"gitId":"jlxw48"},"content":"    private static List\u003cString\u003e listTaskToListStringProgram(List\u003cTask\u003e list) {"},{"lineNumber":108,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e result \u003d list.stream()"},{"lineNumber":109,"author":{"gitId":"jlxw48"},"content":"                .map(task -\u003e taskToStringProgram(task))"},{"lineNumber":110,"author":{"gitId":"jlxw48"},"content":"                .collect(Collectors.toList());"},{"lineNumber":111,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":112,"author":{"gitId":"jlxw48"},"content":"        return result;"},{"lineNumber":113,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":115,"author":{"gitId":"jlxw48"},"content":"    private static String taskToStringProgram(Task task) {"},{"lineNumber":116,"author":{"gitId":"jlxw48"},"content":"        return task.toString();"},{"lineNumber":117,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":119,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"jlxw48"},"content":"     * Returns a List of Tasks, each Task converted from 1 String in the specified list."},{"lineNumber":121,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"jlxw48"},"content":"     * @param list List of Strings to convert to Tasks."},{"lineNumber":123,"author":{"gitId":"jlxw48"},"content":"     * @return List of Tasks."},{"lineNumber":124,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidFileTaskTypeException thrown when there is an invalid Task type in an entry in the local"},{"lineNumber":125,"author":{"gitId":"jlxw48"},"content":"     *     storage file."},{"lineNumber":126,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"jlxw48"},"content":"    public static List\u003cTask\u003e listStringToListTask(List\u003cString\u003e list) throws InvalidFileTaskTypeException {"},{"lineNumber":128,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":129,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":130,"author":{"gitId":"jlxw48"},"content":"        for (String stringTask : list) {"},{"lineNumber":131,"author":{"gitId":"jlxw48"},"content":"            result.add(fileStringToTask(stringTask));"},{"lineNumber":132,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":134,"author":{"gitId":"jlxw48"},"content":"        return result;"},{"lineNumber":135,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":137,"author":{"gitId":"jlxw48"},"content":"    private static Task fileStringToTask(String input) throws InvalidFileTaskTypeException {"},{"lineNumber":138,"author":{"gitId":"jlxw48"},"content":"        String[] splitFileInput \u003d input.split(\" \\\\| \");"},{"lineNumber":139,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":140,"author":{"gitId":"jlxw48"},"content":"        assert splitFileInput.length \u003e\u003d 3;"},{"lineNumber":141,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":142,"author":{"gitId":"jlxw48"},"content":"        char taskType \u003d splitFileInput[0].charAt(0);"},{"lineNumber":143,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":144,"author":{"gitId":"jlxw48"},"content":"        switch (taskType) {"},{"lineNumber":145,"author":{"gitId":"jlxw48"},"content":"        case \u0027T\u0027:"},{"lineNumber":146,"author":{"gitId":"jlxw48"},"content":"            return generateToDoTask(splitFileInput);"},{"lineNumber":147,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":148,"author":{"gitId":"jlxw48"},"content":"        case \u0027E\u0027:"},{"lineNumber":149,"author":{"gitId":"jlxw48"},"content":"            return generateEventTask(splitFileInput);"},{"lineNumber":150,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":151,"author":{"gitId":"jlxw48"},"content":"        case \u0027D\u0027:"},{"lineNumber":152,"author":{"gitId":"jlxw48"},"content":"            return generateDeadlineTask(splitFileInput);"},{"lineNumber":153,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":154,"author":{"gitId":"jlxw48"},"content":"        default:"},{"lineNumber":155,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidFileTaskTypeException();"},{"lineNumber":156,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":159,"author":{"gitId":"jlxw48"},"content":"    private static ToDo generateToDoTask(String[] splitFileInput) {"},{"lineNumber":160,"author":{"gitId":"jlxw48"},"content":"        assert splitFileInput.length \u003d\u003d 3;"},{"lineNumber":161,"author":{"gitId":"jlxw48"},"content":"        ToDo todo \u003d new ToDo(splitFileInput[2]);"},{"lineNumber":162,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":163,"author":{"gitId":"jlxw48"},"content":"        if (splitFileInput[1].equals(\"1\")) {"},{"lineNumber":164,"author":{"gitId":"jlxw48"},"content":"            todo.markAsDone();"},{"lineNumber":165,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":167,"author":{"gitId":"jlxw48"},"content":"        return todo;"},{"lineNumber":168,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":170,"author":{"gitId":"jlxw48"},"content":"    private static Event generateEventTask(String[] splitFileInput) {"},{"lineNumber":171,"author":{"gitId":"jlxw48"},"content":"        assert splitFileInput.length \u003d\u003d 4;"},{"lineNumber":172,"author":{"gitId":"jlxw48"},"content":"        Event event \u003d new Event(splitFileInput[2], LocalDateTime.parse(splitFileInput[3], FORMATTER));"},{"lineNumber":173,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":174,"author":{"gitId":"jlxw48"},"content":"        if (splitFileInput[1].equals(\"1\")) {"},{"lineNumber":175,"author":{"gitId":"jlxw48"},"content":"            event.markAsDone();"},{"lineNumber":176,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":178,"author":{"gitId":"jlxw48"},"content":"        return event;"},{"lineNumber":179,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":181,"author":{"gitId":"jlxw48"},"content":"    private static Deadline generateDeadlineTask(String[] splitFileInput) {"},{"lineNumber":182,"author":{"gitId":"jlxw48"},"content":"        assert splitFileInput.length \u003d\u003d 4;"},{"lineNumber":183,"author":{"gitId":"jlxw48"},"content":"        Deadline deadline \u003d new Deadline(splitFileInput[2], LocalDateTime.parse(splitFileInput[3], FORMATTER));"},{"lineNumber":184,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":185,"author":{"gitId":"jlxw48"},"content":"        if (splitFileInput[1].equals(\"1\")) {"},{"lineNumber":186,"author":{"gitId":"jlxw48"},"content":"            deadline.markAsDone();"},{"lineNumber":187,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":189,"author":{"gitId":"jlxw48"},"content":"        return deadline;"},{"lineNumber":190,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":191}},{"path":"src/main/java/duke/window/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.window;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":" * containing text from the speaker."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"public class DialogBox extends HBox {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    private Label dialog;"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    private Circle profilePic;"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.load();"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        dialog.setText(text);"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        dialog.setTextFill(Color.WHITE);"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"        profilePic.setFill(new ImagePattern(img));"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    private void flip() {"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        Collections.reverse(tmp);"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        setAlignment(Pos.CENTER_LEFT);"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"     * Creates a DialogBox to display a message sent by the user."},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"     * @param text input from the user."},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"     * @param img user\u0027s profile picture."},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"     * @return a DialogBox representing a message sent by the user."},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        var dialogBox \u003d new DialogBox(text, img);"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"        dialogBox.dialog.setBackground(new Background(new BackgroundFill(Color.NAVY, null, null)));"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"        return dialogBox;"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"     * Creates a DialogBox to display a message from the chatbot."},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"     * @param text response from the chatbot."},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"     * @param img chatbot\u0027s profile picture."},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"     * @return a DialogBox representing a message sent by the chatbot."},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"        var dialogBox \u003d new DialogBox(text, img);"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"        dialogBox.dialog.setBackground(new Background(new BackgroundFill(Color.DARKGREEN, null, null)));"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"        dialogBox.flip();"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"        return dialogBox;"},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"     * Creates a DialogBox to display an error message from the chatbot."},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"     * @param text error message from the chatbot."},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"     * @param img chatbot\u0027s profile picture."},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"     * @return a DialogBox representing an error message from the chatbot."},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":"    public static DialogBox getDukeErrorDialog(String text, Image img) {"},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":"        var dialogBox \u003d new DialogBox(text, img);"},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":"        dialogBox.flip();"},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":"        dialogBox.setBackground(new Background(new BackgroundFill(Color.LIGHTPINK, null, null)));"},{"lineNumber":93,"author":{"gitId":"jlxw48"},"content":"        dialogBox.dialog.setTextFill(Color.BLACK);"},{"lineNumber":94,"author":{"gitId":"jlxw48"},"content":"        return dialogBox;"},{"lineNumber":95,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":96}},{"path":"src/main/java/duke/window/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.window;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":12}},{"path":"src/main/java/duke/window/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.window;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"            stage.setResizable(false);"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"            stage.sizeToScene();"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"            stage.setTitle(\"My Duke Task Bot\");"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke, stage);"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"            stage.show();"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().displayDukeIntroduction();"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":36}},{"path":"src/main/java/duke/window/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.window;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.Locale;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.Duke;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.DukeException;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidFileTaskTypeException;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.control.Button;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.image.Image;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"import javafx.util.Duration;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    private VBox dialogContainer;"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    private TextField userInput;"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    private Button sendButton;"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    private Duke duke;"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"    private Stage stage;"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"    public void initialize() {"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"    public void setDuke(Duke duke, Stage stage) {"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"        this.duke \u003d duke;"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"        this.stage \u003d stage;"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"     * Creates and displays a DialogBox with introduction message from Duke. If initialising fails, the appropriate"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"     * error message will be displayed."},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    public void displayDukeIntroduction() {"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"            String introductionMessage \u003d duke.introduction();"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"                    DialogBox.getDukeDialog(introductionMessage, dukeImage)"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"            );"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"            String cannotAccessFileMsg \u003d \"Cannot access file at specified location.\\n\" + e.getMessage();"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"                    DialogBox.getDukeErrorDialog(\"Error! \" + cannotAccessFileMsg, dukeImage)"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"            );"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        } catch (InvalidFileTaskTypeException e) {"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"                    DialogBox.getDukeErrorDialog(\"Error! \" + e.getMessage(), dukeImage)"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"            );"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"     * the dialog container. Clears the user input after processing. Closes window after delay if user inputs a \"bye\""},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"     * command."},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"    private void handleUserInput() {"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"        String input \u003d userInput.getText().toLowerCase(Locale.ROOT);"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"            String response \u003d duke.getResponse(userInput.getText());"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"            if (input.equals(ByeCommand.COMMAND_WORD)) {"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"                PauseTransition delay \u003d new PauseTransition(Duration.seconds(5));"},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"                delay.setOnFinished(event -\u003e stage.close());"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"                delay.play();"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":"                    DialogBox.getUserDialog(userInput.getText(), userImage),"},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":93,"author":{"gitId":"jlxw48"},"content":"            );"},{"lineNumber":94,"author":{"gitId":"jlxw48"},"content":"        } catch (DukeException e) {"},{"lineNumber":95,"author":{"gitId":"jlxw48"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":96,"author":{"gitId":"jlxw48"},"content":"                    DialogBox.getUserDialog(userInput.getText(), userImage),"},{"lineNumber":97,"author":{"gitId":"jlxw48"},"content":"                    DialogBox.getDukeErrorDialog(\"Error! \" + e.getMessage(), dukeImage)"},{"lineNumber":98,"author":{"gitId":"jlxw48"},"content":"            );"},{"lineNumber":99,"author":{"gitId":"jlxw48"},"content":"        } finally {"},{"lineNumber":100,"author":{"gitId":"jlxw48"},"content":"            userInput.clear();"},{"lineNumber":101,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":103}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        \u003cLabel fx:id\u003d\"dialog\" opacity\u003d\"0.76\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"         \u003cpadding\u003e"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"         \u003c/padding\u003e"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"      \u003cCircle fx:id\u003d\"profilePic\" fill\u003d\"DODGERBLUE\" radius\u003d\"21.0\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\" /\u003e"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"jlxw48":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\" fx:controller\u003d\"duke.window.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"         \u003cfont\u003e"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"BOTTOM_CENTER\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"            \u003c/content\u003e"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"jlxw48":23}},{"path":"src/test/java/duke/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public void stringConstructor_description() {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        Deadline d \u003d new Deadline(\"homework\", \"31 Jan 21 2359\");"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"homework\", d.getDescription());"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    public void stringConstructor_date() {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        Deadline d \u003d new Deadline(\"homework\", \"31 Jan 21 2359\");"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"31 Jan 2021, 11:59 PM\", d.getDateTime());"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":19}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public void toStringTest() {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        Event e \u003d new Event(\"meeting friends\", \"1 Feb 21 1800\");"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"[E][ ] meeting friends (at: 01 Feb 2021, 6:00 PM)\","},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"                e.toString());"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":14}},{"path":"src/test/java/duke/utils/TaskStringConverterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidFileTaskTypeException;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"public class TaskStringConverterTest {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    public void stringToTaskTest() {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        String inputFromFile \u003d \"E | 0 | project meeting | 15/12/2020 0911\";"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e allInput \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        allInput.add(inputFromFile);"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"            List\u003cTask\u003e allTasks \u003d TaskStringConverter.listStringToListTask(allInput);"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"            assertEquals(\"[E][ ] project meeting (at: 15 Dec 2020, 9:11 AM)\","},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"                    allTasks.get(0).toString());"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        } catch (InvalidFileTaskTypeException e) {"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"            System.err.println(\"Test failed! \" + e.getMessage());"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":27}},{"path":"tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"T | 0 | todo"}],"authorContributionMap":{"jlxw48":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"event project meeting /at Monday 2-4pm"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"delete 3"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"bye"}],"authorContributionMap":{"jlxw48":12}}]
