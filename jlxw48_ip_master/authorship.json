[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.commands.Command;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Parser;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    private static final String FILE_PATH \u003d \"./src/main/java/duke/tasks.txt\";"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private static void run() {"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        ui.introduction();"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        Storage storage \u003d new Storage(FILE_PATH, ui);"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        TaskList taskList \u003d storage.loadFromFile();"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"        Scanner scannerInput \u003d new Scanner(System.in);"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        ui.showMsg(\"What can I do for you?\");"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        boolean isExit \u003d false;"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        while (!isExit) {"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"            try {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"                String input \u003d scannerInput.nextLine();"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"                Parser p \u003d new Parser(taskList, ui, storage);"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"                Command c \u003d p.parse(input);"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"                c.execute();"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"            } catch (DukeException e) {"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"        scannerInput.close();"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"    public static void main(String[] args) {"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        run();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"jlxw48":41}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.FileTaskStringConverter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"public class ByeCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public ByeCommand(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Saves all Tasks in taskList to local file, and then prints exit message."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"            this.storage.writeToFile(this.taskList);"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"            String endMessage \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"            this.ui.showMsg(endMessage);"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"            this.ui.showError(e.getMessage());"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     * Returns signal indicating to exit the program."},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * @return boolean signal indicating to exit the program."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public boolean isExit() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        return true;"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":41}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    protected TaskList taskList;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    protected Storage storage;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    protected Ui ui;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    public Command(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        this.ui \u003d ui;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        this.storage \u003d storage;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    public abstract void execute();"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     * Returns signal to indicate if command is end of program."},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @return boolean signal to indicate end of program."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":27}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    private String task;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    public DeadlineCommand(TaskList taskList, Ui ui, Storage storage, String task, LocalDateTime dateTime) {"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        this.task \u003d task;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * Adds a Deadline task with previously specified description and dateTime to taskList."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        Deadline d \u003d new Deadline(this.task, this.dateTime);"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + d);"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(d);"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":31}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    private int position;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    public DeleteCommand(TaskList taskList, Ui ui, Storage storage, int position) {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        this.position \u003d position;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * Deletes Task at the previously specified position in the taskList."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Thereafter, prints confirmation and remaining number of tasks."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        this.taskList.printTask(this.position);"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        this.taskList.deleteTask(this.position);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"        this.taskList.printNumTasksInList();"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":28}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class DoneCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"done\";"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    private int position;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    public DoneCommand(TaskList taskList, Ui ui, Storage storage, int position) {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        this.position \u003d position;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * Marks Task at previously specified position of tasklist as done, before printing a confirmation message."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"        this.taskList.setTaskDone(this.position);"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        this.taskList.printTask(this.position);"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":26}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Event;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"public class EventCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"event\";"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    private String task;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    public EventCommand(TaskList taskList, Ui ui, Storage storage, String task, LocalDateTime dateTime) {"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        this.task \u003d task;"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * Adds an Event task with previously specified description and dateTime to taskList."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        Event e \u003d new Event(this.task, this.dateTime);"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + e);"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(e);"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":31}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Matcher;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Pattern;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    private String toFind;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    public FindCommand(TaskList taskList, Ui ui, Storage storage, String toFind) {"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        this.toFind \u003d toFind;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * Searches TaskList for Tasks with descriptions matching toFind String."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * If there exist such Tasks, prints these Tasks."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     * Else, display message indicating no matching Tasks."},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        Pattern p \u003d Pattern.compile(toFind, Pattern.CASE_INSENSITIVE);"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e results \u003d searchList(p);"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        if (results.size() \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"            this.ui.showMsg(\"There are no tasks matching your input :(\");"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"            this.ui.showMsg(\"These are the search results:\");"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"            printList(results);"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"    private void printList(List\u003cTask\u003e results) {"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"        int counter \u003d 1;"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        for (Task t : results) {"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"            this.ui.showMsg(counter + \". \" + t.toString());"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"    private List\u003cTask\u003e searchList(Pattern regEx) {"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"        for (Task t : this.taskList.getList()) {"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"            String description \u003d t.getDescription();"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"            Matcher m \u003d regEx.matcher(description);"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"            if (m.find()) {"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"                results.add(t);"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"        return results;"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":57}},{"path":"src/main/java/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class HelpCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    public HelpCommand(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        this.ui.showHelp();"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":18}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    public ListCommand(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"     * Prints all tasks in taskList."},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"        this.taskList.printList();"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":21}},{"path":"src/main/java/duke/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.ToDo;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Storage;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.utils.Ui;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"public class ToDoCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    private String todo;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    public ToDoCommand(TaskList taskList, Ui ui, Storage storage, String todo) {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        super(taskList, ui, storage);"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        this.todo \u003d todo;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     * Adds a ToDo task with previously specified description to taskList."},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public void execute() {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        ToDo t \u003d new ToDo(this.todo);"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + t);"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        this.taskList.addTask(t);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":27}},{"path":"src/main/java/duke/dukeexceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/EmptyArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class EmptyArgumentException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public EmptyArgumentException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class EmptyListException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public EmptyListException() {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(\"Your TaskList is empty!\");"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public InvalidCommandException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Custom Exception class to specify invalid date format input by the user."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class InvalidDateTimeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public InvalidDateTimeException() {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(\"Please enter your date in one of the following formats:\\n\""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"                + \"d/M/yyyy HHmm OR d MMM yy HHmm OR dd-MM-yy HHmm\");"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":11}},{"path":"src/main/java/duke/dukeexceptions/InvalidIndexInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class InvalidIndexInputException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public InvalidIndexInputException(String message) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":7}},{"path":"src/main/java/duke/dukeexceptions/InvalidTaskTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.dukeexceptions;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":" * Custom Exception class to specify invalid Task stored in local file."},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class InvalidTaskTypeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    public InvalidTaskTypeException() {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"        super(\"Invalid task type!\");"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":10}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    private final LocalDateTime date;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public Deadline(String description, String date) {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        this.date \u003d LocalDateTime.parse(date, formatter);"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public Deadline(String description, LocalDateTime date) {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    public String getDate() {"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy, h:mm a\"));"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * Returns a specific String format of this Deadline\u0027s date to store locally when writing to file."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * @return String format of this Deadline\u0027s date."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    public String getDateToStore() {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Deadline task, identified by \"[D]\", along with the date of this Deadline."},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDate() + \")\";"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":41}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    private final LocalDateTime date;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public Event(String description, String date) {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        this.date \u003d LocalDateTime.parse(date, formatter);"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public Event(String description, LocalDateTime date) {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    public String getDate() {"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy, h:mm a\"));"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * Returns a specific String format of this Event\u0027s date to store locally when writing to file."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * @return String format of this Event\u0027s date."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    public String getDateToStore() {"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Event task, identified by \"[E]\", along with the date of this Event."},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.getDate() + \")\";"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":41}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"public abstract class Task {"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    protected static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    public Task(String description) {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    private String getStatusIcon() {"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * Returns the description of a Task."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     * @return String description of a task."},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    public String getDescription() {"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        return this.description;"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * Marks current task as done."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public void markAsDone() {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        this.isDone \u003d true;"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     * Checks if this Task is marked as done."},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"     * @return boolean indicating if this Task is done."},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    public boolean isDone() {"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        return this.isDone;"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this Task item with status indicating if it is marked as done."},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     * @return String description of this Task."},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":55}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"    private List\u003cTask\u003e taskList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public TaskList() {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    public TaskList(List\u003cTask\u003e converted) {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e(converted);"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"     * Marks task at specified position to be done."},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * @param pos position of task to be marked."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    public void setTaskDone(int pos) {"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"        taskList.get(pos).markAsDone();"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     * Prints the list of tasks."},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     * If the list is empty, a statement indicating so will be printed."},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    public void printList() {"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        if (this.taskList.size() \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"            printEmptyList();"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"            printNonEmptyList();"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    private void printEmptyList() {"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"You have completed all tasks!\");"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"    private void printNonEmptyList() {"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"        int counter \u003d 1;"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"        for (Task t : this.taskList) {"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"            System.out.println(counter + \". \" + t);"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"            counter++;"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"     * Prints the task at the specified position."},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"     * @param pos position of task to be printed."},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"    public void printTask(int pos) {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"        System.out.println(this.taskList.get(pos));"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"        return this.taskList;"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"     * Adds a task to the existing list of tasks."},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"     * @param t task to be added to the list."},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"    public void addTask(Task t) {"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"        this.taskList.add(t);"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"     * Removes the task at the specified position from the list."},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"     * @param pos position of the task to be removed."},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"    public void deleteTask(int pos) {"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"        this.taskList.remove(pos);"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"     * Prints the number of existing tasks in the list."},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"    public void printNumTasksInList() {"},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Now you have \" + this.taskList.size() + \" tasks in the list.\");"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":88}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    public ToDo(String description) {"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"     * Returns String description of this ToDo task, identified by \"[T]\"."},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"     * @return String description."},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":17}},{"path":"src/main/java/duke/utils/FileTaskStringConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.ToDo;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidTaskTypeException;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"public class FileTaskStringConverter {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * Returns a List of Strings, each String representing 1 Task in the specified list."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @param list List of Tasks to convert to Strings."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     * @return List of Strings."},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    public static List\u003cString\u003e allTaskToAllString(List\u003cTask\u003e list) {"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"        for (Task t : list) {"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"            result.add(taskToString(t));"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"        return result;"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"     * Returns a List of Tasks, each Task converted from 1 String in the specified list."},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"     * @param list List of Strings to convert to Tasks."},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"     * @return List of Tasks."},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidTaskTypeException if local storage file contains invalid Task identified, i.e. not [T], [E] or"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     *     [D]."},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"    public static List\u003cTask\u003e allStringToAllTask(List\u003cString\u003e list) throws InvalidTaskTypeException {"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        List\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        for (String s : list) {"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"            result.add(stringToTask(s));"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"        return result;"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"    private static String taskToString(Task task) {"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"        String done \u003d task.isDone() ? \"1\" : \"0\";"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"        if (task instanceof ToDo) {"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"            return \"T | \" + done + \" | \" + task.getDescription();"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"            return \"E | \" + done + \" | \" + task.getDescription() + \" | \" + ((Event) task).getDateToStore();"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"            return \"D | \" + done + \" | \" + task.getDescription() + \" | \" + ((Deadline) task).getDateToStore();"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"    private static Task stringToTask(String input) throws InvalidTaskTypeException {"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"        String[] separated \u003d input.split(\" \\\\| \");"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"        char taskType \u003d separated[0].charAt(0);"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"        if (taskType \u003d\u003d \u0027T\u0027) {"},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"            ToDo t \u003d new ToDo(separated[2]);"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"            if (separated[1].equals(\"1\")) {"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"                t.markAsDone();"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"            return t;"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":"        } else if (taskType \u003d\u003d \u0027D\u0027) {"},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"            Deadline d \u003d new Deadline(separated[2], LocalDateTime.parse(separated[3], formatter));"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"            if (separated[1].equals(\"1\")) {"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"                d.markAsDone();"},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"            return d;"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"        } else if (taskType \u003d\u003d \u0027E\u0027) {"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"            Event e \u003d new Event(separated[2], LocalDateTime.parse(separated[3], formatter));"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"            if (separated[1].equals(\"1\")) {"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":"                e.markAsDone();"},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"            return e;"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidTaskTypeException();"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":87}},{"path":"src/main/java/duke/utils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.commands.Command;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DeadlineCommand;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import duke.commands.EventCommand;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import duke.commands.FindCommand;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import duke.commands.HelpCommand;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ListCommand;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import duke.commands.ToDoCommand;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.EmptyArgumentException;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.EmptyListException;"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidDateTimeException;"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidIndexInputException;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"import java.time.LocalDateTime;"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Matcher;"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"import java.util.regex.Pattern;"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"public class Parser {"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    private static final Pattern checkNum \u003d Pattern.compile(\"^[0-9]$\");"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"    protected static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[d/M/yyyy HHmm][d MMM yy HHmm]\""},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"            + \"[dd-MM-yy HHmm]\");"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    private final TaskList taskList;"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"    private final Ui ui;"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"    private final Storage storage;"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"    public Parser(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"        this.ui \u003d ui;"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"        this.storage \u003d storage;"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"     * Returns command associated with the command line input from user."},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"     * @param input command line input from user."},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"     * @return command associated with input from user."},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"     * @throws EmptyArgumentException when only a 1 word command is passed without any following input."},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidDateTimeException when date entered by user is not a valid date or not an acceptable date format."},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"     * @throws InvalidIndexInputException when index entered by user is not a number or not within range of 1 to"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"     *     the size of the TaskList."},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"     * @throws EmptyListException when trying to find by keyword but TaskList is empty."},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"    public Command parse(String input) throws EmptyArgumentException, InvalidDateTimeException,"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"            InvalidIndexInputException, EmptyListException {"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        String[] commandAndInput \u003d input.split(\" \", 2);"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"        String command \u003d commandAndInput[0];"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"        switch (command) {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"            case ToDoCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"                return prepareToDo(commandAndInput);"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"            case DeadlineCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":"                return prepareDeadline(commandAndInput);"},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"            case EventCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"                return prepareEvent(commandAndInput);"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"            case FindCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"                return prepareFind(commandAndInput);"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"            case DoneCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"                return prepareDone(commandAndInput);"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"            case DeleteCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"                return prepareDelete(commandAndInput);"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"            case ListCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":"                return prepareList();"},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"            case ByeCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"                return prepareExit();"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"            default:"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"                return prepareHelp();"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"    private Command prepareToDo(String[] arguments) {"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"        return new ToDoCommand(this.taskList, this.ui, this.storage, arguments[1]);"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":90,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDeadline(String[] arguments) throws EmptyArgumentException, InvalidDateTimeException {"},{"lineNumber":91,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":92,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please input a valid task description!\");"},{"lineNumber":93,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":94,"author":{"gitId":"jlxw48"},"content":"            String description \u003d arguments[1];"},{"lineNumber":95,"author":{"gitId":"jlxw48"},"content":"            String[] taskInputAndDate \u003d description.split(\"/\", 2);"},{"lineNumber":96,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":97,"author":{"gitId":"jlxw48"},"content":"            taskInputAndDate[0] \u003d taskInputAndDate[0].trim();"},{"lineNumber":98,"author":{"gitId":"jlxw48"},"content":"            taskInputAndDate[1] \u003d taskInputAndDate[1].trim();"},{"lineNumber":99,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":100,"author":{"gitId":"jlxw48"},"content":"            try {"},{"lineNumber":101,"author":{"gitId":"jlxw48"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(taskInputAndDate[1].substring(3), formatter);"},{"lineNumber":102,"author":{"gitId":"jlxw48"},"content":"                return new DeadlineCommand(this.taskList, this.ui, this.storage, taskInputAndDate[0], dateTime);"},{"lineNumber":103,"author":{"gitId":"jlxw48"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":104,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidDateTimeException();"},{"lineNumber":105,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":109,"author":{"gitId":"jlxw48"},"content":"    private Command prepareEvent(String[] arguments) throws EmptyArgumentException, InvalidDateTimeException {"},{"lineNumber":110,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":111,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please input a valid task description!\");"},{"lineNumber":112,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":113,"author":{"gitId":"jlxw48"},"content":"            String description \u003d arguments[1];"},{"lineNumber":114,"author":{"gitId":"jlxw48"},"content":"            String[] taskInputAndDate \u003d description.split(\"/\", 2);"},{"lineNumber":115,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":116,"author":{"gitId":"jlxw48"},"content":"            taskInputAndDate[0] \u003d taskInputAndDate[0].trim();"},{"lineNumber":117,"author":{"gitId":"jlxw48"},"content":"            taskInputAndDate[1] \u003d taskInputAndDate[1].trim();"},{"lineNumber":118,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":119,"author":{"gitId":"jlxw48"},"content":"            try {"},{"lineNumber":120,"author":{"gitId":"jlxw48"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(taskInputAndDate[1].substring(3), formatter);"},{"lineNumber":121,"author":{"gitId":"jlxw48"},"content":"                return new EventCommand(this.taskList, this.ui, this.storage, taskInputAndDate[0], dateTime);"},{"lineNumber":122,"author":{"gitId":"jlxw48"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":123,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidDateTimeException();"},{"lineNumber":124,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":128,"author":{"gitId":"jlxw48"},"content":"    private Command prepareFind(String[] arguments) throws EmptyArgumentException, EmptyListException {"},{"lineNumber":129,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":130,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please pass a word after the \u0027find\u0027 command!\");"},{"lineNumber":131,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":132,"author":{"gitId":"jlxw48"},"content":"            if (this.taskList.getList().size() \u003d\u003d 0) {"},{"lineNumber":133,"author":{"gitId":"jlxw48"},"content":"                throw new EmptyListException();"},{"lineNumber":134,"author":{"gitId":"jlxw48"},"content":"            } else {"},{"lineNumber":135,"author":{"gitId":"jlxw48"},"content":"                return new FindCommand(this.taskList, this.ui, this.storage, arguments[1]);"},{"lineNumber":136,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":140,"author":{"gitId":"jlxw48"},"content":"    private int calcListPos(String taskIndex, String command) throws InvalidIndexInputException {"},{"lineNumber":141,"author":{"gitId":"jlxw48"},"content":"        Matcher m \u003d checkNum.matcher(taskIndex);"},{"lineNumber":142,"author":{"gitId":"jlxw48"},"content":"        if (m.find()) {"},{"lineNumber":143,"author":{"gitId":"jlxw48"},"content":"            return Integer.parseInt(taskIndex) - 1;"},{"lineNumber":144,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":145,"author":{"gitId":"jlxw48"},"content":"            throw new InvalidIndexInputException(\"\u0027\" + command + \"\u0027 is command word; please pass a numerical index or \""},{"lineNumber":146,"author":{"gitId":"jlxw48"},"content":"                    + \"start your task with another word!\");"},{"lineNumber":147,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":150,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDone(String[] arguments) throws InvalidIndexInputException, EmptyArgumentException {"},{"lineNumber":151,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":152,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please pass an index after the \u0027done\u0027 command!\");"},{"lineNumber":153,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":154,"author":{"gitId":"jlxw48"},"content":"            int position \u003d calcListPos(arguments[1], arguments[0]);"},{"lineNumber":155,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":156,"author":{"gitId":"jlxw48"},"content":"            if (this.taskList.getList().size() \u003d\u003d 0){"},{"lineNumber":157,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidIndexInputException(\"You have already done all tasks!\");"},{"lineNumber":158,"author":{"gitId":"jlxw48"},"content":"            } else if (position \u003e\u003d this.taskList.getList().size() || position \u003c 0) {"},{"lineNumber":159,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidIndexInputException(\"Please input an index from 1 to \""},{"lineNumber":160,"author":{"gitId":"jlxw48"},"content":"                        + this.taskList.getList().size() + \"!\");"},{"lineNumber":161,"author":{"gitId":"jlxw48"},"content":"            } else {"},{"lineNumber":162,"author":{"gitId":"jlxw48"},"content":"                return new DoneCommand(this.taskList, this.ui, this.storage, position);"},{"lineNumber":163,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":167,"author":{"gitId":"jlxw48"},"content":"    private Command prepareDelete(String[] arguments) throws InvalidIndexInputException, EmptyArgumentException {"},{"lineNumber":168,"author":{"gitId":"jlxw48"},"content":"        if (arguments.length \u003d\u003d 1) {"},{"lineNumber":169,"author":{"gitId":"jlxw48"},"content":"            throw new EmptyArgumentException(\"Please pass an index after the \u0027delete\u0027 command!\");"},{"lineNumber":170,"author":{"gitId":"jlxw48"},"content":"        } else {"},{"lineNumber":171,"author":{"gitId":"jlxw48"},"content":"            int position \u003d calcListPos(arguments[1], arguments[0]);"},{"lineNumber":172,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":173,"author":{"gitId":"jlxw48"},"content":"            if (this.taskList.getList().size() \u003d\u003d 0){"},{"lineNumber":174,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidIndexInputException(\"There are no tasks to delete!\");"},{"lineNumber":175,"author":{"gitId":"jlxw48"},"content":"            } else if (position \u003e\u003d this.taskList.getList().size() || position \u003c 0) {"},{"lineNumber":176,"author":{"gitId":"jlxw48"},"content":"                throw new InvalidIndexInputException(\"Please input an index from 1 to \""},{"lineNumber":177,"author":{"gitId":"jlxw48"},"content":"                        + this.taskList.getList().size() + \"!\");"},{"lineNumber":178,"author":{"gitId":"jlxw48"},"content":"            } else {"},{"lineNumber":179,"author":{"gitId":"jlxw48"},"content":"                return new DeleteCommand(this.taskList, this.ui, this.storage, position);"},{"lineNumber":180,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":184,"author":{"gitId":"jlxw48"},"content":"    private Command prepareList() {"},{"lineNumber":185,"author":{"gitId":"jlxw48"},"content":"        return new ListCommand(this.taskList, this.ui, this.storage);"},{"lineNumber":186,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":188,"author":{"gitId":"jlxw48"},"content":"    private Command prepareExit() {"},{"lineNumber":189,"author":{"gitId":"jlxw48"},"content":"        return new ByeCommand(this.taskList, this.ui, this.storage);"},{"lineNumber":190,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":192,"author":{"gitId":"jlxw48"},"content":"    private Command prepareHelp() {"},{"lineNumber":193,"author":{"gitId":"jlxw48"},"content":"        return new HelpCommand(this.taskList, this.ui, this.storage);"},{"lineNumber":194,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":195}},{"path":"src/main/java/duke/utils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidTaskTypeException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"import java.io.FileWriter;"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"    private final String filepath;"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    private final Ui ui;"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    public Storage(String filepath, Ui ui) {"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"        this.ui \u003d ui;"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"     * Loads stored Tasks from local file and returns a TaskList populated with these Tasks."},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"     * If file is empty or does not exist, an empty TaskList will be returned."},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"     * @return TaskList populated with Tasks, if applicable."},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"    public TaskList loadFromFile() {"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"            File file \u003d new File(filepath);"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"            List\u003cString\u003e txt \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"            if (file.exists()) {"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":"                Scanner scannerFile \u003d new Scanner(file);"},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"                while (scannerFile.hasNextLine()) {"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"                    txt.add(scannerFile.nextLine());"},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"                scannerFile.close();"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"            if (txt.size() \u003d\u003d 0) {"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"                this.emptyFile();"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":"                return new TaskList();"},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"                this.nonEmptyFile();"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"                List\u003cTask\u003e converted \u003d FileTaskStringConverter.allStringToAllTask(txt);"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"                TaskList taskList \u003d new TaskList(converted);"},{"lineNumber":50,"author":{"gitId":"jlxw48"},"content":"                taskList.printList();"},{"lineNumber":51,"author":{"gitId":"jlxw48"},"content":"                return taskList;"},{"lineNumber":52,"author":{"gitId":"jlxw48"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"jlxw48"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":54,"author":{"gitId":"jlxw48"},"content":"            ui.showError(\"Cannot access file at specified location.\\n\" + e.getMessage());"},{"lineNumber":55,"author":{"gitId":"jlxw48"},"content":"            return new TaskList();"},{"lineNumber":56,"author":{"gitId":"jlxw48"},"content":"        } catch (InvalidTaskTypeException e) {"},{"lineNumber":57,"author":{"gitId":"jlxw48"},"content":"            ui.showError(\"Erroneous task type in file. Please check your file again!\");"},{"lineNumber":58,"author":{"gitId":"jlxw48"},"content":"            return new TaskList();"},{"lineNumber":59,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":62,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"jlxw48"},"content":"     * Writes all Tasks to file, and saves file to specified filepath."},{"lineNumber":64,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"jlxw48"},"content":"     * @param taskList list of all tasks."},{"lineNumber":66,"author":{"gitId":"jlxw48"},"content":"     * @throws IOException if unable to write to file completely."},{"lineNumber":67,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"jlxw48"},"content":"    public void writeToFile(TaskList taskList) throws IOException {"},{"lineNumber":69,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e allStringTasks \u003d FileTaskStringConverter.allTaskToAllString(taskList.getList());"},{"lineNumber":70,"author":{"gitId":"jlxw48"},"content":"        FileWriter fw \u003d new FileWriter(this.filepath);"},{"lineNumber":71,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":72,"author":{"gitId":"jlxw48"},"content":"        StringBuilder text \u003d new StringBuilder();"},{"lineNumber":73,"author":{"gitId":"jlxw48"},"content":"        for (String s : allStringTasks) {"},{"lineNumber":74,"author":{"gitId":"jlxw48"},"content":"            text.append(s).append(\"\\n\");"},{"lineNumber":75,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":77,"author":{"gitId":"jlxw48"},"content":"        fw.write(text.toString());"},{"lineNumber":78,"author":{"gitId":"jlxw48"},"content":"        fw.close();"},{"lineNumber":79,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":81,"author":{"gitId":"jlxw48"},"content":"    private void emptyFile() {"},{"lineNumber":82,"author":{"gitId":"jlxw48"},"content":"        this.ui.showMsg(\"You have no existing tasks!\");"},{"lineNumber":83,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":85,"author":{"gitId":"jlxw48"},"content":"    private void nonEmptyFile() {"},{"lineNumber":86,"author":{"gitId":"jlxw48"},"content":"        this.ui.showMsg(\"You have existing tasks!\");"},{"lineNumber":87,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":88}},{"path":"src/main/java/duke/utils/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"    private static final String logo \u003d \" ____        _        \\n\""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"     * Prints the introduction message a user sees upon launching the application."},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    public void introduction() {"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"        System.out.println(logo);"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        String welcomeMessage \u003d \"Hello! I\u0027m Duke.\";"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        System.out.println(welcomeMessage);"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"     * Prints the specified error message as an error message."},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"     * @param errorMsg error message to print."},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"    public void showError(String errorMsg) {"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"        System.err.println(errorMsg);"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":28,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jlxw48"},"content":"     * Prints the specified message."},{"lineNumber":30,"author":{"gitId":"jlxw48"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"jlxw48"},"content":"     * @param msg message to print."},{"lineNumber":32,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"jlxw48"},"content":"    public void showMsg(String msg) {"},{"lineNumber":34,"author":{"gitId":"jlxw48"},"content":"        System.out.println(msg);"},{"lineNumber":35,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":37,"author":{"gitId":"jlxw48"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jlxw48"},"content":"     * Prints the list of valid commands and types of input."},{"lineNumber":39,"author":{"gitId":"jlxw48"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jlxw48"},"content":"    public void showHelp() {"},{"lineNumber":41,"author":{"gitId":"jlxw48"},"content":"        System.err.println(\"Valid commands include the following:\");"},{"lineNumber":42,"author":{"gitId":"jlxw48"},"content":"        System.err.println(\"\u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027, \u0027list\u0027, \u0027delete\u0027, \u0027bye\u0027\");"},{"lineNumber":43,"author":{"gitId":"jlxw48"},"content":"        System.err.println(\"Please start your input with one of the above commands!\");"},{"lineNumber":44,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":46,"author":{"gitId":"jlxw48"},"content":"    public void repeatInput() {"},{"lineNumber":47,"author":{"gitId":"jlxw48"},"content":"        System.out.println(\"Please enter your input again!\");"},{"lineNumber":48,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":49}},{"path":"src/test/java/duke/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public void stringConstructor_description() {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        Deadline d \u003d new Deadline(\"homework\", \"31 Jan 21 2359\");"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"homework\", d.getDescription());"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"    public void stringConstructor_date() {"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        Deadline d \u003d new Deadline(\"homework\", \"31 Jan 21 2359\");"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"31 Jan 2021, 11:59 PM\", d.getDate());"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":19}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"    public void toStringTest() {"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"        Event e \u003d new Event(\"meeting friends\", \"1 Feb 21 1800\");"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"        assertEquals(\"[E][ ] meeting friends (at: 01 Feb 2021, 6:00 PM)\","},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"                e.toString());"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":14}},{"path":"src/test/java/duke/utils/FileTaskStringConverterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"import duke.dukeexceptions.InvalidTaskTypeException;"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":""},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"public class FileTaskStringConverterTest {"},{"lineNumber":13,"author":{"gitId":"jlxw48"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"jlxw48"},"content":"    public void stringToTaskTest() {"},{"lineNumber":15,"author":{"gitId":"jlxw48"},"content":"        String inputFromFile \u003d \"E | 0 | project meeting | 15/12/2020 0911\";"},{"lineNumber":16,"author":{"gitId":"jlxw48"},"content":"        List\u003cString\u003e allInput \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"jlxw48"},"content":"        allInput.add(inputFromFile);"},{"lineNumber":18,"author":{"gitId":"jlxw48"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"jlxw48"},"content":"            List\u003cTask\u003e allTasks \u003d FileTaskStringConverter.allStringToAllTask(allInput);"},{"lineNumber":20,"author":{"gitId":"jlxw48"},"content":"            assertEquals(\"[E][ ] project meeting (at: 15 Dec 2020, 9:11 AM)\","},{"lineNumber":21,"author":{"gitId":"jlxw48"},"content":"                    allTasks.get(0).toString());"},{"lineNumber":22,"author":{"gitId":"jlxw48"},"content":"        } catch (InvalidTaskTypeException e){"},{"lineNumber":23,"author":{"gitId":"jlxw48"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"jlxw48"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"jlxw48"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jlxw48"},"content":"}"}],"authorContributionMap":{"jlxw48":26}},{"path":"tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"T | 0 | todo"}],"authorContributionMap":{"jlxw48":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jlxw48"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"jlxw48"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"jlxw48"},"content":"event project meeting /at Monday 2-4pm"},{"lineNumber":4,"author":{"gitId":"jlxw48"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":6,"author":{"gitId":"jlxw48"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"jlxw48"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"jlxw48"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":10,"author":{"gitId":"jlxw48"},"content":"delete 3"},{"lineNumber":11,"author":{"gitId":"jlxw48"},"content":"list"},{"lineNumber":12,"author":{"gitId":"jlxw48"},"content":"bye"}],"authorContributionMap":{"jlxw48":12}}]
