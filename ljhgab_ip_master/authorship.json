[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"    configFile \u003d rootProject.file(\u0027config/checkstyle/checkstyle.xml\u0027)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"repositories {"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"    mavenCentral()"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"}"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"dependencies {"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":67,"author":{"gitId":"ljhgab"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":68,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"-":44,"ljhgab":24}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"* [Introduction](#introduction)"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"* [Quick Start](#quick-start)"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"* [Features](#features)"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"\u003ca name\u003d\"introduction\"\u003e\u003c/a\u003e"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"## Introduction"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"Duke is a personal task managing application which is based on Command Line Tool. "},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"It aims to help individuals keep track of various tasks."},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"\u003ca name\u003d\"quick_start\"\u003e\u003c/a\u003e"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"## Quick Start"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"1. Ensure you have Java 11 or above installed in your Computer. "},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"2. Download the latest `Duke.jar` from [here](https://github.com/ljhgab/ip/releases)."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"3. Copy the file to the folder you want to use as the home folder for your Duke."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"![](images/startwindow.png)"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"5. Type the command in the command box and press Enter to execute it."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"   * `list` : Lists all tasks."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"    * `todo read book` : Adds a Todo type task named \"read book\" to the Task List."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    * `done 1` : Marks the first task in the list as completed."},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    * `delete 1` : Removes the first task in the list."},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    * `bye` : Exit the app."},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    "},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"6. Refer to the [Features](#Features) below for more commands and their details. "},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"\u003ca name\u003d\"features\"\u003e\u003c/a\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"#### ℹ️ Notes about the command format"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"* Words in `UPPER_CASE` are the parameters to be specified by the user."},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"e.g.in todo `TASK_NAME`, `TASK_NAME` is a parameter which can be used as `todo read book`."},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"* The format of `TIME` is `yyyy-MM-dd HHmm` "},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"---"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"### `todo` - Adding a Todo task"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"Adds a Todo type task into the Task List."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"Format: `todo TASK_NAME`"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"Example of usage:"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"`todo read book`"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"Expected outcome:"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"![](images/todoexample.png)"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"### `deadline` - Adding a Deadline task"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"Adds a Deadline task into the Task List."},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"Format: deadline `TASK_NAME` /by `TIME`"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"`deadline Quiz 6 /by 2021-02-15 2359`"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"Expected outcome:"},{"lineNumber":67,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":68,"author":{"gitId":"ljhgab"},"content":"![](images/deadlineexample.png)"},{"lineNumber":69,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":70,"author":{"gitId":"ljhgab"},"content":"### `event` - Adding an Event task"},{"lineNumber":71,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":72,"author":{"gitId":"ljhgab"},"content":"Adds an Event task into the Task List."},{"lineNumber":73,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":74,"author":{"gitId":"ljhgab"},"content":"Format: event `TASK_NAME` /at `TIME`"},{"lineNumber":75,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":76,"author":{"gitId":"ljhgab"},"content":"Example of usage:"},{"lineNumber":77,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":78,"author":{"gitId":"ljhgab"},"content":"`event Project Meeting /at 2021-02-19 2000`"},{"lineNumber":79,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":80,"author":{"gitId":"ljhgab"},"content":"Expected outcome:"},{"lineNumber":81,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":82,"author":{"gitId":"ljhgab"},"content":"![](images/eventexample.png)"},{"lineNumber":83,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":84,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":85,"author":{"gitId":"ljhgab"},"content":"### `list` - Listing all tasks"},{"lineNumber":86,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":87,"author":{"gitId":"ljhgab"},"content":"Shows all the existing tasks in the Task List."},{"lineNumber":88,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":89,"author":{"gitId":"ljhgab"},"content":"Format: `list`"},{"lineNumber":90,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":91,"author":{"gitId":"ljhgab"},"content":"Example of usage:"},{"lineNumber":92,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":93,"author":{"gitId":"ljhgab"},"content":"`list`"},{"lineNumber":94,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":95,"author":{"gitId":"ljhgab"},"content":"Expected outcome:"},{"lineNumber":96,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":97,"author":{"gitId":"ljhgab"},"content":"![](images/listexample.png)"},{"lineNumber":98,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":99,"author":{"gitId":"ljhgab"},"content":"### `done` - Marking task as completed"},{"lineNumber":100,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":101,"author":{"gitId":"ljhgab"},"content":"Marks the specified task as completed."},{"lineNumber":102,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":103,"author":{"gitId":"ljhgab"},"content":"Format: `done INDEX`"},{"lineNumber":104,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":105,"author":{"gitId":"ljhgab"},"content":"Example of usage:"},{"lineNumber":106,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":107,"author":{"gitId":"ljhgab"},"content":"`done 1`"},{"lineNumber":108,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":109,"author":{"gitId":"ljhgab"},"content":"Expected outcome:"},{"lineNumber":110,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":111,"author":{"gitId":"ljhgab"},"content":"![](images/doneexample.png)"},{"lineNumber":112,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":113,"author":{"gitId":"ljhgab"},"content":"### `delete` - Deleting a task"},{"lineNumber":114,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":115,"author":{"gitId":"ljhgab"},"content":"Removes the specified task from the Task List."},{"lineNumber":116,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":117,"author":{"gitId":"ljhgab"},"content":"Format: `delete INDEX`"},{"lineNumber":118,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":119,"author":{"gitId":"ljhgab"},"content":"Example of usage:"},{"lineNumber":120,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":121,"author":{"gitId":"ljhgab"},"content":"`delete 2`"},{"lineNumber":122,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":123,"author":{"gitId":"ljhgab"},"content":"Expected outcome:"},{"lineNumber":124,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":125,"author":{"gitId":"ljhgab"},"content":"![](images/deleteexample.png)"},{"lineNumber":126,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":127,"author":{"gitId":"ljhgab"},"content":"### `find` - Finding tasks"},{"lineNumber":128,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":129,"author":{"gitId":"ljhgab"},"content":"Searches tasks that contain the keyword from the Task List."},{"lineNumber":130,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":131,"author":{"gitId":"ljhgab"},"content":"Format: `find KEYWORD`"},{"lineNumber":132,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":133,"author":{"gitId":"ljhgab"},"content":"Example of usage:"},{"lineNumber":134,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":135,"author":{"gitId":"ljhgab"},"content":"`find Meeting`"},{"lineNumber":136,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":137,"author":{"gitId":"ljhgab"},"content":"Expected outcome:"},{"lineNumber":138,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":139,"author":{"gitId":"ljhgab"},"content":"![](images/findexample.png)"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"ljhgab"},"content":"### `set` - Setting priority"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"ljhgab"},"content":"Gives a specified task an integer between 1-3 which denotes priority."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"ljhgab"},"content":"Format: `set INDEX /as PRIORITY_NUMBER`"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"ljhgab"},"content":"`set 2 /as 3`"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"ljhgab"},"content":"![](images/setexample.png)"},{"lineNumber":154,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":155,"author":{"gitId":"ljhgab"},"content":"### `bye` - Ending a conversation"},{"lineNumber":156,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":157,"author":{"gitId":"ljhgab"},"content":"Says goodbye and terminates the program in 3 seconds."},{"lineNumber":158,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":159,"author":{"gitId":"ljhgab"},"content":"Format: `bye`"},{"lineNumber":160,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":161,"author":{"gitId":"ljhgab"},"content":"Example of usage:"},{"lineNumber":162,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":163,"author":{"gitId":"ljhgab"},"content":"`bye`"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"ljhgab"},"content":"![](images/byeexample.png)"}],"authorContributionMap":{"-":22,"ljhgab":145}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.parser.CommandParser;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" * A class represents the Duke bot."},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"    private final Storage storage;"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    private final Ui ui;"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     * Constructs a Duke bot."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * @param filePath The file path to store the tasks."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    public Duke(String filePath) {"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"        ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"            tasks \u003d new TaskList(storage.syncFromFile());"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"        } catch (DukeException e) {"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"     * Main method to lunch the bot."},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"     * @param args Arguments of the main method."},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"        new Duke(System.getProperty(\"user.dir\") + \"/duke.txt\").run();"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"     * Launch the Duke bot by reading in the user input and gives responses."},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"    public void run() {"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        boolean isOver \u003d false;"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"        ui.showWelcome();"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        while (!isOver) {"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"            try {"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"                String input \u003d ui.readCommand();"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"                ui.printLine();"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"                Command command \u003d CommandParser.parseCommand(input);"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"                command.execute(tasks, ui, storage);"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"                isOver \u003d command.isExit();"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"                ui.printLine();"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"            } catch (DukeException e) {"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"                ui.showErrorMessage(e.getMessage());"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"     * Replace this stub with your completed method."},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"    public String getResponse(String input) {"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"            Command command \u003d CommandParser.parseCommand(input);"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"            String response \u003d command.execute(tasks, ui, storage);"},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"            return response;"},{"lineNumber":67,"author":{"gitId":"ljhgab"},"content":"        } catch (DukeException e) {"},{"lineNumber":68,"author":{"gitId":"ljhgab"},"content":"            return ui.showErrorMessage(e.getMessage());"},{"lineNumber":69,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"ljhgab":68}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":" * A GUI for Duke using FXML."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"public class Main extends Application {"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    private final Duke duke \u003d new Duke(System.getProperty(\"user.dir\") + \"/duke.txt\");"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"    public void start(Stage stage) {"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"            stage.setScene(scene);"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"            stage.show();"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"}"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":""}],"authorContributionMap":{"ljhgab":37}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskDescription;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" * An abstract class that represents \"adding task\" command."},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"public abstract class AddCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    protected static final int NAME_INDEX \u003d 0;"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"    protected static final int DATE_TIME_INDEX \u003d 1;"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    protected final TaskDescription descriptions;"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     * Constructs an \"AddCommand\" type of command."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * @param descriptions The descriptions for a task."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    public AddCommand(TaskDescription descriptions) {"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"        this.descriptions \u003d descriptions;"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * Adds the task into a given task list while updating the file."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"     * @param task Task to be added."},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    public void addThisTask(TaskList tasks, Task task, Ui ui, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"        tasks.add(task);"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"        storage.updateInFile(tasks);"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"        ui.printTaskAdded(task, tasks);"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"     * Returns false because this is an AddCommand."},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"     * @return false."},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"    public boolean isExit() {"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"        return false;"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":45}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":" * An abstract class that represents a Command."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * Performs the behavior of this specific command."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     * @return The relevant message produced."},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     * @throws DukeException If error occurs during the process."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     * Returns false if this command is not ExitCommand."},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * @return False if this command is not ExitCommand and true otherwise."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    public abstract boolean isExit();"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":27}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionIndexOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionMissingException;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.parser.TaskParser;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import duke.task.EnumTask;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskDescription;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":" * A class represents a DeadlineCommand."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"public class DeadlineCommand extends AddCommand {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * Constructs a DeadlineCommand."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     * @param descriptions The descriptions that contains name and time of the Deadline."},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    public DeadlineCommand(TaskDescription descriptions) {"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"        super(descriptions);"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     * Adds the Deadline task into a given task list while updating the file."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"     * @return The message of adding a Deadline Task."},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"     * @throws DukeException If error occurs during the process."},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"            String name \u003d descriptions.getDescriptionOfIndex(NAME_INDEX).trim();"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"            String dateAndTime \u003d descriptions.getDescriptionOfIndex(DATE_TIME_INDEX);"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"            Task deadline \u003d TaskParser.parseTask(EnumTask.DEADLINE, name, dateAndTime);"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"            super.addThisTask(tasks, deadline, ui, storage);"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"            return ui.addTaskResponse(deadline, tasks);"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        } catch (DescriptionMissingException e) {"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(e.getMessage() + \"Please specify the name!\");"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        } catch (DescriptionIndexOutOfBoundsException e) {"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionIndexOutOfBoundsException(e.getMessage() + \"Please include the date and time!\");"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":48}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.TaskIndexOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" * A class represents a DeleteCommand."},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"public class DeleteCommand extends IndexCommand {"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * Constructs a DeleteCommand."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param index The index of the task that is going to be deleted."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        super(index);"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"     * Deletes the specified task from the task list."},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @return The message produced by deleting a task."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     * @throws TaskIndexOutOfBoundsException If the specified index is out of the bound of the task list."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexOutOfBoundsException {"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"        if (index \u003c tasks.size() \u0026\u0026 index \u003e\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"            Task removingTask \u003d tasks.get(index);"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"            tasks.remove(index);"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"            storage.updateInFile(tasks);"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"            ui.printTaskRemoved(removingTask, tasks);"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"            return ui.deleteTaskResponse(removingTask, tasks);"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"            throw new TaskIndexOutOfBoundsException(\"There is no task numbered \" + (index + 1) + \"!\");"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":42}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.TaskIndexOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" * A class represents a DoneCommand."},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"public class DoneCommand extends IndexCommand {"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * Constructs a DoneCommand."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param index The index of the task that is completed."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public DoneCommand(int index) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        super(index);"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"     * Marks the specified task in the task list as completed."},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @return The message produced by completing a task."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     * @throws TaskIndexOutOfBoundsException If the specified index is out of the bound of task list."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexOutOfBoundsException {"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"        if (index \u003c tasks.size() \u0026\u0026 index \u003e\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"            Task completedTask \u003d tasks.get(index);"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"            completedTask.complete();"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"            storage.updateInFile(tasks);"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"            ui.printTaskCompleted(completedTask);"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"            return ui.completeTaskResponse(completedTask);"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"            throw new TaskIndexOutOfBoundsException(\"There is no task numbered \" + (index + 1) + \"!\");"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":41}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionIndexOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionMissingException;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.parser.TaskParser;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import duke.task.EnumTask;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskDescription;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":" * A class represents an EventCommand."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"public class EventCommand extends AddCommand {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * Constructs an EventCommand."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     * @param descriptions The descriptions that contains name and time of the event."},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    public EventCommand(TaskDescription descriptions) {"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"        super(descriptions);"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     * Adds the Event task into a given task list while updating the file."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"     * @return The message of adding an Event task."},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"     * @throws DukeException If error occurs during the process."},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"            String name \u003d descriptions.getDescriptionOfIndex(NAME_INDEX).trim();"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"            String dateAndTime \u003d descriptions.getDescriptionOfIndex(DATE_TIME_INDEX);"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"            Task event \u003d TaskParser.parseTask(EnumTask.EVENT, name, dateAndTime);"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"            super.addThisTask(tasks, event, ui, storage);"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"            return ui.addTaskResponse(event, tasks);"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        } catch (DescriptionMissingException e) {"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(e.getMessage() + \"Please specify the name!\");"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        } catch (DescriptionIndexOutOfBoundsException e) {"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionIndexOutOfBoundsException(e.getMessage() + \"Please include the date and time!\");"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":48}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":" * A class represents ExitCommand"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"     * Calls ui to print a farewell message."},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * @return The message of farewell."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"        ui.sayGoodBye();"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"        return ui.exitResponse();"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * Returns ture because this is the ExitCommand."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @return True."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    public boolean isExit() {"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"        return true;"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":32}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":" * A class represents a FindCommand."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    protected String keyword;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * Constructs a FindCommand."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param keyword The keyword to be used to find matching tasks."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"     * Collects all the matching tasks and calls ui to print therm."},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @return All the matching tasks in form of String."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"        TaskList matchingTasks \u003d tasks.findMatchingTask(keyword);"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"        ui.listMatchingTasks(matchingTasks);"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"        return ui.listMatchingTasksResponse(matchingTasks);"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"     * Returns false because this is not the ExitCommand."},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"     * @return False."},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"    public boolean isExit() {"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"        return false;"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":43}},{"path":"src/main/java/duke/command/IndexCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * An abstract class represents an IndexCommand."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public abstract class IndexCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    protected int index;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     * Constructs an IndexCommand."},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"     * @param index The index of the task specified."},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    public IndexCommand(int index) {"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"        this.index \u003d index;"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     * Returns false because this is not an ExitCommand."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * @return False."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    public boolean isExit() {"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"        return false;"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":25}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":" * A class represents a ListCommand."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"     * Calls ui to print all the tasks in the task list right now."},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * @return All the tasks stored in the task list now."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"        ui.listTasks(tasks);"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"        return ui.listTasksResponse(tasks);"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * Returns false because this is not the ExitCommand."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @return False."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    public boolean isExit() {"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"        return false;"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":32}},{"path":"src/main/java/duke/command/SetCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.TaskIndexOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"public class SetCommand extends IndexCommand {"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"    private final int priority;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * Constructs a SetCommand with given index and priority."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @param index The index of the task to be updated."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param priority The priority to be assigned to the task."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public SetCommand(int index, int priority) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        super(index);"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"        this.priority \u003d priority;"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     * Marks the specified task in the task list as completed."},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     * @return The message produced by completing a task."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"     * @throws TaskIndexOutOfBoundsException If the specified index is out of the bound of task list."},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexOutOfBoundsException {"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"        if (index \u003c tasks.size() \u0026\u0026 index \u003e\u003d 0) {"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"            Task task \u003d tasks.get(index);"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"            task.setPriority(priority);"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"            storage.updateInFile(tasks);"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"            ui.printTaskUpdated(task);"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"            return ui.updateTaskResponse(task);"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"            throw new TaskIndexOutOfBoundsException(\"There is no task numbered \" + (index + 1) + \"!\");"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":42}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionIndexOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionMissingException;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.parser.TaskParser;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import duke.task.EnumTask;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskDescription;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import duke.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":" * A class represents a TodoCommand."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"public class TodoCommand extends AddCommand {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * Constructs a TodoCommand."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     * @param descriptions The descriptions which contains name for the TodoCommand."},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    public TodoCommand(TaskDescription descriptions) {"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"        super(descriptions);"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * Adds the Todo task into a given task list while updating the file."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Task list given."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"     * @param ui User interface class object."},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"     * @param storage Storage path that is going to be updated."},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"     * @return The message of adding a Todo task."},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"     * @throws DukeException If error occurs during the process."},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"            String name \u003d descriptions.getDescriptionOfIndex(NAME_INDEX).trim();"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"            Task todo \u003d TaskParser.parseTask(EnumTask.TODO, name);"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"            super.addThisTask(tasks, todo, ui, storage);"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"            return ui.addTaskResponse(todo, tasks);"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"        } catch (DescriptionMissingException e) {"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(e.getMessage() + \"Please specify the name!\");"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        } catch (DescriptionIndexOutOfBoundsException e) {"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionIndexOutOfBoundsException(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":46}},{"path":"src/main/java/duke/exception/CommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * A class represents a CommandNotFoundException."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public class CommandNotFoundException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"     * Constructs a CommandNotFoundException."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"     * @param message The error message."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    public CommandNotFoundException(String message) {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":14}},{"path":"src/main/java/duke/exception/DescriptionIndexOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * A class represents a DescriptionIndexOutOfBoundsException."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public class DescriptionIndexOutOfBoundsException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"     * Constructs a DescriptionIndexOutOfBoundsException."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"     * @param message The error message."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    public DescriptionIndexOutOfBoundsException(String message) {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":14}},{"path":"src/main/java/duke/exception/DescriptionMissingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * A class represents a DescriptionMissingException."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public class DescriptionMissingException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"     * Constructs a DescriptionMissingException."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"     * @param message The error message."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    public DescriptionMissingException(String message) {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":14}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * A class represents a DukeException."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"     * Constructs a DukeException."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"     * @param message The error message."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":14}},{"path":"src/main/java/duke/exception/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * A class represents an InvalidDateTimeException."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public class InvalidDateTimeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"     * Constructs an InvalidDateTimeException."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"     * @param message The error message."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    public InvalidDateTimeException(String message) {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":14}},{"path":"src/main/java/duke/exception/InvalidPriorityException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"public class InvalidPriorityException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"    public InvalidPriorityException(String message) {"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":7}},{"path":"src/main/java/duke/exception/TaskIndexOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * A class represents a TaskIndexOutOfBoundsException."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public class TaskIndexOutOfBoundsException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"     * Constructs a TaskIndexOutOfBoundException."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"     * @param message The error message."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    public TaskIndexOutOfBoundsException(String message) {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":14}},{"path":"src/main/java/duke/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.command.EventCommand;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import duke.command.ExitCommand;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import duke.command.FindCommand;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import duke.command.ListCommand;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import duke.command.SetCommand;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import duke.command.TodoCommand;"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"import duke.exception.CommandNotFoundException;"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionMissingException;"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"import duke.task.EnumTask;"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskDescription;"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":" * A class represents a CommandParser."},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"public class CommandParser implements Parser {"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * Returns a Command based on user\u0027s input."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * @param input The full command from user\u0027s input."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @return A command base on the input."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     * @throws DukeException If error occurs during the process."},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    public static Command parseCommand(String input) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"        String cleanerInput \u003d input.trim();"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"        int endIndex \u003d cleanerInput.indexOf(\" \");"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"        String potentialCommand \u003d (endIndex \u003d\u003d -1) ? cleanerInput : cleanerInput.substring(0, endIndex);"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"        Command command;"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"        if (potentialCommand.length() \u003d\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Please enter something!\");"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"        assert(potentialCommand.length() \u003e 0);"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"        if (potentialCommand.equalsIgnoreCase(\"LIST\")) {"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"            command \u003d new ListCommand();"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        } else if (potentialCommand.equalsIgnoreCase(\"BYE\")) {"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"            command \u003d new ExitCommand();"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        } else if (potentialCommand.equalsIgnoreCase(\"DONE\")) {"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"            command \u003d new DoneCommand(IndexParser.parseIndex(cleanerInput, endIndex));"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"        } else if (potentialCommand.equalsIgnoreCase(\"DELETE\")) {"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"            command \u003d new DeleteCommand(IndexParser.parseIndex(cleanerInput, endIndex));"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"        } else if (potentialCommand.equalsIgnoreCase(\"SET\")) {"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"            command \u003d new SetCommand(IndexParser.parseIndex(cleanerInput, endIndex),"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"                    IndexParser.parsePriority(cleanerInput));"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"        } else if (potentialCommand.equalsIgnoreCase(\"TODO\")) {"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"            TaskDescription td \u003d DescriptionParser.parseDescription(EnumTask.TODO, cleanerInput, endIndex);"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"            command \u003d new TodoCommand(td);"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"        } else if (potentialCommand.equalsIgnoreCase(\"DEADLINE\")) {"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"            TaskDescription td \u003d DescriptionParser.parseDescription(EnumTask.DEADLINE, cleanerInput, endIndex);"},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"            command \u003d new DeadlineCommand(td);"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"        } else if (potentialCommand.equalsIgnoreCase(\"EVENT\")) {"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"            TaskDescription td \u003d DescriptionParser.parseDescription(EnumTask.EVENT, cleanerInput, endIndex);"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"            command \u003d new EventCommand(td);"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"        } else if (potentialCommand.equalsIgnoreCase(\"FIND\")) {"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"            command \u003d new FindCommand(KeywordParser.parseKeyword(cleanerInput, endIndex));"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"            throw new CommandNotFoundException(\"What do you mean? I do not know this command.\");"},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"        return command;"},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":67}},{"path":"src/main/java/duke/parser/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import duke.exception.InvalidDateTimeException;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":" * A class represents a DateTimeParser."},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"public class DateTimeParser implements Parser {"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * Returns a LocalDateTime from a string containing date and time."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     * @param dateTime The input string containing date and time."},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     * @return A LocalDateTime parsed from the input string."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * @throws InvalidDateTimeException If the input date and time string is not valid."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws InvalidDateTimeException {"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"        String[] dateAndTime \u003d dateTime.trim().split(\" \");"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"        LocalDateTime parsedDateTime;"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"        if (dateAndTime.length !\u003d 2) {"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"            throw new InvalidDateTimeException(\"Input date and time is not valid!\");"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"        String date \u003d dateAndTime[0].trim();"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"        String time \u003d dateAndTime[1].trim();"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"        parsedDateTime \u003d LocalDateTime.of(parseDate(date), parseTime(time));"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"        return parsedDateTime;"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"    private static LocalDate parseDate(String date) throws InvalidDateTimeException {"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"        String[] yearMonthDay \u003d date.strip().split(\"-\");"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"        if (yearMonthDay.length !\u003d 3) {"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"            throw new InvalidDateTimeException(\"Input date is not valid.\");"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"        String year \u003d yearMonthDay[0].trim();"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"        String month \u003d yearMonthDay[1].trim();"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        String day \u003d yearMonthDay[2].trim();"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"        if (year.length() \u003d\u003d 4 \u0026\u0026 month.length() \u003d\u003d 2 \u0026\u0026 day.length() \u003d\u003d 2) {"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"            try {"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"                return LocalDate.parse(date);"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"            } catch (DateTimeException e) {"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"                throw new InvalidDateTimeException(\"Input date is not valid.\");"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"            throw new InvalidDateTimeException(\"Input date is not valid.\");"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"    private static LocalTime parseTime(String time) throws InvalidDateTimeException {"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"        String hour \u003d time.trim().substring(0, 2);"},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"        String minute \u003d time.trim().substring(2, 4);"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"            return LocalTime.parse(hour + \":\" + minute);"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"            throw new InvalidDateTimeException(\"Input time is not valid.\");"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":63}},{"path":"src/main/java/duke/parser/DescriptionParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionMissingException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.task.EnumTask;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskDescription;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":" * A class that represents DescriptionParser."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"public class DescriptionParser implements Parser {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * Returns a TaskDescription from a string with given index and task type."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @param taskType The type of the task."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param input The input string."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * @param index The index of the end of the command."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     * @return A TaskDescription containing the detail in the input."},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     * @throws DukeException If error occurs during the process."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    public static TaskDescription parseDescription(EnumTask taskType, String input, int index) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"            return new TaskDescription();"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"        switch (taskType) {"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"        case TODO:"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"            return new TaskDescription(input.substring(index).trim());"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"        case DEADLINE:"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"            missingByAlert(input.substring(index).trim());"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"            return new TaskDescription(input.substring(index).trim().split(\"/by\"));"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"        case EVENT:"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"            missingAtAlert(input.substring(index).trim());"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"            return new TaskDescription(input.substring(index).trim().split(\"/at\"));"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"        default:"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"            throw new DukeException(\"I do not know this task\");"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"    private static void missingByAlert(String input) throws DescriptionMissingException {"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"        int indexOfBy \u003d input.indexOf(\"/by\");"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"        if (indexOfBy \u003d\u003d -1) {"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Please make sure you have /by in your input.\");"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"    private static void missingAtAlert(String input) throws DescriptionMissingException {"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"        int indexOfBy \u003d input.indexOf(\"/at\");"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"        if (indexOfBy \u003d\u003d -1) {"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Please make sure you have /at in your input.\");"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":51}},{"path":"src/main/java/duke/parser/IndexParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionMissingException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import duke.exception.InvalidPriorityException;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":" * A class represents an IndexParser."},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"public class IndexParser implements Parser {"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"     * Return the index contained in the input string."},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"     * @param input The input string given by user."},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * @return The index contained in the input string."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @throws DescriptionMissingException If the index is not in the input string."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"    public static int parseIndex(String input, int sepIndex) throws DescriptionMissingException {"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"        if (sepIndex \u003d\u003d -1) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Please specify the index!\");"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"        String[] instructions \u003d input.substring(sepIndex).trim().split(\" \");"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"            assert(instructions.length \u003e 0);"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"            // Rule out the possible effect by \"set\" statement"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"            String indexInString \u003d instructions[0].replace(\"/as\", \"\").trim();"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"            return Integer.parseInt(indexInString) - 1;"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Input index is not valid\");"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"     * Returns the priority contained in the input string."},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"     * @param input The input string given by the user."},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"     * @return The priority contained in the string."},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"     * @throws DescriptionMissingException If the priority is not a valid one."},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"    public static int parsePriority(String input) throws DescriptionMissingException, InvalidPriorityException {"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        missingAsAlert(input.trim());"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"        String[] instructions \u003d input.trim().split(\"/as\");"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"        if (instructions.length \u003c 2) {"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Please specify the priority!\");"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"            String priorityInString \u003d instructions[1].trim();"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"            int priority \u003d Integer.parseInt(priorityInString);"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"            if (priority \u003c 1 || priority \u003e 3) {"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"                throw new InvalidPriorityException(\"Input priority should be between 1 - 3!\");"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"            return priority;"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Input priority is not valid\");"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"    private static void missingAsAlert(String input) throws DescriptionMissingException {"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"        int indexOfBy \u003d input.indexOf(\"/as\");"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"        if (indexOfBy \u003d\u003d -1) {"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Please make sure you have /as in your input.\");"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":62}},{"path":"src/main/java/duke/parser/KeywordParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionMissingException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":" * A class that represents a KeywordParser."},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"public class KeywordParser implements Parser {"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     * Returns the keyword from the user\u0027s input."},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"     * @param input The input string given by user."},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"     * @param index The index at the end of Find command."},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * @return The keyword contained in the input string."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @throws DescriptionMissingException If the keyword is not included in the input string."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"    public static String parseKeyword(String input, int index) throws DescriptionMissingException {"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Please include the keyword!\");"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"        return input.substring(index).trim();"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":22}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * An interface represents a Parser."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public interface Parser {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":7}},{"path":"src/main/java/duke/parser/TaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import duke.task.EnumTask;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import duke.task.Todo;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":" * A class that represents a TaskParser."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"public class TaskParser implements Parser {"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     * Returns a Task constructed from the given inputs."},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     * @param taskType The Enum taskType."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * @param descriptions The relevant descriptions to construct a task."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     * @return A Task constructed from the given inputs."},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"     * @throws DukeException If error occurs during the process."},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"    public static Task parseTask(EnumTask taskType, String ... descriptions) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"        String name \u003d descriptions[0];"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"        switch (taskType) {"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"        case TODO:"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"            return new Todo(name);"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"        case DEADLINE:"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"            String deadline \u003d descriptions[1].strip();"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"            LocalDateTime cutOffTime \u003d DateTimeParser.parseDateTime(deadline);"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"            return new Deadline(name, cutOffTime);"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"        case EVENT:"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"            String eventTime \u003d descriptions[1].strip();"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"            LocalDateTime startingTime \u003d DateTimeParser.parseDateTime(eventTime);"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"            return new Event(name, startingTime);"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"        default:"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"            throw new DukeException(\"I do not know this task\");"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":40}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import duke.parser.DateTimeParser;"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"import duke.task.Todo;"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":" * A class represents a Storage."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    private final String filePath;"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * Constructs a Storage."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @param path The file path specified by the Duke bot."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    public Storage(String path) {"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"        filePath \u003d path;"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    private void createFileNotExists(File file) throws IOException {"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"        file.createNewFile();"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"     * Returns an ArrayList of tasks that recorded in the storage to the current task list."},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"     * @return An ArrayList of tasks."},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"     * @throws DukeException If error occurs during the process."},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"    public ArrayList\u003cTask\u003e syncFromFile() throws DukeException {"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"            File f \u003d new File(filePath);"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"            if (!f.exists()) {"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"                createFileNotExists(f);"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"            assert(f.exists());"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"            while (sc.hasNext()) {"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"                String[] keyWords \u003d line.split(\" \\\\| \");"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"                String taskType \u003d keyWords[0].trim();"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"                String taskName;"},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"                String taskStatus;"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"                int taskPriority;"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"                Task thisTask;"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"                if (taskType.equals(\"T\")) {"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"                    taskName \u003d keyWords[3];"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"                    taskPriority \u003d Integer.parseInt(keyWords[2].trim());"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"                    thisTask \u003d new Todo(taskName);"},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"                } else if (taskType.equals(\"D\")) {"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"                    taskName \u003d keyWords[3];"},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"                    LocalDateTime cutOffDate \u003d DateTimeParser.parseDateTime(keyWords[4]);"},{"lineNumber":67,"author":{"gitId":"ljhgab"},"content":"                    taskPriority \u003d Integer.parseInt(keyWords[2].trim());"},{"lineNumber":68,"author":{"gitId":"ljhgab"},"content":"                    thisTask \u003d new Deadline(taskName, cutOffDate);"},{"lineNumber":69,"author":{"gitId":"ljhgab"},"content":"                } else {"},{"lineNumber":70,"author":{"gitId":"ljhgab"},"content":"                    taskName \u003d keyWords[3];"},{"lineNumber":71,"author":{"gitId":"ljhgab"},"content":"                    LocalDateTime startDate \u003d DateTimeParser.parseDateTime(keyWords[4]);"},{"lineNumber":72,"author":{"gitId":"ljhgab"},"content":"                    taskPriority \u003d Integer.parseInt(keyWords[2].trim());"},{"lineNumber":73,"author":{"gitId":"ljhgab"},"content":"                    thisTask \u003d new Event(taskName, startDate);"},{"lineNumber":74,"author":{"gitId":"ljhgab"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"ljhgab"},"content":"                taskStatus \u003d keyWords[1].trim();"},{"lineNumber":76,"author":{"gitId":"ljhgab"},"content":"                if (taskStatus.equals(\"1\")) {"},{"lineNumber":77,"author":{"gitId":"ljhgab"},"content":"                    thisTask.complete();"},{"lineNumber":78,"author":{"gitId":"ljhgab"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"ljhgab"},"content":"                thisTask.setPriority(taskPriority);"},{"lineNumber":80,"author":{"gitId":"ljhgab"},"content":"                tasks.add(thisTask);"},{"lineNumber":81,"author":{"gitId":"ljhgab"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"ljhgab"},"content":"            return tasks;"},{"lineNumber":83,"author":{"gitId":"ljhgab"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":84,"author":{"gitId":"ljhgab"},"content":"            throw new DukeException(\"File not found!\");"},{"lineNumber":85,"author":{"gitId":"ljhgab"},"content":"        } catch (IOException e) {"},{"lineNumber":86,"author":{"gitId":"ljhgab"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":87,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":90,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"ljhgab"},"content":"     * Updates the tasks recorded in the storage."},{"lineNumber":92,"author":{"gitId":"ljhgab"},"content":"     * @param tasks Tasks to be recorded."},{"lineNumber":93,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"ljhgab"},"content":"    public void updateInFile(TaskList tasks) {"},{"lineNumber":95,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"ljhgab"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":97,"author":{"gitId":"ljhgab"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":98,"author":{"gitId":"ljhgab"},"content":"            tasks.forEach(t -\u003e {"},{"lineNumber":99,"author":{"gitId":"ljhgab"},"content":"                sb.append(t.toFileString());"},{"lineNumber":100,"author":{"gitId":"ljhgab"},"content":"                sb.append(\"\\n\");"},{"lineNumber":101,"author":{"gitId":"ljhgab"},"content":"            });"},{"lineNumber":102,"author":{"gitId":"ljhgab"},"content":"            fw.write(sb.toString());"},{"lineNumber":103,"author":{"gitId":"ljhgab"},"content":"            fw.close();"},{"lineNumber":104,"author":{"gitId":"ljhgab"},"content":"        } catch (IOException e) {"},{"lineNumber":105,"author":{"gitId":"ljhgab"},"content":"            System.out.println(\"Has no targeted file in: \" + e.getMessage());"},{"lineNumber":106,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":108}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":" * A class represents a Deadline."},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"    private final LocalDateTime cutOffTime;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * Constructs a Deadline."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @param name The name of the Deadline task."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param cutOff The cut off date of the Deadline task."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public Deadline(String name, LocalDateTime cutOff) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        super(name);"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"        cutOffTime \u003d cutOff;"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     * Returns a string in the given format."},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * @return A string in the given format."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"                + cutOffTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyy HH:mm\")) + \")\";"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"     * Returns a string in the given format for storing in files."},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"     * @return A string in the given format for storing in files."},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"    public String toFileString() {"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        return \"D \" + super.toFileString() + \" | \""},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"                + cutOffTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"}"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":""}],"authorContributionMap":{"ljhgab":42}},{"path":"src/main/java/duke/task/EnumTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"public enum EnumTask {"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"    DEADLINE,"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"    EVENT"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":7}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":" * A class represents an Event."},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"    private final LocalDateTime startTime;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * Constructs an Event."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     * @param name The name of the Event task."},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * @param eventStartTime The starting time and date for an Event."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public Event(String name, LocalDateTime eventStartTime) {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        super(name);"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"        startTime \u003d eventStartTime;"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     * Returns a string in the given format."},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * @return A string in the given format."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"        return \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"                + startTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyy HH:mm\")) + \")\";"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"     * Returns a string in the given format for storing in files."},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"     * @return A string in the given format for storing in files."},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"    public String toFileString() {"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        return \"E \" + super.toFileString() + \" | \""},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"                + startTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":41}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * A class represents a Task."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    protected String name;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"    protected int priority;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"     * Constructs a Task."},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     * @param taskName The name of the Task."},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    protected Task(String taskName) {"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"        name \u003d taskName;"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"        isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        priority \u003d 0;"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"     * Marks the status of the Task as \"completed\"."},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    public void complete() {"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"        isDone \u003d true;"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    public void setPriority(int priority) {"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"        this.priority \u003d priority;"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"     * Returns the status icon of the Task."},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"     * @return The status icon of the task."},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    public String getStatusIcon() {"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"    public boolean matchKeyword(String keyword) {"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"        return this.name.contains(keyword);"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"     * Returns a string in the given format."},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"     * @return A string in the given format."},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"        return \"[\" + getStatusIcon() + \"][\" + priority + \"] \" + name;"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"     * Returns a string in the given format for storing in files."},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"     * @return A string in the given format for storing in files."},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"    public String toFileString() {"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"        return \"| \" + (isDone ? \"1\" : \"0\") + \" | \" + priority + \" | \" + name;"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":60}},{"path":"src/main/java/duke/task/TaskDescription.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionIndexOutOfBoundsException;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.exception.DescriptionMissingException;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"public class TaskDescription {"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"    private final Optional\u003cString[]\u003e taskDescriptions;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"     * Constructs an empty TaskDescription."},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"    public TaskDescription() {"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"        this.taskDescriptions \u003d Optional.empty();"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"     * Constructs a TaskDescription using a single string."},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"     * @param name The name of the task."},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    public TaskDescription(String name) {"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"        String[] descriptions \u003d new String[1];"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"        descriptions[0] \u003d name;"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"        this.taskDescriptions \u003d Optional.of(descriptions);"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"     * Constructs a TaskDescription using a String array."},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"     * @param descriptions The relevant descriptions."},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    public TaskDescription(String[] descriptions) {"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"        this.taskDescriptions \u003d Optional.of(descriptions);"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"     * Returns the string stored at the given index."},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"     * @param index The index to extract from."},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"     * @return The string stored at the given index."},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"     * @throws DescriptionIndexOutOfBoundsException If the description index out of bound."},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"     * @throws DescriptionMissingException If there is nothing in the TaskDescription."},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"    public String getDescriptionOfIndex(int index)"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"            throws DescriptionIndexOutOfBoundsException, DescriptionMissingException {"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"        if (taskDescriptions.isEmpty()) {"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionMissingException(\"Descriptions missing! \");"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"            String[] descriptions \u003d taskDescriptions.get();"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"            return descriptions[index];"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"            throw new DescriptionIndexOutOfBoundsException(\"Argument missing! \");"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":55}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import java.util.function.Consumer;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":" * A class represents a TaskList."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * Constructs an empty TaskList"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"     * Constructs a TaskList."},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"     * @param tasks An ArrayList of tasks to be stored in this TaskList."},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"        taskList \u003d tasks;"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"     * Adds the task into this TaskList."},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"     * @param task The task to be added."},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    public void add(Task task) {"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"        taskList.add(task);"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"     * Removes a task according to the index from the TaskList."},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"     * @param index The index of the task to be removed."},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"    public void remove(int index) {"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"        taskList.remove(index);"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"     * Returns the size of the TaskList."},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"     * @return The size of the TaskList."},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"    public int size() {"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"        return taskList.size();"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"     * Returns a task according to the index in the TaskList."},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"     * @param index The index of the task."},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"     * @return The task."},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"    public Task get(int index) {"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"        return taskList.get(index);"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"    public void forEach(Consumer\u003c? super Task\u003e action) {"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"        taskList.forEach(action);"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"     * Returns a sublist of TaskList that matches the keyword."},{"lineNumber":67,"author":{"gitId":"ljhgab"},"content":"     * @param keyword Is the keyword specified by user."},{"lineNumber":68,"author":{"gitId":"ljhgab"},"content":"     * @return A sublist of TaskList that matches the keyword."},{"lineNumber":69,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"ljhgab"},"content":"    public TaskList findMatchingTask(String keyword) {"},{"lineNumber":71,"author":{"gitId":"ljhgab"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"ljhgab"},"content":"        List\u003cTask\u003e matchingList \u003d taskList.stream().filter(t -\u003e t.matchKeyword(keyword)).collect(Collectors.toList());"},{"lineNumber":73,"author":{"gitId":"ljhgab"},"content":"        matchingTasks.addAll(matchingList);"},{"lineNumber":74,"author":{"gitId":"ljhgab"},"content":"        return new TaskList(matchingTasks);"},{"lineNumber":75,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":76}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":" * A class represents a Todo."},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"     * Constructs a Todo."},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"     * @param name The name of the Todo task."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    public Todo(String name) {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"        super(name);"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * Returns a string in the given format."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     * @return A string in the given format."},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     * Returns a string in the given format for storing in files."},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"     * @return A string in the given format for storing in files."},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"    public String toFileString() {"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"        return \"T \" + super.toFileString();"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":32}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":61}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"import javafx.util.Duration;"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    private Button sendButton;"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"    private Duke duke;"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"    private final String greetingMessage \u003d \"Hallo. Ich bin Duke\\nHow can I help you?\\n\";"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"    public MainWindow() {}"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"    public void initialize() {"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"        duke \u003d d;"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(greetingMessage, dukeImage));"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"    private void handleUserInput() {"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"        );"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"        if (input.equalsIgnoreCase(\"BYE\")) {"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"            userInput.setDisable(true);"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"            PauseTransition pause \u003d new PauseTransition(Duration.seconds(3));"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"            pause.setOnFinished(event -\u003e Platform.exit());"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"            pause.play();"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"        userInput.clear();"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":66}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":" * A class represents a UI."},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    private static final String PARTING_LINE \u003d \"____________________________________________________________\";"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"     * Returns an input from user."},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"     * @return A string of input from user."},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    public String readCommand() {"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"        return sc.nextLine();"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"     * Prints the greeting message."},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"    public void showWelcome() {"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"        System.out.println(PARTING_LINE);"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\"Sup. I am Duke.\");"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\"How can I help you?\");"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"        System.out.println(PARTING_LINE);"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"     * Prints a separating line."},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"    public void printLine() {"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"        System.out.println(PARTING_LINE);"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"     * Prints \"See you\" to the user."},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"    public void sayGoodBye() {"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" See you.\");"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"     * Prints the task added."},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"     * @param task The task added."},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"     * @param tasks The TaskList to be updated."},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"    public void printTaskAdded(Task task, TaskList tasks) {"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" Added: \");"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\"  \" + task);"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" Now you have \" + tasks.size() + \" tasks.\");"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"     * Prints the task removed."},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"     * @param task The task removed."},{"lineNumber":67,"author":{"gitId":"ljhgab"},"content":"     * @param tasks The TaskList to be updated."},{"lineNumber":68,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"ljhgab"},"content":"    public void printTaskRemoved(Task task, TaskList tasks) {"},{"lineNumber":70,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" Following task is removed:\");"},{"lineNumber":71,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\"  \" + task);"},{"lineNumber":72,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" Now you have \" + tasks.size() + \" tasks.\");"},{"lineNumber":73,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":75,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"ljhgab"},"content":"     * Prints the task completed."},{"lineNumber":77,"author":{"gitId":"ljhgab"},"content":"     * @param task The task completed."},{"lineNumber":78,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"ljhgab"},"content":"    public void printTaskCompleted(Task task) {"},{"lineNumber":80,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" Marked. How cool is that?\");"},{"lineNumber":81,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\"  \" + task);"},{"lineNumber":82,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":84,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"ljhgab"},"content":"     * Prints the task whose priority has been updated."},{"lineNumber":86,"author":{"gitId":"ljhgab"},"content":"     * @param task The task whose priority has been updated."},{"lineNumber":87,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"ljhgab"},"content":"    public void printTaskUpdated(Task task) {"},{"lineNumber":89,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" Updated the priority of following task:\");"},{"lineNumber":90,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\"  \" + task);"},{"lineNumber":91,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":93,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"ljhgab"},"content":"     * Prints all the tasks in the TaskList."},{"lineNumber":95,"author":{"gitId":"ljhgab"},"content":"     * @param tasks The TaskList to be printed."},{"lineNumber":96,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"ljhgab"},"content":"    public void listTasks(TaskList tasks) {"},{"lineNumber":98,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" Here are the tasks: \");"},{"lineNumber":99,"author":{"gitId":"ljhgab"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":100,"author":{"gitId":"ljhgab"},"content":"            Task tempTask \u003d tasks.get(i);"},{"lineNumber":101,"author":{"gitId":"ljhgab"},"content":"            System.out.println(\" \" + (i + 1) + \".\" + tempTask);"},{"lineNumber":102,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":105,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"ljhgab"},"content":"     * Prints all the tasks that matches."},{"lineNumber":107,"author":{"gitId":"ljhgab"},"content":"     * @param tasks The matching TaskList to be printed."},{"lineNumber":108,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"ljhgab"},"content":"    public void listMatchingTasks(TaskList tasks) {"},{"lineNumber":110,"author":{"gitId":"ljhgab"},"content":"        System.out.println(\" Here are the matching tasks: \");"},{"lineNumber":111,"author":{"gitId":"ljhgab"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":112,"author":{"gitId":"ljhgab"},"content":"            Task tempTask \u003d tasks.get(i);"},{"lineNumber":113,"author":{"gitId":"ljhgab"},"content":"            System.out.println(\" \" + (i + 1) + \".\" + tempTask);"},{"lineNumber":114,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":117,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"ljhgab"},"content":"     * Returns the response of adding a task."},{"lineNumber":119,"author":{"gitId":"ljhgab"},"content":"     * @param task The task added."},{"lineNumber":120,"author":{"gitId":"ljhgab"},"content":"     * @param tasks The TaskList to be updated."},{"lineNumber":121,"author":{"gitId":"ljhgab"},"content":"     * @return The response of adding a task."},{"lineNumber":122,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"ljhgab"},"content":"    public String addTaskResponse(Task task, TaskList tasks) {"},{"lineNumber":124,"author":{"gitId":"ljhgab"},"content":"        return \"Added:\\n\" + \"  \" + task.toString() + \"\\n\" + \" Now you have \" + tasks.size() + \" tasks.\";"},{"lineNumber":125,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":127,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"ljhgab"},"content":"     * Returns the response of deleting a task."},{"lineNumber":129,"author":{"gitId":"ljhgab"},"content":"     * @param task The task to be removed"},{"lineNumber":130,"author":{"gitId":"ljhgab"},"content":"     * @param tasks The TaskList to be updated."},{"lineNumber":131,"author":{"gitId":"ljhgab"},"content":"     * @return The response of deleting a task."},{"lineNumber":132,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"ljhgab"},"content":"    public String deleteTaskResponse(Task task, TaskList tasks) {"},{"lineNumber":134,"author":{"gitId":"ljhgab"},"content":"        return \"Removed:\\n\" + \"  \" + task.toString() + \"\\n\" + \" Now you have \" + tasks.size() + \" tasks.\";"},{"lineNumber":135,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":137,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"ljhgab"},"content":"     * Returns the response of completing a task."},{"lineNumber":139,"author":{"gitId":"ljhgab"},"content":"     * @param task The task completed."},{"lineNumber":140,"author":{"gitId":"ljhgab"},"content":"     * @return The response of completing a task."},{"lineNumber":141,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"ljhgab"},"content":"    public String completeTaskResponse(Task task) {"},{"lineNumber":143,"author":{"gitId":"ljhgab"},"content":"        return \"Marked:\\n\" + \"  \" + task.toString();"},{"lineNumber":144,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":146,"author":{"gitId":"ljhgab"},"content":"    public String updateTaskResponse(Task task) {"},{"lineNumber":147,"author":{"gitId":"ljhgab"},"content":"        return \"Priority has been updated:\\n\" + \"  \" + task.toString();"},{"lineNumber":148,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":150,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"ljhgab"},"content":"     * Returns the response of exit command."},{"lineNumber":152,"author":{"gitId":"ljhgab"},"content":"     * @return The message of farewell."},{"lineNumber":153,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"ljhgab"},"content":"    public String exitResponse() {"},{"lineNumber":155,"author":{"gitId":"ljhgab"},"content":"        return \"Goodbye until we meet again.\";"},{"lineNumber":156,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":158,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"ljhgab"},"content":"     * Returns the tasks as a string."},{"lineNumber":160,"author":{"gitId":"ljhgab"},"content":"     * @param tasks The tasks to be returned."},{"lineNumber":161,"author":{"gitId":"ljhgab"},"content":"     * @return The tasks as a string."},{"lineNumber":162,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"ljhgab"},"content":"    public String listTasksResponse(TaskList tasks) {"},{"lineNumber":164,"author":{"gitId":"ljhgab"},"content":"        StringBuilder response \u003d new StringBuilder(\" Here are the tasks:\\n\");"},{"lineNumber":165,"author":{"gitId":"ljhgab"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":166,"author":{"gitId":"ljhgab"},"content":"            String thisTask \u003d (i + 1) + \". \" + tasks.get(i).toString() + \"\\n\";"},{"lineNumber":167,"author":{"gitId":"ljhgab"},"content":"            response.append(thisTask);"},{"lineNumber":168,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"ljhgab"},"content":"        return response.toString();"},{"lineNumber":170,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":172,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"ljhgab"},"content":"     * Returns all the matching tasks as a string."},{"lineNumber":174,"author":{"gitId":"ljhgab"},"content":"     * @param matchingTasks The matching tasks to be returned."},{"lineNumber":175,"author":{"gitId":"ljhgab"},"content":"     * @return All the matching tasks as a string."},{"lineNumber":176,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"ljhgab"},"content":"    public String listMatchingTasksResponse(TaskList matchingTasks) {"},{"lineNumber":178,"author":{"gitId":"ljhgab"},"content":"        StringBuilder response \u003d new StringBuilder(\" Here are the matching tasks:\\n\");"},{"lineNumber":179,"author":{"gitId":"ljhgab"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"},{"lineNumber":180,"author":{"gitId":"ljhgab"},"content":"            String thisTask \u003d (i + 1) + \". \" + matchingTasks.get(i).toString() + \"\\n\";"},{"lineNumber":181,"author":{"gitId":"ljhgab"},"content":"            response.append(thisTask);"},{"lineNumber":182,"author":{"gitId":"ljhgab"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"ljhgab"},"content":"        return response.toString();"},{"lineNumber":184,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":186,"author":{"gitId":"ljhgab"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"ljhgab"},"content":"     * Returns the error message."},{"lineNumber":188,"author":{"gitId":"ljhgab"},"content":"     * @param message The error message."},{"lineNumber":189,"author":{"gitId":"ljhgab"},"content":"     * @return The error message."},{"lineNumber":190,"author":{"gitId":"ljhgab"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"ljhgab"},"content":"    public String showErrorMessage(String message) {"},{"lineNumber":192,"author":{"gitId":"ljhgab"},"content":"        System.out.println(message);"},{"lineNumber":193,"author":{"gitId":"ljhgab"},"content":"        return message;"},{"lineNumber":194,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":195}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" textFill\u003d\"#f5f4f4\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"ljhgab":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.effect.ColorAdjust?\u003e"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.effect.Light.Distant?\u003e"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.effect.Lighting?\u003e"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.effect.Shadow?\u003e"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.paint.Color?\u003e"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"bodybg\" stylesheets\u003d\"@../images/background.css\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"    \u003cchildren\u003e"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type something here...\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"         \u003cfont\u003e"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"            \u003cFont name\u003d\"System Italic\" size\u003d\"13.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"         \u003c/font\u003e"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"         \u003ceffect\u003e"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"            \u003cLighting\u003e"},{"lineNumber":23,"author":{"gitId":"ljhgab"},"content":"               \u003cbumpInput\u003e"},{"lineNumber":24,"author":{"gitId":"ljhgab"},"content":"                  \u003cShadow /\u003e"},{"lineNumber":25,"author":{"gitId":"ljhgab"},"content":"               \u003c/bumpInput\u003e"},{"lineNumber":26,"author":{"gitId":"ljhgab"},"content":"               \u003clight\u003e"},{"lineNumber":27,"author":{"gitId":"ljhgab"},"content":"                  \u003cLight.Distant\u003e"},{"lineNumber":28,"author":{"gitId":"ljhgab"},"content":"                     \u003ccolor\u003e"},{"lineNumber":29,"author":{"gitId":"ljhgab"},"content":"                        \u003cColor red\u003d\"0.6447368264198303\" green\u003d\"0.6447368264198303\" blue\u003d\"0.6447368264198303\" /\u003e"},{"lineNumber":30,"author":{"gitId":"ljhgab"},"content":"                     \u003c/color\u003e"},{"lineNumber":31,"author":{"gitId":"ljhgab"},"content":"                  \u003c/Light.Distant\u003e"},{"lineNumber":32,"author":{"gitId":"ljhgab"},"content":"               \u003c/light\u003e"},{"lineNumber":33,"author":{"gitId":"ljhgab"},"content":"            \u003c/Lighting\u003e"},{"lineNumber":34,"author":{"gitId":"ljhgab"},"content":"         \u003c/effect\u003e\u003c/TextField\u003e"},{"lineNumber":35,"author":{"gitId":"ljhgab"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#000000e3\"\u003e"},{"lineNumber":36,"author":{"gitId":"ljhgab"},"content":"         \u003ceffect\u003e"},{"lineNumber":37,"author":{"gitId":"ljhgab"},"content":"            \u003cLighting\u003e"},{"lineNumber":38,"author":{"gitId":"ljhgab"},"content":"               \u003cbumpInput\u003e"},{"lineNumber":39,"author":{"gitId":"ljhgab"},"content":"                  \u003cColorAdjust /\u003e"},{"lineNumber":40,"author":{"gitId":"ljhgab"},"content":"               \u003c/bumpInput\u003e"},{"lineNumber":41,"author":{"gitId":"ljhgab"},"content":"               \u003clight\u003e"},{"lineNumber":42,"author":{"gitId":"ljhgab"},"content":"                  \u003cLight.Distant\u003e"},{"lineNumber":43,"author":{"gitId":"ljhgab"},"content":"                     \u003ccolor\u003e"},{"lineNumber":44,"author":{"gitId":"ljhgab"},"content":"                        \u003cColor red\u003d\"0.3552631437778473\" green\u003d\"0.35197368264198303\" blue\u003d\"0.35197368264198303\" /\u003e"},{"lineNumber":45,"author":{"gitId":"ljhgab"},"content":"                     \u003c/color\u003e"},{"lineNumber":46,"author":{"gitId":"ljhgab"},"content":"                  \u003c/Light.Distant\u003e"},{"lineNumber":47,"author":{"gitId":"ljhgab"},"content":"               \u003c/light\u003e"},{"lineNumber":48,"author":{"gitId":"ljhgab"},"content":"            \u003c/Lighting\u003e"},{"lineNumber":49,"author":{"gitId":"ljhgab"},"content":"         \u003c/effect\u003e\u003c/Button\u003e"},{"lineNumber":50,"author":{"gitId":"ljhgab"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":51,"author":{"gitId":"ljhgab"},"content":"            \u003ccontent\u003e"},{"lineNumber":52,"author":{"gitId":"ljhgab"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"556.0\" prefWidth\u003d\"399.0\" styleClass\u003d\"bodybg\" stylesheets\u003d\"@../images/background.css\" /\u003e"},{"lineNumber":53,"author":{"gitId":"ljhgab"},"content":"            \u003c/content\u003e"},{"lineNumber":54,"author":{"gitId":"ljhgab"},"content":"         \u003ceffect\u003e"},{"lineNumber":55,"author":{"gitId":"ljhgab"},"content":"            \u003cLighting\u003e"},{"lineNumber":56,"author":{"gitId":"ljhgab"},"content":"               \u003cbumpInput\u003e"},{"lineNumber":57,"author":{"gitId":"ljhgab"},"content":"                  \u003cShadow /\u003e"},{"lineNumber":58,"author":{"gitId":"ljhgab"},"content":"               \u003c/bumpInput\u003e"},{"lineNumber":59,"author":{"gitId":"ljhgab"},"content":"               \u003clight\u003e"},{"lineNumber":60,"author":{"gitId":"ljhgab"},"content":"                  \u003cLight.Distant /\u003e"},{"lineNumber":61,"author":{"gitId":"ljhgab"},"content":"               \u003c/light\u003e"},{"lineNumber":62,"author":{"gitId":"ljhgab"},"content":"            \u003c/Lighting\u003e"},{"lineNumber":63,"author":{"gitId":"ljhgab"},"content":"         \u003c/effect\u003e"},{"lineNumber":64,"author":{"gitId":"ljhgab"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":65,"author":{"gitId":"ljhgab"},"content":"    \u003c/children\u003e"},{"lineNumber":66,"author":{"gitId":"ljhgab"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"ljhgab":66}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"    public void testToString() {"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"        LocalDateTime deadlineDateTime \u003d LocalDateTime.of(2021, 01, 27, 23, 59);"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"        Deadline deadline \u003d new Deadline(\"Homework 5\", deadlineDateTime);"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"        assertEquals(\"[D][\\u2718][0] Homework 5 (by: Jan 27 2021 23:59)\", deadline.toString());"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"    public void testToFileString() {"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"        LocalDateTime deadlineDateTime \u003d LocalDateTime.of(2021, 01, 27, 23, 59);"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"        Deadline deadline \u003d new Deadline(\"Homework 5\", deadlineDateTime);"},{"lineNumber":20,"author":{"gitId":"ljhgab"},"content":"        assertEquals(\"D | 0 | 0 | Homework 5 | 2021-01-27 2359\", deadline.toFileString());"},{"lineNumber":21,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":22}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"public class TodoTest {"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"    public void testToString() {"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"        Todo todo \u003d new Todo(\"read book\");"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"        assertEquals(\"[T][\\u2718][0] read book\", todo.toString());"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":""},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"ljhgab"},"content":"    public void testToFileString() {"},{"lineNumber":16,"author":{"gitId":"ljhgab"},"content":"        Todo todo \u003d new Todo(\"read book\");"},{"lineNumber":17,"author":{"gitId":"ljhgab"},"content":"        assertEquals(\"T | 0 | 0 | read book\", todo.toFileString());"},{"lineNumber":18,"author":{"gitId":"ljhgab"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ljhgab"},"content":"}"}],"authorContributionMap":{"ljhgab":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ljhgab"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"ljhgab"},"content":"EVENT dinner with Luna /at Friday 5pm"},{"lineNumber":3,"author":{"gitId":"ljhgab"},"content":"deadline homework 2"},{"lineNumber":4,"author":{"gitId":"ljhgab"},"content":"deadline homework 2 /by Sunday"},{"lineNumber":5,"author":{"gitId":"ljhgab"},"content":"list"},{"lineNumber":6,"author":{"gitId":"ljhgab"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"ljhgab"},"content":"done 3"},{"lineNumber":9,"author":{"gitId":"ljhgab"},"content":"Done 4"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"list"},{"lineNumber":11,"author":{"gitId":"ljhgab"},"content":"delete 1"},{"lineNumber":12,"author":{"gitId":"ljhgab"},"content":"list"},{"lineNumber":13,"author":{"gitId":"ljhgab"},"content":"delete 3"},{"lineNumber":14,"author":{"gitId":"ljhgab"},"content":"bye"}],"authorContributionMap":{"ljhgab":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"ljhgab"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"ljhgab"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"ljhgab":2}}]
