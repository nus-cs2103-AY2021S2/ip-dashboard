[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"    implementation \u0027com.fasterxml.jackson.core:jackson-core:2.12.1\u0027"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":"    implementation \u0027com.fasterxml.jackson.core:jackson-annotations:2.12.1\u0027"},{"lineNumber":17,"author":{"gitId":"drwala"},"content":"    implementation \u0027com.fasterxml.jackson.core:jackson-databind:2.12.1\u0027"},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"    implementation \u0027com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.1\u0027"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":36,"author":{"gitId":"drwala"},"content":"    mainClassName \u003d \"Duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"drwala":5}},{"path":"src/main/java/DataStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import java.io.*;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"drwala"},"content":""},{"lineNumber":5,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.core.type.TypeReference;"},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.databind.exc.MismatchedInputException;"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;"},{"lineNumber":10,"author":{"gitId":"drwala"},"content":""},{"lineNumber":11,"author":{"gitId":"drwala"},"content":""},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"public class DataStorage {"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":"    private static final String DATA_FILE_PATH \u003d String.format(\".%sdata%stasks.json\", File.separator, File.separator);"},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"    private File dataFile;"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"    private ObjectMapper mapper;"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":""},{"lineNumber":17,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"     * Constructs a DataStorage object."},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":"    public DataStorage() {"},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"        dataFile \u003d new File(DATA_FILE_PATH);"},{"lineNumber":22,"author":{"gitId":"drwala"},"content":"        mapper \u003d new ObjectMapper();"},{"lineNumber":23,"author":{"gitId":"drwala"},"content":"        mapper.registerModule(new JavaTimeModule());"},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);"},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"drwala"},"content":""},{"lineNumber":27,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"drwala"},"content":"     * Initialises the backing store for future data storage."},{"lineNumber":29,"author":{"gitId":"drwala"},"content":"     * @throws DukeException If unable to write to the filesystem."},{"lineNumber":30,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"drwala"},"content":"    public void createBackingStoreIfNotExists() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"drwala"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"drwala"},"content":"            dataFile.getParentFile().mkdirs();"},{"lineNumber":34,"author":{"gitId":"drwala"},"content":"            if (dataFile.createNewFile()) {"},{"lineNumber":35,"author":{"gitId":"drwala"},"content":"                saveTasks(new ArrayList\u003c\u003e());"},{"lineNumber":36,"author":{"gitId":"drwala"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"drwala"},"content":"        } catch (IOException ioException) {"},{"lineNumber":38,"author":{"gitId":"drwala"},"content":"            throw new DukeException("},{"lineNumber":39,"author":{"gitId":"drwala"},"content":"                    String.format(\"An error occurred while setting up the backing store for Duke. \""},{"lineNumber":40,"author":{"gitId":"drwala"},"content":"                            + \"Perhaps this might help:\\n%s\", ioException.getMessage()));"},{"lineNumber":41,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"drwala"},"content":""},{"lineNumber":44,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"drwala"},"content":"     * Returns tasks on the backing store."},{"lineNumber":46,"author":{"gitId":"drwala"},"content":"     * @return Tasks read from the backing store."},{"lineNumber":47,"author":{"gitId":"drwala"},"content":"     * @throws DukeException If error occurs when reading from the backing store."},{"lineNumber":48,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"drwala"},"content":"    public List\u003cTask\u003e readTasks() throws DukeException {"},{"lineNumber":50,"author":{"gitId":"drwala"},"content":"        try (BufferedInputStream biStream \u003d new BufferedInputStream(new FileInputStream(dataFile))) {"},{"lineNumber":51,"author":{"gitId":"drwala"},"content":"            return mapper.readerFor(new TypeReference\u003cArrayList\u003cTask\u003e\u003e() {"},{"lineNumber":52,"author":{"gitId":"drwala"},"content":"            }).readValue(biStream);"},{"lineNumber":53,"author":{"gitId":"drwala"},"content":"        } catch (MismatchedInputException mie) {"},{"lineNumber":54,"author":{"gitId":"drwala"},"content":"            return new ArrayList\u003cTask\u003e();"},{"lineNumber":55,"author":{"gitId":"drwala"},"content":"        } catch (IOException ioException) {"},{"lineNumber":56,"author":{"gitId":"drwala"},"content":"            throw new DukeException(String.format(\"An error occurred while reading the backing store for Duke. \""},{"lineNumber":57,"author":{"gitId":"drwala"},"content":"                    + \"Perhaps this might help:\\n%s\", ioException.getMessage()));"},{"lineNumber":58,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"drwala"},"content":""},{"lineNumber":61,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"drwala"},"content":"     * Saves tasks to the backing store."},{"lineNumber":63,"author":{"gitId":"drwala"},"content":"     * @param tasks List of tasks to save."},{"lineNumber":64,"author":{"gitId":"drwala"},"content":"     * @throws DukeException If error occurs when writing to the backing store."},{"lineNumber":65,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"drwala"},"content":"    public void saveTasks(List\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":67,"author":{"gitId":"drwala"},"content":""},{"lineNumber":68,"author":{"gitId":"drwala"},"content":"        try (BufferedOutputStream boStream \u003d new BufferedOutputStream(new FileOutputStream(dataFile, false))) {"},{"lineNumber":69,"author":{"gitId":"drwala"},"content":"            mapper.writerFor(new TypeReference\u003cList\u003cTask\u003e\u003e() {"},{"lineNumber":70,"author":{"gitId":"drwala"},"content":"            }).writeValue(boStream, tasks);"},{"lineNumber":71,"author":{"gitId":"drwala"},"content":"        } catch (IOException ioException) {"},{"lineNumber":72,"author":{"gitId":"drwala"},"content":"            throw new DukeException(String.format(\"An error occurred while saving tasks to the backing store for Duke. \""},{"lineNumber":73,"author":{"gitId":"drwala"},"content":"                    + \"Perhaps this might help:\\n%s\", ioException.getMessage()));"},{"lineNumber":74,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":76}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":""},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":""},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"    @JsonProperty"},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"    private LocalDateTime deadline;"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":""},{"lineNumber":10,"author":{"gitId":"drwala"},"content":"    protected Deadline() {"},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"        super();"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":""},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"     * Constructs a Deadline object."},{"lineNumber":16,"author":{"gitId":"drwala"},"content":"     * @param taskName Name of deadline task."},{"lineNumber":17,"author":{"gitId":"drwala"},"content":"     * @param deadline Time at which deadline task needs to be completed by."},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"    public Deadline(String taskName, LocalDateTime deadline) {"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":"        super(taskName);"},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":22,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"drwala"},"content":""},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"drwala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":27,"author":{"gitId":"drwala"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", done ? \"X\" : \" \", taskName, this.deadline.format(formatter));"},{"lineNumber":28,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":29}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import java.util.HashMap;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"    private static TaskList tasks;"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":"    private static DataStorage storage;"},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"    private static boolean shouldRun \u003d true;"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":""},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":"     * Entry point for the Duke program"},{"lineNumber":10,"author":{"gitId":"drwala"},"content":"     * @param args Command line arguments which are not used. Do not waste your effort."},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":""},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"        startup();"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"        Ui.greet();"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":""},{"lineNumber":17,"author":{"gitId":"drwala"},"content":"        while (shouldRun) {"},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"            try {"},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"                String input \u003d Ui.readCommand();"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":"                HashMap\u003cString, String\u003e parsedCommands \u003d Parser.parseCommand(input);"},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"                switch (parsedCommands.get(\"command\")) {"},{"lineNumber":22,"author":{"gitId":"drwala"},"content":"                case \"todo\": {"},{"lineNumber":23,"author":{"gitId":"drwala"},"content":"                    tasks.addTodo(parsedCommands);"},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":26,"author":{"gitId":"drwala"},"content":"                case \"event\": {"},{"lineNumber":27,"author":{"gitId":"drwala"},"content":"                    tasks.addEvent(parsedCommands);"},{"lineNumber":28,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":29,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":30,"author":{"gitId":"drwala"},"content":"                case \"deadline\": {"},{"lineNumber":31,"author":{"gitId":"drwala"},"content":"                    tasks.addDeadline(parsedCommands);"},{"lineNumber":32,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":33,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":34,"author":{"gitId":"drwala"},"content":"                case \"list\": {"},{"lineNumber":35,"author":{"gitId":"drwala"},"content":"                    tasks.listTasks();"},{"lineNumber":36,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":37,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":38,"author":{"gitId":"drwala"},"content":"                case \"done\": {"},{"lineNumber":39,"author":{"gitId":"drwala"},"content":"                    tasks.markTaskAsDone(parsedCommands);"},{"lineNumber":40,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":41,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"drwala"},"content":"                case \"delete\": {"},{"lineNumber":43,"author":{"gitId":"drwala"},"content":"                    tasks.deleteTask(parsedCommands);"},{"lineNumber":44,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":45,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":46,"author":{"gitId":"drwala"},"content":"                case \"find\": {"},{"lineNumber":47,"author":{"gitId":"drwala"},"content":"                    tasks.findTasks(parsedCommands);"},{"lineNumber":48,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":49,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"drwala"},"content":"                case \"bye\": {"},{"lineNumber":51,"author":{"gitId":"drwala"},"content":"                    Ui.echo(\"Bye. Hope to see you again soon!\");"},{"lineNumber":52,"author":{"gitId":"drwala"},"content":"                    shouldRun \u003d false;"},{"lineNumber":53,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":54,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"drwala"},"content":"                default: {"},{"lineNumber":56,"author":{"gitId":"drwala"},"content":"                    Ui.echo(String.format(\"I\u0027m sorry, I don\u0027t know what %s means.\", input));"},{"lineNumber":57,"author":{"gitId":"drwala"},"content":"                    break;"},{"lineNumber":58,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"drwala"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"drwala"},"content":"            } catch (DukeException dukeException) {"},{"lineNumber":61,"author":{"gitId":"drwala"},"content":"                Ui.echo(String.format(\"Francis encountered an error while processing your request. \""},{"lineNumber":62,"author":{"gitId":"drwala"},"content":"                        + \"Here are the details:\\n%s\", dukeException.getMessage()));"},{"lineNumber":63,"author":{"gitId":"drwala"},"content":"            } catch (Exception e) {"},{"lineNumber":64,"author":{"gitId":"drwala"},"content":"                Ui.echo(String.format(\"Francis encountered an unexpected while processing your request. \""},{"lineNumber":65,"author":{"gitId":"drwala"},"content":"                        + \"Here are the details:\\n%s\", e.getMessage()));"},{"lineNumber":66,"author":{"gitId":"drwala"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"drwala"},"content":""},{"lineNumber":69,"author":{"gitId":"drwala"},"content":"        shutdown();"},{"lineNumber":70,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"drwala"},"content":""},{"lineNumber":72,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"drwala"},"content":"     * Initialises the Duke program\u0027s backing store and reads any tasks that might be in the file."},{"lineNumber":74,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"drwala"},"content":"    public static void startup() {"},{"lineNumber":76,"author":{"gitId":"drwala"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"drwala"},"content":"            storage \u003d new DataStorage();"},{"lineNumber":78,"author":{"gitId":"drwala"},"content":"            storage.createBackingStoreIfNotExists();"},{"lineNumber":79,"author":{"gitId":"drwala"},"content":"            tasks \u003d new TaskList(storage.readTasks());"},{"lineNumber":80,"author":{"gitId":"drwala"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":81,"author":{"gitId":"drwala"},"content":"            Ui.echo(dukeException.getMessage());"},{"lineNumber":82,"author":{"gitId":"drwala"},"content":"            System.exit(0);"},{"lineNumber":83,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"drwala"},"content":""},{"lineNumber":86,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"drwala"},"content":"     * Shuts down the Duke program gracefully after writing any tasks in memory to the backing store."},{"lineNumber":88,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"drwala"},"content":"    public static void shutdown() {"},{"lineNumber":90,"author":{"gitId":"drwala"},"content":"        tasks.persist(storage);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":4,"drwala":88}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"    public DukeException(String message) {"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":"        super(message);"},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":""},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":""},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"    @JsonProperty"},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"    private LocalDateTime timeOfEvent;"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":""},{"lineNumber":10,"author":{"gitId":"drwala"},"content":"    protected Event() {"},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"        super();"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":""},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"     * Constructs an Event object."},{"lineNumber":16,"author":{"gitId":"drwala"},"content":"     * @param taskName Name of deadline task."},{"lineNumber":17,"author":{"gitId":"drwala"},"content":"     * @param timeOfEvent Time at which event will take place."},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"    public Event(String taskName, LocalDateTime timeOfEvent) {"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":"        super(taskName);"},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"        this.timeOfEvent \u003d timeOfEvent;"},{"lineNumber":22,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"drwala"},"content":""},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"drwala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":27,"author":{"gitId":"drwala"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", done ? \"X\" : \" \", taskName, this.timeOfEvent.format(formatter));"},{"lineNumber":28,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":29}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import java.util.Arrays;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"import java.util.HashMap;"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":""},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"public class Parser {"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":"    public static HashMap\u003cString, String\u003e parseCommand(String input) {"},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e commandList \u003d new HashMap\u003c\u003e();"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"        String[] tokens \u003d input.split(\" /\");"},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"        String[] firstHalf \u003d tokens[0].split(\" \");"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":""},{"lineNumber":10,"author":{"gitId":"drwala"},"content":""},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"        String command \u003d firstHalf[0];"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"        commandList.put(\"command\", command);"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":"        if (firstHalf.length \u003e 1) {"},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"            commandList.put(\"info\", String.join(\" \","},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"                    Arrays.copyOfRange(firstHalf, 1, firstHalf.length)).trim());"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"drwala"},"content":""},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"        if (tokens.length \u003e 1) {"},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"            String[] secondHalf \u003d tokens[1].split(\" \");"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":"            if (secondHalf.length \u003e 0) {"},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"                String firstWord \u003d secondHalf[0];"},{"lineNumber":22,"author":{"gitId":"drwala"},"content":"                commandList.put(firstWord, String.join(\" \","},{"lineNumber":23,"author":{"gitId":"drwala"},"content":"                        Arrays.copyOfRange(secondHalf, 1, secondHalf.length)).trim());"},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"drwala"},"content":"        return commandList;"},{"lineNumber":27,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"drwala"},"content":""},{"lineNumber":29,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":29}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.annotation.JsonSubTypes;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"import com.fasterxml.jackson.annotation.JsonTypeInfo;"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":""},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"@JsonTypeInfo("},{"lineNumber":5,"author":{"gitId":"drwala"},"content":"        use \u003d JsonTypeInfo.Id.NAME,"},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"        include \u003d JsonTypeInfo.As.PROPERTY,"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"        property \u003d \"d\")"},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"@JsonSubTypes({"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":"        @JsonSubTypes.Type(value \u003d Todo.class, name \u003d \"Todo\"),"},{"lineNumber":10,"author":{"gitId":"drwala"},"content":"        @JsonSubTypes.Type(value \u003d Deadline.class, name \u003d \"Deadline\"),"},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"        @JsonSubTypes.Type(value \u003d Event.class, name \u003d \"Event\")"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"})"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":""},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"public class Task {"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"    protected String taskName;"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":"    protected boolean done;"},{"lineNumber":17,"author":{"gitId":"drwala"},"content":""},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"    protected Task() {"},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":""},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"drwala"},"content":"     * Constructs a Task object."},{"lineNumber":23,"author":{"gitId":"drwala"},"content":"     * @param taskName Name of the task."},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"    public Task(String taskName) {"},{"lineNumber":26,"author":{"gitId":"drwala"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":27,"author":{"gitId":"drwala"},"content":"        this.done \u003d false;"},{"lineNumber":28,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"drwala"},"content":""},{"lineNumber":30,"author":{"gitId":"drwala"},"content":""},{"lineNumber":31,"author":{"gitId":"drwala"},"content":"    public String getTaskName() {"},{"lineNumber":32,"author":{"gitId":"drwala"},"content":"        return taskName;"},{"lineNumber":33,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"drwala"},"content":""},{"lineNumber":35,"author":{"gitId":"drwala"},"content":"    public void setTaskName(String taskName) {"},{"lineNumber":36,"author":{"gitId":"drwala"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":37,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"drwala"},"content":""},{"lineNumber":39,"author":{"gitId":"drwala"},"content":"    public boolean isDone() {"},{"lineNumber":40,"author":{"gitId":"drwala"},"content":"        return done;"},{"lineNumber":41,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"drwala"},"content":""},{"lineNumber":43,"author":{"gitId":"drwala"},"content":"    public void setDone() {"},{"lineNumber":44,"author":{"gitId":"drwala"},"content":"        this.done \u003d true;"},{"lineNumber":45,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"drwala"},"content":"}"},{"lineNumber":47,"author":{"gitId":"drwala"},"content":""}],"authorContributionMap":{"drwala":47}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":""},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":10,"author":{"gitId":"drwala"},"content":""},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"     * Constructs a TaskList wrapper object."},{"lineNumber":13,"author":{"gitId":"drwala"},"content":"     * @param tasks Array of tasks to wrap around."},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":17,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"drwala"},"content":""},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":"     * Lists tasks to the standard output."},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"drwala"},"content":"    public void listTasks() {"},{"lineNumber":23,"author":{"gitId":"drwala"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"            builder.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i).toString()));"},{"lineNumber":26,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"drwala"},"content":"        Ui.echo(builder.toString().trim());"},{"lineNumber":28,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"drwala"},"content":""},{"lineNumber":30,"author":{"gitId":"drwala"},"content":"    public void listTasks(List\u003cTask\u003e customTaskList) {"},{"lineNumber":31,"author":{"gitId":"drwala"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"drwala"},"content":"        for (int i \u003d 0; i \u003c customTaskList.size(); i++) {"},{"lineNumber":33,"author":{"gitId":"drwala"},"content":"            builder.append(String.format(\"%d. %s\\n\", i + 1, customTaskList.get(i).toString()));"},{"lineNumber":34,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"drwala"},"content":"        Ui.echo(builder.toString().trim());"},{"lineNumber":36,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"drwala"},"content":""},{"lineNumber":38,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"drwala"},"content":"     * Adds a Todo."},{"lineNumber":40,"author":{"gitId":"drwala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":41,"author":{"gitId":"drwala"},"content":"     * @throws DukeException If todo is not formatted properly."},{"lineNumber":42,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"drwala"},"content":"    public void addTodo(HashMap\u003cString, String\u003e commands) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"drwala"},"content":"        String taskName \u003d commands.get(\"info\");"},{"lineNumber":45,"author":{"gitId":"drwala"},"content":"        if (taskName \u003d\u003d \"\") {"},{"lineNumber":46,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Todo tasks should be formatted as such: todo [task name].\");"},{"lineNumber":47,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"drwala"},"content":""},{"lineNumber":49,"author":{"gitId":"drwala"},"content":"        Task todoTask \u003d new Todo(taskName);"},{"lineNumber":50,"author":{"gitId":"drwala"},"content":"        tasks.add(todoTask);"},{"lineNumber":51,"author":{"gitId":"drwala"},"content":""},{"lineNumber":52,"author":{"gitId":"drwala"},"content":"        Ui.echo(String.format(\"Added a deadline for you:\\n%s\\n%s\", todoTask.toString(), getNumberOfTasksString(tasks)));"},{"lineNumber":53,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"drwala"},"content":""},{"lineNumber":55,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"drwala"},"content":"     * Adds an Event."},{"lineNumber":57,"author":{"gitId":"drwala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":58,"author":{"gitId":"drwala"},"content":"     * @throws DukeException If Event is not formatted properly."},{"lineNumber":59,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"drwala"},"content":"    public void addEvent(HashMap\u003cString, String\u003e commands) throws DukeException {"},{"lineNumber":61,"author":{"gitId":"drwala"},"content":"        String eventName \u003d commands.get(\"info\");"},{"lineNumber":62,"author":{"gitId":"drwala"},"content":"        String timeStr \u003d commands.get(\"at\");"},{"lineNumber":63,"author":{"gitId":"drwala"},"content":""},{"lineNumber":64,"author":{"gitId":"drwala"},"content":"        if (eventName \u003d\u003d \"\" || timeStr \u003d\u003d \"\") {"},{"lineNumber":65,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Event tasks should be formatted as such: event [event name] /by [event time].\");"},{"lineNumber":66,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"drwala"},"content":""},{"lineNumber":68,"author":{"gitId":"drwala"},"content":"        LocalDateTime timeOfEvent \u003d parseDateStr(timeStr);"},{"lineNumber":69,"author":{"gitId":"drwala"},"content":"        Event eventTask \u003d new Event(eventName, timeOfEvent);"},{"lineNumber":70,"author":{"gitId":"drwala"},"content":"        tasks.add(eventTask);"},{"lineNumber":71,"author":{"gitId":"drwala"},"content":""},{"lineNumber":72,"author":{"gitId":"drwala"},"content":"        Ui.echo(String.format(\"Added a deadline for you:\\n%s\\n%s\","},{"lineNumber":73,"author":{"gitId":"drwala"},"content":"                eventTask.toString(), getNumberOfTasksString(tasks)));"},{"lineNumber":74,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"drwala"},"content":"     * Adds an Deadline."},{"lineNumber":77,"author":{"gitId":"drwala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":78,"author":{"gitId":"drwala"},"content":"     * @throws DukeException If Deadline is not formatted properly."},{"lineNumber":79,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"drwala"},"content":"    public void addDeadline(HashMap\u003cString, String\u003e commands) throws DukeException {"},{"lineNumber":81,"author":{"gitId":"drwala"},"content":"        String deadlineName \u003d commands.get(\"info\");"},{"lineNumber":82,"author":{"gitId":"drwala"},"content":"        String deadlineTimeStr \u003d commands.get(\"by\");"},{"lineNumber":83,"author":{"gitId":"drwala"},"content":""},{"lineNumber":84,"author":{"gitId":"drwala"},"content":"        if (deadlineName \u003d\u003d \"\" || deadlineTimeStr \u003d\u003d \"\") {"},{"lineNumber":85,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Deadline tasks should be formatted as such: deadline [task name] /by [deadline].\");"},{"lineNumber":86,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"drwala"},"content":""},{"lineNumber":88,"author":{"gitId":"drwala"},"content":"        LocalDateTime deadlineOfTask \u003d parseDateStr(deadlineTimeStr);"},{"lineNumber":89,"author":{"gitId":"drwala"},"content":"        Deadline deadlineTask \u003d new Deadline(deadlineName, deadlineOfTask);"},{"lineNumber":90,"author":{"gitId":"drwala"},"content":""},{"lineNumber":91,"author":{"gitId":"drwala"},"content":"        tasks.add(deadlineTask);"},{"lineNumber":92,"author":{"gitId":"drwala"},"content":""},{"lineNumber":93,"author":{"gitId":"drwala"},"content":"        Ui.echo(String.format(\"Added a deadline for you:\\n%s\\n%s\","},{"lineNumber":94,"author":{"gitId":"drwala"},"content":"                deadlineTask.toString(), getNumberOfTasksString(tasks)));"},{"lineNumber":95,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"drwala"},"content":""},{"lineNumber":97,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"drwala"},"content":"     * Deletes a task"},{"lineNumber":99,"author":{"gitId":"drwala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":100,"author":{"gitId":"drwala"},"content":"     * @throws DukeException If Delete command is not formatted properly."},{"lineNumber":101,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"drwala"},"content":"    public void deleteTask(HashMap\u003cString, String\u003e commands) throws DukeException {"},{"lineNumber":103,"author":{"gitId":"drwala"},"content":"        String taskToDeleteStr \u003d commands.get(\"info\");"},{"lineNumber":104,"author":{"gitId":"drwala"},"content":""},{"lineNumber":105,"author":{"gitId":"drwala"},"content":"        if (taskToDeleteStr \u003d\u003d \"\") {"},{"lineNumber":106,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Deleting a task as done needs to be done like this: \""},{"lineNumber":107,"author":{"gitId":"drwala"},"content":"                    + \"done [task number from list]. Task numbers need to be written as digits and not text.\");"},{"lineNumber":108,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"drwala"},"content":"        try {"},{"lineNumber":110,"author":{"gitId":"drwala"},"content":"            int taskIdx \u003d Integer.parseInt(taskToDeleteStr) - 1;"},{"lineNumber":111,"author":{"gitId":"drwala"},"content":"            Task taskToDelete \u003d tasks.get(taskIdx);"},{"lineNumber":112,"author":{"gitId":"drwala"},"content":"            tasks.remove(taskToDelete);"},{"lineNumber":113,"author":{"gitId":"drwala"},"content":"            Ui.echo(String.format(\"I\u0027ve removed this task from your list\\n%s\", taskToDelete.toString()));"},{"lineNumber":114,"author":{"gitId":"drwala"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":115,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Please delete a task that exists in the list. \""},{"lineNumber":116,"author":{"gitId":"drwala"},"content":"                    + \"Task numbers that are 0 or lesser, \""},{"lineNumber":117,"author":{"gitId":"drwala"},"content":"                    + \"or greater than the number of items in the list cannot be deleted.\");"},{"lineNumber":118,"author":{"gitId":"drwala"},"content":"        } catch (NumberFormatException numberFormatException) {"},{"lineNumber":119,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Deleting a task as done needs to be done like this: done [task number from list]. \""},{"lineNumber":120,"author":{"gitId":"drwala"},"content":"                    + \"Task numbers need to be written as digits and not text.\");"},{"lineNumber":121,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"drwala"},"content":""},{"lineNumber":124,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"drwala"},"content":"     * Marks a task as done."},{"lineNumber":126,"author":{"gitId":"drwala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":127,"author":{"gitId":"drwala"},"content":"     * @throws DukeException If \"mark as done\" command is not formatted properly."},{"lineNumber":128,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"drwala"},"content":"    public void markTaskAsDone(HashMap\u003cString, String\u003e commands) throws DukeException {"},{"lineNumber":130,"author":{"gitId":"drwala"},"content":"        String taskToMarkAsDoneStr \u003d commands.get(\"info\");"},{"lineNumber":131,"author":{"gitId":"drwala"},"content":""},{"lineNumber":132,"author":{"gitId":"drwala"},"content":"        if (taskToMarkAsDoneStr \u003d\u003d \"\") {"},{"lineNumber":133,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Marking a task as done needs to be done like this: done [task number from list].\");"},{"lineNumber":134,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"drwala"},"content":""},{"lineNumber":136,"author":{"gitId":"drwala"},"content":"        try {"},{"lineNumber":137,"author":{"gitId":"drwala"},"content":"            int taskIdx \u003d Integer.parseInt(taskToMarkAsDoneStr) - 1;"},{"lineNumber":138,"author":{"gitId":"drwala"},"content":"            tasks.get(taskIdx).setDone();"},{"lineNumber":139,"author":{"gitId":"drwala"},"content":"            Ui.echo(String.format(\"Nice! This task is done :)\\n%s\", tasks.get(taskIdx).toString()));"},{"lineNumber":140,"author":{"gitId":"drwala"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":141,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Please mark a task that exists in the list as done. \""},{"lineNumber":142,"author":{"gitId":"drwala"},"content":"                    + \"Task numbers that are 0 or lesser, \""},{"lineNumber":143,"author":{"gitId":"drwala"},"content":"                    + \"or greater than the number of items in the list cannot be marked as done.\");"},{"lineNumber":144,"author":{"gitId":"drwala"},"content":"        } catch (NumberFormatException numberFormatException) {"},{"lineNumber":145,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Marking a task as done needs to be done like this: done [task number from list]. \""},{"lineNumber":146,"author":{"gitId":"drwala"},"content":"                    + \"Task numbers need to be written as digits and not text.\");"},{"lineNumber":147,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"drwala"},"content":""},{"lineNumber":150,"author":{"gitId":"drwala"},"content":"    public void findTasks(HashMap\u003cString, String\u003e commands) throws DukeException {"},{"lineNumber":151,"author":{"gitId":"drwala"},"content":"        String searchTerm \u003d commands.get(\"info\");"},{"lineNumber":152,"author":{"gitId":"drwala"},"content":""},{"lineNumber":153,"author":{"gitId":"drwala"},"content":"        if (searchTerm \u003d\u003d \"\") {"},{"lineNumber":154,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"To find a task, please use enter the following: find [search term]\");"},{"lineNumber":155,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"drwala"},"content":"        List\u003cTask\u003e foundList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":157,"author":{"gitId":"drwala"},"content":"        for (Task task : tasks) {"},{"lineNumber":158,"author":{"gitId":"drwala"},"content":"            if (task.getTaskName().contains(searchTerm)) {"},{"lineNumber":159,"author":{"gitId":"drwala"},"content":"                foundList.add(task);"},{"lineNumber":160,"author":{"gitId":"drwala"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"drwala"},"content":"        Ui.echo(\"Here are the tasks we found:\");"},{"lineNumber":163,"author":{"gitId":"drwala"},"content":"        listTasks(foundList);"},{"lineNumber":164,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"drwala"},"content":""},{"lineNumber":166,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"drwala"},"content":"     * Returns a formatted string indicating how many tasks are in the list."},{"lineNumber":168,"author":{"gitId":"drwala"},"content":"     * @param tasks List of tasks to count."},{"lineNumber":169,"author":{"gitId":"drwala"},"content":"     * @return A string formatted to indicated how many tasks are in the list."},{"lineNumber":170,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"drwala"},"content":"    public String getNumberOfTasksString(List\u003cTask\u003e tasks) {"},{"lineNumber":172,"author":{"gitId":"drwala"},"content":"        return String.format(\"Now you have %d items in your list\", tasks.size());"},{"lineNumber":173,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"drwala"},"content":""},{"lineNumber":175,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"drwala"},"content":"     * Writes tasks to the given datastorage object."},{"lineNumber":177,"author":{"gitId":"drwala"},"content":"     * @param storage DataStorage object to persist the tasks to."},{"lineNumber":178,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"drwala"},"content":"    public void persist(DataStorage storage) {"},{"lineNumber":180,"author":{"gitId":"drwala"},"content":"        try {"},{"lineNumber":181,"author":{"gitId":"drwala"},"content":"            storage.saveTasks(tasks);"},{"lineNumber":182,"author":{"gitId":"drwala"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":183,"author":{"gitId":"drwala"},"content":"            Ui.echo(dukeException.getMessage());"},{"lineNumber":184,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"drwala"},"content":""},{"lineNumber":187,"author":{"gitId":"drwala"},"content":"    private static LocalDateTime parseDateStr(String dateStr) throws DukeException {"},{"lineNumber":188,"author":{"gitId":"drwala"},"content":"        try {"},{"lineNumber":189,"author":{"gitId":"drwala"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"},{"lineNumber":190,"author":{"gitId":"drwala"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(dateStr, formatter);"},{"lineNumber":191,"author":{"gitId":"drwala"},"content":"            if (dateTime.isBefore(LocalDateTime.now())) {"},{"lineNumber":192,"author":{"gitId":"drwala"},"content":"                throw new DukeException(\"Please enter a date/time in the future.\");"},{"lineNumber":193,"author":{"gitId":"drwala"},"content":"            }"},{"lineNumber":194,"author":{"gitId":"drwala"},"content":"            return dateTime;"},{"lineNumber":195,"author":{"gitId":"drwala"},"content":"        } catch (DateTimeParseException dateTimeParseException) {"},{"lineNumber":196,"author":{"gitId":"drwala"},"content":"            throw new DukeException(\"Please format your date as such: \""},{"lineNumber":197,"author":{"gitId":"drwala"},"content":"                    + \"15/01/2021 1845 (day/month/year time in 24H format)\");"},{"lineNumber":198,"author":{"gitId":"drwala"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":200}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"    private Todo() {"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":"        super();"},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":""},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"     * Constructs a Todo object."},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"     * @param taskName Name of the todo."},{"lineNumber":9,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"drwala"},"content":"    public Todo(String taskName) {"},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"        super(taskName);"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":""},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":"        return String.format(\"[%s][%s] %s\", \"T\", done ? \"X\" : \" \", taskName);"},{"lineNumber":17,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":18}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":""},{"lineNumber":3,"author":{"gitId":"drwala"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"    private static Scanner in \u003d new Scanner(System.in);"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":""},{"lineNumber":6,"author":{"gitId":"drwala"},"content":""},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"     * Prints a string to the standard output."},{"lineNumber":9,"author":{"gitId":"drwala"},"content":"     * @param str String to print."},{"lineNumber":10,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"    public static void echo(String str) {"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"        System.out.println(\"------------------------------\");"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":"        System.out.println(str);"},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"        System.out.println(\"------------------------------\");"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":""},{"lineNumber":17,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"     * Greets the user."},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":"    public static void greet() {"},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"        String logo \u003d \"______                    _       _           _\\n\""},{"lineNumber":22,"author":{"gitId":"drwala"},"content":"                + \"|  ___|                  (_)     | |         | |\\n\""},{"lineNumber":23,"author":{"gitId":"drwala"},"content":"                + \"| |_ _ __ __ _ _ __   ___ _ ___  | |     ___ | |__\\n\""},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"                + \"|  _| \u0027__/ _` | \u0027_ \\\\ / __| / __| | |    / _ \\\\| \u0027_ \\\\\\n\""},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"                + \"| | | | | (_| | | | | (__| \\\\__ \\\\ | |___| (_) | | | |\\n\""},{"lineNumber":26,"author":{"gitId":"drwala"},"content":"                + \"\\\\_| |_|  \\\\__,_|_| |_|\\\\___|_|___/ \\\\_____/\\\\___/|_| |_|\\n\""},{"lineNumber":27,"author":{"gitId":"drwala"},"content":"                + \"\\n\""},{"lineNumber":28,"author":{"gitId":"drwala"},"content":"                + \"\\n\";"},{"lineNumber":29,"author":{"gitId":"drwala"},"content":"        System.out.println(\"Hello from\\n\" + logo + \"(a.k.a Loh Jing Yen)\");"},{"lineNumber":30,"author":{"gitId":"drwala"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":31,"author":{"gitId":"drwala"},"content":"        System.out.println(\"Enter a command below for me to assist you\");"},{"lineNumber":32,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"drwala"},"content":""},{"lineNumber":34,"author":{"gitId":"drwala"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"drwala"},"content":"     * Reads commands from the standard input"},{"lineNumber":36,"author":{"gitId":"drwala"},"content":"     * @return Command string entered by the user"},{"lineNumber":37,"author":{"gitId":"drwala"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"drwala"},"content":"    public static String readCommand() {"},{"lineNumber":39,"author":{"gitId":"drwala"},"content":"        return in.nextLine().toLowerCase();"},{"lineNumber":40,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":41}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":""},{"lineNumber":3,"author":{"gitId":"drwala"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"drwala"},"content":""},{"lineNumber":5,"author":{"gitId":"drwala"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"drwala"},"content":""},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":"    public void parserCanParseAddEventWithManyWords() {"},{"lineNumber":10,"author":{"gitId":"drwala"},"content":"        String input \u003d \"event go for dance /at 01/02/2111 1200\";"},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":""},{"lineNumber":13,"author":{"gitId":"drwala"},"content":"        assertEquals(\"event\", parsed.get(\"command\"));"},{"lineNumber":14,"author":{"gitId":"drwala"},"content":"        assertEquals(\"go for dance\", parsed.get(\"info\"));"},{"lineNumber":15,"author":{"gitId":"drwala"},"content":"        assertEquals(\"01/02/2111 1200\", parsed.get(\"at\"));"},{"lineNumber":16,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"drwala"},"content":""},{"lineNumber":18,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"drwala"},"content":"    public void parserCanParseAddEventWithOneWord() {"},{"lineNumber":20,"author":{"gitId":"drwala"},"content":"        String input \u003d \"event dance /at 01/02/2111 1200\";"},{"lineNumber":21,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":22,"author":{"gitId":"drwala"},"content":""},{"lineNumber":23,"author":{"gitId":"drwala"},"content":"        assertEquals(\"event\", parsed.get(\"command\"));"},{"lineNumber":24,"author":{"gitId":"drwala"},"content":"        assertEquals(\"dance\", parsed.get(\"info\"));"},{"lineNumber":25,"author":{"gitId":"drwala"},"content":"        assertEquals(\"01/02/2111 1200\", parsed.get(\"at\"));"},{"lineNumber":26,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"drwala"},"content":""},{"lineNumber":28,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"drwala"},"content":"    public void parserCanParseAddDeadlineWithManyWords() {"},{"lineNumber":30,"author":{"gitId":"drwala"},"content":"        String input \u003d \"deadline submit 2103 /by 01/02/2111 1200\";"},{"lineNumber":31,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":32,"author":{"gitId":"drwala"},"content":""},{"lineNumber":33,"author":{"gitId":"drwala"},"content":"        assertEquals(\"deadline\", parsed.get(\"command\"));"},{"lineNumber":34,"author":{"gitId":"drwala"},"content":"        assertEquals(\"submit 2103\", parsed.get(\"info\"));"},{"lineNumber":35,"author":{"gitId":"drwala"},"content":"        assertEquals(\"01/02/2111 1200\", parsed.get(\"by\"));"},{"lineNumber":36,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"drwala"},"content":""},{"lineNumber":38,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"drwala"},"content":"    public void parserCanParseAddDeadlineWithOneWord() {"},{"lineNumber":40,"author":{"gitId":"drwala"},"content":"        String input \u003d \"deadline sleep /by 01/02/2111 1200\";"},{"lineNumber":41,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":42,"author":{"gitId":"drwala"},"content":""},{"lineNumber":43,"author":{"gitId":"drwala"},"content":"        assertEquals(\"deadline\", parsed.get(\"command\"));"},{"lineNumber":44,"author":{"gitId":"drwala"},"content":"        assertEquals(\"sleep\", parsed.get(\"info\"));"},{"lineNumber":45,"author":{"gitId":"drwala"},"content":"        assertEquals(\"01/02/2111 1200\", parsed.get(\"by\"));"},{"lineNumber":46,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"drwala"},"content":""},{"lineNumber":48,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"drwala"},"content":"    public void parserCanParseAddTodoWithManyWords() {"},{"lineNumber":50,"author":{"gitId":"drwala"},"content":"        String input \u003d \"todo submit 2103\";"},{"lineNumber":51,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":52,"author":{"gitId":"drwala"},"content":""},{"lineNumber":53,"author":{"gitId":"drwala"},"content":"        assertEquals(\"todo\", parsed.get(\"command\"));"},{"lineNumber":54,"author":{"gitId":"drwala"},"content":"        assertEquals(\"submit 2103\", parsed.get(\"info\"));"},{"lineNumber":55,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"drwala"},"content":""},{"lineNumber":57,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"drwala"},"content":"    public void parserCanParseAddTodoWithOneWord() {"},{"lineNumber":59,"author":{"gitId":"drwala"},"content":"        String input \u003d \"todo sleep\";"},{"lineNumber":60,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":61,"author":{"gitId":"drwala"},"content":""},{"lineNumber":62,"author":{"gitId":"drwala"},"content":"        assertEquals(\"todo\", parsed.get(\"command\"));"},{"lineNumber":63,"author":{"gitId":"drwala"},"content":"        assertEquals(\"sleep\", parsed.get(\"info\"));"},{"lineNumber":64,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"drwala"},"content":""},{"lineNumber":66,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"drwala"},"content":"    public void parserCanParseList() {"},{"lineNumber":68,"author":{"gitId":"drwala"},"content":"        String input \u003d \"list\";"},{"lineNumber":69,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":70,"author":{"gitId":"drwala"},"content":""},{"lineNumber":71,"author":{"gitId":"drwala"},"content":"        assertEquals(\"list\", parsed.get(\"command\"));"},{"lineNumber":72,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"drwala"},"content":""},{"lineNumber":74,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"drwala"},"content":"    public void parserCanParseDone() {"},{"lineNumber":76,"author":{"gitId":"drwala"},"content":"        String input \u003d \"done 1\";"},{"lineNumber":77,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":78,"author":{"gitId":"drwala"},"content":""},{"lineNumber":79,"author":{"gitId":"drwala"},"content":"        assertEquals(\"done\", parsed.get(\"command\"));"},{"lineNumber":80,"author":{"gitId":"drwala"},"content":"        assertEquals(\"1\", parsed.get(\"info\"));"},{"lineNumber":81,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"drwala"},"content":""},{"lineNumber":83,"author":{"gitId":"drwala"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"drwala"},"content":"    public void parserCanParseDelete() {"},{"lineNumber":85,"author":{"gitId":"drwala"},"content":"        String input \u003d \"delete 1\";"},{"lineNumber":86,"author":{"gitId":"drwala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":87,"author":{"gitId":"drwala"},"content":""},{"lineNumber":88,"author":{"gitId":"drwala"},"content":"        assertEquals(\"delete\", parsed.get(\"command\"));"},{"lineNumber":89,"author":{"gitId":"drwala"},"content":"        assertEquals(\"1\", parsed.get(\"info\"));"},{"lineNumber":90,"author":{"gitId":"drwala"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"drwala"},"content":""},{"lineNumber":92,"author":{"gitId":"drwala"},"content":""},{"lineNumber":93,"author":{"gitId":"drwala"},"content":"}"}],"authorContributionMap":{"drwala":93}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"drwala"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"drwala"},"content":"deadline return book /by friday"},{"lineNumber":3,"author":{"gitId":"drwala"},"content":"event project meeting /at 7pm"},{"lineNumber":4,"author":{"gitId":"drwala"},"content":"list"},{"lineNumber":5,"author":{"gitId":"drwala"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"drwala"},"content":"list"},{"lineNumber":7,"author":{"gitId":"drwala"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"drwala"},"content":"list"},{"lineNumber":9,"author":{"gitId":"drwala"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"drwala"},"content":"list"},{"lineNumber":11,"author":{"gitId":"drwala"},"content":"done 1"},{"lineNumber":12,"author":{"gitId":"drwala"},"content":"list"},{"lineNumber":13,"author":{"gitId":"drwala"},"content":"bye"}],"authorContributionMap":{"drwala":13}}]
