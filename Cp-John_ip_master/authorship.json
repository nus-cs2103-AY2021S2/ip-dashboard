[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":" * tasks with a deadline (need to be done before a date/time)"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"public class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    private String deadline;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    public Deadline(String title, String deadline) {"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"        super(title);"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"     * @return a string describing the deadline task"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline + \")\";"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":18}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"        greeting();"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"        while(true) {"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"            String command \u003d sc.nextLine();"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"            printLine();"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"            boolean canContinue \u003d true;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"            try {"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"                canContinue \u003d processCommand(command);"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"            } catch (DukeException e) {"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"                printMsg(e.getMessage());"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"            printLine();"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"            if (!canContinue) {"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"                break;"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"        sc.close();"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"     * print message with proper indentations"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"     * @param msg the message without indentation"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"    public static void printMsg(String msg) {"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"        System.out.println(\"     \" + msg);"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Cp-John"},"content":"     * @param command the input of user"},{"lineNumber":37,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException exception specific to Duke"},{"lineNumber":38,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Cp-John"},"content":"    public static void deleteTask(String command) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"Cp-John"},"content":"            int idx \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"},{"lineNumber":42,"author":{"gitId":"Cp-John"},"content":"            Task task \u003d tasks.get(idx);"},{"lineNumber":43,"author":{"gitId":"Cp-John"},"content":"            task.done();"},{"lineNumber":44,"author":{"gitId":"Cp-John"},"content":"            printMsg(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":45,"author":{"gitId":"Cp-John"},"content":"            printMsg(\"  \" + task);"},{"lineNumber":46,"author":{"gitId":"Cp-John"},"content":"        } catch (Exception e) {"},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":"            throw new DukeException();"},{"lineNumber":48,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":51,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Cp-John"},"content":"     * @param command the input of user"},{"lineNumber":53,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException exception specific to Duke"},{"lineNumber":54,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Cp-John"},"content":"    public static void addTask(String command) throws DukeException {"},{"lineNumber":56,"author":{"gitId":"Cp-John"},"content":"        String type \u003d command.split(\" \")[0];"},{"lineNumber":57,"author":{"gitId":"Cp-John"},"content":"        if (command.split(\" \").length \u003c 2 \u0026\u0026 type.equals(\"todo\")) {"},{"lineNumber":58,"author":{"gitId":"Cp-John"},"content":"            throw new EmptyTodoDescriptionException();"},{"lineNumber":59,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Cp-John"},"content":"        String substr \u003d command.replaceFirst(type + \" \", \"\");"},{"lineNumber":61,"author":{"gitId":"Cp-John"},"content":"        Task newTask;"},{"lineNumber":62,"author":{"gitId":"Cp-John"},"content":"        String title;"},{"lineNumber":63,"author":{"gitId":"Cp-John"},"content":"        switch (type) {"},{"lineNumber":64,"author":{"gitId":"Cp-John"},"content":"            case \"todo\":"},{"lineNumber":65,"author":{"gitId":"Cp-John"},"content":"                title \u003d substr;"},{"lineNumber":66,"author":{"gitId":"Cp-John"},"content":"                newTask \u003d new ToDo(title);"},{"lineNumber":67,"author":{"gitId":"Cp-John"},"content":"                tasks.add(newTask);"},{"lineNumber":68,"author":{"gitId":"Cp-John"},"content":"                break;"},{"lineNumber":69,"author":{"gitId":"Cp-John"},"content":"            case \"deadline\":"},{"lineNumber":70,"author":{"gitId":"Cp-John"},"content":"                int idxOfBy \u003d substr.indexOf(\"/by\");"},{"lineNumber":71,"author":{"gitId":"Cp-John"},"content":"                if (idxOfBy \u003d\u003d -1) {"},{"lineNumber":72,"author":{"gitId":"Cp-John"},"content":"                    throw new DukeException();"},{"lineNumber":73,"author":{"gitId":"Cp-John"},"content":"                } else {"},{"lineNumber":74,"author":{"gitId":"Cp-John"},"content":"                    title \u003d substr.substring(0, idxOfBy - 1);"},{"lineNumber":75,"author":{"gitId":"Cp-John"},"content":"                    String deadline \u003d substr.substring(idxOfBy + 4);"},{"lineNumber":76,"author":{"gitId":"Cp-John"},"content":"                    newTask \u003d new Deadline(title, deadline);"},{"lineNumber":77,"author":{"gitId":"Cp-John"},"content":"                    tasks.add(newTask);"},{"lineNumber":78,"author":{"gitId":"Cp-John"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"Cp-John"},"content":"                break;"},{"lineNumber":80,"author":{"gitId":"Cp-John"},"content":"            case \"event\":"},{"lineNumber":81,"author":{"gitId":"Cp-John"},"content":"                int idxOfAt \u003d substr.indexOf(\"/at\");"},{"lineNumber":82,"author":{"gitId":"Cp-John"},"content":"                if (idxOfAt \u003d\u003d -1) {"},{"lineNumber":83,"author":{"gitId":"Cp-John"},"content":"                    throw new DukeException();"},{"lineNumber":84,"author":{"gitId":"Cp-John"},"content":"                } else {"},{"lineNumber":85,"author":{"gitId":"Cp-John"},"content":"                    title \u003d substr.substring(0, idxOfAt - 1);"},{"lineNumber":86,"author":{"gitId":"Cp-John"},"content":"                    String time \u003d substr.substring(idxOfAt + 4);"},{"lineNumber":87,"author":{"gitId":"Cp-John"},"content":"                    newTask \u003d new Event(title, time);"},{"lineNumber":88,"author":{"gitId":"Cp-John"},"content":"                    tasks.add(newTask);"},{"lineNumber":89,"author":{"gitId":"Cp-John"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"Cp-John"},"content":"                break;"},{"lineNumber":91,"author":{"gitId":"Cp-John"},"content":"            default:"},{"lineNumber":92,"author":{"gitId":"Cp-John"},"content":"                throw new DukeException();"},{"lineNumber":93,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":95,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"  \" + newTask);"},{"lineNumber":96,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":97,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":99,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Cp-John"},"content":"     * @param command the input of user"},{"lineNumber":101,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException exception specific to Duke"},{"lineNumber":102,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"Cp-John"},"content":"    public static void doneTask(String command) throws DukeException {"},{"lineNumber":104,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"Cp-John"},"content":"            int idx \u003d Integer.parseInt(command.split(\" \")[1]) - 1;"},{"lineNumber":106,"author":{"gitId":"Cp-John"},"content":"            Task task \u003d tasks.get(idx);"},{"lineNumber":107,"author":{"gitId":"Cp-John"},"content":"            task.done();"},{"lineNumber":108,"author":{"gitId":"Cp-John"},"content":"            printMsg(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":109,"author":{"gitId":"Cp-John"},"content":"            printMsg(\"  \" + task);"},{"lineNumber":110,"author":{"gitId":"Cp-John"},"content":"        } catch (Exception e) {"},{"lineNumber":111,"author":{"gitId":"Cp-John"},"content":"            throw new DukeException();"},{"lineNumber":112,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":115,"author":{"gitId":"Cp-John"},"content":"    public static void printLine() {"},{"lineNumber":116,"author":{"gitId":"Cp-John"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":117,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":119,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"Cp-John"},"content":"     * print greeting message"},{"lineNumber":121,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"Cp-John"},"content":"    public static void greeting() {"},{"lineNumber":123,"author":{"gitId":"Cp-John"},"content":"        printLine();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String logo \u003d \"      ____        _        \\n\""},{"lineNumber":125,"author":{"gitId":"-"},"content":"                + \"     |  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + \"     | | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":127,"author":{"gitId":"-"},"content":"                + \"     | |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":128,"author":{"gitId":"-"},"content":"                + \"     |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":129,"author":{"gitId":"Cp-John"},"content":"        System.out.println(logo);"},{"lineNumber":130,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"Hello! I\u0027m Duke\");"},{"lineNumber":131,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"What can I do for you?\");"},{"lineNumber":132,"author":{"gitId":"Cp-John"},"content":"        printLine();"},{"lineNumber":133,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":135,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"Cp-John"},"content":"     * map commands to actions"},{"lineNumber":137,"author":{"gitId":"Cp-John"},"content":"     * @param command the input of user"},{"lineNumber":138,"author":{"gitId":"Cp-John"},"content":"     * @return false if command entered is \"bye\" else true"},{"lineNumber":139,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"Cp-John"},"content":"    public static boolean processCommand(String command) throws DukeException {"},{"lineNumber":141,"author":{"gitId":"Cp-John"},"content":"        if (command.equals(\"bye\")) {"},{"lineNumber":142,"author":{"gitId":"Cp-John"},"content":"            sayBye();"},{"lineNumber":143,"author":{"gitId":"Cp-John"},"content":"            return false;"},{"lineNumber":144,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"Cp-John"},"content":"        "},{"lineNumber":146,"author":{"gitId":"Cp-John"},"content":"        if (command.equals(\"list\")) {"},{"lineNumber":147,"author":{"gitId":"Cp-John"},"content":"            printTasks();"},{"lineNumber":148,"author":{"gitId":"Cp-John"},"content":"        } else {"},{"lineNumber":149,"author":{"gitId":"Cp-John"},"content":"            String[] substrs \u003d command.split(\" \");"},{"lineNumber":150,"author":{"gitId":"Cp-John"},"content":"            switch (substrs[0]) {"},{"lineNumber":151,"author":{"gitId":"Cp-John"},"content":"                case \"todo\", \"event\", \"deadline\":"},{"lineNumber":152,"author":{"gitId":"Cp-John"},"content":"                    addTask(command);"},{"lineNumber":153,"author":{"gitId":"Cp-John"},"content":"                    break;"},{"lineNumber":154,"author":{"gitId":"Cp-John"},"content":"                case \"done\":"},{"lineNumber":155,"author":{"gitId":"Cp-John"},"content":"                    doneTask(command);"},{"lineNumber":156,"author":{"gitId":"Cp-John"},"content":"                    break;"},{"lineNumber":157,"author":{"gitId":"Cp-John"},"content":"                case \"delete\":"},{"lineNumber":158,"author":{"gitId":"Cp-John"},"content":"                    deleteTask(command);"},{"lineNumber":159,"author":{"gitId":"Cp-John"},"content":"                    break;"},{"lineNumber":160,"author":{"gitId":"Cp-John"},"content":"                default:"},{"lineNumber":161,"author":{"gitId":"Cp-John"},"content":"                    throw new UnknownCommandException();"},{"lineNumber":162,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"Cp-John"},"content":"        return true;"},{"lineNumber":165,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":167,"author":{"gitId":"Cp-John"},"content":"    public static void sayBye() {"},{"lineNumber":168,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"Bye. Hope to see you again soon!\");"},{"lineNumber":169,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":171,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"Cp-John"},"content":"     * print task list as well as their status"},{"lineNumber":173,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"Cp-John"},"content":"    public static void printTasks() {"},{"lineNumber":175,"author":{"gitId":"Cp-John"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":176,"author":{"gitId":"Cp-John"},"content":"            printMsg((i + 1) + \".\" + tasks.get(i).toString());"},{"lineNumber":177,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Cp-John":170,"-":9}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":" * exceptions specific to Duke"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ OOPS!!! unknown command or incorrect input format\";"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    public DukeException() {"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"        super(ERROR_MESSAGE);"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    public DukeException(String msg) {"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"        super(msg);"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":14}},{"path":"src/main/java/EmptyTodoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":" * exception in the case when the arguments of todo is empty"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"public class EmptyTodoDescriptionException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    public EmptyTodoDescriptionException() {"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"        super(ERROR_MESSAGE);"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":10}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":" * tasks that happen in a specific time for a duration (e.g. a meeting on 2/10/2019 2-4pm)"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"public class Event extends Task {"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    private String time;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    public Event(String title, String time) {"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"        super(title);"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"        this.time \u003d time;"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"     * @return a string describing the event task"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + time + \")\";"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":18}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":"    private String title;"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"    private String status;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    public Task(String title) {"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"        this.title \u003d title;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"        this.status \u003d \"undone\";"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"    public boolean isDone() {"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"        return status.equals(\"done\");"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"     * mark the task as done"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    public void done() {"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"        this.status \u003d \"done\";"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"     * @return title of the task with its status"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"        return \"[\" + (isDone() ? \"X\" : \" \") + \"] \" + title;"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":27}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"    public ToDo(String title) {"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"        super(title);"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"     * @return a string describing the todo task"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":13}},{"path":"src/main/java/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":" * exception in the case when the command from user is unknown"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"public class UnknownCommandException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    public UnknownCommandException() {"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"        super(ERROR_MESSAGE);"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":10}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    rm ./text-ui-test/ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"if ! javac -cp ./src/main/java -Xlint:none -d ../bin ./src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"java -classpath ../bin Duke \u003c ./text-ui-test/input.txt \u003e ./text-ui-test/ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"cp ./text-ui-test/EXPECTED.TXT ./text-ui-test/EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"dos2unix ./text-ui-test/ACTUAL.TXT ./text-ui-test/EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"diff ./text-ui-test/ACTUAL.TXT ./text-ui-test/EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Cp-John":6,"-":32}}]
