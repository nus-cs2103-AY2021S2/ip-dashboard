[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"Cp-John":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Cp-John":16,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"[T][X] homework"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":"[D][ ] return book (by: Oct 15 2019)"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"[E][ ] project meeting (at: Oct 15 2019)"}],"authorContributionMap":{"Cp-John":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"### Feature 1 "},{"lineNumber":6,"author":{"gitId":"-"},"content":"Description of feature."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"### `list` - List all the tasks in the current task list"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"`list`"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"Expected outcome:"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"`_______________________________________________________`"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"`1.[T][X]assignment`"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"`2.[T][]homework`"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"`_______________________________________________________`"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"### `todo` - Add a task without any date/time attached to it"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"Example of usage:"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"`todo borrow book`"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"Expected outcome:"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":"`_______________________________________________________`"},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":36,"author":{"gitId":"Cp-John"},"content":"`Got it. I\u0027ve added this task:`"},{"lineNumber":37,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":38,"author":{"gitId":"Cp-John"},"content":"`[T][ ] borrow book`"},{"lineNumber":39,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":40,"author":{"gitId":"Cp-John"},"content":"`Now you have 5 tasks in the list.`"},{"lineNumber":41,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":42,"author":{"gitId":"Cp-John"},"content":"`______________________________________________________`"},{"lineNumber":43,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":44,"author":{"gitId":"Cp-John"},"content":"### `deadline` - Add a task with deadline (e.g. 2019-10-15) attached to it"},{"lineNumber":45,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":46,"author":{"gitId":"Cp-John"},"content":"Example of usage:"},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":48,"author":{"gitId":"Cp-John"},"content":"`deadline return book /by 2019-10-15`"},{"lineNumber":49,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":50,"author":{"gitId":"Cp-John"},"content":"Expected outcome:"},{"lineNumber":51,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":52,"author":{"gitId":"Cp-John"},"content":"`____________________________________________`"},{"lineNumber":53,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":54,"author":{"gitId":"Cp-John"},"content":"`     Got it. I\u0027ve added this task:`"},{"lineNumber":55,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":56,"author":{"gitId":"Cp-John"},"content":"`      [D][] return book (by: Oct 15 2019)Now you have 4 tasks in the list`"},{"lineNumber":57,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":58,"author":{"gitId":"Cp-John"},"content":"`____________________________________________`"},{"lineNumber":59,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":60,"author":{"gitId":"Cp-John"},"content":"### `event` - Add a task with date (e.g. 2019-10-15) attached to it"},{"lineNumber":61,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":62,"author":{"gitId":"Cp-John"},"content":"Example of usage:"},{"lineNumber":63,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":64,"author":{"gitId":"Cp-John"},"content":"`event project meeting /at 2019-10-15`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"Cp-John"},"content":"`____________________________________________`"},{"lineNumber":69,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":70,"author":{"gitId":"Cp-John"},"content":"`     Got it. I\u0027ve added this task:`"},{"lineNumber":71,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":72,"author":{"gitId":"Cp-John"},"content":"`      [E][] project meeting (by: Oct 15 2019)Now you have 5 tasks in the list`"},{"lineNumber":73,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":74,"author":{"gitId":"Cp-John"},"content":"`____________________________________________`"},{"lineNumber":75,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":76,"author":{"gitId":"Cp-John"},"content":"### `delete` - Delete a task from the list"},{"lineNumber":77,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":78,"author":{"gitId":"Cp-John"},"content":"Example of usage:"},{"lineNumber":79,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":80,"author":{"gitId":"Cp-John"},"content":"`list`"},{"lineNumber":81,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":82,"author":{"gitId":"Cp-John"},"content":"`_______________________________________________________`"},{"lineNumber":83,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":84,"author":{"gitId":"Cp-John"},"content":"`     Here are the tasks in your list:`"},{"lineNumber":85,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":86,"author":{"gitId":"Cp-John"},"content":"`     1.[T][X] read book`"},{"lineNumber":87,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":88,"author":{"gitId":"Cp-John"},"content":"`     2.[D][X] return book (by: June 6th)`"},{"lineNumber":89,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":90,"author":{"gitId":"Cp-John"},"content":"`     3.[E][ ] project meeting (at: Aug 6th 2-4pm)`"},{"lineNumber":91,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":92,"author":{"gitId":"Cp-John"},"content":"`     4.[T][X] join sports club`"},{"lineNumber":93,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":94,"author":{"gitId":"Cp-John"},"content":"`     5.[T][ ] borrow book`"},{"lineNumber":95,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":96,"author":{"gitId":"Cp-John"},"content":"`    _______________________________________________________`"},{"lineNumber":97,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":98,"author":{"gitId":"Cp-John"},"content":"`delete 3`"},{"lineNumber":99,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":100,"author":{"gitId":"Cp-John"},"content":"Expected outcome:"},{"lineNumber":101,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":102,"author":{"gitId":"Cp-John"},"content":"`_______________________________________________________`"},{"lineNumber":103,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":104,"author":{"gitId":"Cp-John"},"content":"`     Noted. I\u0027ve removed this task: `"},{"lineNumber":105,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":106,"author":{"gitId":"Cp-John"},"content":"`       [E][ ] project meeting (at: Aug 6th 2-4pm)`"},{"lineNumber":107,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":108,"author":{"gitId":"Cp-John"},"content":"`    Now you have 4 tasks in the list.`"},{"lineNumber":109,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":110,"author":{"gitId":"Cp-John"},"content":"`    ______________________________________________________`"},{"lineNumber":111,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":112,"author":{"gitId":"Cp-John"},"content":"### `find` - Find a task by searching for a keyword"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"Cp-John"},"content":"`find book`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Cp-John"},"content":"`_______________________________________________________`"},{"lineNumber":121,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":122,"author":{"gitId":"Cp-John"},"content":"`     Here are the matching tasks in your list:`"},{"lineNumber":123,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":124,"author":{"gitId":"Cp-John"},"content":"`     1.[T][X] read book`"},{"lineNumber":125,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":126,"author":{"gitId":"Cp-John"},"content":"`     2.[D][X] return book (by: June 6th)`"},{"lineNumber":127,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":128,"author":{"gitId":"Cp-John"},"content":"`_______________________________________________________`"},{"lineNumber":129,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":130,"author":{"gitId":"Cp-John"},"content":""}],"authorContributionMap":{"Cp-John":109,"-":21}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import javafx.geometry.Pos;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"public class DialogBox extends HBox {"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    private Label text;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"    private ImageView displayPicture;"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"    public DialogBox(Label l, ImageView iv) {"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"        text \u003d l;"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"        displayPicture \u003d iv;"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"        text.setWrapText(true);"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"        displayPicture.setFitWidth(50.0);"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"        displayPicture.setFitHeight(50.0);"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"        this.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"        this.getChildren().addAll(text, displayPicture);"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"    private void flip() {"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"        this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":36,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":38,"author":{"gitId":"Cp-John"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {"},{"lineNumber":39,"author":{"gitId":"Cp-John"},"content":"        return new DialogBox(l, iv);"},{"lineNumber":40,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":42,"author":{"gitId":"Cp-John"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {"},{"lineNumber":43,"author":{"gitId":"Cp-John"},"content":"        var db \u003d new DialogBox(l, iv);"},{"lineNumber":44,"author":{"gitId":"Cp-John"},"content":"        db.flip();"},{"lineNumber":45,"author":{"gitId":"Cp-John"},"content":"        return db;"},{"lineNumber":46,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":47}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.control.Button;"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.layout.*;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.control.Label;"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.image.Image;"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":" * the agent program to run duke.Duke"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"public class Duke extends Application {"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.txt\";"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"    private Ui ui;"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    private TaskList tasks;"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"    private Storage storage;"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"    private Parser parser;"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"    private VBox dialogContainer;"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"    private TextField userInput;"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"    private Button sendButton;"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"    private Scene scene;"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/WallE.png\"));"},{"lineNumber":36,"author":{"gitId":"Cp-John"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/Eve.png\"));"},{"lineNumber":37,"author":{"gitId":"Cp-John"},"content":"    private Image backgroundImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Galaxy.jpg\"));"},{"lineNumber":38,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":39,"author":{"gitId":"Cp-John"},"content":"    public Duke() {"},{"lineNumber":40,"author":{"gitId":"Cp-John"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":41,"author":{"gitId":"Cp-John"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":42,"author":{"gitId":"Cp-John"},"content":"        this.storage \u003d new Storage(FILE_PATH);"},{"lineNumber":43,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":44,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"Cp-John"},"content":"            this.tasks \u003d new TaskList(storage.load());"},{"lineNumber":46,"author":{"gitId":"Cp-John"},"content":"        } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":"            ui.printMsg(e.getMessage());"},{"lineNumber":48,"author":{"gitId":"Cp-John"},"content":"            this.tasks \u003d new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":49,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":52,"author":{"gitId":"Cp-John"},"content":"    public static void main(String[] args) {"},{"lineNumber":53,"author":{"gitId":"Cp-John"},"content":"        new Duke().run();"},{"lineNumber":54,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":56,"author":{"gitId":"Cp-John"},"content":"    public void run() {"},{"lineNumber":57,"author":{"gitId":"Cp-John"},"content":"        ui.printGreetingMsg();"},{"lineNumber":58,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":59,"author":{"gitId":"Cp-John"},"content":"        boolean isExit \u003d false;"},{"lineNumber":60,"author":{"gitId":"Cp-John"},"content":"        while(!isExit) {"},{"lineNumber":61,"author":{"gitId":"Cp-John"},"content":"            String fullCommand \u003d ui.readCommand();"},{"lineNumber":62,"author":{"gitId":"Cp-John"},"content":"            ui.printLine();"},{"lineNumber":63,"author":{"gitId":"Cp-John"},"content":"            try {"},{"lineNumber":64,"author":{"gitId":"Cp-John"},"content":"                Command command \u003d parser.parseCommand(fullCommand);"},{"lineNumber":65,"author":{"gitId":"Cp-John"},"content":"                command.execute(tasks, storage);"},{"lineNumber":66,"author":{"gitId":"Cp-John"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":67,"author":{"gitId":"Cp-John"},"content":"            } catch (DukeException e) {"},{"lineNumber":68,"author":{"gitId":"Cp-John"},"content":"                ui.printMsg(e.getMessage());"},{"lineNumber":69,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"Cp-John"},"content":"            ui.printLine();"},{"lineNumber":71,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":74,"author":{"gitId":"Cp-John"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"Cp-John"},"content":"    public void start(Stage stage) {"},{"lineNumber":76,"author":{"gitId":"Cp-John"},"content":"        //Step 1. Setting up required components"},{"lineNumber":77,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":78,"author":{"gitId":"Cp-John"},"content":"        //The container for the content of the chat to scroll."},{"lineNumber":79,"author":{"gitId":"Cp-John"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":80,"author":{"gitId":"Cp-John"},"content":"        scrollPane.setStyle(\"-fx-background: transparent; -fx-background-color: transparent; \");"},{"lineNumber":81,"author":{"gitId":"Cp-John"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":82,"author":{"gitId":"Cp-John"},"content":"        BackgroundImage backgroundimage \u003d new BackgroundImage(backgroundImage,"},{"lineNumber":83,"author":{"gitId":"Cp-John"},"content":"                BackgroundRepeat.NO_REPEAT,"},{"lineNumber":84,"author":{"gitId":"Cp-John"},"content":"                BackgroundRepeat.REPEAT,"},{"lineNumber":85,"author":{"gitId":"Cp-John"},"content":"                BackgroundPosition.DEFAULT,"},{"lineNumber":86,"author":{"gitId":"Cp-John"},"content":"                BackgroundSize.DEFAULT);"},{"lineNumber":87,"author":{"gitId":"Cp-John"},"content":"//                new BackgroundSize(385, 535, false, false, false, false));"},{"lineNumber":88,"author":{"gitId":"Cp-John"},"content":"        Background background \u003d new Background(backgroundimage);"},{"lineNumber":89,"author":{"gitId":"Cp-John"},"content":"        dialogContainer.setBackground(background);"},{"lineNumber":90,"author":{"gitId":"Cp-John"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":91,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":92,"author":{"gitId":"Cp-John"},"content":"        userInput \u003d new TextField();"},{"lineNumber":93,"author":{"gitId":"Cp-John"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":94,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":95,"author":{"gitId":"Cp-John"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":96,"author":{"gitId":"Cp-John"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":97,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":98,"author":{"gitId":"Cp-John"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":99,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":100,"author":{"gitId":"Cp-John"},"content":"        stage.setScene(scene);"},{"lineNumber":101,"author":{"gitId":"Cp-John"},"content":"        stage.show();"},{"lineNumber":102,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":103,"author":{"gitId":"Cp-John"},"content":"        //Step 2. Formatting the window to look as expected"},{"lineNumber":104,"author":{"gitId":"Cp-John"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":105,"author":{"gitId":"Cp-John"},"content":"        stage.setResizable(false);"},{"lineNumber":106,"author":{"gitId":"Cp-John"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":107,"author":{"gitId":"Cp-John"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":108,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":109,"author":{"gitId":"Cp-John"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":110,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":111,"author":{"gitId":"Cp-John"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":112,"author":{"gitId":"Cp-John"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":113,"author":{"gitId":"Cp-John"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":114,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":115,"author":{"gitId":"Cp-John"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":116,"author":{"gitId":"Cp-John"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":117,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":118,"author":{"gitId":"Cp-John"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":119,"author":{"gitId":"Cp-John"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":120,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":121,"author":{"gitId":"Cp-John"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":122,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":123,"author":{"gitId":"Cp-John"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":124,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":125,"author":{"gitId":"Cp-John"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":126,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":127,"author":{"gitId":"Cp-John"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":128,"author":{"gitId":"Cp-John"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":129,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":130,"author":{"gitId":"Cp-John"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);"},{"lineNumber":131,"author":{"gitId":"Cp-John"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":132,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":133,"author":{"gitId":"Cp-John"},"content":"        // more code to be added here later"},{"lineNumber":134,"author":{"gitId":"Cp-John"},"content":"        //Step 3. Add functionality to handle user input."},{"lineNumber":135,"author":{"gitId":"Cp-John"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":136,"author":{"gitId":"Cp-John"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"},{"lineNumber":137,"author":{"gitId":"Cp-John"},"content":"            userInput.clear();"},{"lineNumber":138,"author":{"gitId":"Cp-John"},"content":"        });"},{"lineNumber":139,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":140,"author":{"gitId":"Cp-John"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":141,"author":{"gitId":"Cp-John"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"},{"lineNumber":142,"author":{"gitId":"Cp-John"},"content":"            userInput.clear();"},{"lineNumber":143,"author":{"gitId":"Cp-John"},"content":"        });"},{"lineNumber":144,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":145,"author":{"gitId":"Cp-John"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes."},{"lineNumber":146,"author":{"gitId":"Cp-John"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":147,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":148,"author":{"gitId":"Cp-John"},"content":"        //Part 3. Add functionality to handle user input."},{"lineNumber":149,"author":{"gitId":"Cp-John"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":150,"author":{"gitId":"Cp-John"},"content":"            handleUserInput(stage);"},{"lineNumber":151,"author":{"gitId":"Cp-John"},"content":"        });"},{"lineNumber":152,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":153,"author":{"gitId":"Cp-John"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":154,"author":{"gitId":"Cp-John"},"content":"            handleUserInput(stage);"},{"lineNumber":155,"author":{"gitId":"Cp-John"},"content":"        });"},{"lineNumber":156,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":158,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"Cp-John"},"content":"     * Iteration 1:"},{"lineNumber":160,"author":{"gitId":"Cp-John"},"content":"     * Creates a label with the specified text and adds it to the dialog container."},{"lineNumber":161,"author":{"gitId":"Cp-John"},"content":"     * @param text String containing text to add"},{"lineNumber":162,"author":{"gitId":"Cp-John"},"content":"     * @return a label with the specified text that has word wrap enabled."},{"lineNumber":163,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"Cp-John"},"content":"    private Label getDialogLabel(String text) {"},{"lineNumber":165,"author":{"gitId":"Cp-John"},"content":"        // You will need to import `javafx.scene.control.Label`."},{"lineNumber":166,"author":{"gitId":"Cp-John"},"content":"        Label textToAdd \u003d new Label(text);"},{"lineNumber":167,"author":{"gitId":"Cp-John"},"content":"        textToAdd.setWrapText(true);"},{"lineNumber":168,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":169,"author":{"gitId":"Cp-John"},"content":"        return textToAdd;"},{"lineNumber":170,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":172,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"Cp-John"},"content":"     * Iteration 2:"},{"lineNumber":174,"author":{"gitId":"Cp-John"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":175,"author":{"gitId":"Cp-John"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":176,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"Cp-John"},"content":"    private void handleUserInput(Stage stage) {"},{"lineNumber":178,"author":{"gitId":"Cp-John"},"content":"        String fullCommand \u003d userInput.getText();"},{"lineNumber":179,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":180,"author":{"gitId":"Cp-John"},"content":"        Label userText \u003d new Label(fullCommand);"},{"lineNumber":181,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":182,"author":{"gitId":"Cp-John"},"content":"        String resp \u003d getResponse(fullCommand);"},{"lineNumber":183,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":184,"author":{"gitId":"Cp-John"},"content":"        Label dukeText \u003d new Label(resp);"},{"lineNumber":185,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":186,"author":{"gitId":"Cp-John"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":187,"author":{"gitId":"Cp-John"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),"},{"lineNumber":188,"author":{"gitId":"Cp-John"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"},{"lineNumber":189,"author":{"gitId":"Cp-John"},"content":"        );"},{"lineNumber":190,"author":{"gitId":"Cp-John"},"content":"        userInput.clear();"},{"lineNumber":191,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":192,"author":{"gitId":"Cp-John"},"content":"        if (resp.equals(\"Bye!\")) {"},{"lineNumber":193,"author":{"gitId":"Cp-John"},"content":"            stage.close();"},{"lineNumber":194,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":197,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"Cp-John"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":199,"author":{"gitId":"Cp-John"},"content":"     * Replace this stub with your completed method."},{"lineNumber":200,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"Cp-John"},"content":"    private String getResponse(String fullCommand) {"},{"lineNumber":202,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":203,"author":{"gitId":"Cp-John"},"content":"            Command command \u003d parser.parseCommand(fullCommand);"},{"lineNumber":204,"author":{"gitId":"Cp-John"},"content":"            String resp \u003d command.execute(tasks, storage);"},{"lineNumber":205,"author":{"gitId":"Cp-John"},"content":"            //            isExit \u003d command.isExit();"},{"lineNumber":206,"author":{"gitId":"Cp-John"},"content":"            return resp;"},{"lineNumber":207,"author":{"gitId":"Cp-John"},"content":"        } catch (DukeException e) {"},{"lineNumber":208,"author":{"gitId":"Cp-John"},"content":"            return e.getMessage();"},{"lineNumber":209,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Cp-John":210,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"        Application.launch(Duke.class, args);"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":9}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.exception.EmptyTodoDescriptionException;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import duke.exception.UnknownCommandException;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"import duke.task.ToDo;"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"import java.util.regex.Matcher;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"import java.util.regex.Pattern;"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":" * deals with parsing the user command"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"     * @param fullCommand the user command"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"     * @return a duke.command.Command object which encapsulates the information of a parsed user command"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException exception when there is an parsing error"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"    public Command parseCommand(String fullCommand) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"        assert !fullCommand.isEmpty();"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"        if (fullCommand.equals(\"bye\")) {"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"            return new ExitCommand();"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"        } else if (fullCommand.equals(\"list\")) {"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"            return new ListCommand();"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"            String[] parsedCommand \u003d fullCommand.split(\" \");"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"            assert parsedCommand.length \u003e 0;"},{"lineNumber":36,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":37,"author":{"gitId":"Cp-John"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"Cp-John"},"content":"                switch (parsedCommand[0]) {"},{"lineNumber":39,"author":{"gitId":"Cp-John"},"content":"                case \"done\": case \"delete\":"},{"lineNumber":40,"author":{"gitId":"Cp-John"},"content":"                    int taskId \u003d Integer.parseInt(parsedCommand[1]) - 1;"},{"lineNumber":41,"author":{"gitId":"Cp-John"},"content":"                    if (parsedCommand[0].equals(\"done\")) {"},{"lineNumber":42,"author":{"gitId":"Cp-John"},"content":"                        return new DoneCommand(fullCommand, taskId);"},{"lineNumber":43,"author":{"gitId":"Cp-John"},"content":"                    } else {"},{"lineNumber":44,"author":{"gitId":"Cp-John"},"content":"                        return new DeleteCommand(fullCommand, taskId);"},{"lineNumber":45,"author":{"gitId":"Cp-John"},"content":"                    }"},{"lineNumber":46,"author":{"gitId":"Cp-John"},"content":"                case \"find\":"},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":"                    return new FindCommand(fullCommand, fullCommand.replaceFirst(\"find \", \"\"));"},{"lineNumber":48,"author":{"gitId":"Cp-John"},"content":"                case \"todo\": case \"deadline\": case \"event\":"},{"lineNumber":49,"author":{"gitId":"Cp-John"},"content":"                    Task task \u003d parseTask(parsedCommand[0], fullCommand.replaceFirst(parsedCommand[0] + \" \", \"\"));"},{"lineNumber":50,"author":{"gitId":"Cp-John"},"content":"                    return new AddCommand(fullCommand, task);"},{"lineNumber":51,"author":{"gitId":"Cp-John"},"content":"                default:"},{"lineNumber":52,"author":{"gitId":"Cp-John"},"content":"                    throw new UnknownCommandException();"},{"lineNumber":53,"author":{"gitId":"Cp-John"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"Cp-John"},"content":"            } catch (DukeException e) {"},{"lineNumber":55,"author":{"gitId":"Cp-John"},"content":"                throw e;"},{"lineNumber":56,"author":{"gitId":"Cp-John"},"content":"            } catch (Exception e) {"},{"lineNumber":57,"author":{"gitId":"Cp-John"},"content":"                throw new DukeException(\"duke.command.Command parsing error!\");"},{"lineNumber":58,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":62,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Cp-John"},"content":"     * Parses a string into a Task object."},{"lineNumber":64,"author":{"gitId":"Cp-John"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"Cp-John"},"content":"     * @param args The string representing task type and the string representing task."},{"lineNumber":66,"author":{"gitId":"Cp-John"},"content":"     * @return The Task object parsed from the string representing an object."},{"lineNumber":67,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException The exception when there is an error parsing the task"},{"lineNumber":68,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Cp-John"},"content":"    private Task parseTask(String ... args) throws DukeException {"},{"lineNumber":70,"author":{"gitId":"Cp-John"},"content":"        String pattern;"},{"lineNumber":71,"author":{"gitId":"Cp-John"},"content":"        Pattern r;"},{"lineNumber":72,"author":{"gitId":"Cp-John"},"content":"        Matcher m;"},{"lineNumber":73,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":74,"author":{"gitId":"Cp-John"},"content":"        assert args.length \u003e 1;"},{"lineNumber":75,"author":{"gitId":"Cp-John"},"content":"        String taskType \u003d args[0];"},{"lineNumber":76,"author":{"gitId":"Cp-John"},"content":"        String taskStr \u003d args[1];"},{"lineNumber":77,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":78,"author":{"gitId":"Cp-John"},"content":"        if (taskType.equals(\"todo\") \u0026\u0026 taskStr.isEmpty()) {"},{"lineNumber":79,"author":{"gitId":"Cp-John"},"content":"            throw new EmptyTodoDescriptionException();"},{"lineNumber":80,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":82,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"Cp-John"},"content":"            switch (taskType) {"},{"lineNumber":84,"author":{"gitId":"Cp-John"},"content":"            case \"todo\":"},{"lineNumber":85,"author":{"gitId":"Cp-John"},"content":"                return new ToDo(taskStr);"},{"lineNumber":86,"author":{"gitId":"Cp-John"},"content":"            case \"deadline\":"},{"lineNumber":87,"author":{"gitId":"Cp-John"},"content":"                pattern \u003d \"(.*) /by (.*)$\";"},{"lineNumber":88,"author":{"gitId":"Cp-John"},"content":"                r \u003d Pattern.compile(pattern);"},{"lineNumber":89,"author":{"gitId":"Cp-John"},"content":"                m \u003d r.matcher(taskStr);"},{"lineNumber":90,"author":{"gitId":"Cp-John"},"content":"                if (m.find()) {"},{"lineNumber":91,"author":{"gitId":"Cp-John"},"content":"                    return new Deadline(m.group(1), LocalDate.parse(m.group(2)));"},{"lineNumber":92,"author":{"gitId":"Cp-John"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"Cp-John"},"content":"            case \"event\":"},{"lineNumber":94,"author":{"gitId":"Cp-John"},"content":"                pattern \u003d \"(.*) /at (.*)$\";"},{"lineNumber":95,"author":{"gitId":"Cp-John"},"content":"                r \u003d Pattern.compile(pattern);"},{"lineNumber":96,"author":{"gitId":"Cp-John"},"content":"                m \u003d r.matcher(taskStr);"},{"lineNumber":97,"author":{"gitId":"Cp-John"},"content":"                if (m.find()) {"},{"lineNumber":98,"author":{"gitId":"Cp-John"},"content":"                    return new Event(m.group(1), LocalDate.parse(m.group(2)));"},{"lineNumber":99,"author":{"gitId":"Cp-John"},"content":"                }"},{"lineNumber":100,"author":{"gitId":"Cp-John"},"content":"            default:"},{"lineNumber":101,"author":{"gitId":"Cp-John"},"content":"                throw new UnknownCommandException();"},{"lineNumber":102,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"Cp-John"},"content":"        } catch (DukeException e) {"},{"lineNumber":104,"author":{"gitId":"Cp-John"},"content":"            throw e;"},{"lineNumber":105,"author":{"gitId":"Cp-John"},"content":"        } catch (Exception e) {"},{"lineNumber":106,"author":{"gitId":"Cp-John"},"content":"            throw new DukeException(\"duke.task.Task parsing error!\");"},{"lineNumber":107,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":109}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"import java.util.Scanner;"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"import java.util.regex.Matcher;"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"import java.util.regex.Pattern;"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":" * Deals with loading tasks from the file and saving tasks in the file."},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    private String dirPath;"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"     * @param filePath The file path of the file which is used to store task list."},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"    public Storage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"        parseFilePath();"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Cp-John"},"content":"     * Extracts directory path from the file path."},{"lineNumber":37,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Cp-John"},"content":"    public void parseFilePath() {"},{"lineNumber":39,"author":{"gitId":"Cp-John"},"content":"        String pattern \u003d \"(.*)/(.*)$\";"},{"lineNumber":40,"author":{"gitId":"Cp-John"},"content":"        Pattern r \u003d Pattern.compile(pattern);"},{"lineNumber":41,"author":{"gitId":"Cp-John"},"content":"        Matcher m \u003d r.matcher(filePath);"},{"lineNumber":42,"author":{"gitId":"Cp-John"},"content":"        if (m.find()) {"},{"lineNumber":43,"author":{"gitId":"Cp-John"},"content":"            this.dirPath \u003d m.group(1);"},{"lineNumber":44,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Cp-John"},"content":"     * Loads task list from the file and returns the task list."},{"lineNumber":49,"author":{"gitId":"Cp-John"},"content":"     * @return The task list which is loaded from the file."},{"lineNumber":50,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException Exception if there is error when loading from the file."},{"lineNumber":51,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Cp-John"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":53,"author":{"gitId":"Cp-John"},"content":"        // create the folder called data if not found"},{"lineNumber":54,"author":{"gitId":"Cp-John"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":56,"author":{"gitId":"Cp-John"},"content":"        File dir \u003d new File(dirPath);"},{"lineNumber":57,"author":{"gitId":"Cp-John"},"content":"        if (!dir.exists() || !dir.isDirectory()) {"},{"lineNumber":58,"author":{"gitId":"Cp-John"},"content":"            dir.mkdir();"},{"lineNumber":59,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":61,"author":{"gitId":"Cp-John"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":62,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"Cp-John"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":64,"author":{"gitId":"Cp-John"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":65,"author":{"gitId":"Cp-John"},"content":"                tasks.add(parseTask(sc.nextLine()));"},{"lineNumber":66,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"Cp-John"},"content":"            sc.close();"},{"lineNumber":68,"author":{"gitId":"Cp-John"},"content":"            return tasks;"},{"lineNumber":69,"author":{"gitId":"Cp-John"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":70,"author":{"gitId":"Cp-John"},"content":"            throw new DukeException(\"Cannot load from file!\");"},{"lineNumber":71,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":74,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Cp-John"},"content":"     * Parses the task string to a duke.task.Task object."},{"lineNumber":76,"author":{"gitId":"Cp-John"},"content":"     * @param str The string which represents a single task."},{"lineNumber":77,"author":{"gitId":"Cp-John"},"content":"     * @return A duke.task.Task object which represents a task as the string."},{"lineNumber":78,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException Exception if there is error when parsing the task string."},{"lineNumber":79,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Cp-John"},"content":"    public Task parseTask(String str) throws DukeException {"},{"lineNumber":81,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"Cp-John"},"content":"            char typeLabel \u003d str.charAt(1);"},{"lineNumber":83,"author":{"gitId":"Cp-John"},"content":"            boolean isDone \u003d str.charAt(4) \u003d\u003d \u0027X\u0027;"},{"lineNumber":84,"author":{"gitId":"Cp-John"},"content":"            String body \u003d str.substring(7);"},{"lineNumber":85,"author":{"gitId":"Cp-John"},"content":"            String pattern;"},{"lineNumber":86,"author":{"gitId":"Cp-John"},"content":"            Pattern r;"},{"lineNumber":87,"author":{"gitId":"Cp-John"},"content":"            Matcher m;"},{"lineNumber":88,"author":{"gitId":"Cp-John"},"content":"            switch (typeLabel) {"},{"lineNumber":89,"author":{"gitId":"Cp-John"},"content":"                case \u0027T\u0027:"},{"lineNumber":90,"author":{"gitId":"Cp-John"},"content":"                    return new ToDo(body, isDone);"},{"lineNumber":91,"author":{"gitId":"Cp-John"},"content":"                case \u0027D\u0027:"},{"lineNumber":92,"author":{"gitId":"Cp-John"},"content":"                    pattern \u003d \"(.*) \\\\(by: (.*)\\\\)\";"},{"lineNumber":93,"author":{"gitId":"Cp-John"},"content":"                    r \u003d Pattern.compile(pattern);"},{"lineNumber":94,"author":{"gitId":"Cp-John"},"content":"                    m \u003d r.matcher(body);"},{"lineNumber":95,"author":{"gitId":"Cp-John"},"content":"                    if (m.find()) {"},{"lineNumber":96,"author":{"gitId":"Cp-John"},"content":"                        LocalDate deadline \u003d LocalDate.parse(m.group(2), DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":97,"author":{"gitId":"Cp-John"},"content":"                        return new Deadline(m.group(1), isDone, deadline);"},{"lineNumber":98,"author":{"gitId":"Cp-John"},"content":"                    }"},{"lineNumber":99,"author":{"gitId":"Cp-John"},"content":"                case \u0027E\u0027:"},{"lineNumber":100,"author":{"gitId":"Cp-John"},"content":"                    pattern \u003d \"(.*) \\\\(at: (.*)\\\\)\";"},{"lineNumber":101,"author":{"gitId":"Cp-John"},"content":"                    r \u003d Pattern.compile(pattern);"},{"lineNumber":102,"author":{"gitId":"Cp-John"},"content":"                    m \u003d r.matcher(body);"},{"lineNumber":103,"author":{"gitId":"Cp-John"},"content":"                    if (m.find()) {"},{"lineNumber":104,"author":{"gitId":"Cp-John"},"content":"                        LocalDate time \u003d LocalDate.parse(m.group(2), DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":105,"author":{"gitId":"Cp-John"},"content":"                        return new Event(m.group(1), isDone, time);"},{"lineNumber":106,"author":{"gitId":"Cp-John"},"content":"                    }"},{"lineNumber":107,"author":{"gitId":"Cp-John"},"content":"                default:"},{"lineNumber":108,"author":{"gitId":"Cp-John"},"content":"                    throw new Exception();"},{"lineNumber":109,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"Cp-John"},"content":"        } catch (Exception e) {"},{"lineNumber":111,"author":{"gitId":"Cp-John"},"content":"            throw new DukeException(\"error occurs and loading from file is suspended!\");"},{"lineNumber":112,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":115,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Cp-John"},"content":"     * Saves the task list to the file."},{"lineNumber":117,"author":{"gitId":"Cp-John"},"content":"     * @param tasks The TaskList object whose string representation will be saved to the file."},{"lineNumber":118,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException Exception when there is an error when saving task list to the file."},{"lineNumber":119,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"Cp-John"},"content":"    public void save(TaskList tasks) throws DukeException {"},{"lineNumber":121,"author":{"gitId":"Cp-John"},"content":"        // make the data directory if not found"},{"lineNumber":122,"author":{"gitId":"Cp-John"},"content":"        File dir \u003d new File(dirPath);"},{"lineNumber":123,"author":{"gitId":"Cp-John"},"content":"        if (!dir.exists() || !dir.isDirectory()) {"},{"lineNumber":124,"author":{"gitId":"Cp-John"},"content":"            dir.mkdir();"},{"lineNumber":125,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":127,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":128,"author":{"gitId":"Cp-John"},"content":"            FileWriter writer \u003d new FileWriter(filePath);"},{"lineNumber":129,"author":{"gitId":"Cp-John"},"content":"            writer.write(tasks.toString());"},{"lineNumber":130,"author":{"gitId":"Cp-John"},"content":"            writer.flush();"},{"lineNumber":131,"author":{"gitId":"Cp-John"},"content":"            writer.close();"},{"lineNumber":132,"author":{"gitId":"Cp-John"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitId":"Cp-John"},"content":"            throw new DukeException(\"Save to file error!\");"},{"lineNumber":134,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":136}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":"import duke.exception.DukeException;"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":" * Encapsulates the information and operations of a task list."},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"     * Deletes a task specified by task id from the task list."},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"     * @param taskId The task id of the task which will be deleted."},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"     * @return The task which is deleted."},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException Exception if there is error when deleting the task."},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"    public Task deleteTask(int taskId) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"            Task task \u003d tasks.get(taskId);"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"            tasks.remove(taskId);"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"            return task;"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"        } catch (Exception e) {"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"            throw new DukeException(\"Delete task error!\");"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":"     * Adds a task to the task list."},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"     * @param task The task which will be added to the task list."},{"lineNumber":36,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Cp-John"},"content":"    public void addTask(Task task) {"},{"lineNumber":38,"author":{"gitId":"Cp-John"},"content":"        tasks.add(task);"},{"lineNumber":39,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":41,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Cp-John"},"content":"     * Marks the task specified by the task id as done."},{"lineNumber":43,"author":{"gitId":"Cp-John"},"content":"     * @param taskId The task id of the task which will be marked as done."},{"lineNumber":44,"author":{"gitId":"Cp-John"},"content":"     * @return The task which is marked as done."},{"lineNumber":45,"author":{"gitId":"Cp-John"},"content":"     * @throws DukeException Exception if there is error when marking the task as done."},{"lineNumber":46,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":"    public Task doneTask(int taskId) throws DukeException {"},{"lineNumber":48,"author":{"gitId":"Cp-John"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"Cp-John"},"content":"            Task task \u003d tasks.get(taskId);"},{"lineNumber":50,"author":{"gitId":"Cp-John"},"content":"            task.done();"},{"lineNumber":51,"author":{"gitId":"Cp-John"},"content":"            return task;"},{"lineNumber":52,"author":{"gitId":"Cp-John"},"content":"        } catch (Exception e) {"},{"lineNumber":53,"author":{"gitId":"Cp-John"},"content":"            throw new DukeException(\"Done task error!\");"},{"lineNumber":54,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":57,"author":{"gitId":"Cp-John"},"content":"    public String toStringWithIndex() {"},{"lineNumber":58,"author":{"gitId":"Cp-John"},"content":"        String str \u003d \"\";"},{"lineNumber":59,"author":{"gitId":"Cp-John"},"content":"        for (int i \u003d 0; i \u003c getNumOfTasks(); i++) {"},{"lineNumber":60,"author":{"gitId":"Cp-John"},"content":"            str \u003d str + (i + 1) + \".\" + tasks.get(i).toString() + \"\\n\";"},{"lineNumber":61,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Cp-John"},"content":"        return str;"},{"lineNumber":63,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":65,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Cp-John"},"content":"     * Find the task that the keyword totally or partially matches it."},{"lineNumber":67,"author":{"gitId":"Cp-John"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"Cp-John"},"content":"     * @param keyword The search keyword input from users."},{"lineNumber":69,"author":{"gitId":"Cp-John"},"content":"     * @return"},{"lineNumber":70,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Cp-John"},"content":"    public ArrayList\u003cTask\u003e find(String keyword) {"},{"lineNumber":72,"author":{"gitId":"Cp-John"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitId":"Cp-John"},"content":"        for (Task task: tasks) {"},{"lineNumber":74,"author":{"gitId":"Cp-John"},"content":"            if (task.getTitle().toLowerCase().contains(keyword.toLowerCase())) {"},{"lineNumber":75,"author":{"gitId":"Cp-John"},"content":"                result.add(task);"},{"lineNumber":76,"author":{"gitId":"Cp-John"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Cp-John"},"content":"        return result;"},{"lineNumber":79,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":81,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Cp-John"},"content":"     * Returns a string describing the task list."},{"lineNumber":83,"author":{"gitId":"Cp-John"},"content":"     * @return A string which is used to be stored in the file for storage."},{"lineNumber":84,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":86,"author":{"gitId":"Cp-John"},"content":"        String str \u003d \"\";"},{"lineNumber":87,"author":{"gitId":"Cp-John"},"content":"        for (Task task: tasks) {"},{"lineNumber":88,"author":{"gitId":"Cp-John"},"content":"            str \u003d str + task.toString() + \"\\n\";"},{"lineNumber":89,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Cp-John"},"content":"        return str;"},{"lineNumber":91,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":93,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Cp-John"},"content":"     * Returns the number of current tasks in the task list."},{"lineNumber":95,"author":{"gitId":"Cp-John"},"content":"     * @return The number of current tasks in the task list."},{"lineNumber":96,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Cp-John"},"content":"    public int getNumOfTasks() {"},{"lineNumber":98,"author":{"gitId":"Cp-John"},"content":"        return this.tasks.size();"},{"lineNumber":99,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":100}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"    private Scanner sc;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"    public Ui() {"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"     * Reads the user command."},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"     * @return The full user command."},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"    public String readCommand() {"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"        return sc.nextLine();"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"     * Prints greeting message when users start Duke."},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"    public void printGreetingMsg() {"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"        printLine();"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"        String logo \u003d \"      ____        _        \\n\""},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"                + \"     |  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"                + \"     | | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"                + \"     | |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"                + \"     |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"        System.out.println(logo);"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"Hello! I\u0027m duke.Duke\");"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"What can I do for you?\");"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"        printLine();"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":36,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Cp-John"},"content":"     * Prints messages with proper indentations."},{"lineNumber":38,"author":{"gitId":"Cp-John"},"content":"     * @param msg The message that will be printed on the screen and visible to users."},{"lineNumber":39,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Cp-John"},"content":"    public void printMsg(String msg) {"},{"lineNumber":41,"author":{"gitId":"Cp-John"},"content":"        System.out.println(\"     \" + msg);"},{"lineNumber":42,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":44,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Cp-John"},"content":"     * Prints a line with proper indentations."},{"lineNumber":46,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Cp-John"},"content":"    public void printLine() {"},{"lineNumber":48,"author":{"gitId":"Cp-John"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":49,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":51,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Cp-John"},"content":"     * Prints bye message when users quiting Duke."},{"lineNumber":53,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Cp-John"},"content":"    public void sayBye() {"},{"lineNumber":55,"author":{"gitId":"Cp-John"},"content":"        printMsg(\"Bye. Hope to see you again soon!\");"},{"lineNumber":56,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":57}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"import duke.Storage;"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":" * Encapsulates information about a parsed user command."},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"public class AddCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    private Task newTask;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"     * @param fullCommand The full user command."},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"     * @param newTask The new task that will be added in the add command."},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"    public AddCommand(String fullCommand, Task newTask) {"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"        super(fullCommand);"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"        this.newTask \u003d newTask;"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"        tasks.addTask(newTask);"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"        String resp \u003d \"Got it. I\u0027ve added this task: \\n\" +  \"  \" + newTask +"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"                \"Now you have \" + tasks.getNumOfTasks() + \" tasks in the list.\";"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"        storage.save(tasks);"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"        return resp;"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"    public boolean isExit() {"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"        return false;"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":35}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"    private String fullCommand;"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    public Command(String fullCommand) {"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    public abstract String execute(TaskList tasks, Storage storage) throws DukeException;"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    public abstract boolean isExit();"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":18}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"import duke.Storage;"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":" * Encapsulates the information of a parsed user command to delete a task."},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    private int taskId;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"     * @param fullCommand The full user command."},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"     * @param taskId The task id of the task which will be deleted."},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"    public DeleteCommand(String fullCommand, int taskId) {"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"        super(fullCommand);"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"        this.taskId \u003d taskId;"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"        Task task \u003d tasks.deleteTask(taskId);"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"        String resp \u003d \"Noted. I\u0027ve removed this task: \\n\" + \"  \" + task +"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"                \"\\nNow you have \" + tasks.getNumOfTasks() + \" tasks in the list.\";"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"        storage.save(tasks);"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"        return resp;"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"    public boolean isExit() {"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"        return false;"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":35}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"import duke.Storage;"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":" * Encapsulates the information of a parsed command to mark a task as done."},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    private int taskId;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"     * @param fullCommand The full user command."},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"     * @param taskId The task id of the task which will be marked as done."},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"    public DoneCommand(String fullCommand, int taskId) {"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"        super(fullCommand);"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"        assert taskId \u003e 0;"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"        this.taskId \u003d taskId;"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"        Task task \u003d tasks.doneTask(taskId);"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"        String resp \u003d \"Nice! I\u0027ve marked this task as done: \\n\" + \"  \" + task;"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"        storage.save(tasks);"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"        return resp;"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"    public boolean isExit() {"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"        return false;"},{"lineNumber":34,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":35}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":" * Encapsulates the information of an parsed exit command."},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    public ExitCommand() {"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"        super(\"bye\");"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"    public String execute(TaskList tasks, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"        return \"Bye!\";"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"        return true;"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":23}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    String keyword;"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    public FindCommand(String fullCommand, String keyword) {"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"        super(fullCommand);"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"    public String execute(TaskList tasks, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"        ArrayList\u003cTask\u003e result \u003d tasks.find(keyword);"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"        String resp \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"        for (int i \u003d 0; i \u003c result.size(); i++) {"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"            resp \u003d resp + (i + 1) + \".\" + result.get(i).toString();"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"        return resp;"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"    public boolean isExit() {"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"        return false;"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":30}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"    public ListCommand() {"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"        super(\"list\");"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    public String execute(TaskList tasks, Storage storage) {"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"        return tasks.toStringWithIndex();"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    public boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"        return false;"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":20}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":" * Exception specific to duke.Duke."},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"    public DukeException(String msg) {"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"        super(msg);"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":11}},{"path":"src/main/java/duke/exception/EmptyTodoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":" * exception in the case when the arguments of todo is empty"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"public class EmptyTodoDescriptionException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"    public EmptyTodoDescriptionException() {"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"        super(ERROR_MESSAGE);"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":12}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":" * exception in the case when the command from user is unknown"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"public class UnknownCommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"    public UnknownCommandException() {"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"        super(ERROR_MESSAGE);"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":12}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":" * tasks with a deadline (need to be done before a date/time)"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    private LocalDate deadline;"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"    public Deadline(String title, boolean isDone, LocalDate deadline) {"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"        super(title, isDone);"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"     * @param title the title of the deadline task"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"     * @param deadline the deadline of the deadline task"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"    public Deadline(String title, LocalDate deadline) {"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"        this(title, false, deadline);"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"     * @return a string describing the deadline task"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":33}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":" * tasks that happen in a specific time for a duration (e.g. a meeting on 2/10/2019 2-4pm)"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    private LocalDate date;"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"    public Event(String title, boolean isDone, LocalDate date) {"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"        super(title, isDone);"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"    public Event(String title, LocalDate time) {"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"        this(title, false, time);"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"     * @return a string describing the event task"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":29}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"abstract public class Task {"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"    private String title;"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"    private boolean isDone;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"     * @param title the title of the task"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"     * @param isDone the status of the task"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    public Task(String title, boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"        this.title \u003d title;"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"    public String getTitle() {"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"        return this.title;"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"     * mark the task as done"},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"    public void done() {"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"     * @return title of the task with its status"},{"lineNumber":29,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"Cp-John"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + title;"},{"lineNumber":32,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":33}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"public class ToDo extends Task {"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"     * @param title the title of the todo task"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"     * @param isDone the status of the todo task"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    public ToDo(String title, boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"        super(title, isDone);"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"     * @param title the title of the task"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"    public ToDo(String title) {"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"        this(title, false);"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":22,"author":{"gitId":"Cp-John"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"     * @return a string describing the todo task"},{"lineNumber":24,"author":{"gitId":"Cp-John"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Cp-John"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":28}},{"path":"src/test/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    public void deadlineTest() {"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"        assertEquals(new Deadline(\"return book\", LocalDate.parse(\"2019-10-15\")).toString(), \"[D][ ] return book (by: Oct 15 2019)\");"},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"    public void doneDeadlineTest() {"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"        Deadline deadline \u003d new Deadline(\"return book\", LocalDate.parse(\"2019-10-15\"));"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"        deadline.done();"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"        assertEquals(deadline.toString(), \"[D][X] return book (by: Oct 15 2019)\");"},{"lineNumber":20,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":21}},{"path":"src/test/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":"public class TodoTest {"},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"    public void todoTest() {"},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":"        assertEquals(new ToDo(\"borrow book\").toString(), \"[T][ ] borrow book\");"},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":13,"author":{"gitId":"Cp-John"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Cp-John"},"content":"    public void doneTodoTest() {"},{"lineNumber":15,"author":{"gitId":"Cp-John"},"content":"        ToDo todo \u003d new ToDo(\"borrow book\");"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"        todo.done();"},{"lineNumber":17,"author":{"gitId":"Cp-John"},"content":"        assertEquals(todo.toString(), \"[T][X] borrow book\");"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Cp-John"},"content":"}"}],"authorContributionMap":{"Cp-John":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Cp-John"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Cp-John":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"Cp-John"},"content":"    rm ./text-ui-test/ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Cp-John"},"content":"if ! javac -cp ./src/main/java -Xlint:none -d ../bin ./src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"Cp-John"},"content":"java -classpath ../bin Duke \u003c ./text-ui-test/input.txt \u003e ./text-ui-test/ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"Cp-John"},"content":"cp ./text-ui-test/EXPECTED.TXT ./text-ui-test/EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"Cp-John"},"content":"dos2unix ./text-ui-test/ACTUAL.TXT ./text-ui-test/EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"Cp-John"},"content":"diff ./text-ui-test/ACTUAL.TXT ./text-ui-test/EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Cp-John":6,"-":32}}]
