[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"# Duke Project"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"Say hello to Duke! It is a personal assistant chatbot to help you manage your tasks.\\"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"Given below are instructions on how to use it so give it a go!"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"1. After that, locate the `src/main/java/duke/launcher.java` file, right-click it, and choose `Run Launcher.main()`. There should be a popup for you to interact with Duke."},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"## Commands"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"Here are some of the ways for Duke to understand you:"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"Action | Command Format | Examples"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"------------ | ------------- | -------------"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"To add a todo task | `todo` | e.g. `todo homework`"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"To add a deadline task | `deadline` | e.g. `deadline project /by 2020-01-01 23:59`"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"To add an event task | `event` | e.g. `event party /at 2020-01-01 18:00`"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"To list all current tasks | `list` | e.g. `list`"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"To delete a task | `delete` | e.g. `delete 2` will delete the 2nd task in the list"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"To mark a task as done | `done` | e.g. `done 3` will mark the 3rd task in the list as done"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"To find tasks with a \u003cbr /\u003especific keyword | `find` | e.g. `find book` will list all existing tasks with the \u003cbr /\u003eword `book`"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"To list tasks with a \u003cbr /\u003especific date | `taskdate` | e.g. `taskdate 2020-01-01` will list all existing tasks \u003cbr /\u003ewith the date `2020-01-01`"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"To exit | `bye` | e.g. `bye`"}],"authorContributionMap":{"yanlingkuek":20,"-":12}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":""}],"authorContributionMap":{"yanlingkuek":19,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"[D][X] project (by: Mar 3 2020, 7:00PM)"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":"[E][X] party (at: Mar 3 2020, 8:00PM)"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"[T][ ] book review"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"[E][ ] book release (at: Jan 1 2021, 6:00PM)"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"[T][X] clean room"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"[T][X] a"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"[D][ ] b (by: Mar 4 2020, 7:00PM)"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"[E][ ] c (at: Sep 9 2020, 7:00PM)"}],"authorContributionMap":{"yanlingkuek":8}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"### Adding a todo task: `todo`"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"Add a todo task."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"Example of usage:"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"`todo homework`"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"Expected outcome:"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"  [T][ ] homework"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"Now you have 1 task in the list."},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"````"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"### Adding a deadline task: `deadline`"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"Add a deadline task."},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"Example of usage: "},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"`deadline project /by 2020-01-01 23:39`"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"Expected outcome:"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"  [D][ ] project (by: Jan 1 2020, 11:59PM)"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"Now you have 2 tasks in the list."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"````"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"### Adding an event task: `event`"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"Add an event task."},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"Example of usage: "},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"`event party /at 2020-01-01 18:00`"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"Expected outcome:"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"  [E][ ] party (at: Jan 01 2020, 6:00PM)"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"Now you have 3 tasks in the list."},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"````"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"### Listing all tasks: `list`"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"List all existing tasks."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"`list`"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"Expected outcome:"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"Here are the tasks in your list:"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"1.[T][ ] homework"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"2.[D][ ] project (by: Jan 1 2020, 11:59PM)"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"3.[E][ ] party (at: Jan 01 2020, 6:00PM)"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"### Deleting a task: `delete`"},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"Delete a specified task."},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":"Example of usage: `delete 2`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"  [D][ ] project (by: Jan 1 2020, 11:59PM)"},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"Now you have 2 tasks in the list."},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":"### Marking a task as done: `done`"},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"Mark a specified task as done."},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":"Example of usage: "},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":"`done 1`"},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":"Expected outcome:"},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":"[T][X] homework"},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":92,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":93,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":94,"author":{"gitId":"yanlingkuek"},"content":"### Finding tasks with a specified keyword: `find`"},{"lineNumber":95,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":96,"author":{"gitId":"yanlingkuek"},"content":"Find tasks that contain a specified keyword."},{"lineNumber":97,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":98,"author":{"gitId":"yanlingkuek"},"content":"Example of usage: "},{"lineNumber":99,"author":{"gitId":"yanlingkuek"},"content":"`find party`"},{"lineNumber":100,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":101,"author":{"gitId":"yanlingkuek"},"content":"Expected outcome:"},{"lineNumber":102,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":103,"author":{"gitId":"yanlingkuek"},"content":"Here are the matching tasks in your list:"},{"lineNumber":104,"author":{"gitId":"yanlingkuek"},"content":"1.[E][ ] party (at: Jan 01 2020, 6:00PM)"},{"lineNumber":105,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":106,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":107,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":108,"author":{"gitId":"yanlingkuek"},"content":"### Listing tasks with a specified date: `taskdate`"},{"lineNumber":109,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":110,"author":{"gitId":"yanlingkuek"},"content":"Listings tasks that have a specified date."},{"lineNumber":111,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":112,"author":{"gitId":"yanlingkuek"},"content":"Example of usage: "},{"lineNumber":113,"author":{"gitId":"yanlingkuek"},"content":"`taskdate 2020-01-01`"},{"lineNumber":114,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":115,"author":{"gitId":"yanlingkuek"},"content":"Expected outcome:"},{"lineNumber":116,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":117,"author":{"gitId":"yanlingkuek"},"content":"Here are the tasks on Jan 1 2020 in your list:"},{"lineNumber":118,"author":{"gitId":"yanlingkuek"},"content":"1.[D][ ] project (by: Jan 1 2020, 11:59PM)"},{"lineNumber":119,"author":{"gitId":"yanlingkuek"},"content":"2.[E][ ] party (at: Jan 01 2020, 6:00PM)"},{"lineNumber":120,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":121,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":122,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":123,"author":{"gitId":"yanlingkuek"},"content":"### Exiting the program: `bye`"},{"lineNumber":124,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":125,"author":{"gitId":"yanlingkuek"},"content":"Exit the program."},{"lineNumber":126,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":127,"author":{"gitId":"yanlingkuek"},"content":"Example of usage: "},{"lineNumber":128,"author":{"gitId":"yanlingkuek"},"content":"`bye`"},{"lineNumber":129,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":130,"author":{"gitId":"yanlingkuek"},"content":"Expected outcome:"},{"lineNumber":131,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":132,"author":{"gitId":"yanlingkuek"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":133,"author":{"gitId":"yanlingkuek"},"content":"```"},{"lineNumber":134,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":135,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":136,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":137,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":138,"author":{"gitId":"yanlingkuek"},"content":"## Command Summary"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"yanlingkuek"},"content":"Command Format | Examples"},{"lineNumber":141,"author":{"gitId":"yanlingkuek"},"content":"------------- | -------------"},{"lineNumber":142,"author":{"gitId":"yanlingkuek"},"content":"`todo` | e.g. `todo homework`"},{"lineNumber":143,"author":{"gitId":"yanlingkuek"},"content":"`deadline` | e.g. `deadline project /by 2020-01-01 23:59`"},{"lineNumber":144,"author":{"gitId":"yanlingkuek"},"content":"`event` | e.g. `event party /at 2020-01-01 18:00`"},{"lineNumber":145,"author":{"gitId":"yanlingkuek"},"content":"`list` | e.g. `list`"},{"lineNumber":146,"author":{"gitId":"yanlingkuek"},"content":"`delete` | e.g. `delete 2` will delete the 2nd task in the list"},{"lineNumber":147,"author":{"gitId":"yanlingkuek"},"content":"`done` | e.g. `done 3` will mark the 3rd task in the list as done"},{"lineNumber":148,"author":{"gitId":"yanlingkuek"},"content":"`find` | e.g. `find book` will list all existing tasks with the word `book`"},{"lineNumber":149,"author":{"gitId":"yanlingkuek"},"content":"`taskdate` | e.g. `taskdate 2020-01-01` will list all existing tasks with the date `2020-01-01`"},{"lineNumber":150,"author":{"gitId":"yanlingkuek"},"content":"`bye` | e.g. `bye`"}],"authorContributionMap":{"yanlingkuek":137,"-":13}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" * Represents a task manager that allows users to add, delete and mark tasks as done."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eDuke\u003c/code\u003e with given filePath."},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    public Duke(String filePath) {"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"        ui \u003d new Ui();"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"     * Gets response from duke to be printed to user."},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"     * @param input User input."},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    public String getResponse(String input) {"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"            return c.execute(tasks, ui, storage);"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"        } catch (DukeException | IOException | DateTimeParseException e) {"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"            return e.getMessage();"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yanlingkuek":50,"-":2}},{"path":"src/main/java/duke/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":" * Represents a file manager."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"public class FileManager {"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if the given filePath exists."},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath Path of file."},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"     * @return True if file exists and false if file does not exist."},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    public static boolean doesExist(String filePath) {"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"        Path path \u003d Path.of(filePath);"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"        return Files.exists(path);"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     * Prints the contents of a file."},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath Path of file."},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"     * @throws FileNotFoundException If file is not found."},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    public static void printFileContents(String filePath) throws FileNotFoundException {"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        while (s.hasNext()) {"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"            System.out.println(s.nextLine());"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"     * Create and writes to a new file."},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath  Path of file."},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"     * @param textToAdd Text to write into file."},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output errors."},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"    public static void writeToNewFile(String filePath, String textToAdd) throws IOException {"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"        fw.write(textToAdd);"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"        fw.close();"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"     * Delete the file at the given file path."},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath Path of file."},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"    public static void deleteFile(String filePath) {"},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":65,"author":{"gitId":"yanlingkuek"},"content":"        f.delete();"},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":"     * Deletes a specific line from a file."},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath   Path of file."},{"lineNumber":72,"author":{"gitId":"yanlingkuek"},"content":"     * @param lineNumber Number of line to be deleted (1-based indexing)."},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output errors."},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"    public static void deleteLine(String filePath, int lineNumber, Storage storage) throws IOException {"},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"        File inputFile \u003d new File(filePath);"},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":"        File outputFile \u003d new File(\"data/newDuke.txt\");"},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":"        FileManager.writeToNewFile(\"data/newDuke.txt\", \"\");"},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":"        Scanner sc \u003d new Scanner(inputFile);"},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":"        int counter \u003d 0;"},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":"            String nextLine \u003d sc.nextLine();"},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":"            counter++;"},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":"            if (counter !\u003d lineNumber) {"},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":"                storage.appendToFile(\"data/newDuke.txt\", nextLine);"},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":"        outputFile.renameTo(inputFile);"},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":93,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"yanlingkuek"},"content":"     * Updates the list of tasks with no header and number labels."},{"lineNumber":95,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath File path."},{"lineNumber":97,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":98,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If file does not exist."},{"lineNumber":99,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"yanlingkuek"},"content":"    public static void updateTaskList(String filePath, TaskList tasks) throws IOException {"},{"lineNumber":101,"author":{"gitId":"yanlingkuek"},"content":"        File inputFile \u003d new File(filePath);"},{"lineNumber":102,"author":{"gitId":"yanlingkuek"},"content":"        File outputFile \u003d new File(\"data/newDuke.txt\");"},{"lineNumber":103,"author":{"gitId":"yanlingkuek"},"content":"        FileManager.writeToNewFile(\"data/newDuke.txt\", tasks.printTaskListWithoutNumbers());"},{"lineNumber":104,"author":{"gitId":"yanlingkuek"},"content":"        outputFile.renameTo(inputFile);"},{"lineNumber":105,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":107,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":107}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.MainWindow;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    private Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":36}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.TaskdateCommand;"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":" * Represents a parser that makes sense of user\u0027s commands."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * Parses through user command and calls the relevant command."},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     * @param fullCommand User command."},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"     * @return Relevant command."},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If user input is not in the correct format or is invalid."},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    public static Command parse(String fullCommand) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"        String type \u003d fullCommand.split(\" \")[0];"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"        String description;"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"        if (type.equals(\"list\")) {"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"            return new ListCommand();"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"bye\")) {"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"            return new ExitCommand();"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"todo\") || type.equals(\"deadline\") || type.equals(\"event\")) {"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"            if (fullCommand.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"                String aOrAn \u003d (type.equals(\"event\")) ? \"an \" : \"a \";"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of \" + aOrAn + type + \" cannot be empty.\");"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"            return new AddCommand(type, description);"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"delete\")) {"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"            if (fullCommand.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number has not been specified.\");"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"            return new DeleteCommand(description);"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"done\")) {"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"            if (fullCommand.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number has not been specified.\");"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"            return new DoneCommand(description);"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"taskdate\")) {"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"            return new TaskdateCommand(description);"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"find\")) {"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"            return new FindCommand(description);"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"}"},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":""}],"authorContributionMap":{"yanlingkuek":64}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskType;"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":" * Represents file storage \u0026 deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    protected String filePath;"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eStorage\u003c/code\u003e at the specified file path."},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    public Storage(String filePath) {"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"    public String getFilePath() {"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"        return this.filePath;"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"     * Loads the file at the given file path."},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"     * @return Task list of existing tasks in file."},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If file path does not exist."},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output issues."},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    public TaskList load() throws DukeException, IOException {"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"        Path path \u003d Path.of(this.filePath);"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"        if (Files.notExists(path)) {"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"            this.createFile();"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"File path does not exist! \""},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"                    + \"A new file has been created according to given file path.\");"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"            return this.convertTextFileToTaskList();"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new folder and new file at the given file path."},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"    public void createFile() throws IOException {"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"        String folderPath \u003d this.filePath.substring(0, this.filePath.lastIndexOf(\"/\") + 1);"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"        File folder \u003d new File(folderPath);"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"        folder.mkdirs();"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":65,"author":{"gitId":"yanlingkuek"},"content":"        file.createNewFile();"},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":"     * Append text to existing file."},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath     Path of file."},{"lineNumber":72,"author":{"gitId":"yanlingkuek"},"content":"     * @param textToAppend Text to append to existing file."},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output errors."},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"    public void appendToFile(String filePath, String textToAppend) throws IOException {"},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"        Path path \u003d Path.of(filePath);"},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":"        if (Files.notExists(path)) {"},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":"            this.createFile();"},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);"},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":"        fw.write(textToAppend + \"\\n\");"},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"        fw.close();"},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":"     * Reads text file and returns task list with existing tasks in text file."},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"     * @return Task list of existing tasks in file."},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException   If there are input or output errors."},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If description of task is not in the correct format."},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"yanlingkuek"},"content":"    public TaskList convertTextFileToTaskList() throws IOException, DukeException {"},{"lineNumber":93,"author":{"gitId":"yanlingkuek"},"content":"        File f \u003d new File(this.filePath);"},{"lineNumber":94,"author":{"gitId":"yanlingkuek"},"content":"        Scanner sc \u003d new Scanner(f);"},{"lineNumber":95,"author":{"gitId":"yanlingkuek"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":96,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":97,"author":{"gitId":"yanlingkuek"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":98,"author":{"gitId":"yanlingkuek"},"content":"            String nextLine \u003d sc.nextLine();"},{"lineNumber":99,"author":{"gitId":"yanlingkuek"},"content":"            String taskTypeLetter \u003d Character.toString(nextLine.charAt(1));"},{"lineNumber":100,"author":{"gitId":"yanlingkuek"},"content":"            boolean isDone \u003d (Character.toString(nextLine.charAt(4)).equals(\"X\"));"},{"lineNumber":101,"author":{"gitId":"yanlingkuek"},"content":"            if (taskTypeLetter.equals(\"T\")) {"},{"lineNumber":102,"author":{"gitId":"yanlingkuek"},"content":"                taskList.addTask(TaskType.TODO, nextLine.substring(7), isDone,true, this);"},{"lineNumber":103,"author":{"gitId":"yanlingkuek"},"content":"            } else if (taskTypeLetter.equals(\"D\")) {"},{"lineNumber":104,"author":{"gitId":"yanlingkuek"},"content":"                String[] nextLineArr \u003d nextLine.substring(7).split(\" \\\\(by: \");"},{"lineNumber":105,"author":{"gitId":"yanlingkuek"},"content":"                String[] dateTime \u003d nextLineArr[1].substring(0, nextLineArr[1].lastIndexOf(\")\")).split(\", \");"},{"lineNumber":106,"author":{"gitId":"yanlingkuek"},"content":"                String date \u003d dateTime[0];"},{"lineNumber":107,"author":{"gitId":"yanlingkuek"},"content":"                String time \u003d dateTime[1];"},{"lineNumber":108,"author":{"gitId":"yanlingkuek"},"content":"                String description \u003d nextLineArr[0] + \" /by \""},{"lineNumber":109,"author":{"gitId":"yanlingkuek"},"content":"                        + Storage.convertOutputDateToInputDate(date) + \" \""},{"lineNumber":110,"author":{"gitId":"yanlingkuek"},"content":"                        + Storage.convertOutputTimeToInputTime(time);"},{"lineNumber":111,"author":{"gitId":"yanlingkuek"},"content":"                taskList.addTask(TaskType.DEADLINE, description, isDone,true, this);"},{"lineNumber":112,"author":{"gitId":"yanlingkuek"},"content":"            } else if (taskTypeLetter.equals(\"E\")) {"},{"lineNumber":113,"author":{"gitId":"yanlingkuek"},"content":"                String[] nextLineArr \u003d nextLine.substring(7).split(\" \\\\(at: \");"},{"lineNumber":114,"author":{"gitId":"yanlingkuek"},"content":"                String[] dateTime \u003d nextLineArr[1].substring(0, nextLineArr[1].lastIndexOf(\")\")).split(\", \");"},{"lineNumber":115,"author":{"gitId":"yanlingkuek"},"content":"                String date \u003d dateTime[0];"},{"lineNumber":116,"author":{"gitId":"yanlingkuek"},"content":"                String time \u003d dateTime[1];"},{"lineNumber":117,"author":{"gitId":"yanlingkuek"},"content":"                String description \u003d nextLineArr[0] + \" /at \""},{"lineNumber":118,"author":{"gitId":"yanlingkuek"},"content":"                        + Storage.convertOutputDateToInputDate(date) + \" \""},{"lineNumber":119,"author":{"gitId":"yanlingkuek"},"content":"                        + Storage.convertOutputTimeToInputTime(time);"},{"lineNumber":120,"author":{"gitId":"yanlingkuek"},"content":"                taskList.addTask(TaskType.EVENT, description, isDone,true, this);"},{"lineNumber":121,"author":{"gitId":"yanlingkuek"},"content":"            } else {"},{"lineNumber":122,"author":{"gitId":"yanlingkuek"},"content":"                assert false : \"Task type is invalid.\";"},{"lineNumber":123,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":126,"author":{"gitId":"yanlingkuek"},"content":"        return taskList;"},{"lineNumber":127,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":129,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"yanlingkuek"},"content":"     * Converts output date format into a format that can be parsed into \u003ccode\u003eLocalDate\u003c/code\u003e."},{"lineNumber":131,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"yanlingkuek"},"content":"     * @param outputDate Output date."},{"lineNumber":133,"author":{"gitId":"yanlingkuek"},"content":"     * @return Date in a format that can be parsed into \u003ccode\u003eLocalDate\u003c/code\u003e"},{"lineNumber":134,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"yanlingkuek"},"content":"    public static String convertOutputDateToInputDate(String outputDate) {"},{"lineNumber":136,"author":{"gitId":"yanlingkuek"},"content":"        String[] outputDateArr \u003d outputDate.split(\" \");"},{"lineNumber":137,"author":{"gitId":"yanlingkuek"},"content":"        String year \u003d outputDateArr[2];"},{"lineNumber":138,"author":{"gitId":"yanlingkuek"},"content":"        String month \u003d \"\";"},{"lineNumber":139,"author":{"gitId":"yanlingkuek"},"content":"        if (outputDateArr[0].equals(\"Jan\")) {"},{"lineNumber":140,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"01\";"},{"lineNumber":141,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Feb\")) {"},{"lineNumber":142,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"02\";"},{"lineNumber":143,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Mar\")) {"},{"lineNumber":144,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"03\";"},{"lineNumber":145,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Apr\")) {"},{"lineNumber":146,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"04\";"},{"lineNumber":147,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"May\")) {"},{"lineNumber":148,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"05\";"},{"lineNumber":149,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Jun\")) {"},{"lineNumber":150,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"06\";"},{"lineNumber":151,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Jul\")) {"},{"lineNumber":152,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"07\";"},{"lineNumber":153,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Aug\")) {"},{"lineNumber":154,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"08\";"},{"lineNumber":155,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Sep\")) {"},{"lineNumber":156,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"09\";"},{"lineNumber":157,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Oct\")) {"},{"lineNumber":158,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"10\";"},{"lineNumber":159,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Nov\")) {"},{"lineNumber":160,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"11\";"},{"lineNumber":161,"author":{"gitId":"yanlingkuek"},"content":"        } else if (outputDateArr[0].equals(\"Dec\")) {"},{"lineNumber":162,"author":{"gitId":"yanlingkuek"},"content":"            month \u003d \"12\";"},{"lineNumber":163,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":164,"author":{"gitId":"yanlingkuek"},"content":"            assert false : \"The month of the output date is invalid.\";"},{"lineNumber":165,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"yanlingkuek"},"content":"        String day \u003d String.format(\"%02d\", Integer.parseInt(outputDateArr[1]));"},{"lineNumber":167,"author":{"gitId":"yanlingkuek"},"content":"        return year + \"-\" + month + \"-\" + day;"},{"lineNumber":168,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":170,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"yanlingkuek"},"content":"     * Converts output time format into a format that can be parsed into \u003ccode\u003eLocalTime\u003c/code\u003e."},{"lineNumber":172,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"yanlingkuek"},"content":"     * @param outputTime Output time."},{"lineNumber":174,"author":{"gitId":"yanlingkuek"},"content":"     * @return Time in a format that can be parsed into \u003ccode\u003eLocalTime\u003c/code\u003e"},{"lineNumber":175,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"yanlingkuek"},"content":"    public static String convertOutputTimeToInputTime(String outputTime) {"},{"lineNumber":177,"author":{"gitId":"yanlingkuek"},"content":"        String amOrPm \u003d outputTime.substring(outputTime.length() - 2);"},{"lineNumber":178,"author":{"gitId":"yanlingkuek"},"content":"        String time \u003d outputTime.substring(0, outputTime.length() - 2);"},{"lineNumber":179,"author":{"gitId":"yanlingkuek"},"content":"        String[] timeArr \u003d time.split(\":\");"},{"lineNumber":180,"author":{"gitId":"yanlingkuek"},"content":"        int additionalHours \u003d 0;"},{"lineNumber":181,"author":{"gitId":"yanlingkuek"},"content":"        if (amOrPm.equals(\"PM\")) {"},{"lineNumber":182,"author":{"gitId":"yanlingkuek"},"content":"            additionalHours \u003d 12;"},{"lineNumber":183,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":185,"author":{"gitId":"yanlingkuek"},"content":"        String hour \u003d String.format(\"%02d\", Integer.parseInt(timeArr[0]) + additionalHours);"},{"lineNumber":186,"author":{"gitId":"yanlingkuek"},"content":"        return hour + \":\" + timeArr[1];"},{"lineNumber":187,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":189,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if new task to be added already exists in current task list."},{"lineNumber":191,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":192,"author":{"gitId":"yanlingkuek"},"content":"     * @param newTask New task to be added."},{"lineNumber":193,"author":{"gitId":"yanlingkuek"},"content":"     * @throws FileNotFoundException If file is not found at the given file path."},{"lineNumber":194,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If new task to be added already exists in current task list."},{"lineNumber":195,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"yanlingkuek"},"content":"    public void checkForDuplicate(String newTask) throws FileNotFoundException, DukeException {"},{"lineNumber":197,"author":{"gitId":"yanlingkuek"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":198,"author":{"gitId":"yanlingkuek"},"content":"        Scanner sc \u003d new Scanner(file);"},{"lineNumber":199,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":200,"author":{"gitId":"yanlingkuek"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":201,"author":{"gitId":"yanlingkuek"},"content":"            String existingTask \u003d sc.nextLine();"},{"lineNumber":202,"author":{"gitId":"yanlingkuek"},"content":"            String existingTaskNotDone \u003d existingTask.substring(0, 4) + \" \" + existingTask.substring(5);"},{"lineNumber":203,"author":{"gitId":"yanlingkuek"},"content":"            if (existingTaskNotDone.equals(newTask)) {"},{"lineNumber":204,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"This task already exists in your list! This task will not be added.\");"},{"lineNumber":205,"author":{"gitId":"yanlingkuek"},"content":"            } else {"},{"lineNumber":206,"author":{"gitId":"yanlingkuek"},"content":"                continue;"},{"lineNumber":207,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":208,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":211,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":211}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskType;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" * Represents a command to add a task."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"public class AddCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eAddCommand\u003c/code\u003e."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * @param type Type of add command (todo, deadline, event)."},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of task."},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    public AddCommand(String type, String description) {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d type;"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     * Adds todo, deadline or event tasks."},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are any input or output issues."},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If user input is not in the correct format or is invalid."},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        return tasks.addTask(TaskType.valueOf(this.type.toUpperCase()), description, false, false, storage);"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":47}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":" * Represents a command called by the user."},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"    protected String type;"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    protected String description;"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    protected boolean isExit;"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException;"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    public abstract boolean isExit();"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":22}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":" * Represents a command to delete a task."},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eDeleteCommand\u003c/code\u003e."},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Task number to delete."},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    public DeleteCommand(String description) {"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"delete\";"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"     * Deletes specified task."},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui UI."},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output issues."},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If no task number was specified or task number specified is invalid."},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        return tasks.deleteTask(Integer.parseInt(description), storage);"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":45}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.FileManager;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" * Represents a command to mark a task as done."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"public class DoneCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eDoneCommand\u003c/code\u003e."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Task number to be marked as done."},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    public DoneCommand(String description) {"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"done\";"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     * Marks tasks as combine."},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If task number does not exist or is not specified."},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        if (Integer.parseInt(this.description) \u003e tasks.getTaskListSize() || Integer.parseInt(this.description) \u003d\u003d 0) {"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"☹ OOPS!!! This task number does not exist.\");"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"        int taskNo \u003d Integer.parseInt(this.description);"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"        assert (taskNo \u003e 0 \u0026\u0026 taskNo \u003c tasks.getTaskListSize()) : \"Invalid task number to be marked as done.\";"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"        String doneTask \u003d tasks.getTask(taskNo).markAsDone();"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"        FileManager.updateTaskList(storage.getFilePath(), tasks);"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"        return doneTask;"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":53}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":" * Represents a command to exit Duke."},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eExitCommand\u003c/code\u003e."},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * \u003ccode\u003eisExit\u003c/code\u003e is set to true."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    public ExitCommand() {"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"bye\";"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d true;"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     * Terminates Duke."},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task List,"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"        return ui.showExit();"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":39}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":" * Represents a command to find tasks by searching a keyword."},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eFindCommand\u003c/code\u003e."},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Keyword to be matched to current tasks."},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    public FindCommand(String description) {"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"find\";"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks with the matching keyword."},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"        return tasks.printTasksWith(description);"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        return false;"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":40}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":" * Represents a command to list all current tasks."},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eListCommand\u003c/code\u003e."},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"    public ListCommand() {"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"list\";"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks in task list."},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"        return tasks.printTaskList();"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":38}},{"path":"src/main/java/duke/command/TaskdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":" * Represents a command to list all tasks that corresponds to a given date."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"public class TaskdateCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eTaskdateCommand\u003c/code\u003e."},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Date to be matched to current tasks."},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    public TaskdateCommand(String description) {"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"taskdate\";"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     * Filters out tasks that match given date."},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If description is in the wrong format or is invalid."},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        Pattern pattern \u003d Pattern.compile(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"        Matcher matcher \u003d pattern.matcher(description);"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"        if (!matcher.find()) {"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"Your task date is given in the wrong format! \""},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"                    + \"Please make sure it is in the following format: YYYY-MM-DD\");"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"            LocalDate date \u003d LocalDate.parse(this.description);"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"            return tasks.printTasksOn(date);"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"            return ui.showError(\"This date is invalid!\");"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":60}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":" * Represents an exception for \u003ccode\u003eDuke\u003c/code\u003e."},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"     * Creates new instance of \u003ccode\u003eDukeException\u003c/code\u003e."},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     * @param msg Message describing the specific \u003ccode\u003eDukeException\u003c/code\u003e."},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    public DukeException(String msg) {"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"        super(msg);"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":17}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Matcher;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":" * Represents a deadline task."},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    protected String deadline;"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eDeadlineTask\u003c/code\u003e."},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of deadline task."},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     * @param deadline Deadline of deadline task."},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    public DeadlineTask(String description, String deadline) {"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * Returns date of deadline."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"     * @return Date of deadline."},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    public LocalDate getDeadlineDate() throws DateTimeParseException {"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"        String[] deadlineArr \u003d this.deadline.split(\" \");"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"        String deadlineDateString \u003d deadlineArr[0];"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(deadlineDateString);"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"        return deadlineDate;"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"     * Returns time of deadline."},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"     * @return Time of deadline."},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"    public LocalTime getDeadlineTime() throws DateTimeParseException {"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"        String[] deadlineArr \u003d this.deadline.split(\" \");"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"        String deadlineTimeString \u003d deadlineArr[1];"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"        LocalTime deadlineTime \u003d LocalTime.parse(deadlineTimeString);"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"        return deadlineTime;"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if user input has the \u003ccode\u003e/by\u003c/code\u003e keyword."},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"     * @param description String input given by user after \u003ccode\u003edeadline\u003c/code\u003e."},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"     * @return True if user input has the \u003ccode\u003e/by\u003c/code\u003e keyword."},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"    public static boolean hasByKeyword(String description) {"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"        String[] descriptionArr \u003d description.split(\" /by \");"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"        return descriptionArr.length !\u003d 1;"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":65,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if user input has the correct date \u0026 time format."},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"     * @param description String input given by user after \u003ccode\u003edeadline\u003c/code\u003e."},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":"     * @return True if user input has the correct date \u0026 time format."},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"yanlingkuek"},"content":"    public static boolean hasCorrectDateTimeFormat(String description) {"},{"lineNumber":72,"author":{"gitId":"yanlingkuek"},"content":"        String[] descriptionArr \u003d description.split(\" /by \");"},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":"        Pattern correctDateTimePattern \u003d Pattern.compile(\"^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}$\");"},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"        String inputDateTimeString \u003d descriptionArr[1];"},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"        Matcher matcher \u003d correctDateTimePattern.matcher(inputDateTimeString);"},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":"        return matcher.find();"},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if user input has the correct format."},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":"     * @param description String input given by user after \u003ccode\u003edeadline\u003c/code\u003e."},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If user input does not have the correct format."},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":"    public static void checkFormat(String description) throws DukeException {"},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"        if (!DeadlineTask.hasByKeyword(description)) {"},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"Your description is not given in the correct format!\");"},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":"        } else if (!DeadlineTask.hasCorrectDateTimeFormat(description)) {"},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"Your deadline is given in the wrong format! \""},{"lineNumber":92,"author":{"gitId":"yanlingkuek"},"content":"                    + \"Please make sure it is in the following format: YYYY-MM-DD HH:MM\");"},{"lineNumber":93,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":96,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":97,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"yanlingkuek"},"content":"     * Returns String representation of deadline task."},{"lineNumber":99,"author":{"gitId":"yanlingkuek"},"content":"     * @return String representation of deadline task."},{"lineNumber":100,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"yanlingkuek"},"content":"    public String toString() {"},{"lineNumber":103,"author":{"gitId":"yanlingkuek"},"content":"        return \"[D]\" + \"[\" + getStatusIcon() + \"] \" + this.description"},{"lineNumber":104,"author":{"gitId":"yanlingkuek"},"content":"                + \" (by: \" + this.getDeadlineDate().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \", \""},{"lineNumber":105,"author":{"gitId":"yanlingkuek"},"content":"                + this.getDeadlineTime().format(DateTimeFormatter.ofPattern(\"h:mma\")) + \")\";"},{"lineNumber":106,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":107}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Matcher;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" * Represents a event task."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"public class EventTask extends Task {"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    protected String eventDate;"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eEventTask\u003c/code\u003e."},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of event task."},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    public EventTask(String description, String eventDate) {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        super(description);"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     * Returns date of event."},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     * @return Date of event."},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"    public LocalDate getEventDateDate() {"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"        String[] eventDateArr \u003d this.eventDate.split(\" \");"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"        String eventDateDateString \u003d eventDateArr[0];"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"        LocalDate eventDateDate \u003d LocalDate.parse(eventDateDateString);"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"        return eventDateDate;"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"     * Returns time of event."},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"     * @return Time of event."},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"    public LocalTime getEventDateTime() {"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"        String[] eventDateArr \u003d this.eventDate.split(\" \");"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"        String eventDateTimeString \u003d eventDateArr[1];"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"        LocalTime eventDateTime \u003d LocalTime.parse(eventDateTimeString);"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"        return eventDateTime;"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if user input has the \u003ccode\u003e/at\u003c/code\u003e keyword."},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"     * @param description String input given by user after \u003ccode\u003eevent\u003c/code\u003e."},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"     * @return True if user input has the \u003ccode\u003e/at\u003c/code\u003e keyword."},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"    public static boolean hasAtKeyword(String description) {"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"        String[] descriptionArr \u003d description.split(\" /at \");"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"        return descriptionArr.length !\u003d 1;"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if user input has the correct date \u0026 time format."},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"yanlingkuek"},"content":"     * @param description String input given by user after \u003ccode\u003eevent\u003c/code\u003e."},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"     * @return True if user input has the correct date \u0026 time format."},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"    public static boolean hasCorrectDateTimeFormat(String description) {"},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":"        String[] descriptionArr \u003d description.split(\" /at \");"},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":71,"author":{"gitId":"yanlingkuek"},"content":"        Pattern correctDateTimePattern \u003d Pattern.compile(\"^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}$\");"},{"lineNumber":72,"author":{"gitId":"yanlingkuek"},"content":"        String inputDateTimeString \u003d descriptionArr[1];"},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":"        Matcher matcher \u003d correctDateTimePattern.matcher(inputDateTimeString);"},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"        return matcher.find();"},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if user input has the correct format."},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":"     * @param description String input given by user after \u003ccode\u003eevent\u003c/code\u003e."},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If user input does not have the correct format."},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":"    public static void checkFormat(String description) throws DukeException {"},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":"        if (!EventTask.hasAtKeyword(description)) {"},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"Your description is not given in the correct format!\");"},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":"        } else if (!EventTask.hasCorrectDateTimeFormat(description)) {"},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"Your event date and time are given in the wrong format! \""},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":"                    + \"Please make sure it is in the following format: YYYY-MM-DD HH:MM\");"},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":93,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"yanlingkuek"},"content":"     * Returns String representation of event task."},{"lineNumber":95,"author":{"gitId":"yanlingkuek"},"content":"     * @return String representation of event task."},{"lineNumber":96,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"yanlingkuek"},"content":"    public String toString() {"},{"lineNumber":99,"author":{"gitId":"yanlingkuek"},"content":"        return \"[E]\" + \"[\" + getStatusIcon() + \"] \" + this.description"},{"lineNumber":100,"author":{"gitId":"yanlingkuek"},"content":"                + \" (at: \" + this.getEventDateDate().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \", \""},{"lineNumber":101,"author":{"gitId":"yanlingkuek"},"content":"                + this.getEventDateTime().format(DateTimeFormatter.ofPattern(\"h:mma\")) + \")\";"},{"lineNumber":102,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":103}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":" * Represents a task in a task list."},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eTask\u003c/code\u003e."},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     * The task is marked as not done by default."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of task."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"     * Returns the status icon of the task, based on whether it is done or not."},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     * @return X for done or SPACE for not done."},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    public String getStatusIcon() {"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"        return (isDone) ? \"X\" : \" \"; //return tick or X symbols"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * Marks a task as done."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    public String markAsDone() {"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"        this.isDone \u003d true;"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"        return \"Nice! I\u0027ve marked this task as done: \\n  \" + this;"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"     * Returns a String representation of a task."},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"     * @return String representation of a task."},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":48}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import duke.FileManager;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"import duke.Storage;"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":" * Represents a list of tasks."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"public class TaskList {"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    protected List\u003cTask\u003e tasks;"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eTaskList\u003c/code\u003e when no existing tasks are available."},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    public TaskList() {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eTaskList\u003c/code\u003e when existing tasks are available."},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     * @param existingTaskList TaskList with existing tasks."},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"    public TaskList(TaskList existingTaskList) {"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"        this.tasks \u003d existingTaskList.tasks;"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"     * Returns this task list."},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"     * @param taskNo Task number."},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"     * @return Task for the given task number."},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    public Task getTask(int taskNo) {"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"        return this.tasks.get(taskNo - 1);"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"    public int getTaskListSize() {"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"        return this.tasks.size();"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"    public boolean hasTaskNumber(int taskNo) {"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"        return (taskNo \u003e 0) \u0026\u0026 (taskNo \u003c\u003d this.tasks.size());"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"     * Adds task to task list."},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"     * @param taskType Type of task."},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of task."},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"     * @param isDone Task is done or not."},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"     * @param isReadingFile True if a file is being read, false if a file is not being read."},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If description is not given in the correct format."},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are any input and output issues."},{"lineNumber":65,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"    public String addTask(TaskType taskType, String description, boolean isDone, boolean isReadingFile, Storage storage)"},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":"            throws DukeException, IOException {"},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"        Task newTask \u003d new Task(description);"},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":"        if (taskType \u003d\u003d TaskType.TODO) {"},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":"            newTask \u003d new ToDoTask(description);"},{"lineNumber":71,"author":{"gitId":"yanlingkuek"},"content":"        } else if (taskType \u003d\u003d TaskType.DEADLINE) {"},{"lineNumber":72,"author":{"gitId":"yanlingkuek"},"content":"            DeadlineTask.checkFormat(description);"},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":"            String[] descriptionArr \u003d description.split(\" /by \");"},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":"            String info \u003d descriptionArr[0];"},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"            String dateTime \u003d descriptionArr[1];"},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"            newTask \u003d new DeadlineTask(info, dateTime);"},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":"        } else if (taskType \u003d\u003d TaskType.EVENT) {"},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":"            EventTask.checkFormat(description);"},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":"            String[] descriptionArr \u003d description.split(\" /at \");"},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":"            String info \u003d descriptionArr[0];"},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":"            String dateTime \u003d descriptionArr[1];"},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"            newTask \u003d new EventTask(info, dateTime);"},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":"        if (isReadingFile) {"},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":"            if (isDone) {"},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":"                newTask.markAsDone();"},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":"            this.tasks.add(newTask);"},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":"            return \"\";"},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":92,"author":{"gitId":"yanlingkuek"},"content":"            storage.checkForDuplicate(newTask.toString());"},{"lineNumber":93,"author":{"gitId":"yanlingkuek"},"content":"            this.tasks.add(newTask);"},{"lineNumber":94,"author":{"gitId":"yanlingkuek"},"content":"            storage.appendToFile(\"data/duke.txt\", newTask.toString());"},{"lineNumber":95,"author":{"gitId":"yanlingkuek"},"content":"            return (\"Got it. I\u0027ve added this task: \\n\""},{"lineNumber":96,"author":{"gitId":"yanlingkuek"},"content":"                    + \"  \" + newTask + \"\\n\""},{"lineNumber":97,"author":{"gitId":"yanlingkuek"},"content":"                    + \"Now you have \" + this.tasks.size() + \" tasks in the list.\");"},{"lineNumber":98,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":101,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"yanlingkuek"},"content":"     * Deletes task from task list."},{"lineNumber":103,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"yanlingkuek"},"content":"     * @param taskNo Task number."},{"lineNumber":105,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":106,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":107,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If task number does not exist."},{"lineNumber":108,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"yanlingkuek"},"content":"    public String deleteTask(int taskNo, Storage storage) throws DukeException, IOException {"},{"lineNumber":110,"author":{"gitId":"yanlingkuek"},"content":"        if (!this.hasTaskNumber(taskNo)) {"},{"lineNumber":111,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"☹ OOPS!!! This task number does not exist.\");"},{"lineNumber":112,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":114,"author":{"gitId":"yanlingkuek"},"content":"        String message;"},{"lineNumber":115,"author":{"gitId":"yanlingkuek"},"content":"        int taskIndex \u003d taskNo - 1;"},{"lineNumber":116,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":117,"author":{"gitId":"yanlingkuek"},"content":"        message \u003d \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":118,"author":{"gitId":"yanlingkuek"},"content":"                + \"  \" + this.tasks.get(taskIndex);"},{"lineNumber":119,"author":{"gitId":"yanlingkuek"},"content":"        this.tasks.remove(taskIndex);"},{"lineNumber":120,"author":{"gitId":"yanlingkuek"},"content":"        String taskOrTasks \u003d (this.tasks.size() \u003c\u003d 1)"},{"lineNumber":121,"author":{"gitId":"yanlingkuek"},"content":"                ? \" task\""},{"lineNumber":122,"author":{"gitId":"yanlingkuek"},"content":"                : \" tasks\";"},{"lineNumber":123,"author":{"gitId":"yanlingkuek"},"content":"        message +\u003d \"\\nNow you have \" + this.tasks.size() + taskOrTasks + \" in the list.\";"},{"lineNumber":124,"author":{"gitId":"yanlingkuek"},"content":"        FileManager.deleteLine(\"data/duke.txt\", taskNo, storage);"},{"lineNumber":125,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":126,"author":{"gitId":"yanlingkuek"},"content":"        return message;"},{"lineNumber":127,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":128,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":130,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":131,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":132,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks in task list."},{"lineNumber":134,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":136,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"yanlingkuek"},"content":"    public String printTaskList() {"},{"lineNumber":138,"author":{"gitId":"yanlingkuek"},"content":"        if (this.tasks.size() \u003d\u003d 0) {"},{"lineNumber":139,"author":{"gitId":"yanlingkuek"},"content":"            return \"There are currently no tasks in your list!\";"},{"lineNumber":140,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":141,"author":{"gitId":"yanlingkuek"},"content":"            String listOfTasks \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":142,"author":{"gitId":"yanlingkuek"},"content":"            for (int i \u003d 1; i \u003c\u003d this.tasks.size(); i++) {"},{"lineNumber":143,"author":{"gitId":"yanlingkuek"},"content":"                listOfTasks +\u003d i + \".\" + this.tasks.get(i - 1) + \"\\n\";"},{"lineNumber":144,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"yanlingkuek"},"content":"            return listOfTasks;"},{"lineNumber":146,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":149,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks without header and number labels."},{"lineNumber":151,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":153,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"yanlingkuek"},"content":"    public String printTaskListWithoutNumbers() {"},{"lineNumber":155,"author":{"gitId":"yanlingkuek"},"content":"        String listOfTasks \u003d \"\";"},{"lineNumber":156,"author":{"gitId":"yanlingkuek"},"content":"        for (Task task : this.tasks) {"},{"lineNumber":157,"author":{"gitId":"yanlingkuek"},"content":"            listOfTasks +\u003d task + \"\\n\";"},{"lineNumber":158,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"yanlingkuek"},"content":"        return listOfTasks;"},{"lineNumber":160,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":162,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks that match the given date."},{"lineNumber":164,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"yanlingkuek"},"content":"     * @param date Date to be matched to tasks."},{"lineNumber":166,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":167,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"yanlingkuek"},"content":"    public String printTasksOn(LocalDate date) {"},{"lineNumber":169,"author":{"gitId":"yanlingkuek"},"content":"        List\u003cTask\u003e list \u003d new ArrayList();"},{"lineNumber":170,"author":{"gitId":"yanlingkuek"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"},{"lineNumber":171,"author":{"gitId":"yanlingkuek"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":172,"author":{"gitId":"yanlingkuek"},"content":"            if (task instanceof DeadlineTask) {"},{"lineNumber":173,"author":{"gitId":"yanlingkuek"},"content":"                LocalDate existingDate \u003d ((DeadlineTask) task).getDeadlineDate();"},{"lineNumber":174,"author":{"gitId":"yanlingkuek"},"content":"                if (existingDate.compareTo(date) \u003d\u003d 0) {"},{"lineNumber":175,"author":{"gitId":"yanlingkuek"},"content":"                    list.add(task);"},{"lineNumber":176,"author":{"gitId":"yanlingkuek"},"content":"                }"},{"lineNumber":177,"author":{"gitId":"yanlingkuek"},"content":"            } else if (task instanceof EventTask) {"},{"lineNumber":178,"author":{"gitId":"yanlingkuek"},"content":"                LocalDate existingDate \u003d ((EventTask) task).getEventDateDate();"},{"lineNumber":179,"author":{"gitId":"yanlingkuek"},"content":"                if (existingDate.compareTo(date) \u003d\u003d 0) {"},{"lineNumber":180,"author":{"gitId":"yanlingkuek"},"content":"                    list.add(task);"},{"lineNumber":181,"author":{"gitId":"yanlingkuek"},"content":"                }"},{"lineNumber":182,"author":{"gitId":"yanlingkuek"},"content":"            } else {"},{"lineNumber":183,"author":{"gitId":"yanlingkuek"},"content":"                continue;"},{"lineNumber":184,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":185,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":186,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":188,"author":{"gitId":"yanlingkuek"},"content":"        if (list.size() \u003d\u003d 0) {"},{"lineNumber":189,"author":{"gitId":"yanlingkuek"},"content":"            return \"There are no tasks with this date!\";"},{"lineNumber":190,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":191,"author":{"gitId":"yanlingkuek"},"content":"            String listOfTasks \u003d (\"Here are the tasks on \""},{"lineNumber":192,"author":{"gitId":"yanlingkuek"},"content":"                    + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"},{"lineNumber":193,"author":{"gitId":"yanlingkuek"},"content":"                    + \" in your list:\\n\");"},{"lineNumber":194,"author":{"gitId":"yanlingkuek"},"content":"            for (Task task : list) {"},{"lineNumber":195,"author":{"gitId":"yanlingkuek"},"content":"                listOfTasks +\u003d task + \"\\n\";"},{"lineNumber":196,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":197,"author":{"gitId":"yanlingkuek"},"content":"            return listOfTasks;"},{"lineNumber":198,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":201,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks that match the given keyword."},{"lineNumber":203,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"yanlingkuek"},"content":"     * @param keyword Keyword to be matched to tasks."},{"lineNumber":205,"author":{"gitId":"yanlingkuek"},"content":"     * @return Output string."},{"lineNumber":206,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"yanlingkuek"},"content":"    public String printTasksWith(String keyword) {"},{"lineNumber":208,"author":{"gitId":"yanlingkuek"},"content":"        List\u003cTask\u003e list \u003d new ArrayList();"},{"lineNumber":209,"author":{"gitId":"yanlingkuek"},"content":"        for (Task task : this.tasks) {"},{"lineNumber":210,"author":{"gitId":"yanlingkuek"},"content":"            if (task.description.contains(keyword)) {"},{"lineNumber":211,"author":{"gitId":"yanlingkuek"},"content":"                list.add(task);"},{"lineNumber":212,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":213,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":215,"author":{"gitId":"yanlingkuek"},"content":"        if (list.size() \u003d\u003d 0) {"},{"lineNumber":216,"author":{"gitId":"yanlingkuek"},"content":"            return \"There are no matching tasks with this keyword!\";"},{"lineNumber":217,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":218,"author":{"gitId":"yanlingkuek"},"content":"            String listOfTasks \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":219,"author":{"gitId":"yanlingkuek"},"content":"            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"},{"lineNumber":220,"author":{"gitId":"yanlingkuek"},"content":"                listOfTasks +\u003d i + \".\" + list.get(i - 1) + \"\\n\";"},{"lineNumber":221,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":222,"author":{"gitId":"yanlingkuek"},"content":"            return listOfTasks;"},{"lineNumber":223,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":226,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":226}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":" * Represents the different task types available."},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"    TODO, DEADLINE, EVENT;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":8}},{"path":"src/main/java/duke/task/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":" * Represents a todo task."},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"public class ToDoTask extends Task {"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eToDoTask\u003c/code\u003e."},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of todo task."},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"    public ToDoTask(String description) {"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * Returns String representation of todo task."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     * @return String representation of todo task."},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        return \"[T]\" + \"[\" + getStatusIcon() + \"] \" + this.description;"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":24}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":61}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"import duke.Duke;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"        showWelcomeMessage();"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"    private void handleUserInput() {"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"    private void showWelcomeMessage() {"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"                DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage)"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"        );"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":62}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":" * Represents a user interface that interacts with the user."},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     * Shows the introductory message."},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    public static String showWelcome() {"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"        return \"Hello from Duke!\";"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     * Shows the exit information."},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    public String showExit() {"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * Shows a line break."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    public void showLine() {"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"     * Shows error messages."},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"     * @param message Error message."},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"    public String showError(String message) {"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"        return message;"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"     * Reads user\u0027s command."},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"     * @return User\u0027s full command."},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"    public String readCommand() {"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"        return sc.nextLine();"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":56}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"            \u003cInsets /\u003e"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"   \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"      \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"   \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"yanlingkuek":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\" \u003e"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"yanlingkuek":19}},{"path":"src/test/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"class ParserTest {"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    void parse_validCommand_success() {"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"        assertDoesNotThrow(() -\u003e {"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"            Command command \u003d Parser.parse(\"todo homework\");"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"        });"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    void parse_invalidCommand_exceptionThrown() {"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"            Command command \u003d Parser.parse(\"blah\");"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":25}},{"path":"src/test/duke/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"class DeadlineTaskTest {"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"    void getDeadlineDate_validDate_success() {"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"        DeadlineTask deadlineTask \u003d new DeadlineTask(\"homework\", \"2021-01-01 19:00\");"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"        LocalDate validDate \u003d LocalDate.parse(\"2021-01-01\");"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"        assertEquals(deadlineTask.getDeadlineDate(), validDate);"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    void getDeadlineDate_invalidDate_exceptionThrown() {"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"            DeadlineTask deadlineTask \u003d new DeadlineTask(\"homework\", \"01-01-2021 19:00\");"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"            deadlineTask.getDeadlineDate();"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    void getDeadlineTime_validTime_success() {"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"        DeadlineTask deadlineTask \u003d new DeadlineTask(\"homework\", \"2021-01-01 19:00\");"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"        LocalTime validTime \u003d LocalTime.parse(\"19:00\");"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"        assertEquals(deadlineTask.getDeadlineTime(), validTime);"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    void getDeadlineTime_invalidTime_exceptionThrown() {"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"            DeadlineTask deadlineTask \u003d new DeadlineTask(\"homework\", \"01-01-2021 25:00\");"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"            deadlineTask.getDeadlineTime();"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        });"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"    void toString_validInputs_success() {"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"        assertEquals(new DeadlineTask(\"homework\", \"2021-01-01 19:00\").toString(),"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"                \"[D][ ] homework (by: Jan 1 2021, 7:00PM)\");"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":48}},{"path":"src/test/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"class TaskTest {"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"    void markAsDone_validInput_success() {"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"        Task task \u003d new DeadlineTask(\"homework\", \"2021-01-01 19:00\");"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"        task.markAsDone();"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"        assertEquals(task.isDone, true);"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    void getStatusIcon_validInput_success() {"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        Task task \u003d new DeadlineTask(\"homework\", \"2021-01-01 19:00\");"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"        assertEquals(task.getStatusIcon(), \" \");"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":"list"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"event project meeting /at Mon 2-4pm"}],"authorContributionMap":{"yanlingkuek":4}}]
