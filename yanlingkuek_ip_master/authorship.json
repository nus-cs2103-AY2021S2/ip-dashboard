[{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"public class AddCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"    AddCommand(String type, String description) {"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d type;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     * Adds todo, deadline or event tasks."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are any input or output issues."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If user input is not in the correct format or is invalid."},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        tasks.addTask(TaskType.valueOf(this.type.toUpperCase()), description, false, storage);"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":29}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"public abstract class Command {"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"    protected String type;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"    protected boolean isExit;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"    public abstract boolean isExit();"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":12}},{"path":"src/main/java/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":" * Represents a deadline task."},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"    protected String deadline;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eDeadlineTask\u003c/code\u003e."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of deadline task."},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * @param deadline Deadline of deadline task."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    public DeadlineTask(String description, String deadline) {"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     * Returns date of deadline."},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"     * @return Date of deadline."},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    public LocalDate getDeadlineDate() throws DateTimeParseException {"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"        String[] deadlineArr \u003d this.deadline.split(\" \");"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(deadlineArr[0]);"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"        return deadlineDate;"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"     * Returns time of deadline."},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"     * @return Time of deadline."},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"    public LocalTime getDeadlineTime() throws DateTimeParseException {"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"        String[] deadlineArr \u003d this.deadline.split(\" \");"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"        LocalTime deadlineTime \u003d LocalTime.parse(deadlineArr[1]);"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"        return deadlineTime;"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"     * Returns String representation of deadline task."},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"     * @return String representation of deadline task."},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"        return \"[D]\" + \"[\" + getStatusIcon() + \"] \" + this.description"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"                + \" (by: \" + this.getDeadlineDate().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \", \""},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"                + this.getDeadlineTime().format(DateTimeFormatter.ofPattern(\"h:mma\")) + \")\";"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":56}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"public class DeleteCommand extends Command{"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"    DeleteCommand(String description) {"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"delete\";"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     * Deletes specified task."},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui UI."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output issues."},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If no task number was specified or task number specified is invalid."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"        tasks.deleteTask(Integer.parseInt(description), storage);"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":28}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"public class DoneCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"    public DoneCommand(String description) {"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"done\";"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     * Marks tasks as combine."},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If task number does not exist or is not specified."},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"        if (Integer.parseInt(this.description) \u003e tasks.getTaskListSize()) {"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"☹ OOPS!!! This task number does not exist.\");"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        int taskNo \u003d Integer.parseInt(this.description);"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        tasks.getTask(taskNo).markAsDone();"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":30}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":" * Represents a task manager that allows users to add, delete and mark tasks as done."},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"    private Storage storage;"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eDuke\u003c/code\u003e with given filePath."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    public Duke(String filePath) {"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"            ui.showLine();"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     * Runs Duke and executes commands, until Duke is terminated."},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    public void run() {"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"        ui.showWelcome();"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        boolean isExit \u003d false;"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"        while (!isExit) {"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"                ui.showLine();"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"            } catch (DukeException | IOException | DateTimeParseException e) {"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"            } finally {"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"                ui.showLine();"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"        String filePath \u003d \"data/duke.txt\";"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"        new Duke(filePath).run();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yanlingkuek":55,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":" * Represents an exception for \u003ccode\u003eDuke\u003c/code\u003e."},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"     * Creates new instance of \u003ccode\u003eDukeException\u003c/code\u003e."},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"     * @param msg Message describing the specific \u003ccode\u003eDukeException\u003c/code\u003e."},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"    public DukeException(String msg) {"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"        super(msg);"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":15}},{"path":"src/main/java/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":" * Represents a event task."},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"public class EventTask extends Task {"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"    protected String eventDate;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eEventTask\u003c/code\u003e."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of event task."},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    public EventTask(String description, String eventDate) {"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     * Returns date of event."},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     * @return Date of event."},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    public LocalDate getEventDateDate() throws DateTimeParseException {"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"        String[] eventDateArr \u003d this.eventDate.split(\" \");"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"        LocalDate eventDateDate \u003d LocalDate.parse(eventDateArr[0]);"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"        return eventDateDate;"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     * Returns time of event."},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"     * @return Time of event."},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"    public LocalTime getEventDateTime() throws DateTimeParseException {"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"        String[] eventDateArr \u003d this.eventDate.split(\" \");"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        LocalTime eventDateTime \u003d LocalTime.parse(eventDateArr[1]);"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"        return eventDateTime;"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"     * Returns String representation of event task."},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"     * @return String representation of event task."},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"        return \"[E]\" + \"[\" + getStatusIcon() + \"] \" + this.description"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"                + \" (at: \" + this.getEventDateDate().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \", \""},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"                + this.getEventDateTime().format(DateTimeFormatter.ofPattern(\"h:mma\")) + \")\";"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":55}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"public class ExitCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"    public ExitCommand() {"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"bye\";"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d \"\";"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d true;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     * Terminates Duke."},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task List,"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        ui.showExit();"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":25}},{"path":"src/main/java/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" * Represents a file manager."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"public class FileManager {"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * Checks if the given filePath exists."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath Path of file."},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     * @return True if file exists and false if file does not exist."},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    public static boolean doesExist(String filePath) {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        Path path \u003d Path.of(filePath);"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"        return Files.exists(path);"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     * Prints the contents of a file."},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath Path of file."},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * @throws FileNotFoundException If file is not found."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    public static void printFileContents(String filePath) throws FileNotFoundException {"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        while (s.hasNext()) {"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"            System.out.println(s.nextLine());"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"     * Create and writes to a new file."},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath  Path of file."},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"     * @param textToAdd Text to write into file."},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output errors."},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"    public static void writeToNewFile(String filePath, String textToAdd) throws IOException {"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"        fw.write(textToAdd);"},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"        fw.close();"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"     * Delete the file at the given file path."},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath Path of file."},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"    public static void deleteFile(String filePath) {"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"        f.delete();"},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":"     * Deletes a specific line from a file."},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath   Path of file."},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":"     * @param lineNumber Number of line to be deleted (1-based indexing)."},{"lineNumber":71,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output errors."},{"lineNumber":72,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":"    public static void deleteLine(String filePath, int lineNumber, Storage storage) throws IOException {"},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":"        File inputFile \u003d new File(filePath);"},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"        File outputFile \u003d new File(\"data/newDuke.txt\");"},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"        FileManager.writeToNewFile(\"data/newDuke.txt\", \"\");"},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":"        Scanner sc \u003d new Scanner(inputFile);"},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":"        int counter \u003d 0;"},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":"            String nextLine \u003d sc.nextLine();"},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"            counter++;"},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":"            if (counter !\u003d lineNumber) {"},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":"                storage.appendToFile(\"data/newDuke.txt\", nextLine);"},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"        outputFile.renameTo(inputFile);"},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":91}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"public class ListCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"    public ListCommand() {"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"list\";"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d \"\";"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks in task list."},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        tasks.printTaskList();"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":25}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":" * Represents a parser that makes sense of user\u0027s commands."},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"public class Parser {"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"     * Parses through user command and calls the relevant command."},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"     * @param fullCommand User command."},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     * @return Relevant command."},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If user input is not in the correct format or is invalid."},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"    public static Command parse(String fullCommand) throws DukeException {"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"        String type \u003d fullCommand.split(\" \")[0];"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"        String description;"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"        if (type.equals(\"list\")) {"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"            return new ListCommand();"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"bye\")) {"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"            return new ExitCommand();"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"todo\") || type.equals(\"deadline\") || type.equals(\"event\")) {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"            if (fullCommand.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"                String aOrAn \u003d type.equals(\"event\")"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"                        ? \"an \""},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"                        : \"a \";"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of \" + aOrAn + type + \" cannot be empty.\");"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"            return new AddCommand(type, description);"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"delete\")) {"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"            if (fullCommand.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number has not been specified.\");"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"            return new DeleteCommand(description);"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"done\")) {"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"            if (fullCommand.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"☹ OOPS!!! The task number has not been specified.\");"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"            return new DoneCommand(description);"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"        } else if (type.equals(\"taskdate\")) {"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"            description \u003d fullCommand.split(type + \" \")[1];"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"            return new TaskdateCommand(description);"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"}"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":""}],"authorContributionMap":{"yanlingkuek":51}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":"import java.io.FileWriter;"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":" * Represents file storage \u0026 deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"    protected String filePath;"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eStorage\u003c/code\u003e at the specified file path."},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    public Storage(String filePath) {"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"     * Loads the file at the given file path."},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     * @return Task list of existing tasks in file."},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If file path does not exist."},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output issues."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    public TaskList load() throws DukeException, IOException {"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"        Path path \u003d Path.of(this.filePath);"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"        if (Files.notExists(path)) {"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"            this.createFile();"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"File path does not exist! A new file has been created according to given file path.\");"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"            return this.textFileToArrayList();"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new folder and new file at the given file path."},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"    public void createFile() throws IOException {"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"        String folderPath \u003d this.filePath.substring(0, this.filePath.lastIndexOf(\"/\") + 1);"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"        File folder \u003d new File(folderPath);"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"        folder.mkdirs();"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"        file.createNewFile();"},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"     * Append text to existing file."},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"     * @param filePath     Path of file."},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"     * @param textToAppend Text to append to existing file."},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are input or output errors."},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":"    public void appendToFile(String filePath, String textToAppend) throws IOException {"},{"lineNumber":65,"author":{"gitId":"yanlingkuek"},"content":"        Path path \u003d Path.of(filePath);"},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"        if (Files.notExists(path)) {"},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":"            this.createFile();"},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);"},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":"        fw.write(textToAppend + \"\\n\");"},{"lineNumber":71,"author":{"gitId":"yanlingkuek"},"content":"        fw.close();"},{"lineNumber":72,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"     * Reads text file and returns task list with existing tasks in text file."},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":"     * @return Task list of existing tasks in file."},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException   If there are input or output errors."},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If description of task is not in the correct format."},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":"    public TaskList textFileToArrayList() throws IOException, DukeException {"},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"        File f \u003d new File(this.filePath);"},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":"        Scanner sc \u003d new Scanner(f);"},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":"            String nextLine \u003d sc.nextLine();"},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"            String taskTypeLetter \u003d Character.toString(nextLine.charAt(1));"},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":"            if (taskTypeLetter.equals(\"T\")) {"},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":"                taskList.addTask(TaskType.TODO, nextLine.substring(7), true, this);"},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"            } else if (taskTypeLetter.equals(\"D\")) {"},{"lineNumber":92,"author":{"gitId":"yanlingkuek"},"content":"                String[] nextLineArr \u003d nextLine.substring(7).split(\" \\\\(by: \");"},{"lineNumber":93,"author":{"gitId":"yanlingkuek"},"content":"                String description \u003d nextLineArr[0] + \" /by \" + nextLineArr[1].substring(0, nextLineArr[1].lastIndexOf(\")\"));"},{"lineNumber":94,"author":{"gitId":"yanlingkuek"},"content":"                taskList.addTask(TaskType.DEADLINE, description, true, this);"},{"lineNumber":95,"author":{"gitId":"yanlingkuek"},"content":"            } else if (taskTypeLetter.equals(\"E\")) {"},{"lineNumber":96,"author":{"gitId":"yanlingkuek"},"content":"                String[] nextLineArr \u003d nextLine.substring(7).split(\" \\\\(at: \");"},{"lineNumber":97,"author":{"gitId":"yanlingkuek"},"content":"                String description \u003d nextLineArr[0] + \" /at \" + nextLineArr[1].substring(0, nextLineArr[1].lastIndexOf(\")\"));"},{"lineNumber":98,"author":{"gitId":"yanlingkuek"},"content":"                taskList.addTask(TaskType.EVENT, description, true, this);"},{"lineNumber":99,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":102,"author":{"gitId":"yanlingkuek"},"content":"        return taskList;"},{"lineNumber":103,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":104}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":" * Represents a task in a task list."},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eTask\u003c/code\u003e."},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     * The task is marked as not done by default."},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of task."},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"    public Task(String description) {"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     * Returns the status icon of the task, based on whether it is done or not."},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"     * @return X for done or SPACE for not done."},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"    public String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or X symbols"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"     * Marks a task as done."},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"    public void markAsDone() {"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"        this.isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n  \" + this);"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"     * Returns a String representation of a task."},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"     * @return String representation of a task."},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":44}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":" * Represents a list of tasks."},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"public class TaskList {"},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"    protected List\u003cTask\u003e taskList;"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eTaskList\u003c/code\u003e when no existing tasks are available."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    public TaskList() {"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eTaskList\u003c/code\u003e when existing tasks are available."},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"     * @param existingTaskList TaskList with existing tasks."},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    public TaskList(TaskList existingTaskList) {"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"        this.taskList \u003d existingTaskList.taskList;"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"     * Returns this task list."},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"     * @param taskNo Task number."},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"     * @return Task for the given task number."},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"    public Task getTask(int taskNo) {"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"        return this.taskList.get(taskNo - 1);"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"    public int getTaskListSize() {"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":"        return this.taskList.size();"},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"     * Adds task to task list."},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"     * @param taskType Type of task."},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of task."},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"     * @param isReadingFile True if a file is being read, false if a file is not being read."},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If description is not given in the correct format."},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"     * @throws IOException If there are any input and output issues."},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"    public void addTask(TaskType taskType, String description, boolean isReadingFile, Storage storage) throws DukeException, IOException {"},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"        Task newTask \u003d new Task(description);"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"        if (taskType \u003d\u003d TaskType.TODO) {"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"            newTask \u003d new ToDoTask(description);"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"        } else if (taskType \u003d\u003d TaskType.DEADLINE) {"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"            String[] descriptionArr \u003d description.split(\" /by \");"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"            if (descriptionArr.length \u003d\u003d 1) {"},{"lineNumber":63,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"Your description is not given in the correct format!\");"},{"lineNumber":64,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":66,"author":{"gitId":"yanlingkuek"},"content":"            Pattern pattern \u003d Pattern.compile(\"^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}$\");"},{"lineNumber":67,"author":{"gitId":"yanlingkuek"},"content":"            Matcher matcher \u003d pattern.matcher(descriptionArr[1]);"},{"lineNumber":68,"author":{"gitId":"yanlingkuek"},"content":"            if (!matcher.find()) {"},{"lineNumber":69,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"Your deadline is given in the wrong format! \""},{"lineNumber":70,"author":{"gitId":"yanlingkuek"},"content":"                        + \"Please make sure it is in the following format: YYYY-MM-DD HH:MM\");"},{"lineNumber":71,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":73,"author":{"gitId":"yanlingkuek"},"content":"            newTask \u003d new DeadlineTask(descriptionArr[0], descriptionArr[1]);"},{"lineNumber":74,"author":{"gitId":"yanlingkuek"},"content":"        } else if (taskType \u003d\u003d TaskType.EVENT) {"},{"lineNumber":75,"author":{"gitId":"yanlingkuek"},"content":"            String[] descriptionArr \u003d description.split(\" /at \");"},{"lineNumber":76,"author":{"gitId":"yanlingkuek"},"content":"            if (descriptionArr.length \u003d\u003d 1) {"},{"lineNumber":77,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"Your description is not given in the correct format!\");"},{"lineNumber":78,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":80,"author":{"gitId":"yanlingkuek"},"content":"            Pattern pattern \u003d Pattern.compile(\"^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}$\");"},{"lineNumber":81,"author":{"gitId":"yanlingkuek"},"content":"            Matcher matcher \u003d pattern.matcher(descriptionArr[1]);"},{"lineNumber":82,"author":{"gitId":"yanlingkuek"},"content":"            if (!matcher.find()) {"},{"lineNumber":83,"author":{"gitId":"yanlingkuek"},"content":"                throw new DukeException(\"Your event date is given in the wrong format! \""},{"lineNumber":84,"author":{"gitId":"yanlingkuek"},"content":"                        + \"Please make sure it is in the following format: YYYY-MM-DD HH:MM\");"},{"lineNumber":85,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":87,"author":{"gitId":"yanlingkuek"},"content":"            newTask \u003d new EventTask(descriptionArr[0], descriptionArr[1]);"},{"lineNumber":88,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"yanlingkuek"},"content":"        this.taskList.add(newTask);"},{"lineNumber":90,"author":{"gitId":"yanlingkuek"},"content":"        if (!isReadingFile) {"},{"lineNumber":91,"author":{"gitId":"yanlingkuek"},"content":"            storage.appendToFile(\"data/duke.txt\", newTask.toString());"},{"lineNumber":92,"author":{"gitId":"yanlingkuek"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \\n\""},{"lineNumber":93,"author":{"gitId":"yanlingkuek"},"content":"                    + \"  \" + newTask + \"\\n\""},{"lineNumber":94,"author":{"gitId":"yanlingkuek"},"content":"                    + \"Now you have \" + this.taskList.size() + \" tasks in the list.\");"},{"lineNumber":95,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":98,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"yanlingkuek"},"content":"     * Deletes task from task list."},{"lineNumber":100,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"yanlingkuek"},"content":"     * @param taskNo Task number."},{"lineNumber":102,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":103,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If task number does not exist."},{"lineNumber":104,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"yanlingkuek"},"content":"    public void deleteTask(int taskNo, Storage storage) throws DukeException, IOException {"},{"lineNumber":106,"author":{"gitId":"yanlingkuek"},"content":"        if (taskNo \u003e this.taskList.size()) {"},{"lineNumber":107,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"☹ OOPS!!! This task number does not exist.\");"},{"lineNumber":108,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":110,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":111,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"  \" + this.taskList.get(taskNo - 1));"},{"lineNumber":112,"author":{"gitId":"yanlingkuek"},"content":"        this.taskList.remove(taskNo - 1);"},{"lineNumber":113,"author":{"gitId":"yanlingkuek"},"content":"        String taskOrTasks \u003d (this.taskList.size() \u003c\u003d 1)"},{"lineNumber":114,"author":{"gitId":"yanlingkuek"},"content":"                ? \" task\""},{"lineNumber":115,"author":{"gitId":"yanlingkuek"},"content":"                : \" tasks\";"},{"lineNumber":116,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"Now you have \" + this.taskList.size() + taskOrTasks + \" in the list.\");"},{"lineNumber":117,"author":{"gitId":"yanlingkuek"},"content":"        FileManager.deleteLine(\"data/duke.txt\", taskNo, storage);"},{"lineNumber":118,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":119,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":121,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks in task list."},{"lineNumber":123,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"yanlingkuek"},"content":"    public void printTaskList() {"},{"lineNumber":125,"author":{"gitId":"yanlingkuek"},"content":"        if (this.taskList.size() \u003d\u003d 0) {"},{"lineNumber":126,"author":{"gitId":"yanlingkuek"},"content":"            System.out.println(\"There are currently no tasks in your list!\");"},{"lineNumber":127,"author":{"gitId":"yanlingkuek"},"content":"        } else {"},{"lineNumber":128,"author":{"gitId":"yanlingkuek"},"content":"            System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":129,"author":{"gitId":"yanlingkuek"},"content":"            for (int i \u003d 1; i \u003c\u003d this.taskList.size(); i++) {"},{"lineNumber":130,"author":{"gitId":"yanlingkuek"},"content":"                System.out.println(i + \".\" + this.taskList.get(i - 1));"},{"lineNumber":131,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":135,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"yanlingkuek"},"content":"     * Prints tasks that match the given date."},{"lineNumber":137,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"yanlingkuek"},"content":"     * @param date Date to be matched to tasks."},{"lineNumber":139,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"yanlingkuek"},"content":"    public void printTasksOn(LocalDate date) {"},{"lineNumber":141,"author":{"gitId":"yanlingkuek"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":142,"author":{"gitId":"yanlingkuek"},"content":"            if (taskList.get(i) instanceof DeadlineTask) {"},{"lineNumber":143,"author":{"gitId":"yanlingkuek"},"content":"                LocalDate deadlineDate \u003d ((DeadlineTask) taskList.get(i)).getDeadlineDate();"},{"lineNumber":144,"author":{"gitId":"yanlingkuek"},"content":"                if (deadlineDate.compareTo(date) \u003d\u003d 0) {"},{"lineNumber":145,"author":{"gitId":"yanlingkuek"},"content":"                    System.out.println(taskList.get(i));"},{"lineNumber":146,"author":{"gitId":"yanlingkuek"},"content":"                }"},{"lineNumber":147,"author":{"gitId":"yanlingkuek"},"content":"            } else if (taskList.get(i) instanceof EventTask) {"},{"lineNumber":148,"author":{"gitId":"yanlingkuek"},"content":"                LocalDate eventDateDate \u003d ((EventTask) taskList.get(i)).getEventDateDate();"},{"lineNumber":149,"author":{"gitId":"yanlingkuek"},"content":"                if (eventDateDate.compareTo(date) \u003d\u003d 0) {"},{"lineNumber":150,"author":{"gitId":"yanlingkuek"},"content":"                    System.out.println(taskList.get(i));"},{"lineNumber":151,"author":{"gitId":"yanlingkuek"},"content":"                }"},{"lineNumber":152,"author":{"gitId":"yanlingkuek"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":156,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":156}},{"path":"src/main/java/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":" * Represents the different task types available."},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"public enum TaskType {"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":"    TODO, DEADLINE, EVENT;"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":6}},{"path":"src/main/java/TaskdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"public class TaskdateCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"    public TaskdateCommand(String description) {"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"        this.type \u003d \"taskdate\";"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"        this.description \u003d description;"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"        this.isExit \u003d false;"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     * Filters out tasks that match given date."},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     * @param tasks Task list."},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"     * @param ui User interface."},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"     * @param storage Storage."},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"     * @throws DukeException If description is in the wrong format or is invalid."},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"        Pattern pattern \u003d Pattern.compile(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");"},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"        Matcher matcher \u003d pattern.matcher(description);"},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"        if (!matcher.find()) {"},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"            throw new DukeException(\"Your deadline is given in the wrong format! \""},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"                    + \"Please make sure it is in the following format: YYYY-MM-DD HH:MM\");"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"            LocalDate date \u003d LocalDate.parse(this.description);"},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"            tasks.printTasksOn(date);"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"            ui.showError(\"This date is invalid!\");"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"    public boolean isExit() {"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"        return this.isExit;"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":42}},{"path":"src/main/java/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":" * Represents a todo task."},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"public class ToDoTask extends Task {"},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":"     * Creates a new instance of \u003ccode\u003eToDoTask\u003c/code\u003e."},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"     * @param description Description of todo task."},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"    public ToDoTask(String description) {"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"     * Returns String representation of todo task."},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"     * @return String representation of todo task."},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"        return \"[T]\" + \"[\" + getStatusIcon() + \"] \" + this.description;"},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":22}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":" * Represents a user interface that interacts with the user."},{"lineNumber":5,"author":{"gitId":"yanlingkuek"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yanlingkuek"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":8,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"yanlingkuek"},"content":"     * Shows the introductory information."},{"lineNumber":10,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"yanlingkuek"},"content":"    public void showWelcome() {"},{"lineNumber":12,"author":{"gitId":"yanlingkuek"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":13,"author":{"gitId":"yanlingkuek"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":14,"author":{"gitId":"yanlingkuek"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"yanlingkuek"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"yanlingkuek"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":18,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":19,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"So here are the rules!: \");"},{"lineNumber":20,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"-- list:  Prints current tasks in the list\\n\""},{"lineNumber":21,"author":{"gitId":"yanlingkuek"},"content":"                + \"-- todo \u003cnameOfToDoTask\u003e:  Adds a todo task to your list\\n\""},{"lineNumber":22,"author":{"gitId":"yanlingkuek"},"content":"                + \"-- deadline \u003cnameOfDeadlineTask\u003e /by \u003cYYYY-MM-DD HH:MM\u003e:  Adds a deadline task to your list\\n\""},{"lineNumber":23,"author":{"gitId":"yanlingkuek"},"content":"                + \"-- event \u003cnameOfEventTask\u003e /at \u003cYYYY-MM-DD HH:MM\u003e:  Adds an event task to your list\\n\""},{"lineNumber":24,"author":{"gitId":"yanlingkuek"},"content":"                + \"-- delete \u003ctaskNumber\u003e:  Deletes specified task\\n\""},{"lineNumber":25,"author":{"gitId":"yanlingkuek"},"content":"                + \"-- done \u003ctaskNumber\u003e:  Marks specified task as done\\n\""},{"lineNumber":26,"author":{"gitId":"yanlingkuek"},"content":"                + \"-- taskdate \u003cYYYY-MM-DD\u003e:  Prints tasks in your list that match the specified date\\n\""},{"lineNumber":27,"author":{"gitId":"yanlingkuek"},"content":"                + \"-- bye:  Exits Duke\");"},{"lineNumber":28,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":30,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yanlingkuek"},"content":"     * Shows the exit information."},{"lineNumber":32,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"yanlingkuek"},"content":"    public void showExit() {"},{"lineNumber":34,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":35,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":37,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"yanlingkuek"},"content":"     * Shows a line break."},{"lineNumber":39,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"yanlingkuek"},"content":"    public void showLine() {"},{"lineNumber":41,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(\"_________________\");"},{"lineNumber":42,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":44,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"yanlingkuek"},"content":"     * Shows error messages."},{"lineNumber":46,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"yanlingkuek"},"content":"     * @param message Error message."},{"lineNumber":48,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"yanlingkuek"},"content":"    public void showError(String message) {"},{"lineNumber":50,"author":{"gitId":"yanlingkuek"},"content":"        System.out.println(message);"},{"lineNumber":51,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"yanlingkuek"},"content":""},{"lineNumber":53,"author":{"gitId":"yanlingkuek"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"yanlingkuek"},"content":"     * Reads user\u0027s command."},{"lineNumber":55,"author":{"gitId":"yanlingkuek"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"yanlingkuek"},"content":"     * @return User\u0027s full command."},{"lineNumber":57,"author":{"gitId":"yanlingkuek"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"yanlingkuek"},"content":"    public String readCommand() {"},{"lineNumber":59,"author":{"gitId":"yanlingkuek"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":60,"author":{"gitId":"yanlingkuek"},"content":"        return sc.nextLine();"},{"lineNumber":61,"author":{"gitId":"yanlingkuek"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yanlingkuek"},"content":"}"}],"authorContributionMap":{"yanlingkuek":62}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yanlingkuek"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"yanlingkuek"},"content":"list"},{"lineNumber":3,"author":{"gitId":"yanlingkuek"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"yanlingkuek"},"content":"event project meeting /at Mon 2-4pm"}],"authorContributionMap":{"yanlingkuek":4}}]
