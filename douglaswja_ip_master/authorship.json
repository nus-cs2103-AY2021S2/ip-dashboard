[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":22,"douglaswja":1}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":" * duke.Duke is a CLI chat-bot that handles task tracking."},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" * @author Douglas Wei Jing Allwood"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" * @author douglas_allwood@u.nus.edu"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"        // Greet the user"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"        System.out.println(\"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\");"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"        DukeBot dukeBot \u003d new DukeBot(scanner);"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"        dukeBot.run();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"douglaswja":16,"-":10}},{"path":"src/main/java/duke/DukeBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import duke.commands.Command;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import duke.tasks.TaskManager;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" * duke.DukeBot is the controller class for the CLI chat-bot duke.Duke."},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":" * duke.DukeBot parses user input Strings for valid commands and thus only"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":" * allows valid commands to be sent to the duke.tasks.TaskManager."},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":" * @author Douglas Wei Jing Allwood"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":" * @author douglas_allwood@u.nus.edu"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"public class DukeBot {"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    private Scanner scanner;"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    private TaskManager taskManager;"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    public DukeBot(Scanner scanner) {"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"        this.scanner \u003d scanner;"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"        Path pathToData \u003d Paths.get(\"data/duke.txt\");"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"        this.taskManager \u003d new TaskManager(pathToData);"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"     * Activates the chat-bot so that it keeps taking inputs from the user via System.in"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"     * until the \"bye\" input is given."},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"     * \u003cp\u003e"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"     * The run method ensures that the user has provided a valid command, otherwise it"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"     * prints out a warning message."},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"    public void run() {"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        while (taskManager.isActive()) {"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"                String input \u003d scanner.nextLine();"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"                String[] inputArr \u003d input.split(\"\\\\s\", 2);"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"                String commandStr \u003d inputArr[0];"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"                String description \u003d inputArr.length \u003d\u003d 2 ? inputArr[1] : \"\";"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"                Command command \u003d Command.get(commandStr);"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"                taskManager.handleCommand(command, description);"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"            } catch (DukeException e) {"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"                System.out.println(e);"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"        this.scanner.close();"},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"}"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":""}],"authorContributionMap":{"douglaswja":54}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" * duke.commands.Command is an Enum class that handles valid commands to the duke.DukeBot chat-bot."},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" * The possible valid commands are:"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" * LIST"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":" * @author Douglas Wei Jing Allwood"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":" * @author douglas_allwood@u.nus.edu"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"public enum Command {"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    LIST(\"list\"),           // For listing all Tasks"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    TODO(\"todo\"),           // For duke.commands.Todo Tasks"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    EVENT(\"event\"),         // For /at Events"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    DEADLINE(\"deadline\"),   // For /by Deadlines"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    DONE(\"done\"),           // For marking a duke.tasks.Task as complete"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    DELETE(\"delete\"),       // For deleting a duke.tasks.Task"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"    END(\"bye\");             // For terminating the duke.DukeBot"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    private final String command;"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    Command(String command) {"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"        this.command \u003d command;"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"     * Returns the command string relevant to the given Enum."},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"     * @return String representing the command for the given Enum"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"    public String getCommand() {"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        return String.valueOf(this.command);"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //@@author Lokesh Gupta"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    //Reused from https://howtodoinjava.com/java/enum/java-enum-string-example/"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Map\u003cString, Command\u003e lookup \u003d new HashMap\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    // Populate the lookup table with all possible duke.commands.Command Enums"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        for (Command cmd : Command.values()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            lookup.put(cmd.getCommand(), cmd);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Searches for the relevant Enum that matches the String command."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param commandStr The String command whose Enum is to be returned"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @return duke.commands.Command Enum that matches the given String command or null"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static Command get(String commandStr) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Command command \u003d lookup.get(commandStr);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (command \u003d\u003d null) throw new DukeException(\"Not a valid command string\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return command;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"     * Overloads Object\u0027s toString method to return the command string instead."},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"douglaswja"},"content":"     * @return The command string"},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"douglaswja"},"content":"        return this.getCommand();"},{"lineNumber":74,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":52,"-":23}},{"path":"src/main/java/duke/commands/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" * An implementation of the duke.tasks.Task class that represents duke.commands.Deadline Tasks."},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" * duke.commands.Deadline tasks are tasks that take a description, track whether they are done or not,"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" * and take a /by parameter, specifying the duke.commands.Deadline time of the duke.commands.Deadline."},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":" * The duke.commands.Deadline class is visually represented with the prefix: [D]"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":" * @author Douglas Wei Jing Allwood"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":" * @author douglas_allwood@u.nus.edu"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"public class Deadline extends Task {"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    protected LocalDate by;"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"        this.by \u003d LocalDate.parse(by.strip());"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"     * Returns the exact String required to Construct this Task."},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"     * @return A String that can be used to construct an equivalent Task."},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"    public String getConstructorString() {"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"        return getDescription() + \" /by \" + by;"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":41}},{"path":"src/main/java/duke/commands/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" * An implementation of the duke.tasks.Task class that represents duke.commands.Event Tasks."},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" * duke.commands.Event tasks are tasks that take a description, track whether they are done or not,"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" * and take an /at parameter, specifying the Date \u0026 Location of the duke.commands.Event."},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":" * The duke.commands.Event class is visually represented with the prefix: [E]"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":" * @author Douglas Wei Jing Allwood"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":" * @author douglas_allwood@u.nus.edu"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"public class Event extends Task {"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    protected LocalDate at;"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    public Event(String description, String at) {"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"        this.at \u003d LocalDate.parse(at.strip());"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"     * Returns the exact String required to Construct this Task."},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"     * @return A String that can be used to construct an equivalent Task."},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"    public String getConstructorString() {"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"        return getDescription() + \" /at \" + at;"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":41}},{"path":"src/main/java/duke/commands/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":" * An implementation of the duke.tasks.Task class that represents To-Do Tasks."},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" * To-Do tasks are tasks that only take a description and track whether they are done or not."},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" * The duke.commands.Todo class is visually represented with the prefix: [T]"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" * @author Douglas Wei Jing Allwood"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" * @author douglas_allwood@u.nus.edu"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"public class Todo extends Task {"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    public Todo(String description) {"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"     * Returns the exact String required to Construct this Task."},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"     * @return A String that can be used to construct an equivalent Task."},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    public String getConstructorString() {"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"        return getDescription();"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":35}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"    private String message;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"    public DukeException(String message) {"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"        this.message \u003d message;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"        return this.message;"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":14}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":" * A base abstract class whose instances represent a unique duke.tasks.Task."},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":" * @author Douglas Wei Jing Allwood"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":" * @author douglas_allwood@u.nus.edu"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"    protected String description;"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    protected Task(String description) {"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"     * Returns the relevant status icon for this task."},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"     * @return A string containing this task\u0027s status icon"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    public String getStatusIcon() {"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"        String icon \u003d isDone ? \"\\u2713\" : \"\\u2718\";"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"        return (\"[\" + icon + \"]\"); //return tick or X symbols within square brackets"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"     * Returns the Task description String."},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"     * @return The Task description String."},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    public String getDescription() {"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"        return description;"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"     * Returns the exact String required to Construct this Task."},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"     * @return A String that can be used to construct an equivalent Task."},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"    public abstract String getConstructorString();"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"     * Returns the isDone instance variable."},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"     * @return The boolean isDone instance variable."},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"    public boolean getIsDone() {"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"        return isDone;"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"     * Marks a task as done."},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"    public void markAsDone() {"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"        this.isDone \u003d true;"},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":"     * Returns the task status icon and description."},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":"     * @return A string containing the task status icon and description"},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"        return this.getStatusIcon() + \" \" + this.description;"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":68}},{"path":"src/main/java/duke/tasks/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import duke.commands.Command;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import duke.commands.Deadline;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import duke.commands.Event;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import duke.commands.Todo;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"import java.util.Locale;"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"import java.nio.file.Path;"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"import java.io.File;"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"import java.io.FileWriter;"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":" * TODO:"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":" * 1. Refactor IO into separate functions that handle all exceptions"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":" *    * Input should return a Scanner and handle any missing directory (createIfMissing) / file exceptions"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":" *    * Output should return void but throw an error if it encounters any problems (and no createIfMissing)"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":" * A controller class that manages the Tasks of each User of the duke.DukeBot."},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":" * The purpose of this class is to allow duke.DukeBot to be used concurrently"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":" * by multiple users by separating static-level duke.tasks.Task members that should"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":" * not be shared by all Users of the duke.tasks.Task class."},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":" * Note, this class assumes that it has been correctly called by the duke.DukeBot"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":" * and that the only possible source of errors are in the User description"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":" * String. (I.e. Assumes the Commands provided are correct or appropriate)"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":" * \u003cp\u003e"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":" * Functionality:"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":" * 1. Create, store, and delete Tasks"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":" * 2. Store meta data about Tasks (e.g. count)"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":" * 3. Print outputs after each action"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"public class TaskManager {"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"    protected boolean isActive;"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"    protected List\u003cTask\u003e taskList;"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"    protected final Path PATH;"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"    public TaskManager(Path PATH) {"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"        this.isActive \u003d true;"},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"        this.PATH \u003d PATH;"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"        downloadStoredDataIfExists(PATH);"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":"     * Loads in Task data from a text file and populates the Task List with it."},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":"     * @param PATH Path instance that points to the text file containing Task data."},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":"    private void downloadStoredDataIfExists(Path PATH) {"},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"        // Check if the data/ parent directory exists, if not create it"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"        File directory \u003d new File(String.valueOf(PATH.getParent()));"},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":"        if (!directory.exists()) {"},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"            directory.mkdir();"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":69,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"            // Initialise scanner on the file"},{"lineNumber":71,"author":{"gitId":"douglaswja"},"content":"            File dataFile \u003d new File(PATH.toString());"},{"lineNumber":72,"author":{"gitId":"douglaswja"},"content":"            Scanner scanner \u003d new Scanner(dataFile);"},{"lineNumber":73,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":74,"author":{"gitId":"douglaswja"},"content":"            // Count how many Tasks are loaded in"},{"lineNumber":75,"author":{"gitId":"douglaswja"},"content":"            int count \u003d 0;"},{"lineNumber":76,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":77,"author":{"gitId":"douglaswja"},"content":"            // Populate taskList"},{"lineNumber":78,"author":{"gitId":"douglaswja"},"content":"            while (scanner.hasNext()) {"},{"lineNumber":79,"author":{"gitId":"douglaswja"},"content":"                String storedTaskArr[] \u003d scanner.nextLine().split(\"\\\\|\", 3);"},{"lineNumber":80,"author":{"gitId":"douglaswja"},"content":"                String taskType \u003d storedTaskArr[0].strip();"},{"lineNumber":81,"author":{"gitId":"douglaswja"},"content":"                String taskIsDone \u003d storedTaskArr[1].strip();"},{"lineNumber":82,"author":{"gitId":"douglaswja"},"content":"                String taskDescription \u003d storedTaskArr[2].strip();"},{"lineNumber":83,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":84,"author":{"gitId":"douglaswja"},"content":"                // Handle each possible Command and its corresponding Task"},{"lineNumber":85,"author":{"gitId":"douglaswja"},"content":"                Task newTask;"},{"lineNumber":86,"author":{"gitId":"douglaswja"},"content":"                Command command \u003d Command.get(taskType);"},{"lineNumber":87,"author":{"gitId":"douglaswja"},"content":"                switch (command) {"},{"lineNumber":88,"author":{"gitId":"douglaswja"},"content":"                case TODO:"},{"lineNumber":89,"author":{"gitId":"douglaswja"},"content":"                    newTask \u003d this.addTodo(taskDescription, false);"},{"lineNumber":90,"author":{"gitId":"douglaswja"},"content":"                    break;"},{"lineNumber":91,"author":{"gitId":"douglaswja"},"content":"                case EVENT:"},{"lineNumber":92,"author":{"gitId":"douglaswja"},"content":"                    newTask \u003d this.addEvent(taskDescription, false);"},{"lineNumber":93,"author":{"gitId":"douglaswja"},"content":"                    break;"},{"lineNumber":94,"author":{"gitId":"douglaswja"},"content":"                case DEADLINE:"},{"lineNumber":95,"author":{"gitId":"douglaswja"},"content":"                    newTask \u003d this.addDeadline(taskDescription, false);"},{"lineNumber":96,"author":{"gitId":"douglaswja"},"content":"                    break;"},{"lineNumber":97,"author":{"gitId":"douglaswja"},"content":"                default:"},{"lineNumber":98,"author":{"gitId":"douglaswja"},"content":"                    throw new DukeException(\"A unrecognised Command was created, update \u0027downloadStoredDataIfExists\u0027.\");"},{"lineNumber":99,"author":{"gitId":"douglaswja"},"content":"                }"},{"lineNumber":100,"author":{"gitId":"douglaswja"},"content":"                if (taskIsDone.equals(\"done\")) {"},{"lineNumber":101,"author":{"gitId":"douglaswja"},"content":"                    newTask.markAsDone();"},{"lineNumber":102,"author":{"gitId":"douglaswja"},"content":"                }"},{"lineNumber":103,"author":{"gitId":"douglaswja"},"content":"                count++;"},{"lineNumber":104,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":106,"author":{"gitId":"douglaswja"},"content":"            if (count \u003e 0) {"},{"lineNumber":107,"author":{"gitId":"douglaswja"},"content":"                System.out.println(count + \" tasks were loaded from storage.\");"},{"lineNumber":108,"author":{"gitId":"douglaswja"},"content":"            } else {"},{"lineNumber":109,"author":{"gitId":"douglaswja"},"content":"                System.out.println(\"No tasks found in storage, initialising empty Task List.\");"},{"lineNumber":110,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"douglaswja"},"content":"        } catch (FileNotFoundException fileNotFoundException) {"},{"lineNumber":112,"author":{"gitId":"douglaswja"},"content":"            System.out.println(\"No such storage file exists: \" + PATH.toString() + \"\\nProceeding without.\");"},{"lineNumber":113,"author":{"gitId":"douglaswja"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":114,"author":{"gitId":"douglaswja"},"content":"            System.out.println(dukeException);"},{"lineNumber":115,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":118,"author":{"gitId":"douglaswja"},"content":"    /** Saves the Tasks in taskList to the PATH location. */"},{"lineNumber":119,"author":{"gitId":"douglaswja"},"content":"    public void saveData() {"},{"lineNumber":120,"author":{"gitId":"douglaswja"},"content":"        // Check if the data/ parent directory exists, if not create it"},{"lineNumber":121,"author":{"gitId":"douglaswja"},"content":"        File directory \u003d new File(String.valueOf(PATH.getParent()));"},{"lineNumber":122,"author":{"gitId":"douglaswja"},"content":"        if (!directory.exists()) {"},{"lineNumber":123,"author":{"gitId":"douglaswja"},"content":"            directory.mkdir();"},{"lineNumber":124,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":126,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"douglaswja"},"content":"            FileWriter fw \u003d new FileWriter(PATH.toString());"},{"lineNumber":128,"author":{"gitId":"douglaswja"},"content":"            fw.write(this.taskListToString());"},{"lineNumber":129,"author":{"gitId":"douglaswja"},"content":"            fw.close();"},{"lineNumber":130,"author":{"gitId":"douglaswja"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitId":"douglaswja"},"content":"            e.printStackTrace();"},{"lineNumber":132,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":135,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"douglaswja"},"content":"     * Returns all the Tasks in the taskList as a single String that can be written to a file."},{"lineNumber":137,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"douglaswja"},"content":"     * @return A String that contains every Task in the taskList, formatted to be written to a file."},{"lineNumber":139,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"douglaswja"},"content":"    private String taskListToString() {"},{"lineNumber":141,"author":{"gitId":"douglaswja"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":142,"author":{"gitId":"douglaswja"},"content":"        for (Task task : taskList) {"},{"lineNumber":143,"author":{"gitId":"douglaswja"},"content":"            String taskDone \u003d task.getIsDone() ? \"done\" : \"not-done\";"},{"lineNumber":144,"author":{"gitId":"douglaswja"},"content":"            String taskString \u003d task.getClass().getSimpleName().toLowerCase() +"},{"lineNumber":145,"author":{"gitId":"douglaswja"},"content":"                    \" | \" + taskDone +"},{"lineNumber":146,"author":{"gitId":"douglaswja"},"content":"                    \" | \" + task.getConstructorString() +"},{"lineNumber":147,"author":{"gitId":"douglaswja"},"content":"                    \"\\n\";"},{"lineNumber":148,"author":{"gitId":"douglaswja"},"content":"            stringBuilder.append(taskString);"},{"lineNumber":149,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"douglaswja"},"content":"        return stringBuilder.toString();"},{"lineNumber":151,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":153,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"douglaswja"},"content":"     * Main access point of the duke.tasks.TaskManager API which handles all duke.tasks.Task functionality."},{"lineNumber":155,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"douglaswja"},"content":"     * @param taskType    A duke.commands.Command Enum representing the relevant command for the given description"},{"lineNumber":157,"author":{"gitId":"douglaswja"},"content":"     * @param description User input String that should NOT contain the command string"},{"lineNumber":158,"author":{"gitId":"douglaswja"},"content":"     *                    E.g. If the user supplies \"todo Eat cake\" then the description is \"eat cake\""},{"lineNumber":159,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"douglaswja"},"content":"    public void handleCommand(Command taskType, String description) {"},{"lineNumber":161,"author":{"gitId":"douglaswja"},"content":"        description \u003d description.strip(); // Remove surrounding whitespace"},{"lineNumber":162,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"douglaswja"},"content":"            switch (taskType) {"},{"lineNumber":164,"author":{"gitId":"douglaswja"},"content":"            case LIST:"},{"lineNumber":165,"author":{"gitId":"douglaswja"},"content":"                this.listAll(description);"},{"lineNumber":166,"author":{"gitId":"douglaswja"},"content":"                break;"},{"lineNumber":167,"author":{"gitId":"douglaswja"},"content":"            case TODO:"},{"lineNumber":168,"author":{"gitId":"douglaswja"},"content":"                this.addTodo(description, true);"},{"lineNumber":169,"author":{"gitId":"douglaswja"},"content":"                this.saveData();"},{"lineNumber":170,"author":{"gitId":"douglaswja"},"content":"                break;"},{"lineNumber":171,"author":{"gitId":"douglaswja"},"content":"            case EVENT:"},{"lineNumber":172,"author":{"gitId":"douglaswja"},"content":"                this.addEvent(description, true);"},{"lineNumber":173,"author":{"gitId":"douglaswja"},"content":"                this.saveData();"},{"lineNumber":174,"author":{"gitId":"douglaswja"},"content":"                break;"},{"lineNumber":175,"author":{"gitId":"douglaswja"},"content":"            case DEADLINE:"},{"lineNumber":176,"author":{"gitId":"douglaswja"},"content":"                this.addDeadline(description, true);"},{"lineNumber":177,"author":{"gitId":"douglaswja"},"content":"                this.saveData();"},{"lineNumber":178,"author":{"gitId":"douglaswja"},"content":"                break;"},{"lineNumber":179,"author":{"gitId":"douglaswja"},"content":"            case DONE:"},{"lineNumber":180,"author":{"gitId":"douglaswja"},"content":"                this.markAsDone(description, true);"},{"lineNumber":181,"author":{"gitId":"douglaswja"},"content":"                this.saveData();"},{"lineNumber":182,"author":{"gitId":"douglaswja"},"content":"                break;"},{"lineNumber":183,"author":{"gitId":"douglaswja"},"content":"            case DELETE:"},{"lineNumber":184,"author":{"gitId":"douglaswja"},"content":"                this.delete(description, true);"},{"lineNumber":185,"author":{"gitId":"douglaswja"},"content":"                this.saveData();"},{"lineNumber":186,"author":{"gitId":"douglaswja"},"content":"                break;"},{"lineNumber":187,"author":{"gitId":"douglaswja"},"content":"            case END:"},{"lineNumber":188,"author":{"gitId":"douglaswja"},"content":"                this.end(description);"},{"lineNumber":189,"author":{"gitId":"douglaswja"},"content":"                break;"},{"lineNumber":190,"author":{"gitId":"douglaswja"},"content":"            default:"},{"lineNumber":191,"author":{"gitId":"douglaswja"},"content":"                // If this error is reached that means that a valid duke.commands.Command Enum was created and has not been"},{"lineNumber":192,"author":{"gitId":"douglaswja"},"content":"                // included in the switch statements above"},{"lineNumber":193,"author":{"gitId":"douglaswja"},"content":"                String errorStr \u003d \"The duke.commands.Command given was not recognised. Try updating the version\";"},{"lineNumber":194,"author":{"gitId":"douglaswja"},"content":"                throw new DukeException(errorStr);"},{"lineNumber":195,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"douglaswja"},"content":"        } catch (DukeException e) {"},{"lineNumber":197,"author":{"gitId":"douglaswja"},"content":"            // Print any errors encountered in the user input string"},{"lineNumber":198,"author":{"gitId":"douglaswja"},"content":"            System.out.println(e);"},{"lineNumber":199,"author":{"gitId":"douglaswja"},"content":"            System.out.println(\"\\n\");"},{"lineNumber":200,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":203,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":204,"author":{"gitId":"douglaswja"},"content":"     * Returns true if the duke.tasks.TaskManager is active."},{"lineNumber":205,"author":{"gitId":"douglaswja"},"content":"     * The duke.tasks.TaskManager becomes inactive once a user sends the END duke.commands.Command."},{"lineNumber":206,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":207,"author":{"gitId":"douglaswja"},"content":"     * @return true if the duke.tasks.TaskManager is active and false otherwise"},{"lineNumber":208,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"douglaswja"},"content":"    public boolean isActive() {"},{"lineNumber":210,"author":{"gitId":"douglaswja"},"content":"        return this.isActive \u003d\u003d true;"},{"lineNumber":211,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":213,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"douglaswja"},"content":"     * Sets the current duke.tasks.TaskManager to be inactive, effectively switching it off."},{"lineNumber":215,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"douglaswja"},"content":"    public void setInactive() {"},{"lineNumber":217,"author":{"gitId":"douglaswja"},"content":"        this.isActive \u003d false;"},{"lineNumber":218,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":220,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"douglaswja"},"content":"     * Sets the current duke.tasks.TaskManager to be active, effectively switching it on."},{"lineNumber":222,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":223,"author":{"gitId":"douglaswja"},"content":"    public void setActive() {"},{"lineNumber":224,"author":{"gitId":"douglaswja"},"content":"        this.isActive \u003d true;"},{"lineNumber":225,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":227,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"douglaswja"},"content":"     * Prints out all existing Tasks that are being stored in the task list."},{"lineNumber":229,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":230,"author":{"gitId":"douglaswja"},"content":"     * @param description The user input which should be an empty String"},{"lineNumber":231,"author":{"gitId":"douglaswja"},"content":"     * @throws DukeException If the description is not an empty String"},{"lineNumber":232,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"douglaswja"},"content":"    protected void listAll(String description) throws DukeException {"},{"lineNumber":234,"author":{"gitId":"douglaswja"},"content":"        if (!description.equals(\"\")) {"},{"lineNumber":235,"author":{"gitId":"douglaswja"},"content":"            String errorStr \u003d \"The list command should be called without \" +"},{"lineNumber":236,"author":{"gitId":"douglaswja"},"content":"                    \"any further descriptor. However, it received the \" +"},{"lineNumber":237,"author":{"gitId":"douglaswja"},"content":"                    \"following descriptor: \" + description;"},{"lineNumber":238,"author":{"gitId":"douglaswja"},"content":"            throw new DukeException(errorStr);"},{"lineNumber":239,"author":{"gitId":"douglaswja"},"content":"        } else {"},{"lineNumber":240,"author":{"gitId":"douglaswja"},"content":"            System.out.println();  // Add space between user input and duke.DukeBot response"},{"lineNumber":241,"author":{"gitId":"douglaswja"},"content":"            System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":242,"author":{"gitId":"douglaswja"},"content":"            int count \u003d 1;"},{"lineNumber":243,"author":{"gitId":"douglaswja"},"content":"            for (Task task : taskList) {"},{"lineNumber":244,"author":{"gitId":"douglaswja"},"content":"                System.out.println(count + \". \" + task);"},{"lineNumber":245,"author":{"gitId":"douglaswja"},"content":"                count++;"},{"lineNumber":246,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":247,"author":{"gitId":"douglaswja"},"content":"            System.out.println(\"\\n\");"},{"lineNumber":248,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":251,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":252,"author":{"gitId":"douglaswja"},"content":"     * Adds a duke.commands.Todo duke.tasks.Task to the task list."},{"lineNumber":253,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":254,"author":{"gitId":"douglaswja"},"content":"     * @param description The description of the duke.commands.Todo duke.tasks.Task"},{"lineNumber":255,"author":{"gitId":"douglaswja"},"content":"     * @throws DukeException If the description string is empty"},{"lineNumber":256,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":257,"author":{"gitId":"douglaswja"},"content":"    protected Task addTodo(String description, boolean isVerbose) throws DukeException {"},{"lineNumber":258,"author":{"gitId":"douglaswja"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":259,"author":{"gitId":"douglaswja"},"content":"            String errorStr \u003d \"The description of a \u0027todo\u0027 cannot be empty.\";"},{"lineNumber":260,"author":{"gitId":"douglaswja"},"content":"            throw new DukeException(errorStr);"},{"lineNumber":261,"author":{"gitId":"douglaswja"},"content":"        } else {"},{"lineNumber":262,"author":{"gitId":"douglaswja"},"content":"            Task newTodo \u003d new Todo(description);"},{"lineNumber":263,"author":{"gitId":"douglaswja"},"content":"            taskList.add(newTodo);"},{"lineNumber":264,"author":{"gitId":"douglaswja"},"content":"            if (isVerbose) {"},{"lineNumber":265,"author":{"gitId":"douglaswja"},"content":"                System.out.println();  // Add space between user input and duke.DukeBot response"},{"lineNumber":266,"author":{"gitId":"douglaswja"},"content":"                System.out.println(\"New to-do added:\\n\" + newTodo);"},{"lineNumber":267,"author":{"gitId":"douglaswja"},"content":"                System.out.println(\"\\n\");"},{"lineNumber":268,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":269,"author":{"gitId":"douglaswja"},"content":"            return newTodo;"},{"lineNumber":270,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":273,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"douglaswja"},"content":"     * Adds an duke.commands.Event duke.tasks.Task to the task list."},{"lineNumber":275,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":276,"author":{"gitId":"douglaswja"},"content":"     * @param description The description of the duke.commands.Event duke.tasks.Task"},{"lineNumber":277,"author":{"gitId":"douglaswja"},"content":"     * @throws DukeException If the description string does not follow the correct format for specifying an duke.commands.Event"},{"lineNumber":278,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":279,"author":{"gitId":"douglaswja"},"content":"    protected Task addEvent(String description, boolean isVerbose) throws DukeException {"},{"lineNumber":280,"author":{"gitId":"douglaswja"},"content":"        String errorStr \u003d \"\";"},{"lineNumber":281,"author":{"gitId":"douglaswja"},"content":"        String descriptor \u003d description.split(\"/at\", 2)[0];"},{"lineNumber":282,"author":{"gitId":"douglaswja"},"content":"        String at \u003d description.split(\"/at\", 2)[1];"},{"lineNumber":283,"author":{"gitId":"douglaswja"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":284,"author":{"gitId":"douglaswja"},"content":"            errorStr \u003d \"The description of an \u0027event\u0027 cannot be empty.\";"},{"lineNumber":285,"author":{"gitId":"douglaswja"},"content":"        } else if (!description.contains(\"/at\")) {"},{"lineNumber":286,"author":{"gitId":"douglaswja"},"content":"            errorStr \u003d \"The description of an \u0027event\u0027 must contain an /at term separating \" +"},{"lineNumber":287,"author":{"gitId":"douglaswja"},"content":"                    \"the descriptor from the Date \u0026 Location. For example: \" +"},{"lineNumber":288,"author":{"gitId":"douglaswja"},"content":"                    \"event Office party /at Marriott Hotel Thursday, 2pm\";"},{"lineNumber":289,"author":{"gitId":"douglaswja"},"content":"        } else if (descriptor.equals(\"\") || at.equals(\"\")) {"},{"lineNumber":290,"author":{"gitId":"douglaswja"},"content":"            errorStr \u003d \"Neither the descriptor nor the Date \u0026 Location can be empty.\\n\" +"},{"lineNumber":291,"author":{"gitId":"douglaswja"},"content":"                    \"Received the following: \" + description;"},{"lineNumber":292,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":293,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":294,"author":{"gitId":"douglaswja"},"content":"        if (!errorStr.equals(\"\")) throw new DukeException(errorStr);"},{"lineNumber":295,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":296,"author":{"gitId":"douglaswja"},"content":"        Task newEvent \u003d new Event(descriptor, at);"},{"lineNumber":297,"author":{"gitId":"douglaswja"},"content":"        taskList.add(newEvent);"},{"lineNumber":298,"author":{"gitId":"douglaswja"},"content":"        if (isVerbose) {"},{"lineNumber":299,"author":{"gitId":"douglaswja"},"content":"            System.out.println();  // Add space between user input and duke.DukeBot response"},{"lineNumber":300,"author":{"gitId":"douglaswja"},"content":"            System.out.println(\"New event added:\\n\" + newEvent);"},{"lineNumber":301,"author":{"gitId":"douglaswja"},"content":"            System.out.println(\"\\n\");"},{"lineNumber":302,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":303,"author":{"gitId":"douglaswja"},"content":"        return newEvent;"},{"lineNumber":304,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":306,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":307,"author":{"gitId":"douglaswja"},"content":"     * Adds a duke.commands.Deadline duke.tasks.Task to the task list."},{"lineNumber":308,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":309,"author":{"gitId":"douglaswja"},"content":"     * @param description The description of the duke.commands.Deadline duke.tasks.Task"},{"lineNumber":310,"author":{"gitId":"douglaswja"},"content":"     * @throws DukeException If the description string does not follow the correct format for specifying a duke.commands.Deadline"},{"lineNumber":311,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":312,"author":{"gitId":"douglaswja"},"content":"    protected Task addDeadline(String description, boolean isVerbose) throws DukeException {"},{"lineNumber":313,"author":{"gitId":"douglaswja"},"content":"        String errorStr \u003d \"\";"},{"lineNumber":314,"author":{"gitId":"douglaswja"},"content":"        String descriptor \u003d description.split(\"/by\", 2)[0];"},{"lineNumber":315,"author":{"gitId":"douglaswja"},"content":"        String by \u003d description.split(\"/by\", 2)[1];"},{"lineNumber":316,"author":{"gitId":"douglaswja"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":317,"author":{"gitId":"douglaswja"},"content":"            errorStr \u003d \"The description of a \u0027deadline\u0027 cannot be empty.\";"},{"lineNumber":318,"author":{"gitId":"douglaswja"},"content":"        } else if (!description.contains(\"/by\")) {"},{"lineNumber":319,"author":{"gitId":"douglaswja"},"content":"            errorStr \u003d \"The description of a \u0027deadline\u0027 must contain a /by term separating \" +"},{"lineNumber":320,"author":{"gitId":"douglaswja"},"content":"                    \"the descriptor from the duke.commands.Deadline time. For example: \" +"},{"lineNumber":321,"author":{"gitId":"douglaswja"},"content":"                    \"event Submit financial reports /by Friday, 6pm\";"},{"lineNumber":322,"author":{"gitId":"douglaswja"},"content":"        } else if (descriptor.equals(\"\") || by.equals(\"\")) {"},{"lineNumber":323,"author":{"gitId":"douglaswja"},"content":"            errorStr \u003d \"Neither the descriptor nor the duke.commands.Deadline time can be empty.\\n\" +"},{"lineNumber":324,"author":{"gitId":"douglaswja"},"content":"                    \"Received the following: \" + description;"},{"lineNumber":325,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":326,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":327,"author":{"gitId":"douglaswja"},"content":"        if (!errorStr.equals(\"\")) throw new DukeException(errorStr);"},{"lineNumber":328,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":329,"author":{"gitId":"douglaswja"},"content":"        Task newDeadline \u003d new Deadline(descriptor, by);"},{"lineNumber":330,"author":{"gitId":"douglaswja"},"content":"        taskList.add(newDeadline);"},{"lineNumber":331,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":332,"author":{"gitId":"douglaswja"},"content":"        if (isVerbose) {"},{"lineNumber":333,"author":{"gitId":"douglaswja"},"content":"            System.out.println();  // Add space between user input and duke.DukeBot response"},{"lineNumber":334,"author":{"gitId":"douglaswja"},"content":"            System.out.println(\"New deadline added:\\n\" + newDeadline);"},{"lineNumber":335,"author":{"gitId":"douglaswja"},"content":"            System.out.println(\"\\n\");"},{"lineNumber":336,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":337,"author":{"gitId":"douglaswja"},"content":"        return newDeadline;"},{"lineNumber":338,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":340,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":341,"author":{"gitId":"douglaswja"},"content":"     * Marks an existing duke.tasks.Task as done."},{"lineNumber":342,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":343,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the (1-indexed) list index of the target task"},{"lineNumber":344,"author":{"gitId":"douglaswja"},"content":"     * @throws DukeException If the description string cannot be parsed as an integer or is outside the valid range"},{"lineNumber":345,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":346,"author":{"gitId":"douglaswja"},"content":"    protected Task markAsDone(String description, boolean isVerbose) throws DukeException {"},{"lineNumber":347,"author":{"gitId":"douglaswja"},"content":"        int doneIndex;"},{"lineNumber":348,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":349,"author":{"gitId":"douglaswja"},"content":"            doneIndex \u003d Integer.parseInt(description);"},{"lineNumber":350,"author":{"gitId":"douglaswja"},"content":"            doneIndex--; // Subtract 1 to account for 0 indexing"},{"lineNumber":351,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":352,"author":{"gitId":"douglaswja"},"content":"            Task doneTask \u003d taskList.get(doneIndex);"},{"lineNumber":353,"author":{"gitId":"douglaswja"},"content":"            doneTask.markAsDone();"},{"lineNumber":354,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":355,"author":{"gitId":"douglaswja"},"content":"            if (isVerbose) {"},{"lineNumber":356,"author":{"gitId":"douglaswja"},"content":"                System.out.println();  // Add space between user input and duke.DukeBot response"},{"lineNumber":357,"author":{"gitId":"douglaswja"},"content":"                System.out.println(\"The following task has been marked as done: \");"},{"lineNumber":358,"author":{"gitId":"douglaswja"},"content":"                System.out.println(doneTask + \"\\n\");"},{"lineNumber":359,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":360,"author":{"gitId":"douglaswja"},"content":"            return doneTask;"},{"lineNumber":361,"author":{"gitId":"douglaswja"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":362,"author":{"gitId":"douglaswja"},"content":"            throw new DukeException(\"The value that follows \u0027done\u0027 must be an integer\");"},{"lineNumber":363,"author":{"gitId":"douglaswja"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":364,"author":{"gitId":"douglaswja"},"content":"            int count \u003d taskList.size();"},{"lineNumber":365,"author":{"gitId":"douglaswja"},"content":"            String errorStr;"},{"lineNumber":366,"author":{"gitId":"douglaswja"},"content":"            if (count \u003d\u003d 0) {"},{"lineNumber":367,"author":{"gitId":"douglaswja"},"content":"                errorStr \u003d \"The list is currently empty so there is no task to be marked as done\";"},{"lineNumber":368,"author":{"gitId":"douglaswja"},"content":"            } else if (count \u003d\u003d 1) {"},{"lineNumber":369,"author":{"gitId":"douglaswja"},"content":"                errorStr \u003d \"The list only has one item. To mark it as done type \u0027done 1\u0027\";"},{"lineNumber":370,"author":{"gitId":"douglaswja"},"content":"            } else {"},{"lineNumber":371,"author":{"gitId":"douglaswja"},"content":"                errorStr \u003d \"The value that follows \u0027done\u0027 must be between 1 and \" + count;"},{"lineNumber":372,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":373,"author":{"gitId":"douglaswja"},"content":"            throw new DukeException(errorStr);"},{"lineNumber":374,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":375,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":376,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":377,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":378,"author":{"gitId":"douglaswja"},"content":"     * Deletes an existing duke.tasks.Task and removes it from the task list."},{"lineNumber":379,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":380,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the (1-indexed) list index of the target task"},{"lineNumber":381,"author":{"gitId":"douglaswja"},"content":"     * @throws DukeException If the description string cannot be parsed as an integer or is outside the valid range"},{"lineNumber":382,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":383,"author":{"gitId":"douglaswja"},"content":"    protected Task delete(String description, boolean isVerbose) throws DukeException {"},{"lineNumber":384,"author":{"gitId":"douglaswja"},"content":"        int deleteIndex;"},{"lineNumber":385,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":386,"author":{"gitId":"douglaswja"},"content":"            deleteIndex \u003d Integer.parseInt(description);"},{"lineNumber":387,"author":{"gitId":"douglaswja"},"content":"            deleteIndex--; // Subtract 1 to account for 0 indexing"},{"lineNumber":388,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":389,"author":{"gitId":"douglaswja"},"content":"            Task deletedTask \u003d taskList.remove(deleteIndex);"},{"lineNumber":390,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":391,"author":{"gitId":"douglaswja"},"content":"            if (isVerbose) {"},{"lineNumber":392,"author":{"gitId":"douglaswja"},"content":"                System.out.println();  // Add space between user input and duke.DukeBot response"},{"lineNumber":393,"author":{"gitId":"douglaswja"},"content":"                System.out.println(\"The following task has been deleted: \");"},{"lineNumber":394,"author":{"gitId":"douglaswja"},"content":"                System.out.println(deletedTask);"},{"lineNumber":395,"author":{"gitId":"douglaswja"},"content":"                System.out.println(\"There are now \" + taskList.size() + \" items in the list.\\n\");"},{"lineNumber":396,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":397,"author":{"gitId":"douglaswja"},"content":"            return deletedTask;"},{"lineNumber":398,"author":{"gitId":"douglaswja"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":399,"author":{"gitId":"douglaswja"},"content":"            throw new DukeException(\"The value that follows \u0027delete\u0027 must be an integer\");"},{"lineNumber":400,"author":{"gitId":"douglaswja"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":401,"author":{"gitId":"douglaswja"},"content":"            int count \u003d taskList.size();"},{"lineNumber":402,"author":{"gitId":"douglaswja"},"content":"            String errorStr;"},{"lineNumber":403,"author":{"gitId":"douglaswja"},"content":"            if (count \u003d\u003d 0) {"},{"lineNumber":404,"author":{"gitId":"douglaswja"},"content":"                errorStr \u003d \"The list is currently empty so there is nothing to delete\";"},{"lineNumber":405,"author":{"gitId":"douglaswja"},"content":"            } else if (count \u003d\u003d 1) {"},{"lineNumber":406,"author":{"gitId":"douglaswja"},"content":"                errorStr \u003d \"The list only has one item. To delete it type \u0027delete 1\u0027\";"},{"lineNumber":407,"author":{"gitId":"douglaswja"},"content":"            } else {"},{"lineNumber":408,"author":{"gitId":"douglaswja"},"content":"                errorStr \u003d \"The value that follows delete must be between 1 and \" + count;"},{"lineNumber":409,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":410,"author":{"gitId":"douglaswja"},"content":"            throw new DukeException(errorStr);"},{"lineNumber":411,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":412,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":414,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":415,"author":{"gitId":"douglaswja"},"content":"     * Deactivates the duke.tasks.TaskManager effectively shutting it down."},{"lineNumber":416,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":417,"author":{"gitId":"douglaswja"},"content":"     * @param description The remainder of the user input String (after removing the command) which should be empty"},{"lineNumber":418,"author":{"gitId":"douglaswja"},"content":"     * @throws DukeException If the user input String contains a non-empty description of if the duke.tasks.TaskManager is already"},{"lineNumber":419,"author":{"gitId":"douglaswja"},"content":"     *                       inactive."},{"lineNumber":420,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":421,"author":{"gitId":"douglaswja"},"content":"    protected void end(String description) throws DukeException {"},{"lineNumber":422,"author":{"gitId":"douglaswja"},"content":"        String errorStr \u003d \"\";"},{"lineNumber":423,"author":{"gitId":"douglaswja"},"content":"        if (!description.equals(\"\")) {"},{"lineNumber":424,"author":{"gitId":"douglaswja"},"content":"            errorStr \u003d \"The terminate command \u0027bye\u0027 should be \" +"},{"lineNumber":425,"author":{"gitId":"douglaswja"},"content":"                    \"called without any further descriptor. However, it \" +"},{"lineNumber":426,"author":{"gitId":"douglaswja"},"content":"                    \"received the following descriptor: \" + description;"},{"lineNumber":427,"author":{"gitId":"douglaswja"},"content":"        } else if (!this.isActive) {"},{"lineNumber":428,"author":{"gitId":"douglaswja"},"content":"            errorStr \u003d \"The duke.DukeBot is currently inactive.\";"},{"lineNumber":429,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":430,"author":{"gitId":"douglaswja"},"content":"        if (!errorStr.equals(\"\")) throw new DukeException(errorStr);"},{"lineNumber":431,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":432,"author":{"gitId":"douglaswja"},"content":"        // Otherwise, set the duke.DukeBot to be inactive"},{"lineNumber":433,"author":{"gitId":"douglaswja"},"content":"        this.setInactive();"},{"lineNumber":434,"author":{"gitId":"douglaswja"},"content":"        System.out.println();"},{"lineNumber":435,"author":{"gitId":"douglaswja"},"content":"        System.out.println(\"DukeBot shutting down.\\n\\n\");"},{"lineNumber":436,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":437,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":438,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":438}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"todo tutorial"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":"deadline homework /by tomorrow"},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"event party /at marriott"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"list"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"list something"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"sleep early tonight"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"done1"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"done 0"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"done 10"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"list"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"delete 3"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"delete 3"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"delete3"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"list"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"bye bye"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"bye"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":""}],"authorContributionMap":{"douglaswja":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"## NOTE THIS FILE MUST BE RUN IN THE text-ui-test DIRECTORY"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"## THE FILE PATHS ARE RELATIVE TO THE DIRECTORY FROM WHICH"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"## IT IS RUN, AND NOT WHERE THE FILE IS LOCATED"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":8,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"then"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":11,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":14,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"then"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":17,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"if ! javac -cp ../../out/production/CS2103 -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":21,"author":{"gitId":"-"},"content":"then"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":24,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":30,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":34,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":35,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":36,"author":{"gitId":"-"},"content":"then"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":39,"author":{"gitId":"-"},"content":"else"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":42,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"douglaswja":5}}]
