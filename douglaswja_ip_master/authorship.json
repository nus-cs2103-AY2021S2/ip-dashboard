[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"1. After that, locate the `src/main/java/dbot.dbot.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":22,"douglaswja":1}},{"path":"src/main/java/dbot/DBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.command.Command;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.exception.DBotException;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" * Entry point of the DBot application."},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" * Initializes the application and starts the interaction with the user."},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"public class DBot {"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    /* Handles IO */"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    private Storage storage;"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    /* Stores all current tasks */"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    private TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    /* Interacts with the User */"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    private Ui ui;"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"     * Initialises the application by instantiating the necessary programs."},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"     * If a text file at filePath exists, it loads the stored tasks."},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"     * @param filePath A String path leading to a text file that has stored Tasks."},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    public DBot(String filePath) {"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"        ui \u003d new Ui();"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"            storage \u003d new Storage(filePath);"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"            tasks \u003d storage.load();"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"        } catch (DBotException e) {"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"            ui.showLoadingError();"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"            tasks \u003d new TaskList(100);"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"     * Runs the DBot program until an Exit command is given via the \u0027bye\u0027 User input."},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"    public void run() {"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"        ui.showWelcome();"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"        boolean isExit \u003d false;"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"        while (!isExit) {"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"                String userInputText \u003d ui.getUserInput();"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"                ui.showLine(); // show the divider line (\"_______\")"},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"                Command c \u003d Parser.parse(userInputText);"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"            } catch (DBotException e) {"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":"            } finally {"},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":"                ui.showLine();"},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"     * Entry point function to start the program."},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":"     * @param args Command line arguments that were passed when executing the java file."},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"    public static void main(String[] args) {"},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":"        new DBot(\"data/tasks.txt\").run();"},{"lineNumber":69,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":70}},{"path":"src/main/java/dbot/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.exception.DBotException;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"import javax.swing.*;"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" * Command is an abstract class that is to be extended to represent any valid user commands supplied to DBot."},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"    /** A String containing the description that this Command\u0027s Task should have. */"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    protected String description;"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    /** A flag representing whether this Command\u0027s Task should be marked as done. */"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    private boolean isDone;"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    /** The index of the Task that this command targets in the TaskList. */"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    private int targetIndex \u003d -1;"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"     * Initialize a command with its corresponding Task to be marked as not done."},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    public Command() {"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"        isDone \u003d false;"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"     * Initialize a command with its corresponding Task to be marked as not done and to have the supplied"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"     * description String."},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the description that the Task corresponding to this Command"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"     *                    should have."},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"    public Command(String description) {"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        this.description \u003d description;"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"        isDone \u003d false;"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"     * Initializes a Command with the specified target index for a 0-indexed TaskList."},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"     * @param targetIndex An integer representing the target index of a 0-indexed TaskList."},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"    public Command(int targetIndex) {"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"        setTargetIndex(targetIndex);"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"     * Sets the target index instance variable."},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"     * @param targetIndex A integer specifying the new target index for the 0-indexed TaskList."},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":"    protected void setTargetIndex(int targetIndex) {"},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":"     * Returns the target index for the 0-indexed TaskList."},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"     * @return An integer specifying the target index for the 0-indexed TaskList."},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"    protected int getTargetIndex() {"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"        return targetIndex;"},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"douglaswja"},"content":"     * Returns the description that was supplied to this Command."},{"lineNumber":72,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"douglaswja"},"content":"     * @return A String containing the description that was supplied to this Command."},{"lineNumber":74,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"douglaswja"},"content":"    public String getDescription() {"},{"lineNumber":76,"author":{"gitId":"douglaswja"},"content":"        return description;"},{"lineNumber":77,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":79,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"douglaswja"},"content":"     * Returns true if this Command is an Exit Command and false otherwise."},{"lineNumber":81,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"douglaswja"},"content":"     * @return True if this is an Exit Command and false otherwise."},{"lineNumber":83,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"douglaswja"},"content":"    public boolean isExit() {"},{"lineNumber":85,"author":{"gitId":"douglaswja"},"content":"        return false;"},{"lineNumber":86,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":88,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"douglaswja"},"content":"     * Returns true if the Task corresponding to this Command is done and false otherwise."},{"lineNumber":90,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"douglaswja"},"content":"     * @return True if this Command\u0027s corresponding Task is done and false otherwise."},{"lineNumber":92,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"douglaswja"},"content":"    public boolean getIsDone() {"},{"lineNumber":94,"author":{"gitId":"douglaswja"},"content":"        return isDone;"},{"lineNumber":95,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":97,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"douglaswja"},"content":"     * Sets a boolean flag representing whether this Command\u0027s corresponding Task is done."},{"lineNumber":99,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"douglaswja"},"content":"     * @param isDone True if this Command\u0027s corresponding Task is done and false otherwise."},{"lineNumber":101,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"douglaswja"},"content":"    public void setIsDone(boolean isDone) {"},{"lineNumber":103,"author":{"gitId":"douglaswja"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":104,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":106,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"douglaswja"},"content":"     * Executes this Command appropriately and provides any relevant response messages to the user."},{"lineNumber":108,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"douglaswja"},"content":"     * @param tasks A TaskList that this Command should be executed on."},{"lineNumber":110,"author":{"gitId":"douglaswja"},"content":"     * @param ui A Ui object that this Task should use to send response messages to the user."},{"lineNumber":111,"author":{"gitId":"douglaswja"},"content":"     * @param storage A Storage object that this Command should use to save the TaskList to if appropriate."},{"lineNumber":112,"author":{"gitId":"douglaswja"},"content":"     * @throws DBotException If the Command cannot be executed because it encounters any errors."},{"lineNumber":113,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"douglaswja"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DBotException;"},{"lineNumber":115,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":116,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"douglaswja"},"content":"     * Executes this Command appropriately without providing any response messages to the user."},{"lineNumber":118,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"douglaswja"},"content":"     * @param tasks A TaskList that this Command should be executed on."},{"lineNumber":120,"author":{"gitId":"douglaswja"},"content":"     * @param storage A Storage object that this Command should use to save the TaskList to if appropriate."},{"lineNumber":121,"author":{"gitId":"douglaswja"},"content":"     * @throws DBotException If the Command cannot be executed because it encounters any errors."},{"lineNumber":122,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"douglaswja"},"content":"    public abstract void quietExecute(TaskList tasks, Storage storage) throws DBotException;"},{"lineNumber":124,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":125,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"douglaswja"},"content":"     * Returns true if the comparison object is an equivalent Command object."},{"lineNumber":127,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"douglaswja"},"content":"     * For a Command to be equivalent it must satisfy all three of the following:"},{"lineNumber":129,"author":{"gitId":"douglaswja"},"content":"     *   - Be of the same concrete class"},{"lineNumber":130,"author":{"gitId":"douglaswja"},"content":"     *   - Have the same description"},{"lineNumber":131,"author":{"gitId":"douglaswja"},"content":"     *   - Have the same boolean flag for whether its corresponding Task is done"},{"lineNumber":132,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"douglaswja"},"content":"     * @param o The comparison Object."},{"lineNumber":134,"author":{"gitId":"douglaswja"},"content":"     * @return True if the comparison object is an equivalent Command and false otherwise."},{"lineNumber":135,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"douglaswja"},"content":"    public boolean equals(Object o) {"},{"lineNumber":138,"author":{"gitId":"douglaswja"},"content":"        if (o \u003d\u003d this) {"},{"lineNumber":139,"author":{"gitId":"douglaswja"},"content":"            return true;"},{"lineNumber":140,"author":{"gitId":"douglaswja"},"content":"        } else if (o instanceof Command) {"},{"lineNumber":141,"author":{"gitId":"douglaswja"},"content":"            Command other \u003d (Command) o;"},{"lineNumber":142,"author":{"gitId":"douglaswja"},"content":"            boolean isSameClass \u003d this.getClass() \u003d\u003d other.getClass();"},{"lineNumber":143,"author":{"gitId":"douglaswja"},"content":"            boolean hasSameDescription \u003d this.getDescription().equals(other.getDescription());"},{"lineNumber":144,"author":{"gitId":"douglaswja"},"content":"            boolean isSameDone \u003d this.getIsDone() \u003d\u003d other.getIsDone();"},{"lineNumber":145,"author":{"gitId":"douglaswja"},"content":"            return isSameClass \u0026\u0026 hasSameDescription \u0026\u0026 isSameDone;"},{"lineNumber":146,"author":{"gitId":"douglaswja"},"content":"        } else {"},{"lineNumber":147,"author":{"gitId":"douglaswja"},"content":"            return false;"},{"lineNumber":148,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":150}},{"path":"src/main/java/dbot/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" * A concrete subclass of Command that implements a Deadline Command."},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    private Task task;"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    private LocalDate by;"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"     * Initializes a Deadline Command with the specified description String and date."},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the description that this Command\u0027s relevant Task should have."},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"     * @param by A LocalDate representing that date of this Command\u0027s relevant Task."},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    public DeadlineCommand(String description, LocalDate by) {"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"        this.by \u003d by;"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"        quietExecute(tasks, storage);"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"        ui.printAddTask(task);"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) {"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"        task \u003d new Deadline(getDescription(), by);"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        task.setDone(getIsDone());"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"        tasks.add(task);"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":42}},{"path":"src/main/java/dbot/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.exception.DBotException;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" * A concrete subclass of Command that implements a Delete Command."},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"    private Task deleteTask;"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"     * Initializes a Deadline Command with the specified target index for a 0-indexed TaskList."},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"     * @param targetIndex An integer representing the target index of a 0-indexed TaskList."},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    public DeleteCommand(int targetIndex) {"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"        super(targetIndex);"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DBotException {"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"        quietExecute(tasks, storage);"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"        ui.printDelete(deleteTask);"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) throws DBotException {"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"            deleteTask \u003d tasks.remove(getTargetIndex() - 1);"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"            String errorMessage;"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"            if (tasks.size() \u003e 0) {"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"                errorMessage \u003d \"Valid indexes are from 1 to \" + tasks.size() + \".\";"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"            } else {"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"                errorMessage \u003d \"The task list is empty and there is nothing to be deleted.\";"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"            throw new DBotException(errorMessage, e);"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":45}},{"path":"src/main/java/dbot/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.exception.DBotException;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" * A concrete subclass of Command that implements a Done Command."},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"done\";"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"    private Task doneTask;"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"     * Initializes a Done Command with the specified target index for a 0-indexed TaskList."},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"     * @param targetIndex An integer representing the target index of a 0-indexed TaskList."},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    public DoneCommand(int targetIndex) {"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"        super(targetIndex);"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DBotException {"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"        quietExecute(tasks, storage);"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"        ui.printDone(doneTask);"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) throws DBotException {"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"            doneTask \u003d tasks.get(getTargetIndex() - 1);"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"            doneTask.setDone(true);"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"            String errorMessage;"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"            if (tasks.size() \u003e 0) {"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"                errorMessage \u003d \"Valid indexes are from 1 to \" + tasks.size() + \".\";"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"            } else {"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"                errorMessage \u003d \"The task list is empty and there is nothing to be marked as done.\";"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"            throw new DBotException(errorMessage, e);"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":46}},{"path":"src/main/java/dbot/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Event;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" * A concrete subclass of Command that implements an Event Command."},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"public class EventCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"event\";"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    private Task task;"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    private LocalDate at;"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"     * Initializes an Event Command with the specified description String and date."},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the description that this Command\u0027s relevant Task should have."},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"     * @param at A LocalDate representing that date of this Command\u0027s relevant Task."},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    public EventCommand(String description, LocalDate at) {"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"        this.at \u003d at;"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"        quietExecute(tasks, storage);"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"        ui.printAddTask(task);"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"        task \u003d new Event(getDescription(), at);"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"        task.setDone(getIsDone());"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        tasks.add(task);"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":41}},{"path":"src/main/java/dbot/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" * A concrete subclass of Command that implements an Exit Command."},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"     * Instantiates an Exit Command."},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    public ExitCommand() {}"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws Storage.StorageOperationException {"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"        storage.save(tasks);"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"        ui.showExitMessage();"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"        throw new IllegalArgumentException(\"The EXIT command cannot be used quietly.\");"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"    public boolean isExit() {"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"        return true;"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":33}},{"path":"src/main/java/dbot/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.exception.DBotException;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"    private String keyword;"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"     * Initializes a Find Command to search for the given keyword."},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"     * @param keyword A String to be matched against the description of Tasks in the TaskList."},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DBotException {"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"        TaskList relevantTasks \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"        for (Task task : tasks) {"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"                relevantTasks.add(task);"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"        ui.printRelevantTasks(relevantTasks);"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) throws DBotException {"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"        throw new IllegalArgumentException(\"The \u0027find\u0027 command cannot be used quietly.\");"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":37}},{"path":"src/main/java/dbot/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" * A concrete subclass of Command that implements a Help Command."},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"public class HelpCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"     * Instantiates a Help Command."},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    public HelpCommand() {}"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"        ui.showHelpMessage();"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"        throw new IllegalArgumentException(\"The \u0027help\u0027 command cannot be used quietly.\");"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":27}},{"path":"src/main/java/dbot/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" * A concrete subclass of Command that implements a List Command."},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"     * Instantiates a List Command."},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    public ListCommand() {}"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"        ui.printTasks(tasks);"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"        throw new IllegalArgumentException(\"The \u0027list\u0027 command cannot be used quietly.\");"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":27}},{"path":"src/main/java/dbot/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.command;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Todo;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"public class TodoCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"    private Task task;"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    public TodoCommand(String description) {"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"        quietExecute(tasks, storage);"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"        ui.printAddTask(task);"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"    public void quietExecute(TaskList tasks, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"        task \u003d new Todo(getDescription());"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"        task.setDone(getIsDone());"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"        tasks.add(task);"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":29}},{"path":"src/main/java/dbot/exception/DBotException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.exception;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":" * DBotException encapsulates all the expected exceptions to be encountered whilst running DBot."},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"public class DBotException extends Exception {"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"    public DBotException(String message) {"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"    public DBotException(Throwable cause) {"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"        super(cause);"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    public DBotException(String message, Throwable cause) {"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"        super(message, cause);"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":19}},{"path":"src/main/java/dbot/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.parser;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.command.Command;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.command.DeadlineCommand;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import dbot.command.EventCommand;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"import dbot.command.ExitCommand;"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"import dbot.command.FindCommand;"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"import dbot.command.HelpCommand;"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"import dbot.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"import dbot.command.TodoCommand;"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"import dbot.exception.DBotException;"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"import java.time.LocalDate;"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":" * Parses user input and generates representative DBot commands."},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"     * Parses user input from direct DBot interactions with the user."},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"     * @param userInputText A String containing the user input."},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"     * @return A Command representing the user input."},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"     * @throws DBotException If the user input cannot be parsed as a valid command."},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"    public static Command parse(String userInputText) throws DBotException {"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"        return Parser.parse(userInputText.strip().split(\"\\\\s+\", 2), false);"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"     * Parses input containing the string representation of a saved Task and recognises whether"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"     * the Task was marked as done."},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"     * @param savedInputText A String containing the string representation of a saved Task."},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"     * @return A Command representing the saved Task."},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"     * @throws DBotException If the input text cannot be parsed as a valid command."},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"    public static Command parseSaved(String savedInputText) throws DBotException {"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"        String[] inputs \u003d savedInputText.strip().split(\"\\\\|\", 3);"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"        boolean commandDone \u003d Boolean.parseBoolean(inputs[1].strip());"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"        return Parser.parse(new String[]{inputs[0], inputs[2]}, commandDone);"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"    private static Command parse(String[] inputs, boolean isDone) throws DBotException {"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"        Command command;"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"            command \u003d parseSwitch(inputs[0].strip(), inputs);"},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"            throw new DBotException(\"Command was not properly called\");"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"            throw new DBotException(\"Date must be specified in YYYY-MM-DD format.\");"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":"        command.setIsDone(isDone);"},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":"        return command;"},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"    private static Command parseSwitch(String commandType, String[] inputs) throws ArrayIndexOutOfBoundsException,"},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":"            DateTimeParseException {"},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"        // Variables that are used in the switch case"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"        Command command;"},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":"        String commandDescription;"},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"        String[] descriptors;"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"        switch (commandType) {"},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":"        case TodoCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"douglaswja"},"content":"            commandDescription \u003d inputs[1].strip();"},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"            command \u003d new TodoCommand(commandDescription);"},{"lineNumber":71,"author":{"gitId":"douglaswja"},"content":"            break;"},{"lineNumber":72,"author":{"gitId":"douglaswja"},"content":"        case EventCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"douglaswja"},"content":"            commandDescription \u003d inputs[1].strip();"},{"lineNumber":74,"author":{"gitId":"douglaswja"},"content":"            descriptors \u003d commandDescription.split(\"/at\", 2);"},{"lineNumber":75,"author":{"gitId":"douglaswja"},"content":"            command \u003d new EventCommand(descriptors[0].strip(), LocalDate.parse(descriptors[1].strip()));"},{"lineNumber":76,"author":{"gitId":"douglaswja"},"content":"            break;"},{"lineNumber":77,"author":{"gitId":"douglaswja"},"content":"        case DeadlineCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitId":"douglaswja"},"content":"            commandDescription \u003d inputs[1].strip();"},{"lineNumber":79,"author":{"gitId":"douglaswja"},"content":"            descriptors \u003d commandDescription.split(\"/by\", 2);"},{"lineNumber":80,"author":{"gitId":"douglaswja"},"content":"            command \u003d new DeadlineCommand(descriptors[0].strip(), LocalDate.parse(descriptors[1].strip()));"},{"lineNumber":81,"author":{"gitId":"douglaswja"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"douglaswja"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitId":"douglaswja"},"content":"            command \u003d new ListCommand();"},{"lineNumber":84,"author":{"gitId":"douglaswja"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"douglaswja"},"content":"        case DoneCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitId":"douglaswja"},"content":"            // E.g. \"done 3 __the_rest_is_to_be_ignored__\" marks the 3rd Task as complete"},{"lineNumber":87,"author":{"gitId":"douglaswja"},"content":"            commandDescription \u003d inputs[1].strip();"},{"lineNumber":88,"author":{"gitId":"douglaswja"},"content":"            command \u003d new DoneCommand(Integer.parseInt(commandDescription));"},{"lineNumber":89,"author":{"gitId":"douglaswja"},"content":"            break;"},{"lineNumber":90,"author":{"gitId":"douglaswja"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitId":"douglaswja"},"content":"            // E.g. \"delete 3 __the_rest_is_to_be_ignored__\" deletes the 3rd Task"},{"lineNumber":92,"author":{"gitId":"douglaswja"},"content":"            commandDescription \u003d inputs[1].strip();"},{"lineNumber":93,"author":{"gitId":"douglaswja"},"content":"            command \u003d new DeleteCommand(Integer.parseInt(commandDescription));"},{"lineNumber":94,"author":{"gitId":"douglaswja"},"content":"            break;"},{"lineNumber":95,"author":{"gitId":"douglaswja"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitId":"douglaswja"},"content":"            command \u003d new ExitCommand();"},{"lineNumber":97,"author":{"gitId":"douglaswja"},"content":"            break;"},{"lineNumber":98,"author":{"gitId":"douglaswja"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitId":"douglaswja"},"content":"            command \u003d new FindCommand(inputs[1].strip());"},{"lineNumber":100,"author":{"gitId":"douglaswja"},"content":"            break;"},{"lineNumber":101,"author":{"gitId":"douglaswja"},"content":"        case HelpCommand.COMMAND_WORD: // Fallthrough"},{"lineNumber":102,"author":{"gitId":"douglaswja"},"content":"        default:"},{"lineNumber":103,"author":{"gitId":"douglaswja"},"content":"            command \u003d new HelpCommand();"},{"lineNumber":104,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"douglaswja"},"content":"        return command;"},{"lineNumber":106,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"douglaswja"},"content":"}"},{"lineNumber":108,"author":{"gitId":"douglaswja"},"content":""}],"authorContributionMap":{"douglaswja":108}},{"path":"src/main/java/dbot/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.storage;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.command.Command;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.exception.DBotException;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":" * The Storage class handles all file reading and writing operations that DBot might have."},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    /** Default file path used if the user does not provide a file name. */"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"addressbook.txt\";"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    public final Path path;"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"     * Initializes a default Storage instance that uses the default file path."},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"     * @throws InvalidStorageFilePathException if the default path is invalid"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"    public Storage() throws InvalidStorageFilePathException {"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"        this(DEFAULT_STORAGE_FILEPATH);"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"     * Initializes a Storage instance for the given file path."},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"     * @param filePath A String providing the location of the file to read and write data to."},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"     * @throws InvalidStorageFilePathException If the given file path is invalid."},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"    public Storage(String filePath) throws InvalidStorageFilePathException {"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"        path \u003d Paths.get(filePath);"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"        if (!isValidPath(path)) {"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"     * Saves the given TaskList by writing it to a file, creating one if one does not already exist."},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"     * @param tasks The TaskList to be saved."},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"     * @throws StorageOperationException If the file cannot be written to."},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"    public void save(TaskList tasks) throws StorageOperationException {"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"            if (Files.notExists(path)) {"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"                Files.createDirectories(path.getParent());"},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":"                Files.createFile(path);"},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":"            FileWriter fw \u003d new FileWriter(path.toString());"},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":"            fw.write(tasks.encode());"},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"            fw.close();"},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":"        } catch (IOException e) {"},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"            throw new StorageOperationException(e);"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":"     * Loads and returns a TaskList from the file path this storage instance was instantiated with."},{"lineNumber":69,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"     * @return A TaskList containing the Tasks that were read from a file."},{"lineNumber":71,"author":{"gitId":"douglaswja"},"content":"     * @throws DBotException If the file cannot be found or if a line in the file cannot be parsed as a"},{"lineNumber":72,"author":{"gitId":"douglaswja"},"content":"     * command."},{"lineNumber":73,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"douglaswja"},"content":"    public TaskList load() throws DBotException {"},{"lineNumber":75,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"douglaswja"},"content":"            File file \u003d new File(path.toString());"},{"lineNumber":77,"author":{"gitId":"douglaswja"},"content":"            Scanner scanner \u003d new Scanner(file);"},{"lineNumber":78,"author":{"gitId":"douglaswja"},"content":"            return loadFromScanner(scanner);"},{"lineNumber":79,"author":{"gitId":"douglaswja"},"content":"        } catch (FileNotFoundException | DBotException e) {"},{"lineNumber":80,"author":{"gitId":"douglaswja"},"content":"            throw new InvalidStorageFilePathException(e);"},{"lineNumber":81,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":84,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"douglaswja"},"content":"     * Helper function to load a TaskList from a Scanner object."},{"lineNumber":86,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"douglaswja"},"content":"     * @param scanner A Scanner that provides saved Tasks when iterated over."},{"lineNumber":88,"author":{"gitId":"douglaswja"},"content":"     * @return A TaskList containing the Tasks that were read from the scanner."},{"lineNumber":89,"author":{"gitId":"douglaswja"},"content":"     * @throws DBotException If a line provided by the Scanner cannot be parsed as a command."},{"lineNumber":90,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"douglaswja"},"content":"    private TaskList loadFromScanner(Scanner scanner) throws DBotException {"},{"lineNumber":92,"author":{"gitId":"douglaswja"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":93,"author":{"gitId":"douglaswja"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":94,"author":{"gitId":"douglaswja"},"content":"            Command command \u003d Parser.parseSaved(scanner.nextLine());"},{"lineNumber":95,"author":{"gitId":"douglaswja"},"content":"            command.quietExecute(tasks, this);"},{"lineNumber":96,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"douglaswja"},"content":"        return tasks;"},{"lineNumber":98,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":100,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"douglaswja"},"content":"     * Returns the Path as a String."},{"lineNumber":102,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"douglaswja"},"content":"     * @return A String representation of the Path."},{"lineNumber":104,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"douglaswja"},"content":"    public String getPath() {"},{"lineNumber":106,"author":{"gitId":"douglaswja"},"content":"        return path.toString();"},{"lineNumber":107,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":109,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"douglaswja"},"content":"     * Returns true if the provided Path is valid and false otherwise."},{"lineNumber":111,"author":{"gitId":"douglaswja"},"content":"     * A Path is valid if it ends with \u0027.txt\u0027."},{"lineNumber":112,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"douglaswja"},"content":"     * @param path The Path to be checked for validity."},{"lineNumber":114,"author":{"gitId":"douglaswja"},"content":"     * @return True if the Path is valid and false otherwise."},{"lineNumber":115,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"douglaswja"},"content":"    private boolean isValidPath(Path path) {"},{"lineNumber":117,"author":{"gitId":"douglaswja"},"content":"        // Must be a human-editable file"},{"lineNumber":118,"author":{"gitId":"douglaswja"},"content":"        return path.toString().endsWith(\".txt\");"},{"lineNumber":119,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":121,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":122,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"douglaswja"},"content":"     * Signals that the given file path does not fulfill the storage filepath constraints."},{"lineNumber":124,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"douglaswja"},"content":"    public static class InvalidStorageFilePathException extends DBotException {"},{"lineNumber":126,"author":{"gitId":"douglaswja"},"content":"        public InvalidStorageFilePathException(String message) {"},{"lineNumber":127,"author":{"gitId":"douglaswja"},"content":"            super(message);"},{"lineNumber":128,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":130,"author":{"gitId":"douglaswja"},"content":"        public InvalidStorageFilePathException(Throwable cause) {"},{"lineNumber":131,"author":{"gitId":"douglaswja"},"content":"            super(cause);"},{"lineNumber":132,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":135,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"douglaswja"},"content":"     * Signals that some error has occurred while trying to read/write data between the application"},{"lineNumber":137,"author":{"gitId":"douglaswja"},"content":"     * and the storage file."},{"lineNumber":138,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"douglaswja"},"content":"    public static class StorageOperationException extends DBotException {"},{"lineNumber":140,"author":{"gitId":"douglaswja"},"content":"        public StorageOperationException(String message) {"},{"lineNumber":141,"author":{"gitId":"douglaswja"},"content":"            super(message);"},{"lineNumber":142,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":144,"author":{"gitId":"douglaswja"},"content":"        public StorageOperationException(Throwable cause) {"},{"lineNumber":145,"author":{"gitId":"douglaswja"},"content":"            super(cause);"},{"lineNumber":146,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":148}},{"path":"src/main/java/dbot/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.task;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" * An implementation of the Task class that represents Deadline Tasks."},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" * Deadline tasks are tasks that take a description and a /by parameter which specifies the date of the Deadline."},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" * The Deadline class is visually represented with the prefix: [D]"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"public class Deadline extends Task {"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    protected LocalDate by;"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"     * Initializes a Deadline Task with the provided description String and date."},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the Deadline description."},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"     * @param by A LocalDate that represents the date of the Deadline."},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"        this.by \u003d by;"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"     * Returns the exact String required to construct a replicate of this Deadline Task."},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"     * @return A String that can be used to construct a replicate Deadline Task."},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"    public String getFullDescription() {"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"        return getDescription() + \" /by \" + by;"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"     * Returns this Deadline Task with its representative prefix: [D]."},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"     * @return A String representing this Deadline Task with the prefix [D]."},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":48}},{"path":"src/main/java/dbot/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.task;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":" * An implementation of the Task class that represents an Event Task."},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" * Event tasks are tasks that take a description and an /at parameter which specifies the date of the Event."},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" * The Event class is visually represented with the prefix: [E]"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"    /** The Date on which the event is held at. */"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"    protected LocalDate at;"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"     * Initializes an Event Task with the provided description String and date."},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the Event description."},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"     * @param at A LocalDate that represents the date of the Event."},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"        this.at \u003d at;"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"     * Returns the exact String required to construct a replicate of this Event Task."},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"     * @return A String that can be used to construct a replicate Event Task."},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"    public String getFullDescription() {"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"        return getDescription() + \" /at \" + at;"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"     * Returns this Event Task with its representative prefix: [E]."},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"     * @return A String representing this Event Task with the prefix [E]."},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":47}},{"path":"src/main/java/dbot/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.task;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":" * A base abstract class whose instances represent a unique Task."},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"    /** The Task description. */"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"    /** A flag indicating whether the Task is done. */"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"     * Instantiates a Task with the provided description."},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the description of the Task."},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    protected Task(String description) {"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"     * Returns the relevant status icon for this task."},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"     * @return A string containing this task\u0027s status icon."},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    protected String getStatusIcon() {"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"        String icon \u003d isDone ? \"\\u2713\" : \"\\u2718\";"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"        return (\"[\" + icon + \"]\"); //return tick or X symbols within square brackets"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"     * Returns the Task description String."},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"     * @return The Task description String."},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"    public String getDescription() {"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"        return description;"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"     * Returns the String required to construct a replicate of this Task."},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"     * The replicate must have all its properties match the original Task, e.g. whether it is marked as done."},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"     * @return A String that can be used to construct a replicate Task."},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"    public abstract String getFullDescription();"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"     * Returns a boolean indicating whether the task is done."},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"     * @return A boolean indicating whether the task is done."},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"    public boolean getDone() {"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"        return isDone;"},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":"     * Marks a task as done."},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"     * Returns the task status icon and description."},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"douglaswja"},"content":"     * @return A string containing the task status icon and description."},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"douglaswja"},"content":"        return getStatusIcon() + \" \" + getDescription();"},{"lineNumber":74,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":75}},{"path":"src/main/java/dbot/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.task;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":" * An implementation of Task class that represents Todo Tasks."},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":" * Todo tasks are tasks that only take a description and track whether they are done or not."},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" * The Todo class is visually represented with the prefix: [T]"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"public class Todo extends Task {"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"     * Initialises a Todo task with the description String."},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"     * @param description A String containing the Todo task description."},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    public Todo(String description) {"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"     * Returns the exact String required to construct a replicate of this Todo Task."},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"     * @return A String that can be used to construct a replicate Todo Task."},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"    public String getFullDescription() {"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"        return getDescription();"},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"     * Returns this Todo Task with its representative prefix: [T]."},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"     * @return A String representing this Todo Task with the prefix [T]."},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":41}},{"path":"src/main/java/dbot/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.tasklist;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":" * Stores a List of Tasks and manages getting, adding, removing, and encoding Tasks."},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":" *"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":" * Encoding Tasks involves converting a TaskList instance to a String representation that can be written"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":" * to a file and loaded from in the future."},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"     * Initialises a TaskList with space for 100 entries."},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"     * The number of entries that can be stored will automatically increase beyond 100 if"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"     * the user attempts to add more Tasks."},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"        this(100);"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"     * Initialises a TaskList with space for the specified number of initial entries."},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"     * The number of entries that can be stored will automatically increase  if the user attempts to add"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":"     * more Tasks."},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"     * @param initialSize The initial capacity of the TaskList."},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"    public TaskList(int initialSize) {"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"        super(initialSize);"},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"     * Returns a string representation of the TaskList that can be written to a file and loaded in the future"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"     * to generate a similar TaskList object."},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"     * The encode method stores all the necessary information to create a replica TaskList whereby"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"     * every Task contained has the same properties as the TaskList that was encoded."},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"     * @return A String representation of this TaskList that can be stored and/or used to create a replicate TaskList."},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"    public String encode() {"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"        for (Task task : this) {"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"            String taskName \u003d task.getClass().getSimpleName().toLowerCase();"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":"            boolean isDone \u003d task.getDone();"},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"            String fullDescription \u003d task.getFullDescription();"},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"            stringBuilder.append(taskName + \"|\" + isDone + \"|\" + fullDescription + \"\\n\");"},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"        return stringBuilder.toString();"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":56}},{"path":"src/main/java/dbot/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.ui;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.task.Task;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.tasklist.TaskList;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import java.io.InputStream;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"import java.io.PrintStream;"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":" * A User-Interface class that handles interaction with the User including"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":" * getting user input and printing responses."},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":" */"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"public class Ui {"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"    private final String NAME \u003d \"DougBot\";"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    private static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"    private final Scanner in;"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"    private final PrintStream out;"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"    private final PrintStream err;"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"     * Initializes the default Ui which uses the standard input, output, and error streams."},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"     * These are the streams that the DBot will use to interact with a user."},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"douglaswja"},"content":"    public Ui() {"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"        this(System.in, System.out, System.err);"},{"lineNumber":28,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":30,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"douglaswja"},"content":"     * Initializes a Ui according to the specified Input Stream, Print Stream, and Error Stream provided."},{"lineNumber":32,"author":{"gitId":"douglaswja"},"content":"     * These are the streams that the DBot will use to interact with a user."},{"lineNumber":33,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"douglaswja"},"content":"     * @param in The InputStream that DBot should receive user inputs from."},{"lineNumber":35,"author":{"gitId":"douglaswja"},"content":"     * @param out The PrintStream that DBot should print standard messages to."},{"lineNumber":36,"author":{"gitId":"douglaswja"},"content":"     * @param err The PrintStream that DBot should print error messages to."},{"lineNumber":37,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"douglaswja"},"content":"    public Ui(InputStream in, PrintStream out, PrintStream err) {"},{"lineNumber":39,"author":{"gitId":"douglaswja"},"content":"        this.in \u003d new Scanner(in);"},{"lineNumber":40,"author":{"gitId":"douglaswja"},"content":"        this.out \u003d out;"},{"lineNumber":41,"author":{"gitId":"douglaswja"},"content":"        this.err \u003d err;"},{"lineNumber":42,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":44,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"douglaswja"},"content":"     * Shows the user an error specifying that stored tasks could not be loaded into DBot."},{"lineNumber":46,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"douglaswja"},"content":"    public void showLoadingError() {"},{"lineNumber":48,"author":{"gitId":"douglaswja"},"content":"        out.println(\"ERROR: Could not load from storage.\");"},{"lineNumber":49,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":51,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"douglaswja"},"content":"     * Shows the user a welcome message."},{"lineNumber":53,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"douglaswja"},"content":"    public void showWelcome() {"},{"lineNumber":55,"author":{"gitId":"douglaswja"},"content":"        out.println(\"Welcome to \" + NAME + \".\");"},{"lineNumber":56,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":58,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"douglaswja"},"content":"     * Requests for the user\u0027s input."},{"lineNumber":60,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"douglaswja"},"content":"     * @return A String containing the users input."},{"lineNumber":62,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"douglaswja"},"content":"    public String getUserInput() {"},{"lineNumber":64,"author":{"gitId":"douglaswja"},"content":"        out.print(\"Enter command: \");"},{"lineNumber":65,"author":{"gitId":"douglaswja"},"content":"        String fullUserInput \u003d in.nextLine();"},{"lineNumber":66,"author":{"gitId":"douglaswja"},"content":"        return fullUserInput.strip();"},{"lineNumber":67,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":69,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"douglaswja"},"content":"     * Shows the user a line that acts as a divider between IO interactions."},{"lineNumber":71,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"douglaswja"},"content":"    public void showLine() {"},{"lineNumber":73,"author":{"gitId":"douglaswja"},"content":"        out.println(DIVIDER);"},{"lineNumber":74,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":76,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"douglaswja"},"content":"     * Shows the user the Task that was added."},{"lineNumber":78,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"douglaswja"},"content":"     * @param task The Task that was added."},{"lineNumber":80,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"douglaswja"},"content":"    public void printAddTask(Task task) {"},{"lineNumber":82,"author":{"gitId":"douglaswja"},"content":"        out.println(\"Added: \" + task.toString());"},{"lineNumber":83,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":85,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"douglaswja"},"content":"     * Shows the user a list of all existing Tasks."},{"lineNumber":87,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"douglaswja"},"content":"     * @param tasks An iterable List storing all the users Tasks."},{"lineNumber":89,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"douglaswja"},"content":"    public void printTasks(TaskList tasks) {"},{"lineNumber":91,"author":{"gitId":"douglaswja"},"content":"        for (Task task : tasks) {"},{"lineNumber":92,"author":{"gitId":"douglaswja"},"content":"            out.println(task.toString());"},{"lineNumber":93,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":96,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"douglaswja"},"content":"     * Shows the user the Task that was marked as done."},{"lineNumber":98,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"douglaswja"},"content":"     * @param doneTask The Task that was marked as done."},{"lineNumber":100,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"douglaswja"},"content":"    public void printDone(Task doneTask) {"},{"lineNumber":102,"author":{"gitId":"douglaswja"},"content":"        out.println(\"Completed: \" + doneTask.toString());"},{"lineNumber":103,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":105,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"douglaswja"},"content":"     * Shows the user the Task that was deleted."},{"lineNumber":107,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"douglaswja"},"content":"     * @param deleteTask The Task that was deleted."},{"lineNumber":109,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"douglaswja"},"content":"    public void printDelete(Task deleteTask) {"},{"lineNumber":111,"author":{"gitId":"douglaswja"},"content":"        out.println(\"Deleted: \" + deleteTask.toString());"},{"lineNumber":112,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":114,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"douglaswja"},"content":"     * Shows the user an exit message."},{"lineNumber":116,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"douglaswja"},"content":"    public void showExitMessage() {"},{"lineNumber":118,"author":{"gitId":"douglaswja"},"content":"        out.println(\"Goodbye.\");"},{"lineNumber":119,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":121,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"douglaswja"},"content":"     * Shows the user the Help message."},{"lineNumber":123,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"douglaswja"},"content":"    public void showHelpMessage() {"},{"lineNumber":125,"author":{"gitId":"douglaswja"},"content":"        String helpMessage \u003d \"Use any of the following commands:\\n\" +"},{"lineNumber":126,"author":{"gitId":"douglaswja"},"content":"                \"To view all stored tasks: list\\n\" +"},{"lineNumber":127,"author":{"gitId":"douglaswja"},"content":"                \"To find relevant stored tasks: find TERM\\n\" +"},{"lineNumber":128,"author":{"gitId":"douglaswja"},"content":"                \"To add a new \u0027todo\u0027: todo DESC\\n\" +"},{"lineNumber":129,"author":{"gitId":"douglaswja"},"content":"                \"To add a new \u0027event\u0027: event DESC /at DATE\\n\" +"},{"lineNumber":130,"author":{"gitId":"douglaswja"},"content":"                \"To add a new \u0027deadline\u0027: deadline DESC /by DATE\\n\" +"},{"lineNumber":131,"author":{"gitId":"douglaswja"},"content":"                \"To terminate DBot and save existing tasks: bye\\n\\n\" +"},{"lineNumber":132,"author":{"gitId":"douglaswja"},"content":"                \"\\tDESC - Description of the task\\n\" +"},{"lineNumber":133,"author":{"gitId":"douglaswja"},"content":"                \"\\tDATE - Date of the task in YYYY-MM-DD format\\n\" +"},{"lineNumber":134,"author":{"gitId":"douglaswja"},"content":"                \"\\tTERM - A search term that should match a part of a Tasks description\";"},{"lineNumber":135,"author":{"gitId":"douglaswja"},"content":"        out.println(helpMessage);"},{"lineNumber":136,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":138,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"douglaswja"},"content":"     * Shows the user an error message via the appropriate PrintStream."},{"lineNumber":140,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"douglaswja"},"content":"     * @param message The error message to show to the user."},{"lineNumber":142,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"douglaswja"},"content":"    public void showError(String message) {"},{"lineNumber":144,"author":{"gitId":"douglaswja"},"content":"        err.println(message);"},{"lineNumber":145,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":147,"author":{"gitId":"douglaswja"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"douglaswja"},"content":"     * Shows the user a list of relevant Tasks."},{"lineNumber":149,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"douglaswja"},"content":"     * This method is to be called when a user attempts to find a Task via the Find Command."},{"lineNumber":151,"author":{"gitId":"douglaswja"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"douglaswja"},"content":"     * @param relevantTasks A TaskList containing relevant Tasks."},{"lineNumber":153,"author":{"gitId":"douglaswja"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"douglaswja"},"content":"    public void printRelevantTasks(TaskList relevantTasks) {"},{"lineNumber":155,"author":{"gitId":"douglaswja"},"content":"        out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":156,"author":{"gitId":"douglaswja"},"content":"        printTasks(relevantTasks);"},{"lineNumber":157,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":158}},{"path":"src/test/java/dbot/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.parser;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import dbot.command.Command;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"import dbot.command.TodoCommand;"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import dbot.exception.DBotException;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"public class ParserTest {"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"    public void parseInput_validTodoCommand_InitTodoCommand() {"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"        String todoDescription \u003d \"LOREM IPSUM TEXT\";"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"        String userInput \u003d \"todo \" + todoDescription;"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"            Command expectedTodo \u003d new TodoCommand(todoDescription);"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":"            Command actualTodo \u003d Parser.parse(userInput);"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"            assertEquals(expectedTodo, actualTodo);"},{"lineNumber":21,"author":{"gitId":"douglaswja"},"content":"        } catch (DBotException e) {"},{"lineNumber":22,"author":{"gitId":"douglaswja"},"content":"            fail(\"Duke Exception should not be thrown.\");"},{"lineNumber":23,"author":{"gitId":"douglaswja"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":25}},{"path":"src/test/java/dbot/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"package dbot.storage;"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"public class StorageTest {"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"    public void initStorage_illegalPath_invalidStorageFilePathException() {"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"        assertThrows("},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"                Storage.InvalidStorageFilePathException.class,"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"                        () -\u003e { new Storage(\"invalid.invalid\");});"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"        assertThrows("},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"                Storage.InvalidStorageFilePathException.class,"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"                        () -\u003e { new Storage(\"txt\");});"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"}"}],"authorContributionMap":{"douglaswja":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"douglaswja"},"content":"todo tutorial"},{"lineNumber":2,"author":{"gitId":"douglaswja"},"content":"deadline homework /by tomorrow"},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"event party /at marriott"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"list"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"list something"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":"sleep early tonight"},{"lineNumber":7,"author":{"gitId":"douglaswja"},"content":"done1"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"douglaswja"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"done 0"},{"lineNumber":11,"author":{"gitId":"douglaswja"},"content":"done 10"},{"lineNumber":12,"author":{"gitId":"douglaswja"},"content":"list"},{"lineNumber":13,"author":{"gitId":"douglaswja"},"content":"delete 3"},{"lineNumber":14,"author":{"gitId":"douglaswja"},"content":"delete 3"},{"lineNumber":15,"author":{"gitId":"douglaswja"},"content":"delete3"},{"lineNumber":16,"author":{"gitId":"douglaswja"},"content":"list"},{"lineNumber":17,"author":{"gitId":"douglaswja"},"content":"bye bye"},{"lineNumber":18,"author":{"gitId":"douglaswja"},"content":"bye"},{"lineNumber":19,"author":{"gitId":"douglaswja"},"content":""}],"authorContributionMap":{"douglaswja":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"douglaswja"},"content":"## NOTE THIS FILE MUST BE RUN IN THE text-ui-test DIRECTORY"},{"lineNumber":4,"author":{"gitId":"douglaswja"},"content":"## THE FILE PATHS ARE RELATIVE TO THE DIRECTORY FROM WHICH"},{"lineNumber":5,"author":{"gitId":"douglaswja"},"content":"## IT IS RUN, AND NOT WHERE THE FILE IS LOCATED"},{"lineNumber":6,"author":{"gitId":"douglaswja"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":8,"author":{"gitId":"douglaswja"},"content":"if [ ! -d \"../bin/dbot\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"then"},{"lineNumber":10,"author":{"gitId":"douglaswja"},"content":"    mkdir ../bin/dbot"},{"lineNumber":11,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":14,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"then"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":17,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":20,"author":{"gitId":"douglaswja"},"content":"if ! javac -cp ../../out/production/CS2103 -Xlint:none -d ../bin/dbot ../src/main/java/dbot/*.java"},{"lineNumber":21,"author":{"gitId":"-"},"content":"then"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":24,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":27,"author":{"gitId":"douglaswja"},"content":"java -classpath ../bin/dbot DBot \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":30,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":34,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":35,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":36,"author":{"gitId":"-"},"content":"then"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":39,"author":{"gitId":"-"},"content":"else"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":42,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":34,"douglaswja":8}}]
