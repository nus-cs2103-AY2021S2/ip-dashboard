[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"    archiveBaseName \u003d \"sweh\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zaiah0505":17,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":"SWEH (Simple, Word-Executed Helper) is a chatbot designed to help you keep track"},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"of simple todo tasks, deadlines and events."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"### help"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"Type in `help` any time to view command usage within the app."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"### todo, deadline, event"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"Add tasks to your task list with commands `todo`, `deadline` and `event`. Sweh"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"will automatically track your tasks for you!"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"### list"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"Type `list` to take a look at what tasks your have."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"### find"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"Type `find` and some keywords to search for tasks by descriptions."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"### done, delete"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"Use commands `done` and `delete` to mark tasks as done and remove them from your list."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"### save data"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"Automatically stores all data after each command, so you don\u0027t lose any progress even"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"in the case of a program crash. Stores all data in the \"data/sweh.txt\" path. If the "},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"app is moved without the .txt file, all data will be lost."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"## Commands"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"### `help` - Show helper text for the commands in the app"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"#### Usage: "},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"`help` - list out all possible commands"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"`help \u003ccommand\u003e` - show detailed information about an individual command"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"#### Example:"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"`help deadline`:"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"Help for \"deadline\":  "},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"Usage: \"deadline \u003cdescription\u003e\" /by \u003cYYYY-MM-DD\u003e\" - Creates"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"a Deadline with the supplied description and date."},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"### `todo` - Add a Todo task to your task list"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"#### Usage:"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"`todo \u003cdescription\u003e` - Add a Todo task with the supplied description."},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"* Note that double/multiple spaces `\"  \"` in the description will be ignored and shortened into a single space"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"#### Example:"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"`todo finish CS2103 iP`:"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"\"Gotcha. I\u0027ve added the task:  "},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"[T][ ] finish CS2103 iP  "},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"Now you have 7 task(s) in your list\""},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"### `deadline` - Add a Deadline task to your task list"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"#### Usage:"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"`deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e` - Add a Deadline task with the supplied description and date."},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"* Note that double/multiple spaces `\"  \"` in the description will be ignored and shortened into a single space"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"#### Example:"},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"`deadline Steam Summer Sale 2020 /by 2020-07-31`:"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"\"Gotcha. I\u0027ve added the task:  "},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"[D][ ] Steam Summer Sale 2020 (by: Fri, 31 Jul 20)  "},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"Now you have 3 task(s) in your list\""},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"### `event` - Add an Event task to your task list"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"#### Usage:"},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"`event \u003cdescription\u003e /at \u003cYYYY-MM-DD\u003e` - Add an Event task with the supplied description and date."},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"* Note that double/multiple spaces `\"  \"` in the description will be ignored and shortened into a single space"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"#### Example:"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"`event Free GongCha Giveaway /at 2021-02-18`:"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"\"Gotcha. I\u0027ve added the task:  "},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"[E][ ] Free Gongcha Giveaway (at: Thu, 18 Feb 21)  "},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"Now you have 5 task(s) in your list\""},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"### `list` - List out all tasks in your task list"},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":105,"author":{"gitId":"Zaiah0505"},"content":"#### Usage:"},{"lineNumber":106,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":107,"author":{"gitId":"Zaiah0505"},"content":"`list` - Lists out all tasks"},{"lineNumber":108,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":109,"author":{"gitId":"Zaiah0505"},"content":"* The first box indicates the type of task. `[T]`  for Todo, `[D]` for Deadline and"},{"lineNumber":110,"author":{"gitId":"Zaiah0505"},"content":"`[E]` for Events"},{"lineNumber":111,"author":{"gitId":"Zaiah0505"},"content":"* The second box indicates if the task is completed `[✓]` for done, and `[ ]` for not done"},{"lineNumber":112,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":113,"author":{"gitId":"Zaiah0505"},"content":"Example:"},{"lineNumber":114,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":115,"author":{"gitId":"Zaiah0505"},"content":"`list`:"},{"lineNumber":116,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":117,"author":{"gitId":"Zaiah0505"},"content":"\"Here is your list of tasks:"},{"lineNumber":118,"author":{"gitId":"Zaiah0505"},"content":"1. [T][✓] finish CS2103 iP"},{"lineNumber":119,"author":{"gitId":"Zaiah0505"},"content":"2. [D][ ] Steam Summer Sale 2020 (by: Fri, 31 Jul 20)"},{"lineNumber":120,"author":{"gitId":"Zaiah0505"},"content":"3. [E][✓] Free GongCha Giveaway (at: Thu, 18 Feb 21)\""},{"lineNumber":121,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":122,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":124,"author":{"gitId":"Zaiah0505"},"content":"### `done` - Mark a task as done"},{"lineNumber":125,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":126,"author":{"gitId":"Zaiah0505"},"content":"#### Usage:"},{"lineNumber":127,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":128,"author":{"gitId":"Zaiah0505"},"content":"`done \u003cindex\u003e` - Mark the task in the list at position \u003cindex\u003e as done."},{"lineNumber":129,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":130,"author":{"gitId":"Zaiah0505"},"content":"#### Example:"},{"lineNumber":131,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":132,"author":{"gitId":"Zaiah0505"},"content":"If the starting list looks like this:  "},{"lineNumber":133,"author":{"gitId":"Zaiah0505"},"content":"\"Here is your list of tasks:"},{"lineNumber":134,"author":{"gitId":"Zaiah0505"},"content":"1. [T][ ] finish CS2103 iP"},{"lineNumber":135,"author":{"gitId":"Zaiah0505"},"content":"2. [D][ ] Steam Summer Sale 2020 (by: Fri, 31 Jul 20)"},{"lineNumber":136,"author":{"gitId":"Zaiah0505"},"content":"3. [E][ ] Free GongCha Giveaway (at: Thu, 18 Feb 21)\""},{"lineNumber":137,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":138,"author":{"gitId":"Zaiah0505"},"content":"then `done 2` will result in:"},{"lineNumber":139,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":140,"author":{"gitId":"Zaiah0505"},"content":"\"Nice, another job well done!  "},{"lineNumber":141,"author":{"gitId":"Zaiah0505"},"content":"[D][✓] Steam Summer Sale 2020 (by: Fri, 31 Jul 20)\""},{"lineNumber":142,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":143,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":144,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":145,"author":{"gitId":"Zaiah0505"},"content":"### `delete` - Remove a task from the list"},{"lineNumber":146,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":147,"author":{"gitId":"Zaiah0505"},"content":"#### Usage:"},{"lineNumber":148,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":149,"author":{"gitId":"Zaiah0505"},"content":"`delete \u003cindex\u003e` - Remove the task in the list at position \u003cindex\u003e."},{"lineNumber":150,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":151,"author":{"gitId":"Zaiah0505"},"content":"#### Example:"},{"lineNumber":152,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":153,"author":{"gitId":"Zaiah0505"},"content":"If the starting list looks like this:  "},{"lineNumber":154,"author":{"gitId":"Zaiah0505"},"content":"\"Here is your list of tasks:"},{"lineNumber":155,"author":{"gitId":"Zaiah0505"},"content":"1. [T][ ] finish CS2103 iP"},{"lineNumber":156,"author":{"gitId":"Zaiah0505"},"content":"2. [D][ ] Steam Summer Sale 2020 (by: Fri, 31 Jul 20)"},{"lineNumber":157,"author":{"gitId":"Zaiah0505"},"content":"3. [E][ ] Free GongCha Giveaway (at: Thu, 18 Feb 21)\""},{"lineNumber":158,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":159,"author":{"gitId":"Zaiah0505"},"content":"then `delete 2` will result in:"},{"lineNumber":160,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":161,"author":{"gitId":"Zaiah0505"},"content":"\"I\u0027ve removed the task:   "},{"lineNumber":162,"author":{"gitId":"Zaiah0505"},"content":"[D][✓] Steam Summer Sale 2020 (by: Fri, 31 Jul 20)  "},{"lineNumber":163,"author":{"gitId":"Zaiah0505"},"content":"Now you have 2 task(s) in your list\""},{"lineNumber":164,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":165,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":166,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":167,"author":{"gitId":"Zaiah0505"},"content":"### `find` - List the tasks that match against keywords"},{"lineNumber":168,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":169,"author":{"gitId":"Zaiah0505"},"content":"#### Usage:"},{"lineNumber":170,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":171,"author":{"gitId":"Zaiah0505"},"content":"`find \u003ckeyword1\u003e \u003ckeyword2\u003e ...` - Lists out all tasks that match all of the keywords"},{"lineNumber":172,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":173,"author":{"gitId":"Zaiah0505"},"content":"* Each keyword should be separated by a space `\" \"`"},{"lineNumber":174,"author":{"gitId":"Zaiah0505"},"content":"* Only tasks that contain all of the keywords will be shown"},{"lineNumber":175,"author":{"gitId":"Zaiah0505"},"content":"* The sequence of the keywords do not matter"},{"lineNumber":176,"author":{"gitId":"Zaiah0505"},"content":"* The keywords are case-sensitive"},{"lineNumber":177,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":178,"author":{"gitId":"Zaiah0505"},"content":"Example:"},{"lineNumber":179,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":180,"author":{"gitId":"Zaiah0505"},"content":"If the starting list looks like this:  "},{"lineNumber":181,"author":{"gitId":"Zaiah0505"},"content":"\"Here is your list of tasks:"},{"lineNumber":182,"author":{"gitId":"Zaiah0505"},"content":"1. [T][ ] apple bee"},{"lineNumber":183,"author":{"gitId":"Zaiah0505"},"content":"2. [T][ ] Apple Bee\""},{"lineNumber":184,"author":{"gitId":"Zaiah0505"},"content":"3. [T][ ] applebee"},{"lineNumber":185,"author":{"gitId":"Zaiah0505"},"content":"4. [T][ ] bee apple"},{"lineNumber":186,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":187,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":188,"author":{"gitId":"Zaiah0505"},"content":"`find apple bee`:"},{"lineNumber":189,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":190,"author":{"gitId":"Zaiah0505"},"content":"\"Here are the tasks that match your search:"},{"lineNumber":191,"author":{"gitId":"Zaiah0505"},"content":"1. [T][ ] apple bee"},{"lineNumber":192,"author":{"gitId":"Zaiah0505"},"content":"2. [T][ ] applebee"},{"lineNumber":193,"author":{"gitId":"Zaiah0505"},"content":"3. [T][ ] bee apple\""},{"lineNumber":194,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":195,"author":{"gitId":"Zaiah0505"},"content":"* The above example occurs because the 3 tasks all contain the sequence \"`apple`\" and \"`bee`\""},{"lineNumber":196,"author":{"gitId":"Zaiah0505"},"content":"* The entry \"Apple Bee\" doesn\u0027t match because the search is case-sensitive"},{"lineNumber":197,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":198,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":199,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":200,"author":{"gitId":"Zaiah0505"},"content":"### `quit` - Terminate the application"},{"lineNumber":201,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":202,"author":{"gitId":"Zaiah0505"},"content":"#### Usage:"},{"lineNumber":203,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":204,"author":{"gitId":"Zaiah0505"},"content":"`quit` - Closes the application immediately so you don\u0027t waste precious seconds reaching for the mouse"},{"lineNumber":205,"author":{"gitId":"Zaiah0505"},"content":"and moving the cursor to the red \u0027X\u0027 at the top."}],"authorContributionMap":{"Zaiah0505":188,"-":17}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"-"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"-"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"-"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"-"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"-"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"-"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"-"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"-"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"-"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"-"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"-"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e add-gradle-support"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":50,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":51,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":52,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":53,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":":findJavaFromJavaHome"},{"lineNumber":58,"author":{"gitId":"-"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":59,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":64,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":65,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":66,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":67,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":":init"},{"lineNumber":72,"author":{"gitId":"-"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":":win9xME_args"},{"lineNumber":77,"author":{"gitId":"-"},"content":"@rem Slurp the command line arguments."},{"lineNumber":78,"author":{"gitId":"-"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"set _SKIP\u003d2"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":":win9xME_args_slurp"},{"lineNumber":82,"author":{"gitId":"-"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e add-gradle-support"},{"lineNumber":87,"author":{"gitId":"-"},"content":":execute"},{"lineNumber":88,"author":{"gitId":"-"},"content":"@rem Setup the command line"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"@rem Execute Gradle"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":97,"author":{"gitId":"-"},"content":"@rem Execute Gradle"},{"lineNumber":98,"author":{"gitId":"-"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e add-gradle-support"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":":end"},{"lineNumber":102,"author":{"gitId":"-"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":103,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":":fail"},{"lineNumber":106,"author":{"gitId":"-"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":107,"author":{"gitId":"-"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":108,"author":{"gitId":"-"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":109,"author":{"gitId":"-"},"content":"exit /b 1"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":":mainEnd"},{"lineNumber":112,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":":omega"}],"authorContributionMap":{"Zaiah0505":11,"-":103}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"import command.Command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import util.Storage;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import util.Ui;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":" * Primary logic class for containing the application. Relies on a Storage object"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":" * to store persistent user information."},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    private final Storage storage;"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"    private TaskManager taskManager;"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"     * Constructor to initialise a new Duke instance. Will create a brand new TaskManager"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"     * instance if the supplied Storage object does not point to an existing save file or"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"     * if the existing save file cannot be read."},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     * @param storage Storage object to load persistent TaskManager information from."},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"    public Duke(Storage storage) {"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"        this.storage \u003d storage;"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"            this.taskManager \u003d storage.readTaskManager();"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"            Ui.printOutput(e.getMessage());"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"            this.taskManager \u003d new TaskManager();"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"     * Entry point for command-line interface for Duke."},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"     * @param args Arguments for the execution of Duke. Should be left blank."},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"        Storage storage \u003d new Storage(\"data\", \"sweh.txt\");"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        Duke duke \u003d new Duke(storage);"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"        Ui.printGreeting();"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"        duke.run();"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"     * Called by the CLI instance of Duke in the main() method."},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"    public void run() {"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"            String userInput \u003d sc.nextLine();"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"            String message \u003d respondToInput(userInput);"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"            Ui.printOutput(message);"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"            boolean shouldQuit \u003d decideToQuit(userInput);"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"            if (shouldQuit) {"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"                break;"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"     * Determines if the user entered a quit command in their input."},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"     * @param input Text inputted by the user."},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"     * @return True, if the user inputted a quit command."},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"    public boolean decideToQuit(String input) {"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"            Command c \u003d Parser.parseCommand(input);"},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"            return c.isQuitCommand();"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"        } catch (DukeException e) {"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"            return false; // Parser did not successfully detect a QuitCommand;"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"     * Responds to the user\u0027s inputs by manipulating the TaskManager instance,"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"     * saves the new state of the TaskManager to the save file, and returns a"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"     * String describing the action that was performed."},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"     * @param input Text inputted by the user."},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"     * @return String description of the actions performed by the Duke instance."},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"    public String respondToInput(String input) {"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"            Command c \u003d Parser.parseCommand(input);"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"            String response \u003d c.execute(taskManager);"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"            storage.writeTaskManager(taskManager);"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"            return response;"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"        } catch (DukeException e) {"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"            return e.getMsg();"},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IOException e) {"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"            return e.getMessage();"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zaiah0505":98,"-":4}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"        Application.launch(Sweh.class, args);"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":7}},{"path":"src/main/java/Sweh.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":"import javafx.application.Platform;"},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.Scene;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.text.Font;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.text.FontPosture;"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.text.FontWeight;"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"import nodes.DialogBox;"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"import util.Storage;"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"import java.io.IOException;"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":" * JavaFX Application used to wrap a Duke instance and provide GUI interaction"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":" * for Duke."},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"public class Sweh extends Application {"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"    private final Image userImage \u003d new Image(this.getClass()"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"            .getResourceAsStream(\"/images/DaUser.jpg\"));"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"    private final Image dukeImage \u003d new Image(this.getClass()"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"            .getResourceAsStream(\"/images/DaSweh.jpg\"));"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"    private final Label greetingText \u003d new Label(\"Hello, I am SWEH. \""},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"            + \"Your Simple Word-Executed Helper!\\n\""},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"            + \"What shall we do today?\");"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"    private final Label storageErrorText \u003d new Label(\"A save file was found, \""},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"            + \"but the contents could not be read... I will start from scratch instead.\");"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"    private Duke duke;"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"    private VBox dialogContainer;"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"    private TextField userInput;"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"    private Button sendButton;"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"    private Scene scene;"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"    public void start(Stage stage) {"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"        //Step 1. Setting up required components"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"        Storage storage \u003d new Storage(\"data\", \"sweh.txt\");"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"        duke \u003d new Duke(storage);"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"        //The container for the content of the chat to scroll."},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        userInput \u003d new TextField();"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"        stage.setScene(scene);"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"        stage.show();"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"        //Step 2. Formatting the window to look as expected"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"        stage.setTitle(\"Sweh\");"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"        stage.setResizable(false);"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"        userInput.setFont(Font.font(\"Consolas\", FontWeight.BOLD,"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"                FontPosture.REGULAR, 12));"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"        userInput.setStyle(\"-fx-text-inner-color: saddlebrown\");"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"        //Part 3. Add functionality to handle user input."},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"        sendButton.setOnMouseClicked(event -\u003e handleUserInput());"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"        userInput.setOnAction((event) -\u003e handleUserInput());"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes."},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":105,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":106,"author":{"gitId":"Zaiah0505"},"content":"        //Show greeting text"},{"lineNumber":107,"author":{"gitId":"Zaiah0505"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":108,"author":{"gitId":"Zaiah0505"},"content":"                DialogBox.getDukeDialog(greetingText, new ImageView(dukeImage))"},{"lineNumber":109,"author":{"gitId":"Zaiah0505"},"content":"        );"},{"lineNumber":110,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":111,"author":{"gitId":"Zaiah0505"},"content":"        //Print error text if storage could not load a save file."},{"lineNumber":112,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"Zaiah0505"},"content":"            storage.readTaskManager();"},{"lineNumber":114,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IOException e) {"},{"lineNumber":115,"author":{"gitId":"Zaiah0505"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":116,"author":{"gitId":"Zaiah0505"},"content":"                    DialogBox.getDukeDialog(storageErrorText, new ImageView(dukeImage))"},{"lineNumber":117,"author":{"gitId":"Zaiah0505"},"content":"            );"},{"lineNumber":118,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":120,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":122,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"Zaiah0505"},"content":"     * Iteration 1:"},{"lineNumber":124,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a label with the specified text and adds it to the dialog container."},{"lineNumber":125,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"Zaiah0505"},"content":"     * @param text String containing text to add"},{"lineNumber":127,"author":{"gitId":"Zaiah0505"},"content":"     * @return a label with the specified text that has word wrap enabled."},{"lineNumber":128,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"Zaiah0505"},"content":"    private Label getDialogLabel(String text) {"},{"lineNumber":130,"author":{"gitId":"Zaiah0505"},"content":"        // You will need to import `javafx.scene.control.Label`."},{"lineNumber":131,"author":{"gitId":"Zaiah0505"},"content":"        Label textToAdd \u003d new Label(text);"},{"lineNumber":132,"author":{"gitId":"Zaiah0505"},"content":"        textToAdd.setWrapText(true);"},{"lineNumber":133,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":134,"author":{"gitId":"Zaiah0505"},"content":"        return textToAdd;"},{"lineNumber":135,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":137,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"Zaiah0505"},"content":"     * Iteration 2:"},{"lineNumber":139,"author":{"gitId":"Zaiah0505"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":140,"author":{"gitId":"Zaiah0505"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":141,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"Zaiah0505"},"content":"    private void handleUserInput() {"},{"lineNumber":143,"author":{"gitId":"Zaiah0505"},"content":"        boolean shouldQuit \u003d duke.decideToQuit(userInput.getText());"},{"lineNumber":144,"author":{"gitId":"Zaiah0505"},"content":"        if (shouldQuit) {"},{"lineNumber":145,"author":{"gitId":"Zaiah0505"},"content":"            Platform.exit();"},{"lineNumber":146,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":148,"author":{"gitId":"Zaiah0505"},"content":"        Label userText \u003d new Label(userInput.getText());"},{"lineNumber":149,"author":{"gitId":"Zaiah0505"},"content":"        Label dukeText \u003d new Label(getResponse(userInput.getText()));"},{"lineNumber":150,"author":{"gitId":"Zaiah0505"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":151,"author":{"gitId":"Zaiah0505"},"content":"                DialogBox.getUserDialog(userText, new ImageView(userImage)),"},{"lineNumber":152,"author":{"gitId":"Zaiah0505"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(dukeImage))"},{"lineNumber":153,"author":{"gitId":"Zaiah0505"},"content":"        );"},{"lineNumber":154,"author":{"gitId":"Zaiah0505"},"content":"        userInput.clear();"},{"lineNumber":155,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":157,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"Zaiah0505"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":159,"author":{"gitId":"Zaiah0505"},"content":"     * Replace this stub with your completed method."},{"lineNumber":160,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"Zaiah0505"},"content":"    private String getResponse(String input) {"},{"lineNumber":162,"author":{"gitId":"Zaiah0505"},"content":"        return duke.respondToInput(input);"},{"lineNumber":163,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":164}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":" * Command class representing a future action that can be executed on the supplied"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":" * TaskManager object."},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"     * Performs an action on the supplied taskManager and returns a String response"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"     * based on the action that was performed."},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager TaskManager object to perform the action on."},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"     * @return String response of the action that was performed."},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"     * @throws DukeException Whenever the supplied action cannot be performed on"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"     *                       the given"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    public abstract String execute(TaskManager taskManager) throws DukeException;"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"     * Indicates if the Command object should signal to the application that the"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     * user wants to terminate it."},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     * @return True, if the Command should tell the application to end."},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"    public boolean isQuitCommand() {"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    public abstract boolean equals(Object o);"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":33}},{"path":"src/main/java/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"public enum CommandType {"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"    HELP,"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"    LIST,"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"    DONE,"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"    DELETE,"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"    TODO,"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"    DEADLINE,"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"    EVENT,"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"    FIND,"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"    QUIT"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":13}},{"path":"src/main/java/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.Deadline;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":" * Command to add a Deadline Task to a TaskManager."},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d Deadline.COMMAND_STRING;"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.DEADLINE;"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    private final String description;"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"    private final LocalDate date;"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a DeadlineCommand that would add a Deadline with the supplied"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     * description and date to a TaskManager when executed."},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"     * @param description Description of the Deadline to be added."},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"     * @param date Date of the Deadline to be added."},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    private DeadlineCommand(String description, LocalDate date) {"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"        this.description \u003d description;"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"        this.date \u003d date;"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a DeadlineCommand from a commandMap."},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap representing the instruction."},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"     * @return DeadlineCommand object based on the commandMap."},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"     * @throws DukeException When the user inputs an illegal instruction for the"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"     * Deadline command."},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"    public static DeadlineCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap)"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"            throws DukeException {"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"        String description;"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        LocalDate date;"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        assert Parser.extractCommandString(commandMap).equals(COMMAND_STRING)"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"                : COMMAND_STRING + \"CommandFlag does not match\";"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"        // Validate description"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e descriptionStrings \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"        if (descriptionStrings.isEmpty()) {"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Deadline description cannot be empty\");"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"        description \u003d String.join(\" \", descriptionStrings);"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"        // Validate date"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"            List\u003cString\u003e dateStrings \u003d commandMap.get(Deadline.END_DATE_STRING);"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"            String dateString \u003d dateStrings.get(0);"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"            date \u003d LocalDate.parse(dateString, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please provide an end date using the \\\"/by\\\" flag\");"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please input date in the form YYYY-MM-DD\");"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        return new DeadlineCommand(description, date);"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"     * Adds the specified Deadline Task to the supplied TaskManager."},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager TaskManager object to add the Deadline Task to."},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"     * @return String response of the action that was performed."},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) {"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"        return taskManager.addTask(new Deadline(description, date));"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"        DeadlineCommand that \u003d (DeadlineCommand) o;"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"        return description.equals(that.description) \u0026\u0026 date.equals(that.date);"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"    public int hashCode() {"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"        return Objects.hash(description, date);"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":97}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":" * Command to remove the specified Task from a TaskManger."},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"delete\";"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.DELETE;"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"    private final int position;"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a DeleteCommand that would delete the task at the specified"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"     * position in the TaskManager when executed."},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"     * @param position The position / index of the task to be deleted."},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"    public DeleteCommand(int position) {"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"        this.position \u003d position;"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a DeleteCommand from a commandMap."},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap representing the instruction."},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"     * @return DeleteCommand object based on the commandMap."},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"     * @throws DukeException When the user inputs an argument that cannot be parsed"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"     * into a valid Integer position."},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"    public static DeleteCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap)"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"            throws DukeException {"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"        assert Parser.extractCommandString(commandMap).equals(COMMAND_STRING)"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"                : COMMAND_STRING + \"CommandFlag does not match\";"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"            List\u003cString\u003e descriptions \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"            String indexString \u003d descriptions.get(0);"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"            int index \u003d Integer.parseInt(indexString) - 1;"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"            return new DeleteCommand(index);"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please provide an index to delete from the list.\");"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Index number could not be understood\");"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"     * Deletes the pre-specified task in the supplied TaskManager."},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager TaskManager object to delete a Task from."},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"     * @return String response of the deletion."},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"     * @throws DukeException If the specified position does not exist within the"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"     * supplied TaskManager."},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"        return taskManager.deleteTask(position);"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"        DeleteCommand that \u003d (DeleteCommand) o;"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"        return position \u003d\u003d that.position;"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"        return Objects.hash(position);"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":80}},{"path":"src/main/java/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"done\";"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.DONE;"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"    private final int position;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"    public DoneCommand(int position) {"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"        this.position \u003d position;"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    public static DoneCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap)"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"            throws DukeException {"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"            List\u003cString\u003e descriptions \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"            String indexString \u003d descriptions.get(0);"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"            int index \u003d Integer.parseInt(indexString) - 1;"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"            return new DoneCommand(index);"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please provide an index to mark as done.\");"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Index number could not be understood\");"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"        return taskManager.markTaskDone(position);"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"        DoneCommand that \u003d (DoneCommand) o;"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        return position \u003d\u003d that.position;"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"    public int hashCode() {"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        return Objects.hash(position);"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":50}},{"path":"src/main/java/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.Event;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":" * Command to add an Event Task to a TaskManager."},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"public class EventCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"event\";"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.EVENT;"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    private final String description;"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"    private final LocalDate date;"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     * Creates an EventCommand that would add a Event with the supplied"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     * description and date to a TaskManager when executed."},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"     * @param description Description of the Event to be added."},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"     * @param date Date of the Event to be added."},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    private EventCommand(String description, LocalDate date) {"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"        this.description \u003d description;"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"        this.date \u003d date;"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs an EventCommand from a commandMap."},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap representing the instruction."},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"     * @return EventCommand object based on the commandMap."},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"     * @throws DukeException When the user inputs an illegal instruction for the"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"     * Event command."},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"    public static EventCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap)"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"            throws DukeException {"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"        String description;"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        LocalDate date;"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        assert Parser.extractCommandString(commandMap).equals(COMMAND_STRING)"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"                : COMMAND_STRING + \"CommandFlag does not match\";"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"        // Validate description"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e descriptionStrings \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"        if (descriptionStrings.isEmpty()) {"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Event description cannot be empty\");"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"        description \u003d String.join(\" \", descriptionStrings);"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"        // Validate date"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"            List\u003cString\u003e dateStrings \u003d commandMap.get(Event.EVENT_DATE_STRING);"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"            String dateString \u003d dateStrings.get(0);"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"            date \u003d LocalDate.parse(dateString, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please provide a date using the \\\"/at\\\" flag\");"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please input date in the form YYYY-MM-DD\");"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        return new EventCommand(description, date);"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"     * Adds the specified Event Task to the supplied TaskManger."},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager TaskManager object to add the Event Task to."},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"     * @return String response of the action that was performed."},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) {"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"        return taskManager.addTask(new Event(description, date));"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"        EventCommand that \u003d (EventCommand) o;"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"        return description.equals(that.description) \u0026\u0026 date.equals(that.date);"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"    public int hashCode() {"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"        return Objects.hash(description, date);"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":97}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import util.Formatter;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":" * Command to search for keywords in the description of Tasks in a supplied"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":" * TaskManager and return a list of the matching Tasks."},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"public class FindCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"find\";"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.FIND;"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a FindCommand that would return a String that lists all the Tasks"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     * whose descriptions match all the keywords."},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"     * @param keywords List of keywords that must appear in the matching Tasks."},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"    private FindCommand(List\u003cString\u003e keywords) {"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a FindCommand from a commandMap."},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap representing the instruction."},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"     * @return FindCommand object based on the commandMap."},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"     * @throws DukeException When the user does not specify any search keywords."},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"    public static FindCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap)"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"            throws DukeException {"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        assert Parser.extractCommandString(commandMap).equals(COMMAND_STRING)"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"                : COMMAND_STRING + \"CommandFlag does not match\";"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e keywords \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        if (keywords.isEmpty()) {"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please include at least one keyword.\");"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"        return new FindCommand(keywords);"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"     * Searches the supplied TaskManager for all Tasks whose descriptions contain"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"     * all of the keywords."},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager TaskManager object to search in."},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"     * @return String that lists all the matching tasks."},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) {"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"        // Returns true if the task contains all of the keywords"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"        Predicate\u003cTask\u003e taskPredicate \u003d task -\u003e {"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"            String taskDescription \u003d task.getDescription();"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"            for (String k : keywords) {"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"                if (!taskDescription.contains(k)) {"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"                    return false;"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"                }"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"            return true;"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"        };"},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cTask\u003e tasks \u003d taskManager.getTasks();"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e filteredTaskStrings \u003d tasks.stream()"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"                .filter(taskPredicate)"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"                .map(Task::toString)"},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"                .collect(Collectors.toList());"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"        // If no tasks match the predicate, inform the user."},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"        if (filteredTaskStrings.isEmpty()) {"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"            String quotedKeywords \u003d keywords.stream()"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"                    .map(s -\u003e \"\\\"\" + s + \"\\\"\")"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"                    .collect(Collectors.joining(\" + \"));"},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"            return \"No tasks match the keywords: \\n\" + quotedKeywords;"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"        String listOfTasks \u003d Formatter.formatList(filteredTaskStrings);"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"        output.append(\"Here are the tasks that match your search: \").append(\"\\n\");"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"        output.append(listOfTasks);"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"        return output.toString();"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":"        FindCommand that \u003d (FindCommand) o;"},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"        return keywords.equals(that.keywords);"},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":106,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"Zaiah0505"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitId":"Zaiah0505"},"content":"        return Objects.hash(keywords);"},{"lineNumber":109,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":110}},{"path":"src/main/java/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import util.Formatter;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.*;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":" * Command to display help text."},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"public class HelpCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"help\";"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.HELP;"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"    private static final List\u003cString\u003e VALID_KEYWORDS \u003d new ArrayList\u003c\u003e() {{"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"        add(ListCommand.COMMAND_STRING);"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"        add(FindCommand.COMMAND_STRING);"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"        add(TodoCommand.COMMAND_STRING);"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"        add(DeadlineCommand.COMMAND_STRING);"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"        add(EventCommand.COMMAND_STRING);"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"        add(DoneCommand.COMMAND_STRING);"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"        add(DeleteCommand.COMMAND_STRING);"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"        add(QuitCommand.COMMAND_STRING);"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"    }};"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"    private final String response;"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a HelpCommand that would return help text to explain the commands"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"     * available in the application. Depending on the keyword supplied, the help"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"     * text will differ accordingly."},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"     * @param keyword The type of help to be displayed. Nullable."},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"    private HelpCommand(String keyword) {"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"        // If the keyword is null, return the defaultHelpText."},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"        this.response \u003d Optional.ofNullable(keyword)"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"                .map(HelpCommand::keywordHelpText)"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"                .orElse(defaultHelpText());"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a HelpCommand from a commandMap."},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap representing the instruction."},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"     * @return HelpCommand object based on the commandMap."},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"    public static HelpCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap) {"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        assert Parser.extractCommandString(commandMap).equals(COMMAND_STRING)"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"                : COMMAND_STRING + \"CommandFlag does not match\";"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e keywords \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"        if (keywords.isEmpty()) {"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"            return new HelpCommand(null);"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"            String keyword \u003d keywords.get(0);"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"            return new HelpCommand(keyword);"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"    private static String defaultHelpText() {"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"        return \"Type \\\"help \u003ccommand\u003e\\\" to read detailed information about each command\""},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"                + \"\\n\""},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"                + \"List of commands: \\n\""},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"                + Formatter.formatList(VALID_KEYWORDS);"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"     * Returns help text based on the keyword that was supplied."},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"     * @param keyword The keyword to show help text for."},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"     * @return Keyword-based help text."},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"    private static String keywordHelpText(String keyword) {"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"        String preText \u003d \"Help for \\\"\" + keyword + \"\\\":\\n\";"},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"        String text;"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"        switch (keyword) {"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"        case ListCommand.COMMAND_STRING:"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"            text \u003d listHelpText();"},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"        case FindCommand.COMMAND_STRING:"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"            text \u003d findHelpText();"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"        case TodoCommand.COMMAND_STRING:"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"            text \u003d todoHelpText();"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"            break;"},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"        case DeadlineCommand.COMMAND_STRING:"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"            text \u003d deadlineHelpText();"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"        case EventCommand.COMMAND_STRING:"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"            text \u003d eventHelpText();"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"            break;"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"        case DoneCommand.COMMAND_STRING:"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"            text \u003d doneHelpText();"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"            break;"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"        case DeleteCommand.COMMAND_STRING:"},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"            text \u003d deleteHelpText();"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"            break;"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":"        case QuitCommand.COMMAND_STRING:"},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"            text \u003d quitHelpText();"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":"            break;"},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"        default:"},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":"            return \"Please a valid command for \\\"help \u003ccommand\u003e\\\"\";"},{"lineNumber":105,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":107,"author":{"gitId":"Zaiah0505"},"content":"        return preText + text;"},{"lineNumber":108,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":110,"author":{"gitId":"Zaiah0505"},"content":"    private static String listHelpText() {"},{"lineNumber":111,"author":{"gitId":"Zaiah0505"},"content":"        return \"Usage: \\\"list\\\" - \""},{"lineNumber":112,"author":{"gitId":"Zaiah0505"},"content":"                + \"Shows all outstanding tasks.\";"},{"lineNumber":113,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":115,"author":{"gitId":"Zaiah0505"},"content":"    private static String findHelpText() {"},{"lineNumber":116,"author":{"gitId":"Zaiah0505"},"content":"        return \"Usage: \\\"find \u003ckeyword1\u003e \u003ckeyword2\u003e...\\\" - \""},{"lineNumber":117,"author":{"gitId":"Zaiah0505"},"content":"                + \"Shows all tasks whose description contains all of the keywords\";"},{"lineNumber":118,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":120,"author":{"gitId":"Zaiah0505"},"content":"    private static String todoHelpText() {"},{"lineNumber":121,"author":{"gitId":"Zaiah0505"},"content":"        return \"Usage: \\\"todo \u003cdescription\u003e\\\" - \""},{"lineNumber":122,"author":{"gitId":"Zaiah0505"},"content":"                + \"Creates a Todo Task with the supplied description\";"},{"lineNumber":123,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":125,"author":{"gitId":"Zaiah0505"},"content":"    private static String deadlineHelpText() {"},{"lineNumber":126,"author":{"gitId":"Zaiah0505"},"content":"        return \"Usage: \\\"deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e\\\" - \""},{"lineNumber":127,"author":{"gitId":"Zaiah0505"},"content":"                + \"Creates a Deadline with the supplied description and date\";"},{"lineNumber":128,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":130,"author":{"gitId":"Zaiah0505"},"content":"    private static String eventHelpText() {"},{"lineNumber":131,"author":{"gitId":"Zaiah0505"},"content":"        return \"Usage: \\\"event \u003cdescription\u003e /at \u003cYYYY-MM-DD\u003e\\\" - \""},{"lineNumber":132,"author":{"gitId":"Zaiah0505"},"content":"                + \"Creates an Event with the supplied description and date\";"},{"lineNumber":133,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":135,"author":{"gitId":"Zaiah0505"},"content":"    private static String doneHelpText() {"},{"lineNumber":136,"author":{"gitId":"Zaiah0505"},"content":"        return \"Usage: \\\"done \u003ci\u003e\\\" - \""},{"lineNumber":137,"author":{"gitId":"Zaiah0505"},"content":"                + \"Marks the task with index i in the list as done\";"},{"lineNumber":138,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":140,"author":{"gitId":"Zaiah0505"},"content":"    private static String deleteHelpText() {"},{"lineNumber":141,"author":{"gitId":"Zaiah0505"},"content":"        return \"Usage: \\\"delete \u003ci\u003e\\\" - \""},{"lineNumber":142,"author":{"gitId":"Zaiah0505"},"content":"                + \"Removes the task with index i from the list\";"},{"lineNumber":143,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":145,"author":{"gitId":"Zaiah0505"},"content":"    private static String quitHelpText() {"},{"lineNumber":146,"author":{"gitId":"Zaiah0505"},"content":"        return \"Usage: \\\"quit\\\" - Terminates the application\";"},{"lineNumber":147,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":149,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"Zaiah0505"},"content":"     * Returns the help text."},{"lineNumber":151,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager Does not perform any action on the TaskManager. Still"},{"lineNumber":153,"author":{"gitId":"Zaiah0505"},"content":"     *                    requires an input for class abstraction."},{"lineNumber":154,"author":{"gitId":"Zaiah0505"},"content":"     * @return Help text."},{"lineNumber":155,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) {"},{"lineNumber":158,"author":{"gitId":"Zaiah0505"},"content":"        return response;"},{"lineNumber":159,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":161,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":163,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":164,"author":{"gitId":"Zaiah0505"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"},{"lineNumber":165,"author":{"gitId":"Zaiah0505"},"content":"        HelpCommand that \u003d (HelpCommand) o;"},{"lineNumber":166,"author":{"gitId":"Zaiah0505"},"content":"        return Objects.equals(response, that.response);"},{"lineNumber":167,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":169,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":170,"author":{"gitId":"Zaiah0505"},"content":"    public int hashCode() {"},{"lineNumber":171,"author":{"gitId":"Zaiah0505"},"content":"        return Objects.hash(response);"},{"lineNumber":172,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":173}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import util.Formatter;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":" * Command to list out all Tasks in the supplied TaskManager."},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"public class ListCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"list\";"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.LIST;"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a ListCommand from a commandMap."},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap representing the instruction."},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"     * @return ListCommand based on the commandMap."},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"    public static ListCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap) {"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"        assert Parser.extractCommandString(commandMap).equals(COMMAND_STRING)"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"                : COMMAND_STRING + \"CommandFlag does not match\";"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"        return new ListCommand();"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a String listing all the Tasks in the supplied TaskManager."},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager TaskManager object to perform the action on."},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"     * @return String that lists all the tasks."},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) {"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cTask\u003e tasks \u003d taskManager.getTasks();"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e taskStrings \u003d tasks.stream()"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"                .map(Task::toString)"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"                .collect(Collectors.toList());"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"        String listOfTasks \u003d Formatter.formatList(taskStrings);"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"        output.append(\"Here is your list of tasks: \").append(\"\\n\");"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        output.append(listOfTasks);"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"        return output.toString();"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"        return o !\u003d null \u0026\u0026 getClass() \u003d\u003d o.getClass();"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":57}},{"path":"src/main/java/command/QuitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":" * Command to signal to the application to terminate."},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"public class QuitCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"quit\";"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.QUIT;"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a QuitCommand from a commandMap."},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap representing the instruction."},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"     * @return QuitCommand based on the commandMap."},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    public static QuitCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap) {"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"        assert Parser.extractCommandString(commandMap).equals(COMMAND_STRING)"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"                : COMMAND_STRING + \"CommandFlag does not match\";"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"        return new QuitCommand();"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a String listing all the Tasks in the supplied TaskManager. Does"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"     * not actually terminate the application. Termination should be handled by"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"     * the user class."},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager Does not perform any action on the TaskManager, but"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"     *                    still required for abstraction purposes."},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"     * @return String to indicate that the application should terminate."},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) {"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"        return \"See you again soon!\";"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"     * Indicates that this Command should signal to the application that it"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"     * should terminate."},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"     * @return True."},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"    public boolean isQuitCommand() {"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"        return true;"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        return o !\u003d null \u0026\u0026 getClass() \u003d\u003d o.getClass();"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":59}},{"path":"src/main/java/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.TaskManager;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import task.Todo;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":" * Command to add a Todo Task to a TaskManager."},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"public class TodoCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"todo\";"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    public static final CommandType COMMAND_TYPE \u003d CommandType.TODO;"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"    private final String description;"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a TodoCommand that would add a Todo with the supplied description"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"     * to a TaskManager when executed."},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"     * @param description Description of the Todo to be added."},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"    private TodoCommand(String description) {"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"        this.description \u003d description;"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a TodoCommand from a commandMap."},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap representing the instruction."},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"     * @return TodoCommand object based on the commandMap."},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"     * @throws DukeException When the user inputs an illegal instruction for the"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"     * Todo command."},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"    public static TodoCommand fromCommandMap(HashMap\u003cString, List\u003cString\u003e\u003e commandMap)"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"            throws DukeException {"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e descriptionStrings \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"        if (descriptionStrings.isEmpty()) {"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Todo description cannot be empty\");"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"        String description \u003d String.join(\" \", descriptionStrings);"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"        return new TodoCommand(description);"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"     * Adds the specified Todo Task to the supplied TaskManager."},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager TaskManager object to add the Todo Task to."},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"     * @return String response of the action that was performed."},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"    public String execute(TaskManager taskManager) {"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"        return taskManager.addTask(new Todo(description));"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"    public boolean equals(Object o) {"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"        if (this \u003d\u003d o) return true;"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"        TodoCommand that \u003d (TodoCommand) o;"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"        return description.equals(that.description);"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"    public int hashCode() {"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"        return Objects.hash(description);"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":71}},{"path":"src/main/java/nodes/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package nodes;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import javafx.geometry.Insets;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import javafx.geometry.Pos;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.text.Font;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.text.FontPosture;"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"import javafx.scene.text.FontWeight;"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"public class DialogBox extends HBox {"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"    private final Label text;"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    private final ImageView displayPicture;"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"    public DialogBox(Label l, ImageView iv) {"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"        text \u003d l;"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"        displayPicture \u003d iv;"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"        text.setWrapText(true);"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"        text.setFont(Font.font (\"Consolas\"));"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"        Circle clip \u003d new Circle( 50, 50,50);"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"        displayPicture.setFitWidth(100.0);"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"        displayPicture.setFitHeight(100.0);"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"        this.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"        this.getChildren().addAll(text, displayPicture);"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"        var db \u003d new DialogBox(l, iv);"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"        db.setPadding(new Insets(5, 10, 5, 10));"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"        db.setSpacing(10);"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"        db.setAlignment(Pos.CENTER_RIGHT);"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"        db.text.setFont(Font.font(\"Consolas\", FontWeight.BOLD,"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"                FontPosture.REGULAR, 12));"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        db.text.setTextFill(Color.SADDLEBROWN);"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"        return db;"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        var db \u003d new DialogBox(l, iv);"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"        db.setPadding(new Insets(5, 10, 5, 10));"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        db.setSpacing(10);"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"        db.text.setTextFill(Color.DARKSLATEBLUE);"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"        db.flip();"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"        return db;"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"    private void flip() {"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"        this.setAlignment(Pos.CENTER_LEFT);"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":65}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":" * Type of Task that stores a date by which the task should be completed."},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"public class Deadline extends Task {"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"deadline\";"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    public static final String END_DATE_STRING \u003d \"by\";"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"    private final LocalDate endDate;"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a Deadline with the supplied description and date."},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     * @param desc String description of the Deadline."},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     * @param endDate LocalDate object representing the date the Deadline should"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"     *                be completed."},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"    public Deadline(String desc, LocalDate endDate) {"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"        super(desc);"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"     * Overloaded constructor to create a Deadline with the supplied description,"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"     * date and completion status."},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"     * @param desc String description of the Deadline."},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"     * @param endDate LocalDate object representing the date the Deadline should"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"     *                be completed."},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"     * @param isDone True, if the Deadline should be initialised as done."},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"    public Deadline(String desc, LocalDate endDate, boolean isDone) {"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"        super(desc, isDone);"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"     * Parses the saveString generated by toSaveString() back into a Deadline"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"     * object."},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"     * @param saveString String representation of a Deadline object."},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"     * @return Deadline object based on the supplied saveString."},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"    public static Deadline fromSaveString(String saveString) throws IOException  {"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d Parser.parseCommandMap(saveString);"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"        // Attempt to parse the description"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e descriptions;"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"        String description;"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"            descriptions \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"            description \u003d String.join(\" \", descriptions);"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"            throw new IOException(\"Description could not be parsed from: \" + saveString);"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"        // Attempt to parse the date from the saveString"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"        String endDateString;"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        LocalDate endDate;"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"            endDateString \u003d commandMap.get(END_DATE_STRING).get(0);"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"            endDate \u003d LocalDate.parse(endDateString);"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"            throw new IOException(\"Date could not be parsed from: \" + saveString);"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"        boolean isDone \u003d commandMap.containsKey(\"done\");"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"        return new Deadline(description, endDate, isDone);"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"    public String toString() {"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"E, d MMM yy\");"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"        String dateString \u003d endDate.format(dateTimeFormatter);"},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dateString + \")\";"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"    public TaskType getTaskType() {"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"        return TaskType.DEADLINE;"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"    public String getCommandString() {"},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"        return COMMAND_STRING;"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":"     * Convert the Deadline, its state and variables to a String representation"},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"     * that can be parsed to obtain back the same Deadline."},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"Zaiah0505"},"content":"     * @return String representation of the Deadline and its state."},{"lineNumber":106,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"Zaiah0505"},"content":"    public String toSaveString() {"},{"lineNumber":109,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":110,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":111,"author":{"gitId":"Zaiah0505"},"content":"        // Add command flag"},{"lineNumber":112,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(Parser.COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":113,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(Parser.COMMAND_FLAG).add(getCommandString());"},{"lineNumber":114,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":115,"author":{"gitId":"Zaiah0505"},"content":"        // Add description"},{"lineNumber":116,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(getCommandString(), new ArrayList\u003c\u003e());"},{"lineNumber":117,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(getCommandString()).add(super.getDescription());"},{"lineNumber":118,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":119,"author":{"gitId":"Zaiah0505"},"content":"        // Add end date"},{"lineNumber":120,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(END_DATE_STRING, new ArrayList\u003c\u003e());"},{"lineNumber":121,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(END_DATE_STRING).add(endDate.format(ISO_LOCAL_DATE));"},{"lineNumber":122,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":123,"author":{"gitId":"Zaiah0505"},"content":"        // Add done flag"},{"lineNumber":124,"author":{"gitId":"Zaiah0505"},"content":"        if (super.isDone()) {"},{"lineNumber":125,"author":{"gitId":"Zaiah0505"},"content":"            commandMap.put(\"done\", new ArrayList\u003c\u003e());"},{"lineNumber":126,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":128,"author":{"gitId":"Zaiah0505"},"content":"        return Parser.commandMapToString(commandMap);"},{"lineNumber":129,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":130}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":" * Type of Task that stores an event and the date which the event occurs."},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"public class Event extends Task {"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"event\";"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    public static final String EVENT_DATE_STRING \u003d \"at\";"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"    private final LocalDate eventDate;"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs an Event with the supplied description and time."},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     * @param desc String description of the Event."},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     * @param eventDate LocalDate object representing the date the Event occurs."},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"    public Event(String desc, LocalDate eventDate) {"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"        super(desc);"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"     * Overloaded constructor to create an Event with the supplied description,"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"     * date and completion status."},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"     * @param desc String description of the Event."},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"     * @param eventDate LocalDate object representing the date the Event occurs."},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"     * @param isDone True, if the Event should be initialised as done."},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"    public Event(String desc, LocalDate eventDate, boolean isDone) {"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"        super(desc, isDone);"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"     * Parses the saveString generated by toSaveString() back into an Event"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"     * object."},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"     * @param saveString String representation of a Event object."},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"     * @return Event object based on the supplied saveString."},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"    public static Event fromSaveString(String saveString) throws IOException {"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d Parser.parseCommandMap(saveString);"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"        // Attempt to parse the description"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e descriptions;"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"        String description;"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"            descriptions \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"            description \u003d String.join(\" \", descriptions);"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"            throw new IOException(\"Description could not be parsed from: \" + saveString);"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"        // Attempt to parse the date from the saveString"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"        String eventDateString;"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"        LocalDate eventDate;"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"            eventDateString \u003d commandMap.get(EVENT_DATE_STRING).get(0);"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"            eventDate \u003d LocalDate.parse(eventDateString);"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"            throw new IOException(\"Date could not be parsed from: \" + saveString);"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"        boolean isDone \u003d commandMap.containsKey(\"done\");"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"        return new Event(description, eventDate, isDone);"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"E, d MMM yy\");"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"        String dateString \u003d eventDate.format(dateTimeFormatter);"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + dateString + \")\";"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"    public TaskType getTaskType() {"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"        return TaskType.EVENT;"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"    public String getCommandString() {"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"        return COMMAND_STRING;"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"     * Convert the Event, its state and variables to a String representation"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":"     * that can be parsed to obtain back the same Event."},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":"     * @return String representation of the Event and its state."},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"Zaiah0505"},"content":"    public String toSaveString() {"},{"lineNumber":106,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":107,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":108,"author":{"gitId":"Zaiah0505"},"content":"        // Add command flag"},{"lineNumber":109,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(Parser.COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":110,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(Parser.COMMAND_FLAG).add(getCommandString());"},{"lineNumber":111,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":112,"author":{"gitId":"Zaiah0505"},"content":"        // Add description"},{"lineNumber":113,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(getCommandString(), new ArrayList\u003c\u003e());"},{"lineNumber":114,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(getCommandString()).add(super.getDescription());"},{"lineNumber":115,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":116,"author":{"gitId":"Zaiah0505"},"content":"        // Add end date"},{"lineNumber":117,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(EVENT_DATE_STRING, new ArrayList\u003c\u003e());"},{"lineNumber":118,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(EVENT_DATE_STRING).add(eventDate.format(ISO_LOCAL_DATE));"},{"lineNumber":119,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":120,"author":{"gitId":"Zaiah0505"},"content":"        // Add done flag"},{"lineNumber":121,"author":{"gitId":"Zaiah0505"},"content":"        if (super.isDone()) {"},{"lineNumber":122,"author":{"gitId":"Zaiah0505"},"content":"            commandMap.put(\"done\", new ArrayList\u003c\u003e());"},{"lineNumber":123,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":125,"author":{"gitId":"Zaiah0505"},"content":"        return Parser.commandMapToString(commandMap);"},{"lineNumber":126,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":127}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":" * Task to represent an objective for the user to complete."},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"    private final String description;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a Task objective with the supplied description. Tasks created"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"     * this way are marked as isDone \u003d false by default."},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"     * @param desc String description of the Task."},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    public Task(String desc) {"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"        this.description \u003d desc;"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"     * Overloaded constructor to create a Task with the supplied description and"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"     * completion status."},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     * @param desc String description of the Task."},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     * @param isDone True, if the Task should be initialised as done."},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"    public Task(String desc, boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"        this.description \u003d desc;"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"    public String getDescription() {"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"        return description;"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"    public void markDone() {"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"        this.isDone \u003d true;"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"     * Returns a tick if the task is completed and a blank character if not."},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"     * @return Tick, if done and space if not done."},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"    public String getStatusIcon() {"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"        return (isDone ? \"\\u2713\" : \" \"); //return blank or tick symbol"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"    public abstract TaskType getTaskType();"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"    public boolean isDone() {"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        return isDone;"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"    public abstract String getCommandString();"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"     * Convert the object, its state and variables to a String representation"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"     * that can be parsed to obtain back the same object. The implementing class"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"     * should also have a static fromSaveString(String) method to reconstruct"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"     * the object from the saveString."},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"     * @return String representation of the object and its state."},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"    public abstract String toSaveString();"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":71}},{"path":"src/main/java/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import util.DukeException;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"public class TaskManager {"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"    private final ArrayList\u003cTask\u003e taskList;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"    public TaskManager() {"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    private String taskCountMsg() {"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"        return \"\\nNow you have \" + taskList.size() + \" task(s) in your list\";"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    public List\u003cTask\u003e getTasks() {"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"        return this.taskList;"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"    public String addTask(Task task) {"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"        taskList.add(task);"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"        return \"Gotcha. I\u0027ve added the task: \\n\""},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"                + task"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"                + taskCountMsg();"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    public String markTaskDone(int position) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"            taskList.get(position).markDone();"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please enter a number within the list.\");"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"        return \"Nice, another job well done!\\n\""},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"                + taskList.get(position).toString();"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"    public String deleteTask(int position) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        Task taskToRemove;"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"            taskToRemove \u003d taskList.get(position);"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"            taskList.remove(position);"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Please enter a number within the list.\");"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        return \"I\u0027ve removed the task:\\n\""},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"                + taskToRemove.toString()"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"                + taskCountMsg();"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"    public String toSaveString() {"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"        return taskList.stream()"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"                .map(Task::toSaveString)"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"                .collect(Collectors.joining(\"\\n\"));"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":60}},{"path":"src/main/java/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"public enum TaskType {"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"    DEADLINE,"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"    EVENT"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":7}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import util.Parser;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":" * Type of Task that stores a task with no deadline."},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"public class Todo extends Task {"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"    public static final String COMMAND_STRING \u003d \"todo\";"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"     * Constructs a Todo with the supplied description."},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"     * @param description String description of the Todo."},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"    public Todo(String description) {"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     * Overloaded constructor to create a Deadline with the supplied description"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     * and completion status."},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"     * @param description String description of the Todo."},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"     * @param isDone True, if the Todo should be initialised as done."},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"        super(description, isDone);"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"     * Parses the saveString generated by toSaveString() back into a Todo object."},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"     * @param saveString String representation of a Todo object."},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"     * @return Todo object based on the supplied saveString."},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"    public static Todo fromSaveString(String saveString) throws IOException {"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d Parser.parseCommandMap(saveString);"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"        // Attempt to parse the description"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e descriptions;"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"        String description;"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"            descriptions \u003d commandMap.get(COMMAND_STRING);"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"            description \u003d String.join(\" \", descriptions);"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"            throw new IOException(\"Description could not be parsed from: \" + saveString);"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"        boolean isDone \u003d commandMap.containsKey(\"done\");"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"        return new Todo(description, isDone);"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"    public TaskType getTaskType() {"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"        return TaskType.TODO;"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"    public String getCommandString() {"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        return COMMAND_STRING;"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"     * Convert the Todo, its state and variables to a String representation"},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"     * that can be parsed to obtain back the same Todo."},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"     * @return String representation of the Todo and its state."},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"    public String toSaveString() {"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"        // Add command flag"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(Parser.COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(Parser.COMMAND_FLAG).add(getCommandString());"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"        // Add description"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(getCommandString(), new ArrayList\u003c\u003e());"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(getCommandString()).add(super.getDescription());"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"        // Add done flag"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"        if (super.isDone()) {"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"            commandMap.put(\"done\", new ArrayList\u003c\u003e());"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"        return Parser.commandMapToString(commandMap);"},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":100}},{"path":"src/main/java/util/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package util;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":" * Used to represent Exceptions related to parsing errors due to invalid user input."},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"    private final String msg;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"    public DukeException(String msg) {"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"        this.msg \u003d msg;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"    public String getMsg() {"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"        return msg;"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":16}},{"path":"src/main/java/util/Formatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package util;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":" * Public interface to provide convenient text formatting."},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"public interface Formatter {"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"     * Wraps text in command-line style dashed lines before and after the text."},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"     * @param output The text to be formatted."},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"     * @return Formatted text."},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"    static String formatOut(String output) {"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"        String opening \u003d \"\\\"----------------------------------------\\n\";"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"        String closing \u003d \"----------------------------------------\\\"\\n\";"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"        String combined \u003d opening + output + \"\\n\" + closing;"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"        return addIndent(combined);"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     * Adds numbering to each string in the strArray and returns a single String."},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"     * @param strArray Array of Strings to be formatted as a single list."},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"     * @return String with new line chars to represent the list."},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"    static String formatList(String[] strArray) {"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"        for (int i \u003d 0; i \u003c strArray.length; i++) {"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"            strArray[i] \u003d (i + 1) + \". \" + strArray[i];"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"        return String.join(\"\\n\", strArray);"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"    static String formatList(List\u003cString\u003e strList) {"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"        String[] strArr \u003d strList.toArray(new String[]{});"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"        return formatList(strArr);"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"     * Prefixes a tab character to every new line in the input string, providing"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"     * indentation to the whole string."},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"     * @param string String to be formatted."},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"     * @return Indented String."},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"    static String addIndent(String string) {"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        String[] strings \u003d string.split(\"\\n\");"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"        return Arrays.stream(strings)"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"                .map(s -\u003e \u0027\\t\u0027 + s)"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"                .collect(Collectors.joining(\"\\n\"));"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":55}},{"path":"src/main/java/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package util;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import command.*;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":" * Parser is a utility interface that specifies the convention for the CommandMap"},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":" * HashMap structure. Parser is also responsible for converting user input into"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":" * valid CommandMaps and existing Tasks into saveStrings for storage in the save file."},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"public interface Parser {"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"    String COMMAND_FLAG \u003d \"COMMAND_FLAG_IDENTIFIER\";"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"     * Parses the user input into an executable Command object"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"     * @param input String input from the user."},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"     * @return Command object representing the user\u0027s instructions."},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     * @throws DukeException Whenever the user inputs an illegal instruction."},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"    static Command parseCommand(String input) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d parseCommandMap(input);"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"        String commandFlag \u003d commandMap.get(COMMAND_FLAG).get(0);"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"        switch (commandFlag) {"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"        case HelpCommand.COMMAND_STRING:"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"            return HelpCommand.fromCommandMap(commandMap);"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"        case ListCommand.COMMAND_STRING:"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"            return ListCommand.fromCommandMap(commandMap);"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"        case FindCommand.COMMAND_STRING:"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"            return FindCommand.fromCommandMap(commandMap);"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"        case TodoCommand.COMMAND_STRING:"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"            return TodoCommand.fromCommandMap(commandMap);"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"        case DeadlineCommand.COMMAND_STRING:"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"            return DeadlineCommand.fromCommandMap(commandMap);"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"        case EventCommand.COMMAND_STRING:"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"            return EventCommand.fromCommandMap(commandMap);"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"        case DoneCommand.COMMAND_STRING:"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"            return DoneCommand.fromCommandMap(commandMap);"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"        case DeleteCommand.COMMAND_STRING:"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"            return DeleteCommand.fromCommandMap(commandMap);"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"        case QuitCommand.COMMAND_STRING:"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"            return QuitCommand.fromCommandMap(commandMap);"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"        default:"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"            throw new DukeException(\"Sorry I didn\u0027t understand \""},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"                    + \"\\\"\" + commandFlag + \"\\\"!\\n\""},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"                    + \"Try typing \\\"help\\\" to see the available commands.\");"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"     * Parses the user input into a commandMap."},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"     * @param input String input from the user."},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":"     * @return HashMap representing the commandMap of the user\u0027s input"},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"    static HashMap\u003cString, List\u003cString\u003e\u003e parseCommandMap(String input) {"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"        // Insert COMMAND flag"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"        String command \u003d input.split(\" \", 2)[0];"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(COMMAND_FLAG).add(command);"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        // Insert other flags"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"        String[] flagInputs \u003d input.split(\"/\");"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"        for (String flagInput : flagInputs) {"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"            String[] args \u003d flagInput.split(\" \");"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"            // Filter out double spaces"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"            List\u003cString\u003e argList \u003d Arrays.stream(args)"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"                    .filter(x -\u003e !(x.equals(\"\")))"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"            // Continue if no flag was specified"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"            if (argList.isEmpty()) {"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"                continue;"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"            // Create flag and its ArrayList"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"            String flag \u003d argList.get(0);"},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"            commandMap.put(flag, new ArrayList\u003c\u003e());"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"            // Insert the rest of the args to the flag"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"            for (int i \u003d 1; i \u003c argList.size(); i++) {"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"                commandMap.get(flag).add(argList.get(i));"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"        return commandMap;"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":"     * Extracts the command or first word from a commandMap."},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap CommandMap to be parsed."},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"     * @return The first word or command in the commandMap."},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"Zaiah0505"},"content":"    static String extractCommandString(HashMap\u003cString, List\u003cString\u003e\u003e commandMap) {"},{"lineNumber":106,"author":{"gitId":"Zaiah0505"},"content":"        return commandMap.get(COMMAND_FLAG).get(0);"},{"lineNumber":107,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":109,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"Zaiah0505"},"content":"     * Converts a commandMap into a string representation that can be parsed to"},{"lineNumber":111,"author":{"gitId":"Zaiah0505"},"content":"     * obtain the same commandMap. Should produce the inverse output of"},{"lineNumber":112,"author":{"gitId":"Zaiah0505"},"content":"     * parseCommandMap(String: )"},{"lineNumber":113,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"Zaiah0505"},"content":"     * @param commandMap Command map to be translated into a String instruction."},{"lineNumber":115,"author":{"gitId":"Zaiah0505"},"content":"     * @return A String representation that can be parsed to obtain back the same"},{"lineNumber":116,"author":{"gitId":"Zaiah0505"},"content":"     *         commandMap."},{"lineNumber":117,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"Zaiah0505"},"content":"    static String commandMapToString(HashMap\u003cString, List\u003cString\u003e\u003e commandMap) {"},{"lineNumber":119,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":121,"author":{"gitId":"Zaiah0505"},"content":"        String command \u003d extractCommandString(commandMap);"},{"lineNumber":122,"author":{"gitId":"Zaiah0505"},"content":"        List\u003cString\u003e descriptions \u003d commandMap.get(command);"},{"lineNumber":123,"author":{"gitId":"Zaiah0505"},"content":"        String description \u003d String.join(\" \", descriptions);"},{"lineNumber":124,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":125,"author":{"gitId":"Zaiah0505"},"content":"        results.add(command + \" \" + description);"},{"lineNumber":126,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":127,"author":{"gitId":"Zaiah0505"},"content":"        for (String k : commandMap.keySet()) {"},{"lineNumber":128,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":129,"author":{"gitId":"Zaiah0505"},"content":"            // Skip adding the command flag"},{"lineNumber":130,"author":{"gitId":"Zaiah0505"},"content":"            if (k.equals(COMMAND_FLAG)) continue;"},{"lineNumber":131,"author":{"gitId":"Zaiah0505"},"content":"            // Skip the first command + description"},{"lineNumber":132,"author":{"gitId":"Zaiah0505"},"content":"            if (k.equals(command)) continue;"},{"lineNumber":133,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":134,"author":{"gitId":"Zaiah0505"},"content":"            List\u003cString\u003e args \u003d commandMap.get(k);"},{"lineNumber":135,"author":{"gitId":"Zaiah0505"},"content":"            String argString \u003d String.join(\" \", args);"},{"lineNumber":136,"author":{"gitId":"Zaiah0505"},"content":"            results.add(k + \" \" + argString);"},{"lineNumber":137,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":139,"author":{"gitId":"Zaiah0505"},"content":"        return String.join(\"/\", results);"},{"lineNumber":140,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":141}},{"path":"src/main/java/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package util;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import task.*;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"import static util.Parser.extractCommandString;"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"import static util.Parser.parseCommandMap;"},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"    private final String first;"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"    private final String[] more;"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"     * Creates a Storage object instance, which will handle the storing and retrieval"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"     * of TaskManager objects from the specified save file path."},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"     * @param first Base directory for the save file."},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"     * @param more  Additional path directories for the save file."},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"    public Storage(String first, String... more) {"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"        this.first \u003d first;"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":"        this.more \u003d more;"},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"     * Returns the save file specified by the Storage object instance. If an"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":"     * existing save file does not exist in the path provided, automatically"},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"     * creates the required directories and file and returns the resulting File."},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"     * @return Save file"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"     * @throws IOException When the save file cannot be read or written to."},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"    public File getFile() throws IOException {"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"        Path savePath \u003d Path.of(first, more);"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"        File file \u003d new File(savePath.toString());"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        (new File(savePath.getParent().toString())).mkdir();"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":"        file.createNewFile();"},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"        return file;"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"     * Writes the supplied String to the save file. Overwrites any existing lines"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"     * already present in the file."},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"     * @param saveString String to be written into the save file."},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"     * @throws IOException When the save file cannot be written to."},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"    public void writeToFile(String saveString) throws IOException {"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"        File file \u003d getFile();"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":"        FileWriter fw \u003d new FileWriter(file);"},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"        fw.write(saveString);"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"        fw.close();"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"     * Returns a TaskManager represented by the information stored in the save file."},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"     * @return TaskManager object represented by the information stored in the save file."},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"     * @throws IOException When the save file cannot be read from, or when the"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"     *                     information inside the save file has been corrupted."},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"    public TaskManager readTaskManager() throws IOException {"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"        File file \u003d getFile();"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        Scanner sc \u003d new Scanner(file);"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"        TaskManager taskManager \u003d new TaskManager();"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":"            String saveLine \u003d sc.nextLine();"},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"            Task newTask \u003d readTask(saveLine);"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"            taskManager.addTask(newTask);"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"        return taskManager;"},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"     * Supporting method for readTaskManager. Converts a saveString into a Task"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"     * @param saveString SaveString representing the Task saved in disk."},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"     * @return Task that was represented by the saveString."},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":"     * @throws IOException When a Task cannot be parsed from the saveString due to"},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"     *                     a corrupted saveString."},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"    private Task readTask(String saveString) throws IOException {"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d parseCommandMap(saveString);"},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"        String command \u003d extractCommandString(commandMap);"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"        switch (command) {"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"        case Todo.COMMAND_STRING:"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"            return Todo.fromSaveString(saveString);"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"        case Deadline.COMMAND_STRING:"},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"            return Deadline.fromSaveString(saveString);"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"        case Event.COMMAND_STRING:"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":"            return Event.fromSaveString(saveString);"},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"        default:"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":"            throw new IOException(\"Save file cannot be read\");"},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":106,"author":{"gitId":"Zaiah0505"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"Zaiah0505"},"content":"     * Stores the TaskManager\u0027s current state as text in the save file."},{"lineNumber":108,"author":{"gitId":"Zaiah0505"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"Zaiah0505"},"content":"     * @param taskManager TaskManager to be saved in the save file."},{"lineNumber":110,"author":{"gitId":"Zaiah0505"},"content":"     * @throws IOException When the save file cannot be written to."},{"lineNumber":111,"author":{"gitId":"Zaiah0505"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"Zaiah0505"},"content":"    public void writeTaskManager(TaskManager taskManager) throws IOException {"},{"lineNumber":113,"author":{"gitId":"Zaiah0505"},"content":"        String saveString \u003d taskManager.toSaveString();"},{"lineNumber":114,"author":{"gitId":"Zaiah0505"},"content":"        writeToFile(saveString);"},{"lineNumber":115,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":116}},{"path":"src/main/java/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package util;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"public interface Ui {"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"    static String greeting() {"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"        String logo \u003d \" _____  _    _ _____ _   _ \\n\" +"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"                \"/  ___|| |  | |  ___| | | | \\n\" +"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"                \"\\\\ `--. | |  | | |__ | |_| | \\n\" +"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"                \" `--. \\\\| |/\\\\| |  __||  _  | \\n\" +"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"                \"/\\\\__/ /\\\\  /\\\\  / |___| | | | \\n\" +"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"                \"\\\\____/  \\\\/  \\\\/\\\\____/\\\\_| |_/ \\n\";"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":"        return \"Hello, I am\\n\""},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"                + logo"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":"                + \"\\nYour Simple Word-Executed Helper!\""},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"                + \"\\nWhat shall we do today?\\n\";"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"    static void printGreeting() {"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"        System.out.println(greeting());"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"    static void printOutput(String output) {"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"        System.out.println(Formatter.formatOut(output));"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":25}},{"path":"src/test/java/util/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package util;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import command.*;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"import static util.Parser.COMMAND_FLAG;"},{"lineNumber":12,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":13,"author":{"gitId":"Zaiah0505"},"content":"class ParserTest {"},{"lineNumber":14,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":15,"author":{"gitId":"Zaiah0505"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"Zaiah0505"},"content":"    void parseCommand1() throws DukeException {"},{"lineNumber":17,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":19,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(COMMAND_FLAG).add(\"event\");"},{"lineNumber":20,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"event\", new ArrayList\u003c\u003e());"},{"lineNumber":21,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"event\").add(\"im\");"},{"lineNumber":22,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"event\").add(\"a\");"},{"lineNumber":23,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"event\").add(\"description\");"},{"lineNumber":24,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"at\", new ArrayList\u003c\u003e());"},{"lineNumber":25,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"at\").add(\"2021-02-19\");"},{"lineNumber":26,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"tap\", new ArrayList\u003c\u003e());"},{"lineNumber":27,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"tap\").add(\"ignore\");"},{"lineNumber":28,"author":{"gitId":"Zaiah0505"},"content":"        Command referenceCommand \u003d EventCommand.fromCommandMap(commandMap);"},{"lineNumber":29,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":30,"author":{"gitId":"Zaiah0505"},"content":"        Command parsedCommand \u003d"},{"lineNumber":31,"author":{"gitId":"Zaiah0505"},"content":"                Parser.parseCommand(\"event   im a description /tap ignore  /at 2021-02-19\");"},{"lineNumber":32,"author":{"gitId":"Zaiah0505"},"content":"        assertEquals(referenceCommand, parsedCommand);"},{"lineNumber":33,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":35,"author":{"gitId":"Zaiah0505"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Zaiah0505"},"content":"    void parseCommand2() throws DukeException {"},{"lineNumber":37,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":39,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(COMMAND_FLAG).add(\"find\");"},{"lineNumber":40,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"find\", new ArrayList\u003c\u003e());"},{"lineNumber":41,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"find\").add(\"apple\");"},{"lineNumber":42,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"find\").add(\"bee\");"},{"lineNumber":43,"author":{"gitId":"Zaiah0505"},"content":"        Command referenceCommand \u003d FindCommand.fromCommandMap(commandMap);"},{"lineNumber":44,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":45,"author":{"gitId":"Zaiah0505"},"content":"        Command parsedCommand \u003d Parser.parseCommand(\"find  apple bee\");"},{"lineNumber":46,"author":{"gitId":"Zaiah0505"},"content":"        assertEquals(referenceCommand, parsedCommand);"},{"lineNumber":47,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":49,"author":{"gitId":"Zaiah0505"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"Zaiah0505"},"content":"    void parseCommand3() throws DukeException {"},{"lineNumber":51,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":53,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(COMMAND_FLAG).add(\"help\");"},{"lineNumber":54,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"help\", new ArrayList\u003c\u003e());"},{"lineNumber":55,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"help\").add(\"event\");"},{"lineNumber":56,"author":{"gitId":"Zaiah0505"},"content":"        Command referenceCommand \u003d HelpCommand.fromCommandMap(commandMap);"},{"lineNumber":57,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":58,"author":{"gitId":"Zaiah0505"},"content":"        Command parsedCommand \u003d Parser.parseCommand(\"help event\");"},{"lineNumber":59,"author":{"gitId":"Zaiah0505"},"content":"        assertEquals(referenceCommand, parsedCommand);"},{"lineNumber":60,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":62,"author":{"gitId":"Zaiah0505"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"Zaiah0505"},"content":"    void commandMapToString1() {"},{"lineNumber":64,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":66,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(COMMAND_FLAG).add(\"event\");"},{"lineNumber":67,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"event\", new ArrayList\u003c\u003e());"},{"lineNumber":68,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"event\").add(\"im\");"},{"lineNumber":69,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"event\").add(\"a\");"},{"lineNumber":70,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"event\").add(\"description\");"},{"lineNumber":71,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"at\", new ArrayList\u003c\u003e());"},{"lineNumber":72,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"at\").add(\"2021-02-19\");"},{"lineNumber":73,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"tap\", new ArrayList\u003c\u003e());"},{"lineNumber":74,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"tap\").add(\"ignore\");"},{"lineNumber":75,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":76,"author":{"gitId":"Zaiah0505"},"content":"        String commandString \u003d Parser.commandMapToString(commandMap);"},{"lineNumber":77,"author":{"gitId":"Zaiah0505"},"content":"        assertEquals(commandString, \"event im a description/tap ignore/at 2021-02-19\");"},{"lineNumber":78,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":80,"author":{"gitId":"Zaiah0505"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"Zaiah0505"},"content":"    void commandMapToString2() {"},{"lineNumber":82,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":83,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":84,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(COMMAND_FLAG).add(\"find\");"},{"lineNumber":85,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"find\", new ArrayList\u003c\u003e());"},{"lineNumber":86,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"find\").add(\"apple\");"},{"lineNumber":87,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"find\").add(\"bee\");"},{"lineNumber":88,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":89,"author":{"gitId":"Zaiah0505"},"content":"        String commandString \u003d Parser.commandMapToString(commandMap);"},{"lineNumber":90,"author":{"gitId":"Zaiah0505"},"content":"        assertEquals(commandString, \"find apple bee\");"},{"lineNumber":91,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":93,"author":{"gitId":"Zaiah0505"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"Zaiah0505"},"content":"    void commandMapToString3() {"},{"lineNumber":95,"author":{"gitId":"Zaiah0505"},"content":"        HashMap\u003cString, List\u003cString\u003e\u003e commandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":96,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(COMMAND_FLAG, new ArrayList\u003c\u003e());"},{"lineNumber":97,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(COMMAND_FLAG).add(\"help\");"},{"lineNumber":98,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.put(\"help\", new ArrayList\u003c\u003e());"},{"lineNumber":99,"author":{"gitId":"Zaiah0505"},"content":"        commandMap.get(\"help\").add(\"event\");"},{"lineNumber":100,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":101,"author":{"gitId":"Zaiah0505"},"content":"        String commandString \u003d Parser.commandMapToString(commandMap);"},{"lineNumber":102,"author":{"gitId":"Zaiah0505"},"content":"        assertEquals(commandString, \"help event\");"},{"lineNumber":103,"author":{"gitId":"Zaiah0505"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":104}},{"path":"src/test/java/util/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"package util;"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":9,"author":{"gitId":"Zaiah0505"},"content":"class StorageTest {"},{"lineNumber":10,"author":{"gitId":"Zaiah0505"},"content":""},{"lineNumber":11,"author":{"gitId":"Zaiah0505"},"content":"}"}],"authorContributionMap":{"Zaiah0505":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Zaiah0505"},"content":"asdf"},{"lineNumber":2,"author":{"gitId":"Zaiah0505"},"content":"event Gym with the boys /at 2pm"},{"lineNumber":3,"author":{"gitId":"Zaiah0505"},"content":"deadline Finish 2103 iP /by Thu"},{"lineNumber":4,"author":{"gitId":"Zaiah0505"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"Zaiah0505"},"content":"todo Make CS2040 TA Slides"},{"lineNumber":6,"author":{"gitId":"Zaiah0505"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Zaiah0505"},"content":"bye"}],"authorContributionMap":{"Zaiah0505":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Zaiah0505"},"content":"java -classpath ..\\bin Sweh \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Zaiah0505":1,"-":20}}]
