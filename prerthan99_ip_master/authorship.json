[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"# Setting up"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"**Prerequisites**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"* JDK 11"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"* Recommended: IntelliJ IDE"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"* Fork this repo to your GitHub account and clone the fork to your computer"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"**Importing the project into IntelliJ**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"1. Set up the correct JDK version."},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"   * Click `OK`."},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"1. Click `Import Project`."},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"1. Locate the project directory and click `OK`."},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"1. Select `Create project from existing sources` and click `Next`."},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"1. Rename the project if you want. Click `Next`."},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"1. Ensure that your src folder is checked. Keep clicking `Next`."},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"1. Click `Finish`."},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"# Tutorials "},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"Duke Increment | Tutorial"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"---------------|---------------"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"# Feedback, Bug Reports"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"* We welcome pull requests too."}],"authorContributionMap":{"prerthan99":39}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"dependencies {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"group \u0027sharadhr.duke\u0027"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"version \u00270.1.0\u0027"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"application {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    // Change this to your main class."},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    mainClassName \u003d \"sharadhr.duke.Duke\""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"run {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    standardInput \u003d System.in"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"repositories {"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    mavenCentral()"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"checkstyle {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"    archiveVersion \u003d \"0.1\""},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"    archiveAppendix \u003d null"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"test {"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"    useJUnitPlatform()"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":59}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"@rem Find java.exe"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"echo location of your Java installation."},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"goto fail"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":":findJavaFromJavaHome"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"echo location of your Java installation."},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"goto fail"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":":init"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":":win9xME_args"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"@rem Slurp the command line arguments."},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"set _SKIP\u003d2"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":":win9xME_args_slurp"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":":execute"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"@rem Setup the command line"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"@rem Execute Gradle"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":":end"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":":fail"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"exit /b 1"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":":mainEnd"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":":omega"}],"authorContributionMap":{"prerthan99":100}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"rootProject.name \u003d \u0027duke\u0027"}],"authorContributionMap":{"prerthan99":1}},{"path":"src/main/java/prerthan/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidCommandException;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidDateException;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Input;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":" *"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"public class Duke"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\tpublic static TaskList tasks;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\tpublic static Input input;"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\tpublic static Output output;"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\tpublic static Storage fileRW;"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t * Runs the main program loop."},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t * @return {@code false} when the user says \u0027bye\u0027; otherwise, never returns."},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\tpublic static boolean programLoop()"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t\tboolean isExit \u003d false;"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t\twhile (!isExit)"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t\t\ttry"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tOptional\u003cCommand\u003e possibleCommand \u003d input.nextLine().getCommand();"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tif (!possibleCommand.isPresent())"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t{"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\toutput.say(\"Input cannot be empty; please enter a command.\");"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\tcontinue;"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t}"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tpossibleCommand.get().execute(tasks, fileRW, output);"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tisExit \u003d possibleCommand.get().willTerminate();"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t\t\t}"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t\t\tcatch (DukeInvalidArgumentException | DukeInvalidCommandException | DukeEmptyDetailException"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t| DukeInvalidDateException e)"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t\t\t\toutput.sayError(e);"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t\t\t}"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t\treturn isExit;"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t * Cleans up objects and quits the program by calling {@link System#exit(int)}."},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\tpublic static void exit()"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t\toutput.sayGoodBye();"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t\t"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"\t\tinput.close();"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t\toutput.close();"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"\t\tPlatform.exit();"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"\t\tSystem.exit(0);"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"\tpublic static void main(String[] args)"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"\t\t// Initialises file and UI I/O"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"\t\tfileRW \u003d new Storage(\"data\", \"duke.txt\");"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"\t\tinput \u003d new Input();"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"\t\toutput \u003d new Output();"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"\t\t"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"\t\t// Greets the user."},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"\t\toutput.sayHello();"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"\t\t"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"\t\t// Creates the task list"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"\t\ttasks \u003d fileRW.loadFromFile();"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"\t\t"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"\t\tif (programLoop())"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"\t\t\texit();"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"\tpublic String getResponse(String input)"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"\t\treturn \"\";"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":92}},{"path":"src/main/java/prerthan/duke/DukeLauncher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class DukeLauncher"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"    public static void main(String[] args)"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":14}},{"path":"src/main/java/prerthan/duke/IO/Input.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.command.*;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedReader;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.io.InputStreamReader;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import java.util.regex.Pattern;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" * A class to accept and parse user inputs from the input stream."},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"public class Input {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    private static BufferedReader reader;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    private static final Pattern whitespace \u003d Pattern.compile(\"\\\\s+\");"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    private static final Pattern slashCommands \u003d Pattern.compile(\"(?i)\\\\/((from)|(to)|(at)|(by)|(on))\");"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    static String readline() {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"            return reader.readLine();"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"        } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"            System.err.println(\"I/O exception occurred.\");"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"            return \"\";"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    // Instance"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    protected String line;"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    protected String[] tokens;"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    public Input() {"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        reader \u003d new BufferedReader(new InputStreamReader(System.in));"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"     * Gets the next line in the input stream, and stores it. Returns this object"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"     * for method chaining."},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"     * @return this {@link Input} object, with the cursor advanced by one line."},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    public Input nextLine() {"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        this.line \u003d readline();"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"        this.tokens \u003d whitespace.split(this.line.trim());"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        return this;"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"     * Returns the current line of input as a {@link String} array of tokens, where"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"     * the {@link String} is trimmed and separated by any whitespace character."},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"     * @return the current line, tokenised."},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"    public String[] getTokens()"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"\t    this.tokens \u003d this.tokens.length \u003d\u003d 0 ? whitespace.split(this.line.trim()) : this.tokens;"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t    return this.tokens;"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"\t * Returns the current line of input as a {@link Stream} of {@link String}s,"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"\t * trimmed and tokenised by any whitespace character."},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"\t * @return the current line of input as a {@link Stream}\u003c{@link String}\u003e."},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"\tpublic Stream\u003cString\u003e getTokenStream()"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"\t\treturn Stream.of(this.getTokens());"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"\tString getFirstToken()"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.getTokens()[0];"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"\t * Returns a {@link Command}, using the first token in the user input,"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\t * appropriately parsed with the rest of the user input."},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"\t * @return the user input as an executable {@link Command} object, containing the parsed and tokenised input."},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidArgumentException if the arguments to the command are incorrect"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidCommandException  if the command itself is invalid."},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"\tpublic Optional\u003cCommand\u003e getCommand()"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrows DukeInvalidArgumentException, DukeInvalidCommandException"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"\t\tString commandString \u003d this.getFirstToken();"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"\t\tCommand.CommandName cmd \u003d Command.whichCommand(commandString);"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"\t\tswitch (cmd)"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase TODO:"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.of(new AddCommand(this.getDetail(), cmd));"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase DEADLINE:"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional"},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\t.of(new AddCommand(this.getDetail(), this.getFirstTimeString(), cmd));"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase EVENT:"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.of(new AddCommand(this.getDetail(), this.getFirstTimeString(),"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\tthis.getNextTimeString(), cmd));"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase LIST:"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.of(new ListCommand(this.tokensWithoutFirst()));"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase DONE:"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.of(new DoneCommand(this.tokensWithoutFirst()));"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase FIND:"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.of(new FindCommand(this.tokensWithoutFirst()));"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase DELETE:"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.of(new DeleteCommand(this.tokensWithoutFirst()));"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase EMPTY:"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.empty();"},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase INVALID:"},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tthrow new DukeInvalidCommandException(commandString,"},{"lineNumber":118,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\tthis.getClass().getSimpleName());"},{"lineNumber":119,"author":{"gitId":"prerthan99"},"content":"\t\t\tcase BYE:"},{"lineNumber":120,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.of(new ByeCommand(this.tokensWithoutFirst()));"},{"lineNumber":121,"author":{"gitId":"prerthan99"},"content":"\t\t\tdefault:"},{"lineNumber":122,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn Optional.empty();"},{"lineNumber":123,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":124,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":125,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":126,"author":{"gitId":"prerthan99"},"content":"\tpublic String[] tokensWithoutFirst()"},{"lineNumber":127,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":128,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.getTokenStream().skip(1).toArray(String[]::new);"},{"lineNumber":129,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":130,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":131,"author":{"gitId":"prerthan99"},"content":"\tpublic String inputWithoutFirstToken()"},{"lineNumber":132,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":133,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.getTokenStream().skip(1).collect(Collectors.joining(\" \"));"},{"lineNumber":134,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":135,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":136,"author":{"gitId":"prerthan99"},"content":"\tpublic String getDetail()"},{"lineNumber":137,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":138,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.getTokenStream().skip(1).takeWhile(slashCommands.asMatchPredicate().negate())"},{"lineNumber":139,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.collect(Collectors.joining(\" \"));"},{"lineNumber":140,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":141,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":142,"author":{"gitId":"prerthan99"},"content":"\tpublic String getFirstTimeString()"},{"lineNumber":143,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":144,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"},{"lineNumber":145,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.takeWhile(slashCommands.asMatchPredicate().negate())"},{"lineNumber":146,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.collect(Collectors.joining(\" \"));"},{"lineNumber":147,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":148,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":149,"author":{"gitId":"prerthan99"},"content":"\tpublic String getNextTimeString()"},{"lineNumber":150,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":151,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"},{"lineNumber":152,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"},{"lineNumber":153,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.collect(Collectors.joining(\" \"));"},{"lineNumber":154,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":155,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":156,"author":{"gitId":"prerthan99"},"content":"\tpublic void close()"},{"lineNumber":157,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":158,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":159,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":160,"author":{"gitId":"prerthan99"},"content":"\t\t\treader.close();"},{"lineNumber":161,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":162,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (IOException e)"},{"lineNumber":163,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":164,"author":{"gitId":"prerthan99"},"content":"\t\t\tSystem.err.println(\"I/O Exception occurred.\");"},{"lineNumber":165,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":166,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":167,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":167}},{"path":"src/main/java/prerthan/duke/IO/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedWriter;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.io.OutputStreamWriter;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * A class to neatly format and write any output from the organiser chat bot,"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" * Duke, to the standard output."},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"public class Output"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\tstatic final String logo \u003d"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t\t\t\"\\n ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t+ \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\tBufferedWriter writer;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\tpublic Output()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t\tthis.writer \u003d new BufferedWriter(new OutputStreamWriter(System.out));"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t/////////////////////////////////////////////////////////////////////////"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t// Instance"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t/////////////////////////////////////////////////////////////////////////"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\tstatic void ioException()"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t\tSystem.err.println(\"I/O Exception occurred.\");"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\tvoid appendWithNewline(String string)"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t\t\tthis.writer.append(string);"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t\t\tthis.writer.newLine();"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (Exception e)"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t\t\tioException();"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\tvoid appendWithNewline(String... strings)"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t\tArrays.asList(strings).forEach(this::appendWithNewline);"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t * Appends {@code message} to this {@link sharadhr.duke.io.Output} object"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t * @param message the {@link String} to append to this object"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\tpublic void add(String message)"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t\t\tthis.writer.append(message);"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (Exception e)"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"\t\t\tioException();"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"\t * Flushes the contents of this writer\u0027s buffer to the standard output."},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"\tpublic void say()"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"\t\t\tthis.writer.flush();"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (Exception e)"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"\t\t\tioException();"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\t * Writes a {@code String}) to the standard output."},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"\t * @param message The message to be written"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"\tpublic void say(String message)"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"\t\t\tthis.appendWithNewline(message);"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"\t\t\tthis.writer.flush();"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (Exception e)"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"\t\t\tioException();"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"\t * Writes multiple messages to the standard output. These messages are given as"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"\t * a comma-separated list of {@link String}s."},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"\t * @param messages The list of messages to be written to standard output"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"\tpublic void say(String... messages)"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"\t\t\tthis.appendWithNewline(messages);"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"\t\t\twriter.flush();"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (Exception e)"},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"\t\t\tioException();"},{"lineNumber":118,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":119,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":120,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":121,"author":{"gitId":"prerthan99"},"content":"\tpublic void sayError(Exception e)"},{"lineNumber":122,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":123,"author":{"gitId":"prerthan99"},"content":"\t\tthis.say(\"**************************ERROR**************************\","},{"lineNumber":124,"author":{"gitId":"prerthan99"},"content":"\t\t\t\te.toString(),"},{"lineNumber":125,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\"**************************ERROR**************************\");"},{"lineNumber":126,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":127,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":128,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":129,"author":{"gitId":"prerthan99"},"content":"\t * Greets the user."},{"lineNumber":130,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":131,"author":{"gitId":"prerthan99"},"content":"\tpublic void sayHello()"},{"lineNumber":132,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":133,"author":{"gitId":"prerthan99"},"content":"\t\tthis.say(\"Hello, this is\" + logo + \"How can I help?\");"},{"lineNumber":134,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":135,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":136,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":137,"author":{"gitId":"prerthan99"},"content":"\t * Bids the user farewell; should be called when program is exiting."},{"lineNumber":138,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":139,"author":{"gitId":"prerthan99"},"content":"\tpublic void sayGoodBye()"},{"lineNumber":140,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":141,"author":{"gitId":"prerthan99"},"content":"\t\tthis.say(\"Goodbye, then; see you soon!\");"},{"lineNumber":142,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":143,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":144,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":145,"author":{"gitId":"prerthan99"},"content":"\t * Given a task, tells the user that the task was added to the task list,"},{"lineNumber":146,"author":{"gitId":"prerthan99"},"content":"\t * formatted appropriately."},{"lineNumber":147,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":148,"author":{"gitId":"prerthan99"},"content":"\t * @param task The task that was added to the task list"},{"lineNumber":149,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":150,"author":{"gitId":"prerthan99"},"content":"\tpublic void sayTaskAdded(Task task)"},{"lineNumber":151,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":152,"author":{"gitId":"prerthan99"},"content":"\t\tthis.say(\"This task was added: \", task.toString());"},{"lineNumber":153,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":154,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":155,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":156,"author":{"gitId":"prerthan99"},"content":"\t * Given a task, tells the user that the task was marked complete, formatted"},{"lineNumber":157,"author":{"gitId":"prerthan99"},"content":"\t * appropriately."},{"lineNumber":158,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":159,"author":{"gitId":"prerthan99"},"content":"\t * @param task The task that was marked complete"},{"lineNumber":160,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":161,"author":{"gitId":"prerthan99"},"content":"\tpublic void sayTaskMarkedComplete(Task task)"},{"lineNumber":162,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":163,"author":{"gitId":"prerthan99"},"content":"\t\tthis.say(\"This task has been marked done:\", task.toString());"},{"lineNumber":164,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":165,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":166,"author":{"gitId":"prerthan99"},"content":"\tpublic void sayTaskDeleted(Task task)"},{"lineNumber":167,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":168,"author":{"gitId":"prerthan99"},"content":"\t\tthis.say(\"This task has been deleted:\", task.toString());"},{"lineNumber":169,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":170,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":171,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":172,"author":{"gitId":"prerthan99"},"content":"\t * Closes this writer."},{"lineNumber":173,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":174,"author":{"gitId":"prerthan99"},"content":"\tpublic void close()"},{"lineNumber":175,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":176,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":177,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":178,"author":{"gitId":"prerthan99"},"content":"\t\t\twriter.close();"},{"lineNumber":179,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":180,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (Exception e)"},{"lineNumber":181,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":182,"author":{"gitId":"prerthan99"},"content":"\t\t\tioException();"},{"lineNumber":183,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":184,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":185,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":185}},{"path":"src/main/java/prerthan/duke/IO/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.StandardOpenOption;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.Duke;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.parse.DateParser;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Task;"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Todo;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":" * A class to handle file read/write operations by the Duke program."},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"public class Storage"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\tprivate Path taskFile;"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\tprivate BufferedWriter writer;"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\tpublic Storage(String... directory)"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t\tthis.taskFile \u003d Paths.get(\".\", directory).normalize().toAbsolutePath();"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t\t"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t\t\tFiles.createDirectories(this.taskFile.getParent());"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t\t\t"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t\t\tif (Files.notExists(this.taskFile))"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tFiles.createFile(this.taskFile);"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t\t\t}"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t\t\t"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t\t\tthis.writer \u003d Files.newBufferedWriter(this.taskFile, StandardOpenOption.WRITE, StandardOpenOption.APPEND);"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t\t\tFiles.newBufferedReader(this.taskFile);"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (IOException e)"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t\t\te.printStackTrace();"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t * Returns a possible {@link Task} after decoding {@code line} "},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t * @param line A line from the file"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t * @return A possible task; returns {@link Optional#empty()} if line cannot be decoded"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\tstatic Optional\u003cTask\u003e decodeLine(String line)"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\t\tString[] tokens \u003d line.split(\",\");"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t\t\tswitch (tokens[0])"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tcase \"T\":"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\treturn tokens.length \u003d\u003d 3 ? Optional.of(new Todo(tokens[2], Boolean.parseBoolean(tokens[1])))"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\t\t: Optional.empty();"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tcase \"D\":"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\treturn tokens.length \u003d\u003d 4 ? Optional.of(new Deadline(tokens[2], Boolean.parseBoolean(tokens[1]),"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\t\tDateParser.parseDateTimeString(tokens[3]))) : Optional.empty();"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tcase \"E\":"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\treturn tokens.length \u003d\u003d 5 ? Optional.of(new Event(tokens[2], Boolean.parseBoolean(tokens[1]),"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\t\tDateParser.parseDateTimeString(tokens[3]), DateParser.parseDateTimeString(tokens[4])))"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\t\t: Optional.empty();"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tdefault:"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\treturn Optional.empty();"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"\t\t\t}"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (Exception e)"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"\t\t\tDuke.output.sayError(e);"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"\t\t\treturn Optional.empty();"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\tpublic void appendTaskToFile(Task task)"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"\t\t\twriter.append(task.encode());"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"\t\t\twriter.newLine();"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"\t\t\twriter.flush();"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (IOException e)"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"\t\t\te.printStackTrace();"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"\t * Returns a {@link TaskList}, parsed from the specified file associated with"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"\t * this {@link Storage} object."},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"\t * @return the {@link Tasklist} after parsing the file on disk"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"\tpublic TaskList loadFromFile()"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"\t\t\treturn new TaskList(Files.lines(taskFile).map(Storage::decodeLine).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList()));"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (IOException e)"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"\t\t\tDuke.output.sayError(e);"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"\t\t\treturn new TaskList();"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":117}},{"path":"src/main/java/prerthan/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.ui.MainWindow;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" * Main"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"public class Main extends Application"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    public void start(Stage stage)"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"        try"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"        {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"        catch (IOException e)"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        {"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":36}},{"path":"src/main/java/prerthan/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidDateException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Todo;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" * AddCommand"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"public class AddCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    private Command.CommandName commandName;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, CommandName commandName) {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        super(detail);"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, String timeString, CommandName commandName)"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"        super(detail, timeString);"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, String startString, String endString, CommandName commandName)"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"        super(detail, startString, endString);"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    @Override public void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"            throws DukeEmptyDetailException, DukeInvalidDateException"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        switch (this.commandName)"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        {"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"            case TODO:"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"                tasks.addTask(new Todo(this.argumentTokens[0]));"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"            case EVENT:"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"                tasks.addTask(new Event(this.argumentTokens[0], this.argumentTokens[1],"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"                        this.argumentTokens[2]));"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"                break;"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"            case DEADLINE:"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"                tasks.addTask(new Deadline(this.argumentTokens[0], this.argumentTokens[1]));"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"            default:"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"                break;"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":54}},{"path":"src/main/java/prerthan/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * ByeCommand"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class ByeCommand extends Command"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\tprivate final CommandName commandName \u003d CommandName.BYE;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\tpublic ByeCommand(String[] argumentTokens) throws DukeInvalidArgumentException"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t\tif (argumentTokens.length !\u003d 0)"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrow new DukeInvalidArgumentException(\"Bye command should have no arguments.\","},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\targumentTokens, this.commandName, this.getClass().getSimpleName());"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t@Override public void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t\tDuke.exit();"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t@Override"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\tpublic boolean willTerminate()"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t\treturn true;"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":35}},{"path":"src/main/java/prerthan/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidDateException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * Models a possible user command to the Duke program."},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public abstract class Command"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\tprotected CommandName commandName;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\tprotected String[] argumentTokens;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t * Creates a {@link Command}, with a {@link String}[] that contains the tokenised arguments"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t * to the command, from the user input."},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t * @param argumentTokens the tokenised input from the user minus the first token"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\tpublic Command(String... argumentTokens)"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t\tthis.argumentTokens \u003d argumentTokens;"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\tpublic static CommandName whichCommand(String token)"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t\tfor (CommandName cmdname : CommandName.values())"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t\t\tif (token.equalsIgnoreCase(cmdname.toString()))"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn cmdname;"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t\t\t} else if (token.isBlank())"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturn CommandName.EMPTY;"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t\t\t}"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t\treturn CommandName.INVALID;"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t * Executes this command, by calling appropriate methods from the objects passed to this"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t * {@link Command}."},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t * @param tasks   A {@link TaskList} to be operated upon"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t * @param storage A {@link Storage} object for file I/O"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t * @param output  An {@link Output} object to write to the standard output"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeEmptyDetailException If the detail in this command is empty"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidDateException If the date in this command cannot be parsed"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\tpublic abstract void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrows DukeEmptyDetailException, DukeInvalidDateException;"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\tpublic boolean willTerminate()"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t\treturn false;"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\tpublic enum CommandName"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"\t\tTODO, DEADLINE, EVENT, LIST, DONE, FIND, DELETE, FROM, BY, AT, ON, EMPTY, INVALID, BYE"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":65}},{"path":"src/main/java/prerthan/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" * A user"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"public class DeleteCommand extends Command"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\tprivate int position;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t * Creates a Command that deletes a {@link sharadhr.duke.task.TaskList}."},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t * @param argumentTokens The arguments provided to this {@link sharadhr.duke.command.Command}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidArgumentException If more than one argument is supplied, or the"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t * supplied argument is not strictly numerical and positive."},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\tpublic DeleteCommand(String[] argumentTokens) throws DukeInvalidArgumentException"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(argumentTokens);"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t\tif (argumentTokens.length !\u003d 1 || !argumentTokens[0].matches(\"\\\\d+\"))"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrow new DukeInvalidArgumentException("},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\"Delete command should have only one positive number as argument.\","},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\targumentTokens, commandName, this.getClass().getSimpleName());"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t\tthis.position \u003d Integer.parseInt(this.argumentTokens[0]);"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t@Override public void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t\tif (this.position \u003e\u003d 1 \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks())"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t\t\toutput.sayTaskDeleted(tasks.getTaskAtPosition(position));"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t\t\ttasks.deleteTaskAtPosition(position);"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":42}},{"path":"src/main/java/prerthan/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * DoneCommand"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class DoneCommand extends Command"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\tprivate int position;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\tDoneCommand(String[] commandTokens, int position) throws DukeInvalidArgumentException"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t\t// if (this.argumentTokens.length !\u003d 1 || !this.argumentTokens[0].matches(\"\\\\d+\")) {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t\t//     throw new DukeInvalidArgumentException(argument, this.commandName, this.getClass().getSimpleName());"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t\t// }"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t\t// this.commandName \u003d CommandName.DONE;"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t\t// this.position \u003d position;"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t * @param argumentTokens"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidArgumentException"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\tpublic DoneCommand(String[] argumentTokens) throws DukeInvalidArgumentException"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t\tthis(argumentTokens, Integer.parseInt(argumentTokens[1]));"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t@Override public void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t\tif (!(this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks())"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t\t\tTask toComplete \u003d tasks.getTaskAtPosition(position);"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t\t\tif (toComplete.markComplete())"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t\t\t\toutput.sayTaskMarkedComplete(toComplete);"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t\t\t}"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":46}},{"path":"src/main/java/prerthan/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidDateException;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":" * FindCommand"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"public class FindCommand extends Command"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\tpublic FindCommand(String[] argumentTokens) throws DukeInvalidArgumentException"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(argumentTokens);"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t\tif (argumentTokens.length !\u003d 1)"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrow new DukeInvalidArgumentException(\"Find command should have only one word as argument.\","},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\targumentTokens, commandName, this.getClass().getSimpleName()); "},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t@Override public void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrows DukeEmptyDetailException, DukeInvalidDateException"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t\tDuke.output.add(String.format(\"These tasks match or contain the keyword \u0027%s\u0027:\", argumentTokens[0]));"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t\tDuke.output.say(Stream.of(Duke.tasks.findTasksWithKeyword(argumentTokens[0]))"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.map(Task::toString).toArray(String[]::new));"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":38}},{"path":"src/main/java/prerthan/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * ListCommand"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t * @param commandTokens"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidCommandException"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\tpublic ListCommand(String[] commandTokens) throws DukeInvalidArgumentException"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(commandTokens);"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t\tthis.commandName \u003d CommandName.LIST;"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t\tif (commandTokens.length !\u003d 0)"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrow new DukeInvalidArgumentException(\"List command must have no arguments.\","},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\tcommandTokens, this.commandName, this.getClass().getSimpleName());"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t@Override public void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t\ttasks.listTasks(output);"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":34}},{"path":"src/main/java/prerthan/duke/exception/DukeEmptyDetailException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * An exception thrown when the {@code detail} {@link String} passed to a"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" * {@link Task} constructor is empty."},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * "},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class DukeEmptyDetailException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 1127957475772724808L;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    public DukeEmptyDetailException(String thrownBy) {"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"        super(\"Task detail cannot be empty.\", thrownBy);"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/main/java/prerthan/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * An exception thrown to denote that an expected, but invalid program state has"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" * been reached. These exceptions are straightforward, and should be caught and"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * handled."},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 7354097854189773198L;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"    protected String thrownBy;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    public DukeException(String message, String thrownBy) {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"        this.thrownBy \u003d thrownBy;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString()"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"Message: %s%nStack trace: %s\", this.getMessage(), getStackTrace());"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":21}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.command.Command.CommandName;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * InvalidArgumentException"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidArgumentException extends DukeException"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\tprivate static final long serialVersionUID \u003d 5221851007504557801L;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\tprivate CommandName cmdName;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\tprivate String argumentString;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\tpublic DukeInvalidArgumentException(String message, String[] arguments, CommandName command,"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t\t\tString thrownBy)"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(message, thrownBy);"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t\tthis.argumentString \u003d String.join(\" \", arguments);"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t\tthis.cmdName \u003d command;"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t@Override public String toString()"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t\treturn String.format(\"%s%nCommand: %s%nArguments: %s%nThrown by: %s\", this.getMessage(),"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tthis.cmdName, this.argumentString, this.thrownBy);"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":28}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * Thrown when user input is incorrect for a given correct command, or the"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" * command does not exist (i.e. the user command resolves to"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * {@link CommandName#INVALID}.)"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidCommandException extends DukeException"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\tprivate static final long serialVersionUID \u003d 5862830938541195307L;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\tpublic DukeInvalidCommandException(String command, String thrownBy)"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(\"Invalid command: \" + command, thrownBy);"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t@Override public String toString()"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t\treturn String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":21}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * DukeInvalidDateException"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidDateException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 1967070878565904626L;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    public DukeInvalidDateException(String thrownBy, String dateString) {"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"        super(\"Invalid date format: \" + dateString, thrownBy);"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString()"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":17}},{"path":"src/main/java/prerthan/duke/parse/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.parse;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidDateException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.time.temporal.TemporalAccessor;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.time.temporal.TemporalField;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import java.util.Locale;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":" * A utility class to parse {@link String}s into {@link ZonedDateTime} objects, and format"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" * vice-versa, useable by the Duke program."},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"public final class DateParser"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\tprivate static final DateTimeFormatter DAY_FORMAT_PATTERN \u003d DateTimeFormatter"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t\t\t.ofPattern(\"[EEEE][E]\").withResolverFields(ChronoField.DAY_OF_WEEK);"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\tprivate static final DateTimeFormatter DATE_FORMAT_PATTERN \u003d DateTimeFormatter.ofPattern("},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t\t\t\"[dd][d][\u0027st\u0027][\u0027nd\u0027][\u0027rd\u0027][\u0027th\u0027][\u0027 of\u0027][/][-][ ][LLLL][MMM][L][, ][/][-][ ][uuuu]\")"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t\t\t.withResolverFields(ChronoField.DAY_OF_MONTH, ChronoField.MONTH_OF_YEAR,"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\tChronoField.YEAR);"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\tprivate static final DateTimeFormatter TIME_FORMAT_PATTERN \u003d DateTimeFormatter"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t\t\t.ofPattern(\"[kk[[:][.]mm]][[hh][h][[:][.]mm][ ]a][ v]\")"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t\t\t.withResolverFields(ChronoField.HOUR_OF_DAY, ChronoField.CLOCK_HOUR_OF_AMPM,"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\tChronoField.MINUTE_OF_HOUR, ChronoField.AMPM_OF_DAY,"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\tChronoField.OFFSET_SECONDS);"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\tprivate static final DateTimeFormatter[] FORMATTERS \u003d { DAY_FORMAT_PATTERN, DATE_FORMAT_PATTERN,"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t\t\tTIME_FORMAT_PATTERN };"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\tprivate static final DateTimeFormatter OUTPUT_FORMAT_PATTERN \u003d DateTimeFormatter"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t\t\t.ofPattern(\"EEEE dd MMMM YYYY hh:mm a v\").withLocale(Locale.ENGLISH)"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t\t\t.withZone(java.time.ZoneId.systemDefault()).withResolverFields(ChronoField.values());"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\tprivate static final ZonedDateTime now \u003d ZonedDateTime.now();"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t * Returns a {@link java.time.ZonedDateTime} after parsing {@code dateTimeString}."},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t * @param dateTimeString the {@link java.lang.String} to be parsed"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t * @return the date-time object after parsing the string"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidDateException if {@code dateTimeString} cannot be parsed"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\tpublic static ZonedDateTime parseDateTimeString(String dateTimeString)"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrows DukeInvalidDateException"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t\tZonedDateTime returnable \u003d now;"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t\tfor (DateTimeFormatter formatter : FORMATTERS)"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t\t\treturnable \u003d parseStringWithFormatter(dateTimeString, formatter);"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t\treturn returnable;"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t * Returns a {@link String} from the provided {@code dateTimeGroup}, as specified by a"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t * formatter in this class. The formatter is provided with the pattern: {@code \"EEEE dd MMMM"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t * YYYY hh:mm a v\"}."},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t * @param dateTimeGroup the {@link ZonedDateTime} to be formatted"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"\t * @return A {@link String} of the formatted date time group"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"\tpublic static String formatZonedDateTime(ZonedDateTime dateTimeGroup)"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"\t\treturn OUTPUT_FORMAT_PATTERN.format(dateTimeGroup);"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"\tpublic static String encodeZonedDateTime(ZonedDateTime dateTimeGroup)"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"\t\treturn DateTimeFormatter.ISO_INSTANT.format(dateTimeGroup);"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"\tpublic static ZonedDateTime decodeString(String encoded)"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"\t\treturn DateTimeFormatter.ISO_INSTANT.parse(encoded, ZonedDateTime::from);"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"\tprivate static ZonedDateTime parseStringWithFormatter(String string,"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"\t\t\tDateTimeFormatter formatter) throws DukeInvalidDateException"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\t\tOptional\u003cTemporalAccessor\u003e possiblyParsed;"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"\t\tZonedDateTime returnable \u003d ZonedDateTime.ofInstant(now.toInstant(), now.getZone());"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"\t\ttry"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"\t\t\tpossiblyParsed \u003d Optional.of(formatter.parse(string));"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"\t\tcatch (DateTimeParseException e)"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"\t\t\tpossiblyParsed \u003d Optional.empty();"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"\t\tif (possiblyParsed.isPresent())"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"\t\t\tTemporalAccessor parsed \u003d possiblyParsed.get();"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"\t\t\tfor (TemporalField field : formatter.getResolverFields())"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"\t\t\t\treturnable \u003d returnable.with(field,"},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\tparsed.isSupported(field) ? parsed.get(field) : now.get(field));"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"\t\t\t}"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"\t\treturn returnable;"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":107}},{"path":"src/main/java/prerthan/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidDateException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.parse.DateParser;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * A Deadline, with a date-time group when it is due."},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class Deadline extends Task"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\tprivate ZonedDateTime by;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t * @param detail"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t * @param by"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeEmptyDetailException"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\tpublic Deadline(String detail, boolean isComplete, ZonedDateTime by)"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrows DukeEmptyDetailException"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(detail, isComplete);"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t\tthis.by \u003d by;"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t * Creates a deadline with a specified detail, and a date-time to be done by."},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t * @param detail the deadline detail"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t * @param by     the date-time to be done by"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeEmptyDetailException if the detail is empty."},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidDateException if the given date-time {@link String} cannot be parsed."},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\tpublic Deadline(String detail, String by)"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrows DukeEmptyDetailException, DukeInvalidDateException"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t\tthis(detail, false, DateParser.parseDateTimeString(by));"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t@Override public char getTaskTypeIcon()"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t\treturn \u0027D\u0027;"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t@Override public String toString()"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t\treturn String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(), super.toString(),"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tDateParser.formatZonedDateTime(this.by));"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t@Override public String encode()"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t\treturn String"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.format(\"%c,%d,%s,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail,"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t\t\tDateParser.formatZonedDateTime(this.by));"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":59}},{"path":"src/main/java/prerthan/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeInvalidDateException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.parse.DateParser;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * An Event, with a detail, a start time, and an end time."},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class Event extends Task"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\tprotected String duration;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\tprotected ZonedDateTime startTime;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\tprotected ZonedDateTime endTime;"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\tpublic Event(String detail, boolean isComplete, ZonedDateTime startTime, ZonedDateTime endTime)"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrows DukeEmptyDetailException"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(detail, isComplete);"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t\tthis.startTime \u003d startTime;"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t\tthis.endTime \u003d endTime;"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t * Creates an Event with a specified detail, and a {@link String} that specifies"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t * the duration of the Event. The actual starting and ending"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t * {@link ZonedDateTime} instance variables are parsed from this string."},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t * @param detail     The Event detail"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t * @param timeString the {@link String} describing the duration of the event"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeEmptyDetailException if {@code detail} is blank (as specified by"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t *                                  {@link String#isBlank()})"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidDateException if the date cannot be parsed into a starting"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t *                                  and ending date"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\tpublic Event(String detail, String startString, String endString)"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrows DukeEmptyDetailException, DukeInvalidDateException"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t\tthis(detail, false, DateParser.parseDateTimeString(startString),"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tDateParser.parseDateTimeString(endString));"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\tpublic char getTaskTypeIcon()"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t\treturn \u0027E\u0027;"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t@Override public String toString()"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t\treturn String"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.format(\"[%c]%s from: %s\\t to: %s\", this.getTaskTypeIcon(), super.toString(), DateParser.formatZonedDateTime(startTime), DateParser.formatZonedDateTime(endTime));"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t@Override public String encode()"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\t\treturn String.format(\"%c,%d,%s,%s,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0,"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t\t\t\tthis.detail, this.startTime.toString(), this.endTime.toString());"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":62}},{"path":"src/main/java/prerthan/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":" * A Task class that allows creating a static list of tasks, that can be added"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" * to, iterated through and polled for contents, or deleted from."},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * \u003cp\u003e"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" * Also allows initialising an instance of a Task, which come with appropriate"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":" * instance methods."},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"public abstract class Task"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t// A list of tasks."},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\tprotected String detail;"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\tprotected boolean isComplete;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\tTask()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t\tthis.isComplete \u003d false;"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t * Initialises a {@link Task} with some specified {@code detail}, and is set as"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t * incomplete."},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t * @param name the task detail"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeEmptyDetailException if {@code detail} is blank, as specified by"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t *                                  {@link String#isBlank()}."},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\tprotected Task(String detail) throws DukeEmptyDetailException"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t\tthis();"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t\tif (detail.isBlank())"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t\t\tthrow new DukeEmptyDetailException(this.getClass().getName());"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t\tthis.detail \u003d detail;"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t * @param detail"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t * @param isComplete"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeEmptyDetailException"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\tprotected Task(String detail, boolean isComplete) throws DukeEmptyDetailException"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t\tthis(detail);"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t\tthis.isComplete \u003d isComplete;"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t * Returns a character representing the completion state of this task."},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t * @return {@code \u0027✔\u0027} if complete, {@code \u0027✘\u0027} otherwise"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\tpublic char getCompleteIcon()"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t\treturn isComplete ? \u0027✔\u0027 : \u0027✘\u0027;"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"\t * Marks this task as complete, and returns the state of the task (must be"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"\t * {@code true})."},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"\t * @return {@code true} if complete"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"\t * @throws IOException"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"\tpublic boolean markComplete()"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"\t\tthis.isComplete \u003d true;"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"\t\treturn isComplete;"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"\tpublic void setCompleteStatus(boolean status)"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"\t\tthis.isComplete \u003d status;"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"\t * Returns a character representing the type of Task (To-Do, Deadline, or"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"\t * Event)."},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"\t * @return the character representing the task type"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"\tpublic abstract char getTaskTypeIcon();"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"\t * Returns this task as an encoded {@link String}, to be written to the data file."},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"\t * @return The encoded String, as a comma-separated value (for easy opening in spreadsheet files)"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"\tpublic abstract String encode();"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"\t@Override public String toString()"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"\t\treturn String.format(\"[%c]\\t %s\", this.getCompleteIcon(), this.detail);"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":101}},{"path":"src/main/java/prerthan/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"public class TaskList"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\tprivate ArrayList\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t * Creates an empty {@link TaskList}."},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\tpublic TaskList()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t\tthis.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t * Creates a {@link TaskList} with tasks initialised from {@code tasks}."},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t * @param tasks the list of {@link Task}s to initialise this TaskList with"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\tpublic TaskList(List\u003cTask\u003e tasks)"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t\tthis.tasks \u003d new ArrayList\u003cTask\u003e(tasks);"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t * Adds a task to the list."},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t * @param task A task to be added to the list."},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t * @return {@code true} if task was successfully added (as specified by"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t * {@link ArrayList#add})"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t * @throws IOException"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\tpublic boolean addTask(Task task)"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t\t// Was the task successfully added to the list?"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t\tboolean added \u003d this.tasks.add(task);"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t\tDuke.output.sayTaskAdded(task);"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t\tDuke.fileRW.appendTaskToFile(task);"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t\treturn added;"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\tprivate Task getTaskAtIndex(int index) throws IndexOutOfBoundsException"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t\treturn tasks.get(index);"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t * Returns a task at {@code position}."},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t * @param position The 1-indexed position of the task in the list"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\t * @return The task at the specified {@code position}"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t * @throws IndexOutOfBoundsException if {@code position} ≥ size of tasks list +"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t *                                   1"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"\tpublic Task getTaskAtPosition(int position) throws IndexOutOfBoundsException"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.getTaskAtIndex(position - 1);"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"\t * Returns a {@link Task}[], whose {@code detail} {@link String}s contain the"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"\t * {@code keyword}."},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"\t * @param keyword the keyword to look up"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"\t * @return"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"\tpublic Task[] findTasksWithKeyword(String keyword)"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.tasks.stream().dropWhile(x -\u003e !x.detail.contains(keyword)).toArray(Task[]::new);"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"\t * Deletes the task at the specified {@code position}."},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"\t * @param position the (1-indexed) position of the task to be deleted"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\tpublic void deleteTaskAtPosition(int position)"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"\t\ttasks.remove(position - 1);"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"\t * Prints the tasks in this list."},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"\t * @param output"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"\tpublic void listTasks(Output output)"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"\t\tif (!this.tasks.isEmpty())"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"\t\t\toutput.say(\"Here are the tasks in your list:\");"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"\t\t\tint listNumber \u003d 1;"},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"\t\t\tfor (Task task : this.tasks)"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"\t\t\t{"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"\t\t\t\toutput.add(String.format(\"%d.%s%n\", listNumber++, task));"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"\t\t\t}"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"\t\t\toutput.say();"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"\t\t} else"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"\t\t{"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"\t\t\toutput.say(\"You have no tasks in your list.\");"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"\t\t}"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"\t * Returns the number of tasks in this {@link sharadhr.duke.task.TaskList}."},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":"\t * @return The number of tasks"},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":118,"author":{"gitId":"prerthan99"},"content":"\tpublic int numberOfTasks()"},{"lineNumber":119,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":120,"author":{"gitId":"prerthan99"},"content":"\t\treturn this.tasks.size();"},{"lineNumber":121,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":122,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":122}},{"path":"src/main/java/prerthan/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * A To-Do; effectively the same as the inherited abstract class, {@link Task}."},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class Todo extends Task"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t/**"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t * Creates a Todo with some detail."},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t *"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t * @param detail the Todo detail"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t * @throws DukeInvalidArgumentException if the detail is blank"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t */"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\tpublic Todo(String detail) throws DukeEmptyDetailException"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(detail);"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\tpublic Todo(String detail, boolean isComplete) throws DukeEmptyDetailException"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t\tsuper(detail, isComplete);"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t@Override public char getTaskTypeIcon()"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t\treturn \u0027T\u0027;"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t@Override public String toString()"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t\treturn String.format(\"[%c]%s\", this.getTaskTypeIcon(), super.toString());"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t@Override public String encode()"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t\treturn String"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t\t\t\t.format(\"%c,%d,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail);"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":41}},{"path":"src/main/java/prerthan/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.ui;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":" * This control represents a dialog box consisting of an ImageView to represent"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":" * the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"public class DialogBox extends HBox"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    private Label dialog;"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    private ImageView displayPicture;"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    private DialogBox(String text, Image img)"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        try"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"        {"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            fxmlLoader.load();"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        catch (IOException e)"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        {"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"            e.printStackTrace();"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"        "},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"        dialog.setText(text);"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"        displayPicture.setImage(img);"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"     * right."},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"    private void flip()"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"        Collections.reverse(tmp);"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"    public static DialogBox getUserDialog(String text, Image img)"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"        return new DialogBox(text, img);"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"    public static DialogBox getDukeDialog(String text, Image img)"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"        db.flip();"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"        return db;"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":71}},{"path":"src/main/java/prerthan/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.ui;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.Duke;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"public class MainWindow extends AnchorPane"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    public void initialize()"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    public void setDuke(Duke d)"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    "},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"     * Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"    private void handleUserInput()"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    {"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"                DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"        userInput.clear();"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":56}},{"path":"src/test/java/prerthan/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class DukeTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void run()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void programLoop()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t@Test void exit()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t@Test void main()"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":25}},{"path":"src/test/java/prerthan/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class AddCommandTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":12}},{"path":"src/test/java/prerthan/duke/command/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class ByeCommandTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":13}},{"path":"src/test/java/prerthan/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class DeleteCommandTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":13}},{"path":"src/test/java/prerthan/duke/command/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class DoneCommandTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":13}},{"path":"src/test/java/prerthan/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class FindCommandTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":13}},{"path":"src/test/java/prerthan/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class ListCommandTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":13}},{"path":"src/test/java/prerthan/duke/io/InputTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class InputTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void readline()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void nextLine()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTokens()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTokenStream()"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t@Test void getFirstToken()"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t@Test void getCommand()"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t@Test void tokensWithoutFirst()"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t@Test void inputWithoutFirstToken()"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t@Test void getDetail()"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t@Test void getFirstTimeString()"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t@Test void getNextTimeString()"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t@Test void close()"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":57}},{"path":"src/test/java/prerthan/duke/io/OutputTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class OutputTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void ioException()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void appendWithNewline()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t@Test void testAppendWithNewline()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t@Test void add()"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t@Test void say()"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t@Test void testSay()"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t@Test void testSay1()"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayError()"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayHello()"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayGoodBye()"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskAdded()"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskMarkedComplete()"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskDeleted()"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t@Test void close()"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":65}},{"path":"src/test/java/prerthan/duke/io/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class StorageTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void appendTask()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void decodeLine()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t@Test void loadFromFile()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":21}},{"path":"src/test/java/prerthan/duke/parse/DateParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.parse;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class DateParserTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void parseDateTimeString()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void formatZonedDateTime()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":17}},{"path":"src/test/java/prerthan/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class DeadlineTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":21}},{"path":"src/test/java/prerthan/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class EventTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":21}},{"path":"src/test/java/prerthan/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class TaskListTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void addTask()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskAtPosition()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t@Test void findTasksWithKeyword()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t@Test void deleteTaskAtPosition()"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t@Test void listTasks()"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t@Test void numberOfTasks()"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":33}},{"path":"src/test/java/prerthan/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package sharadhr.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"class TodoTest"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":21}}]
