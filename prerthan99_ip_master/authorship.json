[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":"# Setting up"},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"**Prerequisites**"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"* JDK 11"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"* Recommended: IntelliJ IDE"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"* Fork this repo to your GitHub account and clone the fork to your computer"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"**Importing the project into IntelliJ**"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"1. Set up the correct JDK version."},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"   * Click `OK`."},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"1. Click `Import Project`."},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"1. Locate the project directory and click `OK`."},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"1. Select `Create project from existing sources` and click `Next`."},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"1. Rename the project if you want. Click `Next`."},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"1. Ensure that your src folder is checked. Keep clicking `Next`."},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"1. Click `Finish`."},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"# Tutorials "},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"Duke Increment | Tutorial"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"---------------|---------------"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"# Feedback, Bug Reports"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"* We welcome pull requests too."}],"authorContributionMap":{"prerthan99":40}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"dependencies {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"group \u0027sharadhr.duke\u0027"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"version \u00270.1.0\u0027"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"application {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    // Change this to your main class."},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    mainClassName \u003d \"sharadhr.duke.Duke\""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"run {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    standardInput \u003d System.in"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"repositories {"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    mavenCentral()"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"checkstyle {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"    archiveVersion \u003d \"0.1\""},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"    archiveAppendix \u003d null"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"test {"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"    useJUnitPlatform()"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":59}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"### Add tasks"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"You can add tasks of type **Todo** (which only has a description) **Deadline** (with a single date-time group as the deadline), or **Event** (with two date-time groups as the start/end instants respectively), using the `todo`, `deadline`, and `event` commands respectively."},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"### List tasks"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"You can list tasks using the command `list`. "},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"### Delete tasks"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"You can delete previously-added tasks using the `delete` command. "},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"### Find task"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"You can find tasks using keywords, with the `find` command. "},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"### File output"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"The task file is saved as a `.csv` for easy viewing in \u003ckbd\u003eMicrosoft Excel\u003c/kbd\u003e and other spreadsheet programs. "},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"### `todo \u003cwhat is to be done\u003e` — Creates a To-Do"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"Creates a To-Do, set by default as incomplete. "},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"### `deadline \u003cwhat is due\u003e \u003c/by | /at\u003e \u003cdue date/time\u003e` — Creates a Deadline"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"Creates a Deadline, set by default as incomplete, with the due date/time as given.  _Some_ natural date-time groups are accepted (but some are still buggy):"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"- `24th Feb 2020`"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"- `Monday 5 pm` (buggy, as this goes to the *current* week\u0027s Monday, and not the next)"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"- `11:40`, or `4:20pm`, or `12am SGT`"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"- `11/2/2020` or `22/7/2020` or even `14-3-2020` (European format: `dd/MM/uuuu`)"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"- `tomorrow` is not legit."},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\u003e Example use:"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\u003e"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"\u003e - `deadline return book /by 7 pm`"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\u003e - `deadline complete CS2103T iP /by Tuesday 18/2/2020 23:59`"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"### `event \u003cevent name\u003e /from \u003cstart instant\u003e /to \u003cend instant\u003e` — Creates an Event from `start instant` to `end instant`"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"As for Deadlines, natural dates/times are accepted, and the same bugs apply."},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"### `list`"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"Lists all the tasks."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"### `find \u003ckeyword\u003e` — Finds tasks"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"Finds all tasks that have a detail which contain `keyword`."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\u003e Example of usage: `find book`"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"### `delete \u003ctask number\u003e`"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"Deletes the task at the given `number`."}],"authorContributionMap":{"prerthan99":50,"-":12}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"@rem Find java.exe"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"echo location of your Java installation."},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"goto fail"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":":findJavaFromJavaHome"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"echo location of your Java installation."},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"goto fail"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":":init"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":":win9xME_args"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"@rem Slurp the command line arguments."},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"set _SKIP\u003d2"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":":win9xME_args_slurp"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":":execute"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"@rem Setup the command line"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"@rem Execute Gradle"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":":end"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":":fail"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"exit /b 1"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":":mainEnd"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":":omega"}],"authorContributionMap":{"prerthan99":100}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"rootProject.name \u003d \u0027duke\u0027"}],"authorContributionMap":{"prerthan99":1}},{"path":"src/main/java/prerthan/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidCommandException;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateTimeException;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Input;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Storage;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":" *"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"public class Duke {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    public static TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    public static Input input;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    public static Output output;"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    public static Storage fileRW;"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    public Duke(String... filePath) {"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"        "},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     * Runs the main program loop."},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"     * @return {@code false} when the user says \u0027bye\u0027; otherwise, never returns."},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"    public static boolean programLoop() {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"        boolean isExit \u003d false;"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        while (!isExit) {"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"                Optional\u003cCommand\u003e possibleCommand \u003d input.nextLine().getCommand();"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"                if (!possibleCommand.isPresent()) {"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"                    output.say(\"Input cannot be empty; please enter a command.\");"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"                    continue;"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"                }"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"                possibleCommand.get().execute(tasks, fileRW, output);"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"                isExit \u003d possibleCommand.get().willTerminate();"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"            catch (DukeInvalidArgumentException | DukeInvalidCommandException | DukeEmptyDetailException | DukeInvalidDateTimeException e) {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"                output.sayError(e);"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        return isExit;"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"     * Cleans up objects and quits the program by calling {@link System#exit(int)}."},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"    public static void exit() {"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"        output.sayGoodBye();"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"        input.close();"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"        output.close();"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"        Platform.exit();"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"        System.exit(0);"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"    public static void main(String[] args) {"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"        // Initialises file and UI I/O"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"        fileRW \u003d new Storage(\"data\", \"duke.txt\");"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"        input \u003d new Input();"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"        output \u003d new Output();"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"        // Greets the user."},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"        output.sayHello();"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"        // Creates the task list"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"        tasks \u003d fileRW.loadFromFile();"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"        if (programLoop()) {"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"            exit();"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"    public void getResponse(String input) {"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"        "},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":85}},{"path":"src/main/java/prerthan/duke/DukeLauncher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class DukeLauncher {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":12}},{"path":"src/main/java/prerthan/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.ui.MainWindow;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" * Main"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    @Override public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"        catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":31}},{"path":"src/main/java/prerthan/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateTimeException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Storage;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Event;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" * AddCommand"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"public class AddCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, CommandName commandName) {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        super(detail);"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, String timeString, CommandName commandName) {"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"        super(detail, timeString);"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, String startString, String endString,"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"                      CommandName commandName) {"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        super(detail, startString, endString);"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    @Override public void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        throws DukeEmptyDetailException, DukeInvalidDateTimeException {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"        switch (this.commandName) {"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        case TODO:"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            tasks.addTask(new Todo(this.argumentTokens[0]));"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        case EVENT:"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"            tasks.addTask("},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"                new Event(this.argumentTokens[0], this.argumentTokens[1], this.argumentTokens[2]));"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"        case DEADLINE:"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"            tasks.addTask(new Deadline(this.argumentTokens[0], this.argumentTokens[1]));"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":50}},{"path":"src/main/java/prerthan/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Storage;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * ByeCommand"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class ByeCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    private final CommandName commandName \u003d CommandName.BYE;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    public ByeCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"        if (argumentTokens.length !\u003d 0) {"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException(\"Bye command should have no arguments.\","},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"                                                   argumentTokens, this.commandName,"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"                                                   this.getClass().getSimpleName());"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    @Override public void execute(TaskList tasks, Storage storage, Output output) {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        Duke.output.sayGoodBye();"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    @Override public boolean willTerminate() {"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        return true;"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":30}},{"path":"src/main/java/prerthan/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateTimeException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Storage;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * Models a possible user command to the Duke program."},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    protected CommandName commandName;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    protected String[] argumentTokens;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"     * Creates a {@link Command}, with a {@link String}[] that contains the tokenised arguments"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"     * to the command, from the user input."},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"     * @param argumentTokens the tokenised input from the user minus the first token"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    public Command(String... argumentTokens) {"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"        this.argumentTokens \u003d argumentTokens;"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    public static CommandName whichCommand(String token) {"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"        for (CommandName cmdname : CommandName.values()) {"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"            if (token.equalsIgnoreCase(cmdname.toString())) {"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"                return cmdname;"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"            } else if (token.isBlank()) {"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"                return CommandName.EMPTY;"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        return CommandName.INVALID;"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"     * Executes this command, by calling appropriate methods from the objects passed to this"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"     * {@link Command}."},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"     * @param tasks   A {@link TaskList} to be operated upon"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"     * @param storage A {@link Storage} object for file I/O"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"     * @param output  An {@link Output} object to write to the standard output"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException     If the detail in this command is empty"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidDateTimeException If the date in this command cannot be parsed"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    public abstract void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"        throws DukeEmptyDetailException, DukeInvalidDateTimeException;"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"     * @return"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    public boolean willTerminate() {"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"        return false;"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"    public enum CommandName {"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"        TODO, DEADLINE, EVENT, LIST, DONE, FIND, DELETE, FROM, BY, AT, ON, EMPTY, INVALID, BYE"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":60}},{"path":"src/main/java/prerthan/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Storage;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" * A user"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    private int position;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"     * Creates a Command that deletes a {@link TaskList}."},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"     * @param argumentTokens The arguments provided to this {@link Command}"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidArgumentException If more than one argument is supplied, or the"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"     *                                      supplied argument is not strictly numerical and"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"     *                                      positive."},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    public DeleteCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"        super(argumentTokens);"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        if (argumentTokens.length !\u003d 1 || !argumentTokens[0].matches(\"\\\\d+\")) {"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException("},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"                \"Delete command should have only one positive number as argument.\", argumentTokens,"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"                commandName, this.getClass().getSimpleName());"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        this.position \u003d Integer.parseInt(this.argumentTokens[0]);"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    @Override public void execute(TaskList tasks, Storage storage, Output output) {"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"        if (this.position \u003e\u003d 1 \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks()) {"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"            output.sayTaskDeleted(tasks.getTaskAtPosition(position));"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"            tasks.deleteTaskAtPosition(position);"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":38}},{"path":"src/main/java/prerthan/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Storage;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * DoneCommand"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    private int position;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    DoneCommand(String[] commandTokens, int position) throws DukeInvalidArgumentException {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"        // if (this.argumentTokens.length !\u003d 1 || !this.argumentTokens[0].matches(\"\\\\d+\")) {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        //     throw new DukeInvalidArgumentException(argument, this.commandName, this.getClass()"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        //     .getSimpleName());"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"        // }"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        // this.commandName \u003d CommandName.DONE;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"        // this.position \u003d position;"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"     * @param argumentTokens"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidArgumentException"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    public DoneCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        this(argumentTokens, Integer.parseInt(argumentTokens[1]));"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    @Override public void execute(TaskList tasks, Storage storage, Output output) {"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        if (!(this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks()) {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"            Task toComplete \u003d tasks.getTaskAtPosition(position);"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"            if (toComplete.markComplete()) {"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"                output.sayTaskMarkedComplete(toComplete);"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":41}},{"path":"src/main/java/prerthan/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateTimeException;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Storage;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":" * FindCommand"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"public class FindCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    public FindCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        super(argumentTokens);"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        if (argumentTokens.length !\u003d 1) {"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException("},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"                \"Find command should have only one word as argument.\", argumentTokens, commandName,"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"                this.getClass().getSimpleName());"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    @Override public void execute(TaskList tasks, Storage storage, Output output)"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        throws DukeEmptyDetailException, DukeInvalidDateTimeException {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        Duke.output.add("},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"            String.format(\"These tasks match or contain the keyword \u0027%s\u0027:\", argumentTokens[0]));"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        Duke.output.say("},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"            Stream.of(Duke.tasks.findTasksWithKeyword(argumentTokens[0])).map(Task::toString)"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"                  .toArray(String[]::new));"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":37}},{"path":"src/main/java/prerthan/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Storage;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * ListCommand"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"     * @param commandTokens"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidCommandException"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    public ListCommand(String[] commandTokens) throws DukeInvalidArgumentException {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        super(commandTokens);"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d CommandName.LIST;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        if (commandTokens.length !\u003d 0) {"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException(\"List command must have no arguments.\","},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"                                                   commandTokens, this.commandName,"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"                                                   this.getClass().getSimpleName());"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    @Override public void execute(TaskList tasks, Storage storage, Output output) {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        tasks.listTasks(output);"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":32}},{"path":"src/main/java/prerthan/duke/exception/DukeEmptyDetailException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * An exception thrown when the {@code detail} {@link String} passed to a"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" * {@link Task} constructor is empty."},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"public class DukeEmptyDetailException extends DukeException {"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 1127957475772724808L;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    public DukeEmptyDetailException(String thrownBy) {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"        super(\"Task detail cannot be empty.\", thrownBy);"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/main/java/prerthan/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * An exception thrown to denote that an expected, but invalid program state has"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" * been reached. These exceptions are straightforward, and should be caught and"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * handled."},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 7354097854189773198L;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"    protected String thrownBy;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    public DukeException(String message, String thrownBy) {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"        this.thrownBy \u003d thrownBy;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"Message: %s%nStack trace: %s\", this.getMessage(), getStackTrace());"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":20}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.command.Command.CommandName;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * InvalidArgumentException"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidArgumentException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 5221851007504557801L;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    private CommandName cmdName;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    private String argumentString;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    public DukeInvalidArgumentException(String message, String[] arguments, CommandName command,"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"                                        String thrownBy) {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"        super(message, thrownBy);"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"        this.argumentString \u003d String.join(\" \", arguments);"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        this.cmdName \u003d command;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"%s%nCommand: %s%nArguments: %s%nThrown by: %s\", this.getMessage(),"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"                             this.cmdName, this.argumentString, this.thrownBy);"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":25}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * Thrown when user input is incorrect for a given correct command, or the"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" * command does not exist (i.e. the user command resolves to"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":" * {@link Command.CommandName#INVALID}.)"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidCommandException extends DukeException {"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 5862830938541195307L;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    public DukeInvalidCommandException(String command, String thrownBy) {"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"        super(\"Invalid command: \" + command, thrownBy);"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":20}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * DukeInvalidDateException"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidDateTimeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 1967070878565904626L;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    public DukeInvalidDateTimeException(String thrownBy, String dateString) {"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"        super(\"Invalid date format: \" + dateString, thrownBy);"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"%s%nThrown by: %s\", this.getMessage(), this.thrownBy);"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":16}},{"path":"src/main/java/prerthan/duke/io/Input.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.command.*;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidCommandException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.command.*;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedReader;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.io.InputStreamReader;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.util.regex.Pattern;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":" * A class to accept and parse user inputs from the input stream."},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"public class Input {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    private static final Pattern whitespace \u003d Pattern.compile(\"\\\\s+\");"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    private static final Pattern slashCommands \u003d Pattern"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"        .compile(\"(?i)\\\\/((from)|(to)|(at)|(by)|(on))\");"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    private static BufferedReader reader;"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    protected String line;"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    // Instance"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    protected String[] tokens;"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    public Input() {"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        reader \u003d new BufferedReader(new InputStreamReader(System.in));"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    static String readline() {"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            return reader.readLine();"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        catch (Exception e) {"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"            System.err.println(\"I/O exception occurred.\");"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"            return \"\";"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     * Gets the next line in the input stream, and stores it. Returns this object"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"     * for method chaining."},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"     * @return this {@link Input} object, with the cursor advanced by one line."},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    public Input nextLine() {"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        this.line \u003d readline();"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"        this.tokens \u003d whitespace.split(this.line.trim());"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"        return this;"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"     * Returns the current line of input as a {@link String} array of tokens, where"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"     * the {@link String} is trimmed and separated by any whitespace character."},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"     * @return the current line, tokenised."},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"    public String[] getTokens() {"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"        this.tokens \u003d this.tokens.length \u003d\u003d 0 ? whitespace.split(this.line.trim()) : this.tokens;"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"        return this.tokens;"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"     * Returns the current line of input as a {@link Stream} of {@link String}s,"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"     * trimmed and tokenised by any whitespace character."},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"     * @return the current line of input as a {@link Stream}\u003c{@link String}\u003e."},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"    public Stream\u003cString\u003e getTokenStream() {"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"        return Stream.of(this.getTokens());"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"    String getFirstToken() {"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"        return this.getTokens()[0];"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"     * Returns a {@link Command}, using the first token in the user input,"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"     * appropriately parsed with the rest of the user input."},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"     * @return the user input as an executable {@link Command} object, containing the parsed and"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"     * tokenised input."},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidArgumentException if the arguments to the command are incorrect"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidCommandException  if the command itself is invalid."},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"    public Optional\u003cCommand\u003e getCommand()"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"        throws DukeInvalidArgumentException, DukeInvalidCommandException {"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"        String commandString \u003d this.getFirstToken();"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"        Command.CommandName cmd \u003d Command.whichCommand(commandString);"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"        switch (cmd) {"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"        case TODO:"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(new AddCommand(this.getDetail(), cmd));"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"        case DEADLINE:"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(new AddCommand(this.getDetail(), this.getFirstTimeString(), cmd));"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"        case EVENT:"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(new AddCommand(this.getDetail(), this.getFirstTimeString(),"},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"                                              this.getNextTimeString(), cmd));"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"        case LIST:"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(new ListCommand(this.tokensWithoutFirst()));"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"        case DONE:"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(new DoneCommand(this.tokensWithoutFirst()));"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"        case FIND:"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(new FindCommand(this.tokensWithoutFirst()));"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"        case DELETE:"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(new DeleteCommand(this.tokensWithoutFirst()));"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"        case EMPTY:"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"            return Optional.empty();"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"        case INVALID:"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidCommandException(commandString, this.getClass().getSimpleName());"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"        case BYE:"},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(new ByeCommand(this.tokensWithoutFirst()));"},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"        default:"},{"lineNumber":118,"author":{"gitId":"prerthan99"},"content":"            return Optional.empty();"},{"lineNumber":119,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":122,"author":{"gitId":"prerthan99"},"content":"    public String[] tokensWithoutFirst() {"},{"lineNumber":123,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().skip(1).toArray(String[]::new);"},{"lineNumber":124,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":126,"author":{"gitId":"prerthan99"},"content":"    public String inputWithoutFirstToken() {"},{"lineNumber":127,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().skip(1).collect(Collectors.joining(\" \"));"},{"lineNumber":128,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":130,"author":{"gitId":"prerthan99"},"content":"    public String getDetail() {"},{"lineNumber":131,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().skip(1).takeWhile(slashCommands.asMatchPredicate().negate())"},{"lineNumber":132,"author":{"gitId":"prerthan99"},"content":"                   .collect(Collectors.joining(\" \"));"},{"lineNumber":133,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":135,"author":{"gitId":"prerthan99"},"content":"    public String getFirstTimeString() {"},{"lineNumber":136,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"},{"lineNumber":137,"author":{"gitId":"prerthan99"},"content":"                   .takeWhile(slashCommands.asMatchPredicate().negate())"},{"lineNumber":138,"author":{"gitId":"prerthan99"},"content":"                   .collect(Collectors.joining(\" \"));"},{"lineNumber":139,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":141,"author":{"gitId":"prerthan99"},"content":"    public String getNextTimeString() {"},{"lineNumber":142,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"},{"lineNumber":143,"author":{"gitId":"prerthan99"},"content":"                   .dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"},{"lineNumber":144,"author":{"gitId":"prerthan99"},"content":"                   .collect(Collectors.joining(\" \"));"},{"lineNumber":145,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":147,"author":{"gitId":"prerthan99"},"content":"    public void close() {"},{"lineNumber":148,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"prerthan99"},"content":"            reader.close();"},{"lineNumber":150,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"prerthan99"},"content":"        catch (IOException e) {"},{"lineNumber":152,"author":{"gitId":"prerthan99"},"content":"            System.err.println(\"I/O Exception occurred.\");"},{"lineNumber":153,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":155}},{"path":"src/main/java/prerthan/duke/io/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedWriter;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.io.OutputStreamWriter;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * A class to neatly format and write any output from the organiser chat bot,"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" * Duke, to the standard output."},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"public class Output {"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    static final String logo \u003d"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"        \"\\n ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    BufferedWriter writer;"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    public Output() {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"        this.writer \u003d new BufferedWriter(new OutputStreamWriter(System.out));"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    // Instance"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    static void ioException() {"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        System.err.println(\"I/O Exception occurred.\");"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    void appendWithNewline(String string) {"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"            this.writer.append(string);"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"            this.writer.newLine();"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        catch (Exception e) {"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    void appendWithNewline(String... strings) {"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"        Arrays.asList(strings).forEach(this::appendWithNewline);"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     * Appends {@code message} to this {@link Output} object"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"     * @param message the {@link String} to append to this object"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"    public void add(String message) {"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"            this.writer.append(message);"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"        catch (Exception e) {"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"     * Flushes the contents of this writer\u0027s buffer to the standard output."},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"    public void say() {"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"            this.writer.flush();"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"        catch (Exception e) {"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"     * Writes a {@code String}) to the standard output."},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"     * @param message The message to be written"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"    public void say(String message) {"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"            this.appendWithNewline(message);"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"            this.writer.flush();"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"        catch (Exception e) {"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"     * Writes multiple messages to the standard output. These messages are given as"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"     * a comma-separated list of {@link String}s."},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"     * @param messages The list of messages to be written to standard output"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"    public void say(String... messages) {"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"            this.appendWithNewline(messages);"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"            writer.flush();"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"        catch (Exception e) {"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"    public void sayError(Exception e) {"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"        this.say(\"**************************ERROR**************************\", e.toString(),"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"                 \"**************************ERROR**************************\");"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"     * Greets the user."},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"    public void sayHello() {"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"        this.say(\"Hello, this is\" + logo + \"How can I help?\");"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"     * Bids the user farewell; should be called when program is exiting."},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"    public void sayGoodBye() {"},{"lineNumber":118,"author":{"gitId":"prerthan99"},"content":"        this.say(\"Goodbye, then; see you soon!\");"},{"lineNumber":119,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":121,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"prerthan99"},"content":"     * Given a task, tells the user that the task was added to the task list,"},{"lineNumber":123,"author":{"gitId":"prerthan99"},"content":"     * formatted appropriately."},{"lineNumber":124,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"prerthan99"},"content":"     * @param task The task that was added to the task list"},{"lineNumber":126,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"prerthan99"},"content":"    public void sayTaskAdded(Task task) {"},{"lineNumber":128,"author":{"gitId":"prerthan99"},"content":"        this.say(\"This task was added: \", task.toString());"},{"lineNumber":129,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":131,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"prerthan99"},"content":"     * Given a task, tells the user that the task was marked complete, formatted"},{"lineNumber":133,"author":{"gitId":"prerthan99"},"content":"     * appropriately."},{"lineNumber":134,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"prerthan99"},"content":"     * @param task The task that was marked complete"},{"lineNumber":136,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"prerthan99"},"content":"    public void sayTaskMarkedComplete(Task task) {"},{"lineNumber":138,"author":{"gitId":"prerthan99"},"content":"        this.say(\"This task has been marked done:\", task.toString());"},{"lineNumber":139,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":141,"author":{"gitId":"prerthan99"},"content":"    public void sayTaskDeleted(Task task) {"},{"lineNumber":142,"author":{"gitId":"prerthan99"},"content":"        this.say(\"This task has been deleted:\", task.toString());"},{"lineNumber":143,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":145,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"prerthan99"},"content":"     * Closes this writer."},{"lineNumber":147,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"prerthan99"},"content":"    public void close() {"},{"lineNumber":149,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"prerthan99"},"content":"            writer.close();"},{"lineNumber":151,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"prerthan99"},"content":"        catch (Exception e) {"},{"lineNumber":153,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":154,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":156}},{"path":"src/main/java/prerthan/duke/io/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.parse.DateParser;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.*;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.*;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedWriter;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Files;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.StandardOpenOption;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":" * A class to handle file read/write operations by the Duke program."},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    private Path taskFile;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    private BufferedWriter writer;"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"     * Creates a new {@link Storage} object for working with the data file as saved by Duke,"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"     * using the provided {@code filePath}."},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"     * @param filePath a comma-separated list of the file directory structure"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    public Storage(String... filePath) {"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        this.taskFile \u003d Paths.get(\".\", filePath).normalize().toAbsolutePath();"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"            Files.createDirectories(this.taskFile.getParent());"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            if (Files.notExists(this.taskFile)) {"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"                Files.createFile(this.taskFile);"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"            this.writer \u003d Files.newBufferedWriter(this.taskFile, StandardOpenOption.WRITE,"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"                                                  StandardOpenOption.APPEND);"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"            Files.newBufferedReader(this.taskFile);"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"        catch (IOException e) {"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"            e.printStackTrace();"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"     * Returns a possible {@link Task} after decoding {@code line}."},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"     * @param line A line from the file"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"     * @return A possible task; returns {@link Optional#empty()} if line cannot be decoded"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"    static Optional\u003cTask\u003e decodeLine(String line) {"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"        String[] tokens \u003d line.split(\",\");"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"            switch (tokens[0]) {"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"            case \"T\":"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"                return tokens.length \u003d\u003d 3 ? Optional"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"                    .of(new Todo(tokens[2], Boolean.parseBoolean(tokens[1]))) : Optional.empty();"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"            case \"D\":"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"                return tokens.length \u003d\u003d 4 ? Optional"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"                    .of(new Deadline(tokens[2], Boolean.parseBoolean(tokens[1]),"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"                                     DateParser.decodeString(tokens[3]))) : Optional.empty();"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"            case \"E\":"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"                return tokens.length \u003d\u003d 5 ? Optional"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"                    .of(new Event(tokens[2], Boolean.parseBoolean(tokens[1]),"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"                                  DateParser.decodeString(tokens[3]),"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"                                  DateParser.decodeString(tokens[4]))) : Optional.empty();"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"            default:"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"                return Optional.empty();"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"        catch (Exception e) {"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"            Duke.output.sayError(e);"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"            return Optional.empty();"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"     * Encodes and appends {@code task} to this file."},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"     * @param task the {@link Task} to be encoded and written to this file"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"    public void appendTaskToFile(Task task) {"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"            writer.append(task.encode());"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"            writer.newLine();"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"            writer.flush();"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"        catch (IOException e) {"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"            Output.ioException();"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"     * Returns a {@link TaskList}, parsed from the specified file associated with"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"     * this {@link Storage} object."},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"    public TaskList loadFromFile() {"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"            return new TaskList("},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"                Files.lines(taskFile).map(Storage::decodeLine).filter(Optional::isPresent)"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"                     .map(Optional::get).collect(Collectors.toList()));"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"        catch (IOException e) {"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"            Output.ioException();"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"            Duke.output.say(\"File could not be read; creating new list.\");"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"            return new TaskList();"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":115}},{"path":"src/main/java/prerthan/duke/parse/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.parse;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateTimeException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.time.temporal.TemporalAccessor;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.time.temporal.TemporalField;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import java.util.Locale;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":" * A utility class to parse {@link String}s into {@link ZonedDateTime} objects,"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" * and format"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":" * vice-versa, useable by the Duke program."},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"public final class DateParser {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    private static final DateTimeFormatter DAY_FORMAT_PATTERN \u003d DateTimeFormatter"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        .ofPattern(\"[EEEE][E]\").withResolverFields(ChronoField.DAY_OF_WEEK);"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    private static final DateTimeFormatter DATE_FORMAT_PATTERN \u003d DateTimeFormatter.ofPattern("},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"        \"[dd][d][\u0027st\u0027][\u0027nd\u0027][\u0027rd\u0027][\u0027th\u0027][\u0027 of\u0027][/][-][ ][LLLL][MMM][L][, ][/][-][ ][uuuu]\")"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"                                                                                  .withResolverFields("},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"                                                                                      ChronoField.DAY_OF_MONTH,"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"                                                                                      ChronoField.MONTH_OF_YEAR,"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"                                                                                      ChronoField.YEAR);"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    private static final DateTimeFormatter TIME_FORMAT_PATTERN \u003d DateTimeFormatter"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        .ofPattern(\"[kk[[:][.]mm]][[hh][h][[:][.]mm][ ]a][ v]\")"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        .withResolverFields(ChronoField.HOUR_OF_DAY, ChronoField.CLOCK_HOUR_OF_AMPM,"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"                            ChronoField.MINUTE_OF_HOUR, ChronoField.AMPM_OF_DAY,"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"                            ChronoField.OFFSET_SECONDS);"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    private static final DateTimeFormatter[] FORMATTERS \u003d { DAY_FORMAT_PATTERN, DATE_FORMAT_PATTERN,"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        TIME_FORMAT_PATTERN };"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    private static final DateTimeFormatter OUTPUT_FORMAT_PATTERN \u003d DateTimeFormatter"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"        .ofPattern(\"EEEE dd MMMM YYYY hh:mm a v\").withLocale(Locale.ENGLISH)"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        .withZone(java.time.ZoneId.systemDefault()).withResolverFields(ChronoField.values());"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"    private static final ZonedDateTime now \u003d ZonedDateTime.now();"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"     * Returns a {@link ZonedDateTime} after parsing"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"     * {@code dateTimeString}."},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     * @param dateTimeString the {@link String} to be parsed"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"     * @return the date-time object after parsing the string"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidDateTimeException if {@code dateTimeString} cannot be"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"     *                                      parsed"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    public static ZonedDateTime parseDateTimeString(String dateTimeString)"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        throws DukeInvalidDateTimeException {"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"        Optional\u003cZonedDateTime\u003e returnable \u003d Optional.empty();"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"        for (DateTimeFormatter formatter : FORMATTERS) {"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"            returnable \u003d parseStringWithFormatter(dateTimeString, formatter, returnable);"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"        return returnable.orElseThrow("},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"            () -\u003e new DukeInvalidDateTimeException(DateParser.class.getName(), dateTimeString));"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"     * Returns a {@link String} from the provided {@code dateTimeGroup}, as"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"     * specified by a"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"     * formatter in this class. The formatter is provided with the pattern:"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"     * {@code \"EEEE dd MMMM"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"     * YYYY hh:mm a v\"}."},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"     * @param dateTimeGroup the {@link ZonedDateTime} to be formatted"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"     * @return A {@link String} of the formatted date time group"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"    public static String formatZonedDateTime(ZonedDateTime dateTimeGroup) {"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"        return OUTPUT_FORMAT_PATTERN.format(dateTimeGroup);"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"     * Returns an encoded {@link String} to be written to the data file, by"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"     * formatting {@code dateTimeGroup}."},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"     * @param dateTimeGroup The {@link ZonedDateTime} date-time-group to be"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"     *                      formatted"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"     * @return The formatted string"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"    public static String encodeZonedDateTime(ZonedDateTime dateTimeGroup) {"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"        return DateTimeFormatter.ISO_INSTANT.format(dateTimeGroup);"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"     * Returns a decoded {@link ZonedDateTime} from the given {@link String}"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"     * {@code input}, using the {@link DateTimeFormatter#ISO_INSTANT} parser."},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"     * @param encoded A previously-encoded {@link String}, usually from the data"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"     *                file"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"     * @return the {@link ZonedDateTime} instant corresponding to the parsed string"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"    public static ZonedDateTime decodeString(String encoded) {"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"        return DateTimeFormatter.ISO_ZONED_DATE_TIME.parse(encoded, ZonedDateTime::from);"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"    private static Optional\u003cZonedDateTime\u003e parseStringWithFormatter(String string,"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"                                                                    DateTimeFormatter formatter,"},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"                                                                    Optional\u003cZonedDateTime\u003e possibleZDT)"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"        throws DukeInvalidDateTimeException {"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"        Optional\u003cTemporalAccessor\u003e possiblyParsed;"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"            possiblyParsed \u003d Optional.of(formatter.parse(string));"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"        catch (DateTimeParseException e) {"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"            possiblyParsed \u003d Optional.empty();"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"        if (possiblyParsed.isPresent()) {"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"            ZonedDateTime returnable \u003d possibleZDT.orElse(now);"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"            TemporalAccessor parsed \u003d possiblyParsed.get();"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"            for (TemporalField field : formatter.getResolverFields()) {"},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":"                returnable \u003d returnable"},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"                    .with(field, parsed.isSupported(field) ? parsed.get(field) : now.get(field));"},{"lineNumber":118,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"prerthan99"},"content":"            return Optional.of(returnable);"},{"lineNumber":120,"author":{"gitId":"prerthan99"},"content":"        } else {"},{"lineNumber":121,"author":{"gitId":"prerthan99"},"content":"            return possibleZDT;"},{"lineNumber":122,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":124,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":125}},{"path":"src/main/java/prerthan/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.parse.DateParser;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateTimeException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * A Deadline, with a date-time group when it is due."},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    private ZonedDateTime by;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"     * Creates a new {@link Deadline} with the provided {@code detail}, {@code isComplete} and"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"     * @param detail"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"     * @param by"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    public Deadline(String detail, boolean isComplete, ZonedDateTime by)"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"        throws DukeEmptyDetailException {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        super(detail, isComplete);"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"        this.by \u003d by;"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"        assert this.detail !\u003d null || this.by !\u003d null || !this.isComplete;"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     * Creates a deadline with a specified detail, and a date-time to be done by."},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"     * @param detail the deadline detail"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"     * @param by     the date-time to be done by"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException     if the detail is empty."},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidDateTimeException if the given date-time {@link String} cannot be parsed."},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    public Deadline(String detail, String by)"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        throws DukeEmptyDetailException, DukeInvalidDateTimeException {"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        this(detail, false, DateParser.parseDateTimeString(by));"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"    @Override public char getTaskTypeIcon() {"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"        return \u0027D\u0027;"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(), super.toString(),"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"                             DateParser.formatZonedDateTime(this.by));"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    @Override public String encode() {"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        return String"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"            .format(\"%c,%d,%s,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail,"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"                    DateParser.encodeZonedDateTime(this.by));"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":56}},{"path":"src/main/java/prerthan/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateTimeException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.parse.DateParser;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * An Event, with a detail, a start time, and an end time."},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class Event extends Task {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    protected String duration;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    protected ZonedDateTime startTime;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    protected ZonedDateTime endTime;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    public Event(String detail, boolean isComplete, ZonedDateTime startTime, ZonedDateTime endTime)"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        throws DukeEmptyDetailException {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"        super(detail, isComplete);"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"     * Creates an Event with a specified detail, and a {@link String} that specifies"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"     * the duration of the Event. The actual starting and ending"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"     * {@link ZonedDateTime} instance variables are parsed from this string."},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     * @param detail      the Event detail"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"     * @param startString the starting date/time of this {@link Event}"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"     * @param endString   the ending date/time of this {@link Event}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException     if {@code detail} is blank (as specified by"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"     *                                      {@link String#isBlank()})"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidDateTimeException if the date cannot be parsed into a starting"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"     *                                      and ending date"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"    public Event(String detail, String startString, String endString)"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        throws DukeEmptyDetailException, DukeInvalidDateTimeException {"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        this(detail, false, DateParser.parseDateTimeString(startString),"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"             DateParser.parseDateTimeString(endString));"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"        assert !this.isComplete;"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"    public char getTaskTypeIcon() {"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"        return \u0027E\u0027;"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]%s from: %s\\t to: %s\", this.getTaskTypeIcon(), super.toString(),"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"                             DateParser.formatZonedDateTime(startTime),"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"                             DateParser.formatZonedDateTime(endTime));"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    @Override public String encode() {"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"        return String"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"            .format(\"%c,%d,%s,%s,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail,"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"                    DateParser.encodeZonedDateTime(this.startTime),"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"                    DateParser.encodeZonedDateTime(this.endTime));"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":61}},{"path":"src/main/java/prerthan/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":" * A Task class that allows creating a static list of tasks, that can be added"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" * to, iterated through and polled for contents, or deleted from."},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * \u003cp\u003e"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" * Also allows initialising an instance of a Task, which come with appropriate"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":" * instance methods."},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"public abstract class Task {"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    // A list of tasks."},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    protected String detail;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    protected boolean isComplete;"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    Task() {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"        this.isComplete \u003d false;"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"     * Initialises a {@link Task} with some specified {@code detail}, and is set as"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"     * incomplete."},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"     * @param detail the task detail"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException if {@code detail} is blank, as specified by"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"     *                                  {@link String#isBlank()}."},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    protected Task(String detail) throws DukeEmptyDetailException {"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        this();"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        if (detail.isBlank()) {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"            throw new DukeEmptyDetailException(this.getClass().getName());"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        this.detail \u003d detail;"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"     * @param detail"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"     * @param isComplete"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"    protected Task(String detail, boolean isComplete) throws DukeEmptyDetailException {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"        this(detail);"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"        this.isComplete \u003d isComplete;"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"     * Returns a character representing the completion state of this task."},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"     * @return {@code \u0027✔\u0027} if complete, {@code \u0027✘\u0027} otherwise"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"    public char getCompleteIcon() {"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"        return isComplete ? \u0027✔\u0027 : \u0027✘\u0027;"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"     * Marks this task as complete, and returns the state of the task (must be"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"     * {@code true})."},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"     * @return {@code true} if complete"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"     * @throws IOException"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"    public boolean markComplete() {"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"        this.isComplete \u003d true;"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"        return isComplete;"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"    public void setCompleteStatus(boolean status) {"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"        this.isComplete \u003d status;"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"     * Returns a character representing the type of Task (To-Do, Deadline, or"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"     * Event)."},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"     * @return the character representing the task type"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"    public abstract char getTaskTypeIcon();"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"     * Returns this task as an encoded {@link String}, to be written to the data file."},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"     * @return The encoded String, as a comma-separated value (for easy opening in spreadsheet"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"     * files)"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"    public abstract String encode();"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]\\t %s\", this.getCompleteIcon(), this.detail);"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":95}},{"path":"src/main/java/prerthan/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.io.Output;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"     * Creates an empty {@link TaskList}."},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"     * Creates a {@link TaskList} with tasks initialised from {@code tasks}."},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"     * @param tasks the list of {@link Task}s to initialise this TaskList with"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e(tasks);"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"     * Adds a task to the list."},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"     * @param task A task to be added to the list."},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"     * @return {@code true} if task was successfully added (as specified by"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"     * {@link ArrayList#add(Object)})"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    public boolean addTask(Task task) {"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        // Was the task successfully added to the list?"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"        boolean added \u003d this.tasks.add(task);"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        Duke.output.sayTaskAdded(task);"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        Duke.fileRW.appendTaskToFile(task);"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"        return added;"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"    private Task getTaskAtIndex(int index) throws IndexOutOfBoundsException {"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"        return tasks.get(index);"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"     * Returns a task at {@code position}."},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"     * @param position The 1-indexed position of the task in the list"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"     * @return The task at the specified {@code position}"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"     * @throws IndexOutOfBoundsException if {@code position} ≥ size of tasks list +"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"     *                                   1"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"    public Task getTaskAtPosition(int position) throws IndexOutOfBoundsException {"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"        return this.getTaskAtIndex(position - 1);"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"     * Returns a {@link Task}[], whose {@code detail} {@link String}s contain the"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"     * {@code keyword}."},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"     * @param keyword the keyword to look up"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"     * @return"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"    public Task[] findTasksWithKeyword(String keyword) {"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"        return this.tasks.stream().dropWhile(x -\u003e !x.detail.contains(keyword)).toArray(Task[]::new);"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"     * Deletes the task at the specified {@code position}."},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"     * @param position the (1-indexed) position of the task to be deleted"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"    public void deleteTaskAtPosition(int position) {"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"        tasks.remove(position - 1);"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"     * Prints the tasks in this list."},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"     * @param output"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"    public void listTasks(Output output) {"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"        if (!this.tasks.isEmpty()) {"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"            output.say(\"Here are the tasks in your list:\");"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"            int listNumber \u003d 1;"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"            for (Task task : this.tasks) {"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"                output.add(String.format(\"%d.%s%n\", listNumber++, task));"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"            output.say();"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"        } else {"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"            output.say(\"You have no tasks in your list.\");"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"     * Returns the number of tasks in this {@link TaskList}."},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"     * @return The number of tasks"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"    public int numberOfTasks() {"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"        return this.tasks.size();"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":108}},{"path":"src/main/java/prerthan/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" * A To-Do; effectively the same as the inherited abstract class, {@link Task}."},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"public class Todo extends Task {"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"     * Creates a Todo with some detail."},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"     * @param detail the Todo detail"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidArgumentException if the detail is blank"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    public Todo(String detail) throws DukeEmptyDetailException {"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"        super(detail);"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    public Todo(String detail, boolean isComplete) throws DukeEmptyDetailException {"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        super(detail, isComplete);"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    @Override public char getTaskTypeIcon() {"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"        return \u0027T\u0027;"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    @Override public String toString() {"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]%s\", this.getTaskTypeIcon(), super.toString());"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    @Override public String encode() {"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"        return String"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"            .format(\"%c,%d,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail);"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":36}},{"path":"src/main/java/prerthan/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.ui;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":" * This control represents a dialog box consisting of an ImageView to represent"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":" * the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader("},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"                MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"            fxmlLoader.load();"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"        catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"            e.printStackTrace();"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"        dialog.setText(text);"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"        displayPicture.setImage(img);"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"        return new DialogBox(text, img);"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"        db.flip();"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        return db;"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"     * right."},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"    private void flip() {"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"        Collections.reverse(tmp);"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":65}},{"path":"src/main/java/prerthan/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.ui;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        duke \u003d d;"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"     * Duke\u0027s reply and then appends them to"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"    private void handleUserInput() {"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"                                             DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        userInput.clear();"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":52}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"prerthan99":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"prerthan.duke.ui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/test/java/prerthan/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DukeTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void run()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void programLoop()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void exit()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t@Test void main()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":23}},{"path":"src/test/java/prerthan/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class AddCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":10}},{"path":"src/test/java/prerthan/duke/command/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class ByeCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DeleteCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/command/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DoneCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class FindCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class ListCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/io/InputTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class InputTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void readline()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void nextLine()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTokens()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTokenStream()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t@Test void getFirstToken()"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t@Test void getCommand()"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t@Test void tokensWithoutFirst()"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t@Test void inputWithoutFirstToken()"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t@Test void getDetail()"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t@Test void getFirstTimeString()"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t@Test void getNextTimeString()"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t@Test void close()"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":55}},{"path":"src/test/java/prerthan/duke/io/OutputTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class OutputTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void ioException()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void appendWithNewline()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void testAppendWithNewline()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t@Test void add()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t@Test void say()"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t@Test void testSay()"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t@Test void testSay1()"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayError()"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayHello()"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayGoodBye()"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskAdded()"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskMarkedComplete()"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskDeleted()"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t@Test void close()"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":63}},{"path":"src/test/java/prerthan/duke/io/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class StorageTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void appendTask()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void decodeLine()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void loadFromFile()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/test/java/prerthan/duke/parse/DateParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.parse;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DateParserTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void parseDateTimeString()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void formatZonedDateTime()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":15}},{"path":"src/test/java/prerthan/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DeadlineTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/test/java/prerthan/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class EventTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/test/java/prerthan/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class TaskListTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void addTask()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskAtPosition()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void findTasksWithKeyword()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t@Test void deleteTaskAtPosition()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t@Test void listTasks()"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t@Test void numberOfTasks()"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":31}},{"path":"src/test/java/prerthan/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class TodoTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\sharadhr\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"java -classpath ..\\bin\\main Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"prerthan99":4,"-":17}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/sharadhr/duke/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"prerthan99":2,"-":32}}]
